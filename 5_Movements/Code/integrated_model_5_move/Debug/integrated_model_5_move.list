
integrated_model_5_move.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001730  08009ec0  08009ec0  00019ec0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5f0  0800b5f0  0002079c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f8  0800b5f8  0002079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5fc  0800b5fc  0001b5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000079c  20000000  0800b600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  200007a0  0800bd9c  000207a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20000dbc  0800bd9c  00020dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ea4  00000000  00000000  000207cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f2  00000000  00000000  00037670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0003b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  0003c220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271b2  00000000  00000000  0003d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7b6  00000000  00000000  000643ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaab1  00000000  00000000  0007eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e30  00000000  00000000  00169674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000014d  00000000  00000000  0016e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200007a0 	.word	0x200007a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009e98 	.word	0x08009e98

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200007a4 	.word	0x200007a4
 8000204:	08009e98 	.word	0x08009e98

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <FEAT_EXT_u32_SlopeSignChange>:

#include "FEAT_EXT.h"


uint32_t FEAT_EXT_u32_SlopeSignChange(uint32_t *Copy_int32Data ,uint32_t Copy_int32_Size)
{
 8000e84:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000e88:	b087      	sub	sp, #28
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	466b      	mov	r3, sp
 8000e92:	4618      	mov	r0, r3
	uint32_t Local_int32_NumberOfChanges = 0,
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
			Local_int32_Slope[Copy_int32_Size],
 8000e98:	6839      	ldr	r1, [r7, #0]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4688      	mov	r8, r1
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000eb2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000eb6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000eba:	2300      	movs	r3, #0
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	461d      	mov	r5, r3
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	016b      	lsls	r3, r5, #5
 8000eca:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ece:	0162      	lsls	r2, r4, #5
 8000ed0:	008b      	lsls	r3, r1, #2
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	ebad 0d03 	sub.w	sp, sp, r3
 8000edc:	466b      	mov	r3, sp
 8000ede:	3303      	adds	r3, #3
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	60bb      	str	r3, [r7, #8]
			Local_int32_Counter;

	/*Compute Slope*/
	Local_int32_Slope[0] = 0;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

	for(Local_int32_Counter = 1 ; Local_int32_Counter < Copy_int32_Size ; Local_int32_Counter++)
 8000eec:	2301      	movs	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e045      	b.n	8000f7e <FEAT_EXT_u32_SlopeSignChange+0xfa>
	{

		if(Copy_int32Data[Local_int32_Counter]  > Copy_int32Data[Local_int32_Counter-1])
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f02:	3b01      	subs	r3, #1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	440b      	add	r3, r1
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d905      	bls.n	8000f1c <FEAT_EXT_u32_SlopeSignChange+0x98>
			Local_int32_Slope[Local_int32_Counter] = 1;
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	2101      	movs	r1, #1
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f1a:	e02d      	b.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>

		else if(Copy_int32Data[Local_int32_Counter]  < Copy_int32Data[Local_int32_Counter-1])
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	440b      	add	r3, r1
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d206      	bcs.n	8000f48 <FEAT_EXT_u32_SlopeSignChange+0xc4>

			Local_int32_Slope[Local_int32_Counter] = -1;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f46:	e017      	b.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>

		else if(Copy_int32Data[Local_int32_Counter] == Copy_int32Data[Local_int32_Counter-1])
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	440b      	add	r3, r1
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d108      	bne.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>
			Local_int32_Slope[Local_int32_Counter] = Local_int32_Slope[Local_int32_Counter-1];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 1 ; Local_int32_Counter < Copy_int32_Size ; Local_int32_Counter++)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3b5      	bcc.n	8000ef2 <FEAT_EXT_u32_SlopeSignChange+0x6e>

	}

	/*Compute Changes In Sign*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_int32_Size-1 ; Local_int32_Counter++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e010      	b.n	8000fae <FEAT_EXT_u32_SlopeSignChange+0x12a>
	{
		if((Local_int32_Slope[Local_int32_Counter] != Local_int32_Slope[Local_int32_Counter+1]))
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	1c59      	adds	r1, r3, #1
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d002      	beq.n	8000fa8 <FEAT_EXT_u32_SlopeSignChange+0x124>
		{
			Local_int32_NumberOfChanges++;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_int32_Size-1 ; Local_int32_Counter++)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3e9      	bcc.n	8000f8c <FEAT_EXT_u32_SlopeSignChange+0x108>
		}
	}

	return Local_int32_NumberOfChanges;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4685      	mov	sp, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000fc6:	4770      	bx	lr

08000fc8 <FEAT_EXT_u32_ZeroCrossing>:

uint32_t FEAT_EXT_u32_ZeroCrossing(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 8000fc8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000fcc:	b087      	sub	sp, #28
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
 8000fd4:	466b      	mov	r3, sp
 8000fd6:	4618      	mov	r0, r3
	uint32_t Local_int32_Sign[Copy_u32_Size],
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ff2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ff6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	461d      	mov	r5, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	016b      	lsls	r3, r5, #5
 800100a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800100e:	0162      	lsls	r2, r4, #5
 8001010:	008b      	lsls	r3, r1, #2
 8001012:	3307      	adds	r3, #7
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	ebad 0d03 	sub.w	sp, sp, r3
 800101c:	466b      	mov	r3, sp
 800101e:	3303      	adds	r3, #3
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
	Local_int32_Counter,
	Local_int32_ZeroCounter;

	/*Compute data sign*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	e01c      	b.n	8001066 <FEAT_EXT_u32_ZeroCrossing+0x9e>
	{
		if(Copy_u32Data[Local_int32_Counter] > 0)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FEAT_EXT_u32_ZeroCrossing+0x7e>
		{
			Local_int32_Sign[Local_int32_Counter] = 1;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	2101      	movs	r1, #1
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001044:	e00c      	b.n	8001060 <FEAT_EXT_u32_ZeroCrossing+0x98>
		}
		else if (Copy_u32Data[Local_int32_Counter] <= 0)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <FEAT_EXT_u32_ZeroCrossing+0x98>
		{
			Local_int32_Sign[Local_int32_Counter] = -1;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	3301      	adds	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3de      	bcc.n	800102c <FEAT_EXT_u32_ZeroCrossing+0x64>
		}
	}

	/*Compute zero crossing*/
	Local_int32_ZeroCounter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e010      	b.n	800109a <FEAT_EXT_u32_ZeroCrossing+0xd2>
	{
		if(Local_int32_Sign[Local_int32_Counter] != Local_int32_Sign[Local_int32_Counter+1])
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1c59      	adds	r1, r3, #1
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108a:	429a      	cmp	r2, r3
 800108c:	d002      	beq.n	8001094 <FEAT_EXT_u32_ZeroCrossing+0xcc>
		{
			Local_int32_ZeroCounter++;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3e9      	bcc.n	8001078 <FEAT_EXT_u32_ZeroCrossing+0xb0>
		}
	}


	return Local_int32_ZeroCounter;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4685      	mov	sp, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80010b2:	4770      	bx	lr

080010b4 <FEAT_EXT_u32_WaveformLength>:

uint32_t FEAT_EXT_u32_WaveformLength(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80010b4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80010b8:	b087      	sub	sp, #28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
 80010c0:	466b      	mov	r3, sp
 80010c2:	4618      	mov	r0, r3
	uint32_t Local_int32_AbsDiff[Copy_u32_Size-1],
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	1e59      	subs	r1, r3, #1
 80010c8:	460b      	mov	r3, r1
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	2300      	movs	r3, #0
 80010d0:	4688      	mov	r8, r1
 80010d2:	4699      	mov	r9, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010e0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010e4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010e8:	2300      	movs	r3, #0
 80010ea:	460c      	mov	r4, r1
 80010ec:	461d      	mov	r5, r3
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	016b      	lsls	r3, r5, #5
 80010f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010fc:	0162      	lsls	r2, r4, #5
 80010fe:	008b      	lsls	r3, r1, #2
 8001100:	3307      	adds	r3, #7
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	ebad 0d03 	sub.w	sp, sp, r3
 800110a:	466b      	mov	r3, sp
 800110c:	3303      	adds	r3, #3
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
	Local_int32_Counter,
	Local_int32_WaveLength;

	/*Calculate absolute difference of data*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e030      	b.n	800117c <FEAT_EXT_u32_WaveformLength+0xc8>
	{
		if(Copy_u32Data[Local_int32_Counter] > Copy_u32Data[Local_int32_Counter+1])
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	3301      	adds	r3, #1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	440b      	add	r3, r1
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d910      	bls.n	8001156 <FEAT_EXT_u32_WaveformLength+0xa2>
		{
			Local_int32_AbsDiff[Local_int32_Counter] = Copy_u32Data[Local_int32_Counter] -  Copy_u32Data[Local_int32_Counter+1];
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	440b      	add	r3, r1
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad1      	subs	r1, r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001154:	e00f      	b.n	8001176 <FEAT_EXT_u32_WaveformLength+0xc2>
		}
		else
		{
			Local_int32_AbsDiff[Local_int32_Counter] = Copy_u32Data[Local_int32_Counter+1] -  Copy_u32Data[Local_int32_Counter];
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3301      	adds	r3, #1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	440b      	add	r3, r1
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1ad1      	subs	r1, r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	3301      	adds	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3c9      	bcc.n	800111a <FEAT_EXT_u32_WaveformLength+0x66>
		}
	}

	/*Compute wave length*/
	Local_int32_WaveLength = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	e009      	b.n	80011a4 <FEAT_EXT_u32_WaveformLength+0xf0>
	{
		Local_int32_WaveLength += Local_int32_AbsDiff[Local_int32_Counter];
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4413      	add	r3, r2
 800119c:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3f0      	bcc.n	8001190 <FEAT_EXT_u32_WaveformLength+0xdc>
	}


	return Local_int32_WaveLength;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4685      	mov	sp, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80011bc:	4770      	bx	lr

080011be <FEAT_EXT_f32_RMS>:


//float FEAT_EXT_float_RMS(int32_t *Copy_int32Data ,int32_t Copy_int32_Size)
float FEAT_EXT_f32_RMS(float Copy_f32_Variance)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	ed87 0a01 	vstr	s0, [r7, #4]
	float Local_f32_RMS;
	Local_f32_RMS = sqrtf(Copy_f32_Variance);
 80011c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80011cc:	f007 fe9a 	bl	8008f04 <sqrtf>
 80011d0:	ed87 0a03 	vstr	s0, [r7, #12]

	return Local_f32_RMS;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	ee07 3a90 	vmov	s15, r3

}
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <FEAT_EXT_f32_Variance>:

float FEAT_EXT_f32_Variance(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]

	uint32_t Local_int32_Counter;

	float 	Local_float_Mean = 0,
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
			Local_float_Var  = 0;
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]

	/*Compute Mean*/
	Local_float_Mean = FEAT_EXT_f32_Mean(Copy_u32Data, Copy_u32_Size);
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f851 	bl	80012a8 <FEAT_EXT_f32_Mean>
 8001206:	ed87 0a03 	vstr	s0, [r7, #12]

	/*Compute Variance*/
	for (Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e02e      	b.n	800126e <FEAT_EXT_f32_Variance+0x86>
	{
		Local_float_Var += pow(Copy_u32Data[Local_int32_Counter] - Local_float_Mean,2);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001222:	edd7 7a03 	vldr	s15, [r7, #12]
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	ee17 0a90 	vmov	r0, s15
 800122e:	f7ff f94f 	bl	80004d0 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80012a0 <FEAT_EXT_f32_Variance+0xb8>
 800123a:	ec43 2b10 	vmov	d0, r2, r3
 800123e:	f007 fdbb 	bl	8008db8 <pow>
 8001242:	ec55 4b10 	vmov	r4, r5, d0
 8001246:	6938      	ldr	r0, [r7, #16]
 8001248:	f7ff f942 	bl	80004d0 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7fe ffde 	bl	8000214 <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc3e 	bl	8000ae0 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	613b      	str	r3, [r7, #16]
	for (Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d3cc      	bcc.n	8001210 <FEAT_EXT_f32_Variance+0x28>
	}
	Local_float_Var /= (Copy_u32_Size-1);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001282:	edd7 6a04 	vldr	s13, [r7, #16]
 8001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128a:	edc7 7a04 	vstr	s15, [r7, #16]

	return Local_float_Var;
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	ee07 3a90 	vmov	s15, r3
}
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40000000 	.word	0x40000000

080012a8 <FEAT_EXT_f32_Mean>:

float FEAT_EXT_f32_Mean(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	float Local_float_Mean = 0;
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	uint32_t Local_int32_Counter;

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	e011      	b.n	80012e2 <FEAT_EXT_f32_Mean+0x3a>
	{
		Local_float_Mean += Copy_u32Data[Local_int32_Counter];
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	edc7 7a03 	vstr	s15, [r7, #12]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3e9      	bcc.n	80012be <FEAT_EXT_f32_Mean+0x16>
	}

	Local_float_Mean /= (float)Copy_u32_Size;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	edc7 7a03 	vstr	s15, [r7, #12]

	return Local_float_Mean;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	ee07 3a90 	vmov	s15, r3

}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <FEAT_EXT_f32_AllFeat>:
	return Local_float_Mean;

}

uint8_t FEAT_EXT_f32_AllFeat(uint32_t Copy_u32Data[][250] , float Copy_f32_FeatArr[][6])
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	uint8_t Local_u8ErrorState = 0 ,Local_u8Counter;
 800131e:	2300      	movs	r3, #0
 8001320:	73bb      	strb	r3, [r7, #14]

	for(Local_u8Counter = 0 ; Local_u8Counter < 3 ; Local_u8Counter++)
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e093      	b.n	8001450 <FEAT_EXT_f32_AllFeat+0x13c>
	{
		Copy_f32_FeatArr[Local_u8Counter][VAR_IDX ] = FEAT_EXT_f32_Variance(Copy_u32Data[Local_u8Counter],DATA_SIZE);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	18d0      	adds	r0, r2, r3
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	461a      	mov	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	189c      	adds	r4, r3, r2
 8001346:	21fa      	movs	r1, #250	; 0xfa
 8001348:	f7ff ff4e 	bl	80011e8 <FEAT_EXT_f32_Variance>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
 8001350:	edc4 7a01 	vstr	s15, [r4, #4]
		Copy_f32_FeatArr[Local_u8Counter][RMS_IDX ] = FEAT_EXT_f32_RMS(Copy_f32_FeatArr[Local_u8Counter][VAR_IDX]);
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	461a      	mov	r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	edd3 7a01 	vldr	s15, [r3, #4]
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	461a      	mov	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	189c      	adds	r4, r3, r2
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	f7ff ff1f 	bl	80011be <FEAT_EXT_f32_RMS>
 8001380:	eef0 7a40 	vmov.f32	s15, s0
 8001384:	edc4 7a00 	vstr	s15, [r4]
		Copy_f32_FeatArr[Local_u8Counter][MEAN_IDX] = FEAT_EXT_f32_Mean(Copy_u32Data[Local_u8Counter],DATA_SIZE);
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	18d0      	adds	r0, r2, r3
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	461a      	mov	r2, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	189c      	adds	r4, r3, r2
 80013a6:	21fa      	movs	r1, #250	; 0xfa
 80013a8:	f7ff ff7e 	bl	80012a8 <FEAT_EXT_f32_Mean>
 80013ac:	eef0 7a40 	vmov.f32	s15, s0
 80013b0:	edc4 7a02 	vstr	s15, [r4, #8]
		Copy_f32_FeatArr[Local_u8Counter][SSC_IDX] = FEAT_EXT_u32_SlopeSignChange(Copy_u32Data[Local_u8Counter],DATA_SIZE);
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	21fa      	movs	r1, #250	; 0xfa
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd5d 	bl	8000e84 <FEAT_EXT_u32_SlopeSignChange>
 80013ca:	ee07 0a90 	vmov	s15, r0
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	461a      	mov	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e2:	edc3 7a03 	vstr	s15, [r3, #12]
		Copy_f32_FeatArr[Local_u8Counter][ZC_IDX  ] = FEAT_EXT_u32_ZeroCrossing(Copy_u32Data[Local_u8Counter],DATA_SIZE) ;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	21fa      	movs	r1, #250	; 0xfa
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fde6 	bl	8000fc8 <FEAT_EXT_u32_ZeroCrossing>
 80013fc:	ee07 0a90 	vmov	s15, r0
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	461a      	mov	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001414:	edc3 7a04 	vstr	s15, [r3, #16]
		Copy_f32_FeatArr[Local_u8Counter][WVL_IDX ] = FEAT_EXT_u32_WaveformLength(Copy_u32Data[Local_u8Counter],DATA_SIZE);
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	21fa      	movs	r1, #250	; 0xfa
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe43 	bl	80010b4 <FEAT_EXT_u32_WaveformLength>
 800142e:	ee07 0a90 	vmov	s15, r0
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	461a      	mov	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001446:	edc3 7a05 	vstr	s15, [r3, #20]
	for(Local_u8Counter = 0 ; Local_u8Counter < 3 ; Local_u8Counter++)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	3301      	adds	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b02      	cmp	r3, #2
 8001454:	f67f af68 	bls.w	8001328 <FEAT_EXT_f32_AllFeat+0x14>

	}
	return Local_u8ErrorState;
 8001458:	7bbb      	ldrb	r3, [r7, #14]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}

08001462 <Mapping>:

#include <stdint.h>
#include "MAPPING.h"

int32_t Mapping(int32_t Copy_int32_InputMin,int32_t Copy_int32_InputMax,int32_t Copy_int32_OutputMin,int32_t Copy_int32_OutputMax,int32_t Copy_int32BiasValue,int32_t Copy_int32_InputValue)
{
 8001462:	b480      	push	{r7}
 8001464:	b087      	sub	sp, #28
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	603b      	str	r3, [r7, #0]
	int32_t Local_int32_MappedValue;
	Local_int32_MappedValue = (((Copy_int32_InputValue - Copy_int32_InputMin)*(Copy_int32_OutputMax - Copy_int32_OutputMin))/(Copy_int32_InputMax - Copy_int32_InputMin)) + Copy_int32_InputMin + Copy_int32BiasValue;
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	1a8a      	subs	r2, r1, r2
 800147c:	fb03 f202 	mul.w	r2, r3, r2
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1acb      	subs	r3, r1, r3
 8001486:	fb92 f2f3 	sdiv	r2, r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	6a3a      	ldr	r2, [r7, #32]
 8001490:	4413      	add	r3, r2
 8001492:	617b      	str	r3, [r7, #20]

	return Local_int32_MappedValue;
 8001494:	697b      	ldr	r3, [r7, #20]
}
 8001496:	4618      	mov	r0, r3
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	0000      	movs	r0, r0
 80014a4:	0000      	movs	r0, r0
	...

080014a8 <NORM_f32_SlopeSignChange>:
#include "NORM_interface.h"
#include "NORM_private.h"


float NORM_f32_SlopeSignChange(uint8_t Copy_u8SensorNum , uint32_t Copy_u32SSC)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormSSC;

	switch(Copy_u8SensorNum)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d03a      	beq.n	8001530 <NORM_f32_SlopeSignChange+0x88>
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	dc52      	bgt.n	8001564 <NORM_f32_SlopeSignChange+0xbc>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <NORM_f32_SlopeSignChange+0x20>
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d01a      	beq.n	80014fc <NORM_f32_SlopeSignChange+0x54>
 80014c6:	e04d      	b.n	8001564 <NORM_f32_SlopeSignChange+0xbc>
	{
	case SNS1 : Local_f32_NormSSC = (Copy_u32SSC - SNS1_SSC_MEAN) / SNS1_SSC_SD; break;
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f7fe ffdf 	bl	800048c <__aeabi_ui2d>
 80014ce:	a32a      	add	r3, pc, #168	; (adr r3, 8001578 <NORM_f32_SlopeSignChange+0xd0>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7fe fe9c 	bl	8000210 <__aeabi_dsub>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	a327      	add	r3, pc, #156	; (adr r3, 8001580 <NORM_f32_SlopeSignChange+0xd8>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f975 	bl	80007d4 <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff faf5 	bl	8000ae0 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e033      	b.n	8001564 <NORM_f32_SlopeSignChange+0xbc>
	case SNS2 : Local_f32_NormSSC = (Copy_u32SSC - SNS2_SSC_MEAN) / SNS2_SSC_SD; break;
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f7fe ffc5 	bl	800048c <__aeabi_ui2d>
 8001502:	a321      	add	r3, pc, #132	; (adr r3, 8001588 <NORM_f32_SlopeSignChange+0xe0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7fe fe82 	bl	8000210 <__aeabi_dsub>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a31e      	add	r3, pc, #120	; (adr r3, 8001590 <NORM_f32_SlopeSignChange+0xe8>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f95b 	bl	80007d4 <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fadb 	bl	8000ae0 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e019      	b.n	8001564 <NORM_f32_SlopeSignChange+0xbc>
	case SNS3 : Local_f32_NormSSC = (Copy_u32SSC - SNS3_SSC_MEAN) / SNS3_SSC_SD; break;
 8001530:	6838      	ldr	r0, [r7, #0]
 8001532:	f7fe ffab 	bl	800048c <__aeabi_ui2d>
 8001536:	a318      	add	r3, pc, #96	; (adr r3, 8001598 <NORM_f32_SlopeSignChange+0xf0>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7fe fe68 	bl	8000210 <__aeabi_dsub>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	a315      	add	r3, pc, #84	; (adr r3, 80015a0 <NORM_f32_SlopeSignChange+0xf8>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7ff f941 	bl	80007d4 <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fac1 	bl	8000ae0 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	bf00      	nop
	}

	return Local_f32_NormSSC;;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	ee07 3a90 	vmov	s15, r3

}
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f3af 8000 	nop.w
 8001578:	8f5c28f6 	.word	0x8f5c28f6
 800157c:	406045c2 	.word	0x406045c2
 8001580:	33333333 	.word	0x33333333
 8001584:	404ad333 	.word	0x404ad333
 8001588:	28f5c28f 	.word	0x28f5c28f
 800158c:	4061b75c 	.word	0x4061b75c
 8001590:	eb851eb8 	.word	0xeb851eb8
 8001594:	404cd851 	.word	0x404cd851
 8001598:	f5c28f5c 	.word	0xf5c28f5c
 800159c:	40643428 	.word	0x40643428
 80015a0:	47ae147b 	.word	0x47ae147b
 80015a4:	40217ae1 	.word	0x40217ae1

080015a8 <NORM_f32_ZeroCrossing>:

float NORM_f32_ZeroCrossing(uint8_t Copy_u8SensorNum , uint32_t Copy_u32zeroCross)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormZC;;

	switch(Copy_u8SensorNum)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d03a      	beq.n	8001630 <NORM_f32_ZeroCrossing+0x88>
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	dc52      	bgt.n	8001664 <NORM_f32_ZeroCrossing+0xbc>
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <NORM_f32_ZeroCrossing+0x20>
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d01a      	beq.n	80015fc <NORM_f32_ZeroCrossing+0x54>
 80015c6:	e04d      	b.n	8001664 <NORM_f32_ZeroCrossing+0xbc>
	{
	case SNS1 : Local_f32_NormZC = (Copy_u32zeroCross - SNS1_ZC_MEAN) / SNS1_ZC_SD; break;
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f7fe ff5f 	bl	800048c <__aeabi_ui2d>
 80015ce:	a32a      	add	r3, pc, #168	; (adr r3, 8001678 <NORM_f32_ZeroCrossing+0xd0>)
 80015d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d4:	f7fe fe1c 	bl	8000210 <__aeabi_dsub>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	a327      	add	r3, pc, #156	; (adr r3, 8001680 <NORM_f32_ZeroCrossing+0xd8>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff f8f5 	bl	80007d4 <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fa75 	bl	8000ae0 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e033      	b.n	8001664 <NORM_f32_ZeroCrossing+0xbc>
	case SNS2 : Local_f32_NormZC = (Copy_u32zeroCross - SNS2_ZC_MEAN) / SNS2_ZC_SD; break;
 80015fc:	6838      	ldr	r0, [r7, #0]
 80015fe:	f7fe ff45 	bl	800048c <__aeabi_ui2d>
 8001602:	a321      	add	r3, pc, #132	; (adr r3, 8001688 <NORM_f32_ZeroCrossing+0xe0>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fe02 	bl	8000210 <__aeabi_dsub>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	a31e      	add	r3, pc, #120	; (adr r3, 8001690 <NORM_f32_ZeroCrossing+0xe8>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f8db 	bl	80007d4 <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa5b 	bl	8000ae0 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	e019      	b.n	8001664 <NORM_f32_ZeroCrossing+0xbc>
	case SNS3 : Local_f32_NormZC = (Copy_u32zeroCross - SNS3_ZC_MEAN) / SNS3_ZC_SD; break;
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f7fe ff2b 	bl	800048c <__aeabi_ui2d>
 8001636:	a318      	add	r3, pc, #96	; (adr r3, 8001698 <NORM_f32_ZeroCrossing+0xf0>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7fe fde8 	bl	8000210 <__aeabi_dsub>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	a315      	add	r3, pc, #84	; (adr r3, 80016a0 <NORM_f32_ZeroCrossing+0xf8>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	f7ff f8c1 	bl	80007d4 <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fa41 	bl	8000ae0 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	bf00      	nop
	}

	return Local_f32_NormZC;;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	ee07 3a90 	vmov	s15, r3
}
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	f3af 8000 	nop.w
 8001678:	70a3d70a 	.word	0x70a3d70a
 800167c:	4058aa3d 	.word	0x4058aa3d
 8001680:	33333333 	.word	0x33333333
 8001684:	40451333 	.word	0x40451333
 8001688:	a3d70a3d 	.word	0xa3d70a3d
 800168c:	40495d70 	.word	0x40495d70
 8001690:	a3d70a3d 	.word	0xa3d70a3d
 8001694:	403efd70 	.word	0x403efd70
 8001698:	d70a3d71 	.word	0xd70a3d71
 800169c:	4046b0a3 	.word	0x4046b0a3
 80016a0:	28f5c28f 	.word	0x28f5c28f
 80016a4:	40344f5c 	.word	0x40344f5c

080016a8 <NORM_f32_WaveformLength>:

float NORM_f32_WaveformLength(uint8_t Copy_u8SensorNum , uint32_t Copy_u3WaveLength)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormWVL;

	switch(Copy_u8SensorNum)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d03a      	beq.n	8001730 <NORM_f32_WaveformLength+0x88>
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	dc52      	bgt.n	8001764 <NORM_f32_WaveformLength+0xbc>
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d002      	beq.n	80016c8 <NORM_f32_WaveformLength+0x20>
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d01a      	beq.n	80016fc <NORM_f32_WaveformLength+0x54>
 80016c6:	e04d      	b.n	8001764 <NORM_f32_WaveformLength+0xbc>
	{
	case SNS1 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS1_WVL_MEAN) / SNS1_WVL_SD; break;
 80016c8:	6838      	ldr	r0, [r7, #0]
 80016ca:	f7fe fedf 	bl	800048c <__aeabi_ui2d>
 80016ce:	a32a      	add	r3, pc, #168	; (adr r3, 8001778 <NORM_f32_WaveformLength+0xd0>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe fd9c 	bl	8000210 <__aeabi_dsub>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	a327      	add	r3, pc, #156	; (adr r3, 8001780 <NORM_f32_WaveformLength+0xd8>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7ff f875 	bl	80007d4 <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff f9f5 	bl	8000ae0 <__aeabi_d2f>
 80016f6:	4603      	mov	r3, r0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e033      	b.n	8001764 <NORM_f32_WaveformLength+0xbc>
	case SNS2 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS2_WVL_MEAN) / SNS2_WVL_SD; break;
 80016fc:	6838      	ldr	r0, [r7, #0]
 80016fe:	f7fe fec5 	bl	800048c <__aeabi_ui2d>
 8001702:	a321      	add	r3, pc, #132	; (adr r3, 8001788 <NORM_f32_WaveformLength+0xe0>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe fd82 	bl	8000210 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	a31e      	add	r3, pc, #120	; (adr r3, 8001790 <NORM_f32_WaveformLength+0xe8>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7ff f85b 	bl	80007d4 <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff f9db 	bl	8000ae0 <__aeabi_d2f>
 800172a:	4603      	mov	r3, r0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e019      	b.n	8001764 <NORM_f32_WaveformLength+0xbc>
	case SNS3 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS3_WVL_MEAN) / SNS3_WVL_SD; break;
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7fe feab 	bl	800048c <__aeabi_ui2d>
 8001736:	a318      	add	r3, pc, #96	; (adr r3, 8001798 <NORM_f32_WaveformLength+0xf0>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe fd68 	bl	8000210 <__aeabi_dsub>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	a315      	add	r3, pc, #84	; (adr r3, 80017a0 <NORM_f32_WaveformLength+0xf8>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7ff f841 	bl	80007d4 <__aeabi_ddiv>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff f9c1 	bl	8000ae0 <__aeabi_d2f>
 800175e:	4603      	mov	r3, r0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	bf00      	nop
	}

	return Local_f32_NormWVL;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	ee07 3a90 	vmov	s15, r3
}
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f3af 8000 	nop.w
 8001778:	8f5c28f6 	.word	0x8f5c28f6
 800177c:	40ef72d2 	.word	0x40ef72d2
 8001780:	51eb851f 	.word	0x51eb851f
 8001784:	40ed45e8 	.word	0x40ed45e8
 8001788:	66666666 	.word	0x66666666
 800178c:	40f43f26 	.word	0x40f43f26
 8001790:	ae147ae1 	.word	0xae147ae1
 8001794:	40f57ac3 	.word	0x40f57ac3
 8001798:	9999999a 	.word	0x9999999a
 800179c:	40eb96d9 	.word	0x40eb96d9
 80017a0:	ae147ae1 	.word	0xae147ae1
 80017a4:	40ea693f 	.word	0x40ea693f

080017a8 <NORM_f32_RMS>:
float NORM_f32_RMS(uint8_t Copy_u8SensorNum , float Copy_f32RMS)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	ed87 0a00 	vstr	s0, [r7]
 80017b4:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormRMS;

	switch(Copy_u8SensorNum)
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d03a      	beq.n	8001832 <NORM_f32_RMS+0x8a>
 80017bc:	2b02      	cmp	r3, #2
 80017be:	dc52      	bgt.n	8001866 <NORM_f32_RMS+0xbe>
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <NORM_f32_RMS+0x22>
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d01a      	beq.n	80017fe <NORM_f32_RMS+0x56>
 80017c8:	e04d      	b.n	8001866 <NORM_f32_RMS+0xbe>
	{
	case SNS1 : Local_f32_NormRMS = (Copy_f32RMS - SNS1_RMS_MEAN) / SNS1_RMS_SD; break;
 80017ca:	6838      	ldr	r0, [r7, #0]
 80017cc:	f7fe fe80 	bl	80004d0 <__aeabi_f2d>
 80017d0:	a329      	add	r3, pc, #164	; (adr r3, 8001878 <NORM_f32_RMS+0xd0>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe fd1b 	bl	8000210 <__aeabi_dsub>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	a327      	add	r3, pc, #156	; (adr r3, 8001880 <NORM_f32_RMS+0xd8>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe fff4 	bl	80007d4 <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f7ff f974 	bl	8000ae0 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e033      	b.n	8001866 <NORM_f32_RMS+0xbe>
	case SNS2 : Local_f32_NormRMS = (Copy_f32RMS - SNS2_RMS_MEAN) / SNS2_RMS_SD; break;
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7fe fe66 	bl	80004d0 <__aeabi_f2d>
 8001804:	a320      	add	r3, pc, #128	; (adr r3, 8001888 <NORM_f32_RMS+0xe0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fd01 	bl	8000210 <__aeabi_dsub>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	a31e      	add	r3, pc, #120	; (adr r3, 8001890 <NORM_f32_RMS+0xe8>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ffda 	bl	80007d4 <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f95a 	bl	8000ae0 <__aeabi_d2f>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e019      	b.n	8001866 <NORM_f32_RMS+0xbe>
	case SNS3 : Local_f32_NormRMS = (Copy_f32RMS - SNS3_RMS_MEAN) / SNS3_RMS_SD; break;
 8001832:	6838      	ldr	r0, [r7, #0]
 8001834:	f7fe fe4c 	bl	80004d0 <__aeabi_f2d>
 8001838:	a317      	add	r3, pc, #92	; (adr r3, 8001898 <NORM_f32_RMS+0xf0>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe fce7 	bl	8000210 <__aeabi_dsub>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	a315      	add	r3, pc, #84	; (adr r3, 80018a0 <NORM_f32_RMS+0xf8>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7fe ffc0 	bl	80007d4 <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f940 	bl	8000ae0 <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	bf00      	nop
	}

	return Local_f32_NormRMS;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	ee07 3a90 	vmov	s15, r3
}
 800186c:	eeb0 0a67 	vmov.f32	s0, s15
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	eb851eb8 	.word	0xeb851eb8
 800187c:	40720051 	.word	0x40720051
 8001880:	3d70a3d7 	.word	0x3d70a3d7
 8001884:	4070170a 	.word	0x4070170a
 8001888:	8f5c28f6 	.word	0x8f5c28f6
 800188c:	407595c2 	.word	0x407595c2
 8001890:	5c28f5c3 	.word	0x5c28f5c3
 8001894:	4076928f 	.word	0x4076928f
 8001898:	5c28f5c3 	.word	0x5c28f5c3
 800189c:	4071068f 	.word	0x4071068f
 80018a0:	147ae148 	.word	0x147ae148
 80018a4:	4070b3ae 	.word	0x4070b3ae

080018a8 <NORM_f32_Variance>:

float NORM_f32_Variance(uint8_t Copy_u8SensorNum , float Copy_f32Variance)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	ed87 0a00 	vstr	s0, [r7]
 80018b4:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormVar;

	switch(Copy_u8SensorNum)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d03a      	beq.n	8001932 <NORM_f32_Variance+0x8a>
 80018bc:	2b02      	cmp	r3, #2
 80018be:	dc52      	bgt.n	8001966 <NORM_f32_Variance+0xbe>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <NORM_f32_Variance+0x22>
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d01a      	beq.n	80018fe <NORM_f32_Variance+0x56>
 80018c8:	e04d      	b.n	8001966 <NORM_f32_Variance+0xbe>
	{
	case SNS1 : Local_f32_NormVar = (Copy_f32Variance - SNS1_VAR_MEAN) / SNS1_VAR_SD; break;
 80018ca:	6838      	ldr	r0, [r7, #0]
 80018cc:	f7fe fe00 	bl	80004d0 <__aeabi_f2d>
 80018d0:	a329      	add	r3, pc, #164	; (adr r3, 8001978 <NORM_f32_Variance+0xd0>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fc9b 	bl	8000210 <__aeabi_dsub>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	a327      	add	r3, pc, #156	; (adr r3, 8001980 <NORM_f32_Variance+0xd8>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe ff74 	bl	80007d4 <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f8f4 	bl	8000ae0 <__aeabi_d2f>
 80018f8:	4603      	mov	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e033      	b.n	8001966 <NORM_f32_Variance+0xbe>
	case SNS2 : Local_f32_NormVar = (Copy_f32Variance - SNS2_VAR_MEAN) / SNS2_VAR_SD; break;
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	f7fe fde6 	bl	80004d0 <__aeabi_f2d>
 8001904:	a320      	add	r3, pc, #128	; (adr r3, 8001988 <NORM_f32_Variance+0xe0>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fc81 	bl	8000210 <__aeabi_dsub>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	a31e      	add	r3, pc, #120	; (adr r3, 8001990 <NORM_f32_Variance+0xe8>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe ff5a 	bl	80007d4 <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f8da 	bl	8000ae0 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e019      	b.n	8001966 <NORM_f32_Variance+0xbe>
	case SNS3 : Local_f32_NormVar = (Copy_f32Variance - SNS3_VAR_MEAN) / SNS3_VAR_SD; break;
 8001932:	6838      	ldr	r0, [r7, #0]
 8001934:	f7fe fdcc 	bl	80004d0 <__aeabi_f2d>
 8001938:	a317      	add	r3, pc, #92	; (adr r3, 8001998 <NORM_f32_Variance+0xf0>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fc67 	bl	8000210 <__aeabi_dsub>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	a315      	add	r3, pc, #84	; (adr r3, 80019a0 <NORM_f32_Variance+0xf8>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe ff40 	bl	80007d4 <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8c0 	bl	8000ae0 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	bf00      	nop
	}

	return Local_f32_NormVar;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	ee07 3a90 	vmov	s15, r3
}
 800196c:	eeb0 0a67 	vmov.f32	s0, s15
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	eb851eb8 	.word	0xeb851eb8
 800197c:	41023791 	.word	0x41023791
 8001980:	0a3d70a4 	.word	0x0a3d70a4
 8001984:	410a9349 	.word	0x410a9349
 8001988:	a3d70a3d 	.word	0xa3d70a3d
 800198c:	410e7b8c 	.word	0x410e7b8c
 8001990:	0a3d70a4 	.word	0x0a3d70a4
 8001994:	411794ab 	.word	0x411794ab
 8001998:	c28f5c29 	.word	0xc28f5c29
 800199c:	4101c6bb 	.word	0x4101c6bb
 80019a0:	cccccccd 	.word	0xcccccccd
 80019a4:	410debce 	.word	0x410debce

080019a8 <NORM_f32_Mean>:

float NORM_f32_Mean(uint8_t Copy_u8SensorNum , float Copy_f32Mean)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	ed87 0a00 	vstr	s0, [r7]
 80019b4:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormMean;

	switch(Copy_u8SensorNum)
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d03a      	beq.n	8001a32 <NORM_f32_Mean+0x8a>
 80019bc:	2b02      	cmp	r3, #2
 80019be:	dc52      	bgt.n	8001a66 <NORM_f32_Mean+0xbe>
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <NORM_f32_Mean+0x22>
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d01a      	beq.n	80019fe <NORM_f32_Mean+0x56>
 80019c8:	e04d      	b.n	8001a66 <NORM_f32_Mean+0xbe>
	{
	case SNS1 : Local_f32_NormMean= (Copy_f32Mean - SNS1_MEAN_MEAN) / SNS1_MEAN_SD; break;
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f7fe fd80 	bl	80004d0 <__aeabi_f2d>
 80019d0:	a329      	add	r3, pc, #164	; (adr r3, 8001a78 <NORM_f32_Mean+0xd0>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fc1b 	bl	8000210 <__aeabi_dsub>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	a327      	add	r3, pc, #156	; (adr r3, 8001a80 <NORM_f32_Mean+0xd8>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fef4 	bl	80007d4 <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f874 	bl	8000ae0 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e033      	b.n	8001a66 <NORM_f32_Mean+0xbe>
	case SNS2 : Local_f32_NormMean= (Copy_f32Mean - SNS2_MEAN_MEAN) / SNS2_MEAN_SD; break;
 80019fe:	6838      	ldr	r0, [r7, #0]
 8001a00:	f7fe fd66 	bl	80004d0 <__aeabi_f2d>
 8001a04:	a320      	add	r3, pc, #128	; (adr r3, 8001a88 <NORM_f32_Mean+0xe0>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fc01 	bl	8000210 <__aeabi_dsub>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	a31e      	add	r3, pc, #120	; (adr r3, 8001a90 <NORM_f32_Mean+0xe8>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe feda 	bl	80007d4 <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f85a 	bl	8000ae0 <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e019      	b.n	8001a66 <NORM_f32_Mean+0xbe>
	case SNS3 : Local_f32_NormMean= (Copy_f32Mean - SNS3_MEAN_MEAN) / SNS3_MEAN_SD; break;
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f7fe fd4c 	bl	80004d0 <__aeabi_f2d>
 8001a38:	a317      	add	r3, pc, #92	; (adr r3, 8001a98 <NORM_f32_Mean+0xf0>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fbe7 	bl	8000210 <__aeabi_dsub>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	a315      	add	r3, pc, #84	; (adr r3, 8001aa0 <NORM_f32_Mean+0xf8>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fec0 	bl	80007d4 <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f840 	bl	8000ae0 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	bf00      	nop
	}

	return Local_f32_NormMean;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	ee07 3a90 	vmov	s15, r3
}
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	a3d70a3d 	.word	0xa3d70a3d
 8001a7c:	40681570 	.word	0x40681570
 8001a80:	8f5c28f6 	.word	0x8f5c28f6
 8001a84:	4067a5c2 	.word	0x4067a5c2
 8001a88:	f5c28f5c 	.word	0xf5c28f5c
 8001a8c:	40727828 	.word	0x40727828
 8001a90:	51eb851f 	.word	0x51eb851f
 8001a94:	4073ceb8 	.word	0x4073ceb8
 8001a98:	e147ae14 	.word	0xe147ae14
 8001a9c:	4067e47a 	.word	0x4067e47a
 8001aa0:	8f5c28f6 	.word	0x8f5c28f6
 8001aa4:	4066d5c2 	.word	0x4066d5c2

08001aa8 <NORM_f32_AllNorm>:

uint8_t NORM_f32_AllNorm(float Copy_f32_FeatArr[][6] , float Copy_f32_NormArr[][6])
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	uint8_t Local_u8ErrorState = 0 , Local_u8Counter;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73bb      	strb	r3, [r7, #14]

	for(Local_u8Counter = 0 ; Local_u8Counter < 3 ; Local_u8Counter++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e0b0      	b.n	8001c1e <NORM_f32_AllNorm+0x176>
	{
		Copy_f32_NormArr[Local_u8Counter][VAR_IDX ] = NORM_f32_Variance(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][VAR_IDX]);
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	461a      	mov	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	189c      	adds	r4, r3, r2
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fede 	bl	80018a8 <NORM_f32_Variance>
 8001aec:	eef0 7a40 	vmov.f32	s15, s0
 8001af0:	edc4 7a01 	vstr	s15, [r4, #4]
		Copy_f32_NormArr[Local_u8Counter][RMS_IDX ] = NORM_f32_RMS(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][RMS_IDX]);
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	461a      	mov	r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	189c      	adds	r4, r3, r2
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fe42 	bl	80017a8 <NORM_f32_RMS>
 8001b24:	eef0 7a40 	vmov.f32	s15, s0
 8001b28:	edc4 7a00 	vstr	s15, [r4]
		Copy_f32_NormArr[Local_u8Counter][MEAN_IDX] = NORM_f32_Mean(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][MEAN_IDX]);
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	189c      	adds	r4, r3, r2
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff26 	bl	80019a8 <NORM_f32_Mean>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
 8001b60:	edc4 7a02 	vstr	s15, [r4, #8]
		Copy_f32_NormArr[Local_u8Counter][SSC_IDX]= NORM_f32_SlopeSignChange(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][SSC_IDX]);
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	461a      	mov	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	189c      	adds	r4, r3, r2
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	ee17 1a90 	vmov	r1, s15
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fc88 	bl	80014a8 <NORM_f32_SlopeSignChange>
 8001b98:	eef0 7a40 	vmov.f32	s15, s0
 8001b9c:	edc4 7a03 	vstr	s15, [r4, #12]
		Copy_f32_NormArr[Local_u8Counter][ZC_IDX  ] = NORM_f32_ZeroCrossing(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][ZC_IDX]);
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	189c      	adds	r4, r3, r2
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	ee17 1a90 	vmov	r1, s15
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fcea 	bl	80015a8 <NORM_f32_ZeroCrossing>
 8001bd4:	eef0 7a40 	vmov.f32	s15, s0
 8001bd8:	edc4 7a04 	vstr	s15, [r4, #16]
		Copy_f32_NormArr[Local_u8Counter][WVL_IDX ] = NORM_f32_WaveformLength(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][WVL_IDX]);
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	461a      	mov	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	189c      	adds	r4, r3, r2
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	ee17 1a90 	vmov	r1, s15
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fd4c 	bl	80016a8 <NORM_f32_WaveformLength>
 8001c10:	eef0 7a40 	vmov.f32	s15, s0
 8001c14:	edc4 7a05 	vstr	s15, [r4, #20]
	for(Local_u8Counter = 0 ; Local_u8Counter < 3 ; Local_u8Counter++)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	f67f af4b 	bls.w	8001abc <NORM_f32_AllNorm+0x14>

	}
	return Local_u8ErrorState;
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}

08001c30 <PWM_int32SetPWMValue>:
#include <stdint.h>
#include "PWM.h"


int8_t PWM_int32SetPWMValue(TIM_TypeDef *htim,int32_t Copy_int32Channel,int32_t Copy_int32Value)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
	int8_t Local_int8ErrorState = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	75fb      	strb	r3, [r7, #23]

	if (htim == TIM2)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c46:	d124      	bne.n	8001c92 <PWM_int32SetPWMValue+0x62>
	{
		switch(Copy_int32Channel)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d81e      	bhi.n	8001c8c <PWM_int32SetPWMValue+0x5c>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <PWM_int32SetPWMValue+0x24>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001c6f 	.word	0x08001c6f
 8001c5c:	08001c79 	.word	0x08001c79
 8001c60:	08001c83 	.word	0x08001c83
		{
		case PWM_Channel1 : TIM2->CCR1 = Copy_int32Value; break;
 8001c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6353      	str	r3, [r2, #52]	; 0x34
 8001c6c:	e028      	b.n	8001cc0 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel2 : TIM2->CCR2 = Copy_int32Value; break;
 8001c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6393      	str	r3, [r2, #56]	; 0x38
 8001c76:	e023      	b.n	8001cc0 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel3 : TIM2->CCR3 = Copy_int32Value; break;
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c80:	e01e      	b.n	8001cc0 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel4 : TIM2->CCR4 = Copy_int32Value; break;
 8001c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	e019      	b.n	8001cc0 <PWM_int32SetPWMValue+0x90>
		default : Local_int8ErrorState = 1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	75fb      	strb	r3, [r7, #23]
 8001c90:	e016      	b.n	8001cc0 <PWM_int32SetPWMValue+0x90>
		}
	}

	else if (htim == TIM12)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <PWM_int32SetPWMValue+0xa0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d111      	bne.n	8001cbe <PWM_int32SetPWMValue+0x8e>
	{
		switch(Copy_int32Channel)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <PWM_int32SetPWMValue+0x78>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d004      	beq.n	8001cb0 <PWM_int32SetPWMValue+0x80>
 8001ca6:	e007      	b.n	8001cb8 <PWM_int32SetPWMValue+0x88>
		{
		case PWM_Channel1 : TIM12->CCR1 = Copy_int32Value; break;
 8001ca8:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <PWM_int32SetPWMValue+0xa0>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6353      	str	r3, [r2, #52]	; 0x34
 8001cae:	e007      	b.n	8001cc0 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel2 : TIM12->CCR2 = Copy_int32Value; break;
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <PWM_int32SetPWMValue+0xa0>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6393      	str	r3, [r2, #56]	; 0x38
 8001cb6:	e003      	b.n	8001cc0 <PWM_int32SetPWMValue+0x90>
		default : Local_int8ErrorState = 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	75fb      	strb	r3, [r7, #23]
 8001cbc:	e000      	b.n	8001cc0 <PWM_int32SetPWMValue+0x90>
		}
	}
 8001cbe:	bf00      	nop

	return Local_int8ErrorState;
 8001cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40001800 	.word	0x40001800

08001cd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <MX_ADC1_Init+0x9c>)
 8001cea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001cee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <MX_ADC1_Init+0xa0>)
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d36:	f001 fd7d 	bl	8003834 <HAL_ADC_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d40:	f000 fdb8 	bl	80028b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_ADC1_Init+0x98>)
 8001d56:	f002 f849 	bl	8003dec <HAL_ADC_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d60:	f000 fda8 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200007bc 	.word	0x200007bc
 8001d70:	40012000 	.word	0x40012000
 8001d74:	0f000001 	.word	0x0f000001

08001d78 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7e:	463b      	mov	r3, r7
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001d8c:	4a21      	ldr	r2, [pc, #132]	; (8001e14 <MX_ADC2_Init+0x9c>)
 8001d8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <MX_ADC2_Init+0xa0>)
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dda:	f001 fd2b 	bl	8003834 <HAL_ADC_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001de4:	f000 fd66 	bl	80028b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001df4:	463b      	mov	r3, r7
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_ADC2_Init+0x98>)
 8001dfa:	f001 fff7 	bl	8003dec <HAL_ADC_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001e04:	f000 fd56 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000804 	.word	0x20000804
 8001e14:	40012100 	.word	0x40012100
 8001e18:	0f000001 	.word	0x0f000001

08001e1c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e22:	463b      	mov	r3, r7
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e30:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <MX_ADC3_Init+0x9c>)
 8001e32:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e34:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e3a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e5e:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <MX_ADC3_Init+0xa0>)
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e7e:	f001 fcd9 	bl	8003834 <HAL_ADC_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001e88:	f000 fd14 	bl	80028b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e8c:	230a      	movs	r3, #10
 8001e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <MX_ADC3_Init+0x98>)
 8001e9e:	f001 ffa5 	bl	8003dec <HAL_ADC_ConfigChannel>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001ea8:	f000 fd04 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000084c 	.word	0x2000084c
 8001eb8:	40012200 	.word	0x40012200
 8001ebc:	0f000001 	.word	0x0f000001

08001ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	; 0x38
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a51      	ldr	r2, [pc, #324]	; (8002024 <HAL_ADC_MspInit+0x164>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d130      	bne.n	8001f44 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a4f      	ldr	r2, [pc, #316]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b4d      	ldr	r3, [pc, #308]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a48      	ldr	r2, [pc, #288]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	483f      	ldr	r0, [pc, #252]	; (800202c <HAL_ADC_MspInit+0x16c>)
 8001f2e:	f002 facf 	bl	80044d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	2012      	movs	r0, #18
 8001f38:	f002 fa77 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f3c:	2012      	movs	r0, #18
 8001f3e:	f002 fa90 	bl	8004462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001f42:	e06a      	b.n	800201a <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a39      	ldr	r2, [pc, #228]	; (8002030 <HAL_ADC_MspInit+0x170>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d130      	bne.n	8001fb0 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a34      	ldr	r2, [pc, #208]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b32      	ldr	r3, [pc, #200]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a2d      	ldr	r2, [pc, #180]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f86:	2302      	movs	r3, #2
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f96:	4619      	mov	r1, r3
 8001f98:	4824      	ldr	r0, [pc, #144]	; (800202c <HAL_ADC_MspInit+0x16c>)
 8001f9a:	f002 fa99 	bl	80044d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2012      	movs	r0, #18
 8001fa4:	f002 fa41 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fa8:	2012      	movs	r0, #18
 8001faa:	f002 fa5a 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 8001fae:	e034      	b.n	800201a <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <HAL_ADC_MspInit+0x174>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d12f      	bne.n	800201a <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001fc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_ADC_MspInit+0x168>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002002:	4619      	mov	r1, r3
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <HAL_ADC_MspInit+0x178>)
 8002006:	f002 fa63 	bl	80044d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2012      	movs	r0, #18
 8002010:	f002 fa0b 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002014:	2012      	movs	r0, #18
 8002016:	f002 fa24 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 800201a:	bf00      	nop
 800201c:	3738      	adds	r7, #56	; 0x38
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40012000 	.word	0x40012000
 8002028:	40023800 	.word	0x40023800
 800202c:	40020000 	.word	0x40020000
 8002030:	40012100 	.word	0x40012100
 8002034:	40012200 	.word	0x40012200
 8002038:	40020800 	.word	0x40020800

0800203c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_CRC_Init+0x20>)
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <MX_CRC_Init+0x24>)
 8002044:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_CRC_Init+0x20>)
 8002048:	f002 fa25 	bl	8004496 <HAL_CRC_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002052:	f000 fc2f 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000894 	.word	0x20000894
 8002060:	40023000 	.word	0x40023000

08002064 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_CRC_MspInit+0x3c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10d      	bne.n	8002092 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_CRC_MspInit+0x40>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <HAL_CRC_MspInit+0x40>)
 8002080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002084:	6313      	str	r3, [r2, #48]	; 0x30
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <HAL_CRC_MspInit+0x40>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023000 	.word	0x40023000
 80020a4:	40023800 	.word	0x40023800

080020a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a2c      	ldr	r2, [pc, #176]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a25      	ldr	r2, [pc, #148]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <MX_GPIO_Init+0xd0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <MX_GPIO_Init+0xd0>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MX_GPIO_Init+0xd0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <MX_GPIO_Init+0xd0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <MX_GPIO_Init+0xd0>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <MX_GPIO_Init+0xd0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2120      	movs	r1, #32
 8002132:	4812      	ldr	r0, [pc, #72]	; (800217c <MX_GPIO_Init+0xd4>)
 8002134:	f002 fb60 	bl	80047f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800213e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <MX_GPIO_Init+0xd8>)
 8002150:	f002 f9be 	bl	80044d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002154:	2320      	movs	r3, #32
 8002156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <MX_GPIO_Init+0xd4>)
 800216c:	f002 f9b0 	bl	80044d0 <HAL_GPIO_Init>

}
 8002170:	bf00      	nop
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020800 	.word	0x40020800

08002184 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d104      	bne.n	80021a0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002196:	2120      	movs	r1, #32
 8002198:	4813      	ldr	r0, [pc, #76]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800219a:	f002 fb46 	bl	800482a <HAL_GPIO_TogglePin>
	}
	else if (htim->Instance == TIM14)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
}
 800219e:	e01c      	b.n	80021da <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM11)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x68>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d104      	bne.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021aa:	2120      	movs	r1, #32
 80021ac:	480e      	ldr	r0, [pc, #56]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80021ae:	f002 fb3c 	bl	800482a <HAL_GPIO_TogglePin>
}
 80021b2:	e012      	b.n	80021da <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM13)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d104      	bne.n	80021c8 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021be:	2120      	movs	r1, #32
 80021c0:	4809      	ldr	r0, [pc, #36]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80021c2:	f002 fb32 	bl	800482a <HAL_GPIO_TogglePin>
}
 80021c6:	e008      	b.n	80021da <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM14)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d103      	bne.n	80021da <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80021d2:	2120      	movs	r1, #32
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80021d6:	f002 fb28 	bl	800482a <HAL_GPIO_TogglePin>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40014800 	.word	0x40014800
 80021f0:	40001c00 	.word	0x40001c00
 80021f4:	40002000 	.word	0x40002000

080021f8 <Model_Init>:

static ai_buffer *ai_input;
static ai_buffer *ai_output;

int Model_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
	ai_error err;
	const ai_handle acts[] = { activations };
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <Model_Init+0x48>)
 8002200:	603b      	str	r3, [r7, #0]
	err = ai_network_create_and_init(&network, acts, NULL);
 8002202:	463b      	mov	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	4619      	mov	r1, r3
 8002208:	480e      	ldr	r0, [pc, #56]	; (8002244 <Model_Init+0x4c>)
 800220a:	f004 fd77 	bl	8006cfc <ai_network_create_and_init>
 800220e:	4603      	mov	r3, r0
 8002210:	607b      	str	r3, [r7, #4]

	ai_input = ai_network_inputs_get(network, NULL);
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <Model_Init+0x4c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f004 fde3 	bl	8006de4 <ai_network_inputs_get>
 800221e:	4603      	mov	r3, r0
 8002220:	4a09      	ldr	r2, [pc, #36]	; (8002248 <Model_Init+0x50>)
 8002222:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <Model_Init+0x4c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f004 fdf4 	bl	8006e18 <ai_network_outputs_get>
 8002230:	4603      	mov	r3, r0
 8002232:	4a06      	ldr	r2, [pc, #24]	; (800224c <Model_Init+0x54>)
 8002234:	6013      	str	r3, [r2, #0]

	return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200008c0 	.word	0x200008c0
 8002244:	200008bc 	.word	0x200008bc
 8002248:	20000994 	.word	0x20000994
 800224c:	20000998 	.word	0x20000998

08002250 <Model_Run>:

int Model_Run(const void *in_data, void *out_data)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
	ai_i32 n_batch;
	ai_error err;

	/* 1 - Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <Model_Run+0x4c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <Model_Run+0x50>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	605a      	str	r2, [r3, #4]

	/* 2 - Perform the inference */
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <Model_Run+0x54>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <Model_Run+0x4c>)
 8002270:	6811      	ldr	r1, [r2, #0]
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <Model_Run+0x50>)
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fe24 	bl	8006ec4 <ai_network_run>
 800227c:	60f8      	str	r0, [r7, #12]
	if (n_batch != 1) {
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d006      	beq.n	8002292 <Model_Run+0x42>
		err = ai_network_get_error(network);
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <Model_Run+0x54>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f004 fd15 	bl	8006cb8 <ai_network_get_error>
 800228e:	4603      	mov	r3, r0
 8002290:	60bb      	str	r3, [r7, #8]
	};

	return 0;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000994 	.word	0x20000994
 80022a0:	20000998 	.word	0x20000998
 80022a4:	200008bc 	.word	0x200008bc

080022a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 80022ae:	b081      	sub	sp, #4
 80022b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint32_t Local_u32Counter,Local_u32_RealData[3][250],Local_u32AvgCounter;

	uint8_t Local_u8Avg = 5;
 80022b2:	2305      	movs	r3, #5
 80022b4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80022b8:	f102 0233 	add.w	r2, r2, #51	; 0x33
 80022bc:	7013      	strb	r3, [r2, #0]
	uint8_t Local_u8Max,Local_u8ModeArr[Local_u8Avg],Local_u8Sum=0;
 80022be:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80022c2:	f103 0333 	add.w	r3, r3, #51	; 0x33
 80022c6:	781e      	ldrb	r6, [r3, #0]
 80022c8:	4633      	mov	r3, r6
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80022d0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	b2f3      	uxtb	r3, r6
 80022d8:	2200      	movs	r2, #0
 80022da:	461c      	mov	r4, r3
 80022dc:	4615      	mov	r5, r2
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	00eb      	lsls	r3, r5, #3
 80022e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ec:	00e2      	lsls	r2, r4, #3
 80022ee:	b2f3      	uxtb	r3, r6
 80022f0:	2200      	movs	r2, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	4611      	mov	r1, r2
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	00cb      	lsls	r3, r1, #3
 8002300:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002304:	00c2      	lsls	r2, r0, #3
 8002306:	4633      	mov	r3, r6
 8002308:	3307      	adds	r3, #7
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	ebad 0d03 	sub.w	sp, sp, r3
 8002312:	466b      	mov	r3, sp
 8002314:	3300      	adds	r3, #0
 8002316:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800231a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002326:	f102 0227 	add.w	r2, r2, #39	; 0x27
 800232a:	7013      	strb	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800232c:	f001 f9ec 	bl	8003708 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002330:	f000 fa4e 	bl	80027d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002334:	f7ff feb8 	bl	80020a8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002338:	f001 f94a 	bl	80035d0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800233c:	f7ff fcca 	bl	8001cd4 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002340:	f7ff fd1a 	bl	8001d78 <MX_ADC2_Init>
	MX_ADC3_Init();
 8002344:	f7ff fd6a 	bl	8001e1c <MX_ADC3_Init>
	MX_CRC_Init();
 8002348:	f7ff fe78 	bl	800203c <MX_CRC_Init>
	MX_TIM2_Init();
 800234c:	f000 fe78 	bl	8003040 <MX_TIM2_Init>
	MX_TIM10_Init();
 8002350:	f000 ff0e 	bl	8003170 <MX_TIM10_Init>
	MX_TIM11_Init();
 8002354:	f000 ff30 	bl	80031b8 <MX_TIM11_Init>
	MX_TIM12_Init();
 8002358:	f000 ff52 	bl	8003200 <MX_TIM12_Init>
	MX_TIM13_Init();
 800235c:	f000 ffb4 	bl	80032c8 <MX_TIM13_Init>
	MX_TIM14_Init();
 8002360:	f000 ffd6 	bl	8003310 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	Model_Init();
 8002364:	f7ff ff48 	bl	80021f8 <Model_Init>

	/* Start GPs Timers */
	HAL_TIM_Base_Start_IT(&htim10);
 8002368:	48bc      	ldr	r0, [pc, #752]	; (800265c <main+0x3b4>)
 800236a:	f003 f901 	bl	8005570 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 800236e:	48bc      	ldr	r0, [pc, #752]	; (8002660 <main+0x3b8>)
 8002370:	f003 f8fe 	bl	8005570 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8002374:	48bb      	ldr	r0, [pc, #748]	; (8002664 <main+0x3bc>)
 8002376:	f003 f8fb 	bl	8005570 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 800237a:	48bb      	ldr	r0, [pc, #748]	; (8002668 <main+0x3c0>)
 800237c:	f003 f8f8 	bl	8005570 <HAL_TIM_Base_Start_IT>


	/* Initialize PWM Timers*/
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002380:	2100      	movs	r1, #0
 8002382:	48ba      	ldr	r0, [pc, #744]	; (800266c <main+0x3c4>)
 8002384:	f003 f9be 	bl	8005704 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002388:	2104      	movs	r1, #4
 800238a:	48b8      	ldr	r0, [pc, #736]	; (800266c <main+0x3c4>)
 800238c:	f003 f9ba 	bl	8005704 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002390:	2108      	movs	r1, #8
 8002392:	48b6      	ldr	r0, [pc, #728]	; (800266c <main+0x3c4>)
 8002394:	f003 f9b6 	bl	8005704 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002398:	210c      	movs	r1, #12
 800239a:	48b4      	ldr	r0, [pc, #720]	; (800266c <main+0x3c4>)
 800239c:	f003 f9b2 	bl	8005704 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80023a0:	2100      	movs	r1, #0
 80023a2:	48b3      	ldr	r0, [pc, #716]	; (8002670 <main+0x3c8>)
 80023a4:	f003 f9ae 	bl	8005704 <HAL_TIM_PWM_Start>
	//	Servo1.Pin = Servo_PA15;
	//	Servo2.Pin = Servo_PB10;
	//	Servo3.Pin = Servo_PB14;
	//	Servo4.Pin = Servo_PB2;
	//	Servo5.Pin = Servo_PB9;
	init_servo();
 80023a8:	f000 fa8a 	bl	80028c0 <init_servo>
	/*********	Testing	*********/
	uint32_t Move2[250] = {0};
 80023ac:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023b0:	3b4c      	subs	r3, #76	; 0x4c
 80023b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f006 fcf5 	bl	8008da8 <memset>
	uint32_t Move1[250] = {
 80023be:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023c2:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 80023c6:	4aab      	ldr	r2, [pc, #684]	; (8002674 <main+0x3cc>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	4611      	mov	r1, r2
 80023cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d0:	461a      	mov	r2, r3
 80023d2:	f006 fcdb 	bl	8008d8c <memcpy>
			276,   79,    5,  217,   95,   29,    8,  104,   20,  156,  189,
			146,   93,  125,   96,    5,  160,   51, 1495, 1831,   71,  599,
			181,  250,  219,  246,   47,  213,   23,  225
	};

	uint32_t Move0[SENSOR_NUM][250] = {
 80023d6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80023da:	f6a3 73ec 	subw	r3, r3, #4076	; 0xfec
 80023de:	4aa6      	ldr	r2, [pc, #664]	; (8002678 <main+0x3d0>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	4611      	mov	r1, r2
 80023e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80023e8:	461a      	mov	r2, r3
 80023ea:	f006 fccf 	bl	8008d8c <memcpy>
									25,  246,    0,    0,    6,  566,   17,    0,  217,  239,    0,
									10,   12,  294,  685,  207,  107,  167,  146,    1,   37,  109,
									408,  283,  144,  310,   40,    2,    0,   81,   20,   57,   60,
									90,    0,  167,  318,  569,   72,    4,   49}};

	FEAT_EXT_f32_AllFeat(Move0 ,*Feat_f32Arr);
 80023ee:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 80023f2:	f102 0204 	add.w	r2, r2, #4
 80023f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023fa:	3b0c      	subs	r3, #12
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe ff88 	bl	8001314 <FEAT_EXT_f32_AllFeat>
	NORM_f32_AllNorm(*Feat_f32Arr, *Norm_f32Arr);
 8002404:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002408:	f102 021c 	add.w	r2, r2, #28
 800240c:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8002410:	f103 0304 	add.w	r3, r3, #4
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fb46 	bl	8001aa8 <NORM_f32_AllNorm>
	//	in_data[ZC_IDX+12]   = Local_f32KoftaNorm[ZC_IDX+12];
	//	in_data[WVL_IDX+12]  = Local_f32KoftaNorm[WVL_IDX+12];



	in_data[RMS_IDX]  	= Norm_f32Arr[0][RMS_IDX];
 800241c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002420:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a95      	ldr	r2, [pc, #596]	; (800267c <main+0x3d4>)
 8002428:	6013      	str	r3, [r2, #0]
	in_data[VAR_IDX]  	= Norm_f32Arr[0][VAR_IDX];
 800242a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800242e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a91      	ldr	r2, [pc, #580]	; (800267c <main+0x3d4>)
 8002436:	6053      	str	r3, [r2, #4]
	in_data[MEAN_IDX] 	= Norm_f32Arr[0][MEAN_IDX];
 8002438:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800243c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4a8e      	ldr	r2, [pc, #568]	; (800267c <main+0x3d4>)
 8002444:	6093      	str	r3, [r2, #8]
	in_data[SSC_IDX] 	= Norm_f32Arr[0][SSC_IDX];
 8002446:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800244a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a8a      	ldr	r2, [pc, #552]	; (800267c <main+0x3d4>)
 8002452:	60d3      	str	r3, [r2, #12]
	in_data[ZC_IDX]   	= Norm_f32Arr[0][ZC_IDX];
 8002454:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002458:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	4a87      	ldr	r2, [pc, #540]	; (800267c <main+0x3d4>)
 8002460:	6113      	str	r3, [r2, #16]
	in_data[WVL_IDX]  	= Norm_f32Arr[0][WVL_IDX];
 8002462:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002466:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	4a83      	ldr	r2, [pc, #524]	; (800267c <main+0x3d4>)
 800246e:	6153      	str	r3, [r2, #20]

	in_data[RMS_IDX+6]  =  Norm_f32Arr[1][RMS_IDX];
 8002470:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002474:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	4a80      	ldr	r2, [pc, #512]	; (800267c <main+0x3d4>)
 800247c:	6193      	str	r3, [r2, #24]
	in_data[VAR_IDX+6]  =  Norm_f32Arr[1][VAR_IDX];
 800247e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002482:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4a7c      	ldr	r2, [pc, #496]	; (800267c <main+0x3d4>)
 800248a:	61d3      	str	r3, [r2, #28]
	in_data[MEAN_IDX+6] =  Norm_f32Arr[1][MEAN_IDX];
 800248c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002490:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4a79      	ldr	r2, [pc, #484]	; (800267c <main+0x3d4>)
 8002498:	6213      	str	r3, [r2, #32]
	in_data[SSC_IDX+6] 	=  Norm_f32Arr[1][SSC_IDX];
 800249a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800249e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	4a75      	ldr	r2, [pc, #468]	; (800267c <main+0x3d4>)
 80024a6:	6253      	str	r3, [r2, #36]	; 0x24
	in_data[ZC_IDX+6]   =  Norm_f32Arr[1][ZC_IDX];
 80024a8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80024ac:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	4a72      	ldr	r2, [pc, #456]	; (800267c <main+0x3d4>)
 80024b4:	6293      	str	r3, [r2, #40]	; 0x28
	in_data[WVL_IDX+6]  =  Norm_f32Arr[1][WVL_IDX];
 80024b6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80024ba:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	4a6e      	ldr	r2, [pc, #440]	; (800267c <main+0x3d4>)
 80024c2:	62d3      	str	r3, [r2, #44]	; 0x2c
	//	in_data[MEAN_IDX+12] = Norm_f32Arr[2][MEAN_IDX];
	//	in_data[SSC_IDX+12]  = Norm_f32Arr[2][SSC_IDX];
	//	in_data[ZC_IDX+12]   = Norm_f32Arr[2][ZC_IDX];
	//	in_data[WVL_IDX+12]  = Norm_f32Arr[2][WVL_IDX];

	Model_Run(in_data, out_data);
 80024c4:	496e      	ldr	r1, [pc, #440]	; (8002680 <main+0x3d8>)
 80024c6:	486d      	ldr	r0, [pc, #436]	; (800267c <main+0x3d4>)
 80024c8:	f7ff fec2 	bl	8002250 <Model_Run>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		for(Local_u32Counter = 0 ;Local_u32Counter < DATA_SIZE ;)
 80024cc:	2300      	movs	r3, #0
 80024ce:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80024d2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e042      	b.n	8002560 <main+0x2b8>
		{

			sensor1 =  analogRead(&hadc1);
 80024da:	486a      	ldr	r0, [pc, #424]	; (8002684 <main+0x3dc>)
 80024dc:	f000 fc5e 	bl	8002d9c <analogRead>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4a69      	ldr	r2, [pc, #420]	; (8002688 <main+0x3e0>)
 80024e4:	6013      	str	r3, [r2, #0]
			sensor2 =  analogRead(&hadc2);
 80024e6:	4869      	ldr	r0, [pc, #420]	; (800268c <main+0x3e4>)
 80024e8:	f000 fc58 	bl	8002d9c <analogRead>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a68      	ldr	r2, [pc, #416]	; (8002690 <main+0x3e8>)
 80024f0:	6013      	str	r3, [r2, #0]
			//			sensor3 =  analogRead(&hadc3);
			//			if((sensor1 != 0) && (sensor2 != 0)/* && (sensor3 != 0)*/)
			//			{

			Local_u32_RealData[SNS1][Local_u32Counter] = sensor1;
 80024f2:	4b65      	ldr	r3, [pc, #404]	; (8002688 <main+0x3e0>)
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80024fa:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 80024fe:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002502:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			Local_u32_RealData[SNS2][Local_u32Counter] = sensor2;
 800250c:	4b60      	ldr	r3, [pc, #384]	; (8002690 <main+0x3e8>)
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002514:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8002518:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800251c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	32fa      	adds	r2, #250	; 0xfa
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			Local_u32_RealData[SNS3][Local_u32Counter] = 0;
 8002528:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800252c:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 8002530:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002534:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 800253e:	2100      	movs	r1, #0
 8002540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			Local_u32Counter++;
 8002544:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002548:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002554:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002558:	6013      	str	r3, [r2, #0]
			//			}

			HAL_Delay(2);
 800255a:	2002      	movs	r0, #2
 800255c:	f001 f946 	bl	80037ec <HAL_Delay>
		for(Local_u32Counter = 0 ;Local_u32Counter < DATA_SIZE ;)
 8002560:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002564:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2bf9      	cmp	r3, #249	; 0xf9
 800256c:	d9b5      	bls.n	80024da <main+0x232>
		}

		FEAT_EXT_f32_AllFeat(Local_u32_RealData,*Feat_f32Arr);
 800256e:	f507 52a3 	add.w	r2, r7, #5216	; 0x1460
 8002572:	f102 0204 	add.w	r2, r2, #4
 8002576:	f507 53a5 	add.w	r3, r7, #5280	; 0x14a0
 800257a:	f103 030c 	add.w	r3, r3, #12
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fec7 	bl	8001314 <FEAT_EXT_f32_AllFeat>
		NORM_f32_AllNorm(*Feat_f32Arr, *Norm_f32Arr);
 8002586:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 800258a:	f102 021c 	add.w	r2, r2, #28
 800258e:	f507 53a3 	add.w	r3, r7, #5216	; 0x1460
 8002592:	f103 0304 	add.w	r3, r3, #4
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fa85 	bl	8001aa8 <NORM_f32_AllNorm>

		in_data[RMS_IDX]  	= Norm_f32Arr[0][RMS_IDX];
 800259e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025a2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a34      	ldr	r2, [pc, #208]	; (800267c <main+0x3d4>)
 80025aa:	6013      	str	r3, [r2, #0]
		in_data[VAR_IDX]  	= Norm_f32Arr[0][VAR_IDX];
 80025ac:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025b0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a31      	ldr	r2, [pc, #196]	; (800267c <main+0x3d4>)
 80025b8:	6053      	str	r3, [r2, #4]
		in_data[MEAN_IDX] 	= Norm_f32Arr[0][MEAN_IDX];
 80025ba:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025be:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a2d      	ldr	r2, [pc, #180]	; (800267c <main+0x3d4>)
 80025c6:	6093      	str	r3, [r2, #8]
		in_data[SSC_IDX] 	= Norm_f32Arr[0][SSC_IDX];
 80025c8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025cc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4a2a      	ldr	r2, [pc, #168]	; (800267c <main+0x3d4>)
 80025d4:	60d3      	str	r3, [r2, #12]
		in_data[ZC_IDX]   	= Norm_f32Arr[0][ZC_IDX];
 80025d6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025da:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	4a26      	ldr	r2, [pc, #152]	; (800267c <main+0x3d4>)
 80025e2:	6113      	str	r3, [r2, #16]
		in_data[WVL_IDX]  	= Norm_f32Arr[0][WVL_IDX];
 80025e4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025e8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4a23      	ldr	r2, [pc, #140]	; (800267c <main+0x3d4>)
 80025f0:	6153      	str	r3, [r2, #20]

		in_data[RMS_IDX+6]  =  Norm_f32Arr[1][RMS_IDX];
 80025f2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80025f6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	; (800267c <main+0x3d4>)
 80025fe:	6193      	str	r3, [r2, #24]
		in_data[VAR_IDX+6]  =  Norm_f32Arr[1][VAR_IDX];
 8002600:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002604:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <main+0x3d4>)
 800260c:	61d3      	str	r3, [r2, #28]
		in_data[MEAN_IDX+6] =  Norm_f32Arr[1][MEAN_IDX];
 800260e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002612:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <main+0x3d4>)
 800261a:	6213      	str	r3, [r2, #32]
		in_data[SSC_IDX+6] 	=  Norm_f32Arr[1][SSC_IDX];
 800261c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002620:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	4a15      	ldr	r2, [pc, #84]	; (800267c <main+0x3d4>)
 8002628:	6253      	str	r3, [r2, #36]	; 0x24
		in_data[ZC_IDX+6]   =  Norm_f32Arr[1][ZC_IDX];
 800262a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800262e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <main+0x3d4>)
 8002636:	6293      	str	r3, [r2, #40]	; 0x28
		in_data[WVL_IDX+6]  =  Norm_f32Arr[1][WVL_IDX];
 8002638:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800263c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	4a0e      	ldr	r2, [pc, #56]	; (800267c <main+0x3d4>)
 8002644:	62d3      	str	r3, [r2, #44]	; 0x2c
		//		in_data[MEAN_IDX+12] = Norm_f32Arr[2][MEAN_IDX];
		//		in_data[SSC_IDX+12]  = Norm_f32Arr[2][SSC_IDX];
		//		in_data[ZC_IDX+12]   = Norm_f32Arr[2][ZC_IDX];
		//		in_data[WVL_IDX+12]  = Norm_f32Arr[2][WVL_IDX];

		Model_Run(in_data, out_data);
 8002646:	490e      	ldr	r1, [pc, #56]	; (8002680 <main+0x3d8>)
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <main+0x3d4>)
 800264a:	f7ff fe01 	bl	8002250 <Model_Run>
		for(int i = 0 ;i < 4; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002654:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e049      	b.n	80026f0 <main+0x448>
 800265c:	20000b78 	.word	0x20000b78
 8002660:	20000bc0 	.word	0x20000bc0
 8002664:	20000c50 	.word	0x20000c50
 8002668:	20000c98 	.word	0x20000c98
 800266c:	20000b30 	.word	0x20000b30
 8002670:	20000c08 	.word	0x20000c08
 8002674:	08009ec0 	.word	0x08009ec0
 8002678:	0800a2a8 	.word	0x0800a2a8
 800267c:	20000940 	.word	0x20000940
 8002680:	20000980 	.word	0x20000980
 8002684:	200007bc 	.word	0x200007bc
 8002688:	2000089c 	.word	0x2000089c
 800268c:	20000804 	.word	0x20000804
 8002690:	200008a0 	.word	0x200008a0
		{
			if(out_data[i] > out_data[Local_u8Max])
 8002694:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <main+0x50c>)
 8002696:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800269a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	ed93 7a00 	vldr	s14, [r3]
 80026a8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80026ac:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	4a40      	ldr	r2, [pc, #256]	; (80027b4 <main+0x50c>)
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	dd09      	ble.n	80026da <main+0x432>
			{
				Local_u8Max = i;
 80026c6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80026ca:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80026d4:	f102 023b 	add.w	r2, r2, #59	; 0x3b
 80026d8:	7013      	strb	r3, [r2, #0]
		for(int i = 0 ;i < 4; i++)
 80026da:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80026de:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80026ea:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80026f4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	ddca      	ble.n	8002694 <main+0x3ec>
			}
		}

		Two  = out_data[0];
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <main+0x50c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <main+0x510>)
 8002704:	6013      	str	r3, [r2, #0]
		OK   = out_data[1];
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <main+0x50c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <main+0x514>)
 800270c:	6013      	str	r3, [r2, #0]
		Fest = out_data[2];
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <main+0x50c>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <main+0x518>)
 8002714:	6013      	str	r3, [r2, #0]
		Good = out_data[3];
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <main+0x50c>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <main+0x51c>)
 800271c:	6013      	str	r3, [r2, #0]
		Rest = out_data[4];
 800271e:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <main+0x50c>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <main+0x520>)
 8002724:	6013      	str	r3, [r2, #0]

		if(Local_u8Max == 0)
 8002726:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800272a:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <main+0x492>
			//			Gun = 100;
			//			Fest = 0;
			//			Two  = 0;
			//			Rest = 0;

			two();
 8002734:	f000 f8e4 	bl	8002900 <two>
 8002738:	e026      	b.n	8002788 <main+0x4e0>
		}
		else if(Local_u8Max == 1)
 800273a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800273e:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d102      	bne.n	800274e <main+0x4a6>
			//			Gun = 0;
			//			OK = 0;
			//			Good = 0;
			//			Two = 100;
			//			Rest = 0;
			ok();
 8002748:	f000 f9c6 	bl	8002ad8 <ok>
 800274c:	e01c      	b.n	8002788 <main+0x4e0>
		}

		else if (Local_u8Max == 2)
 800274e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002752:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d102      	bne.n	8002762 <main+0x4ba>
			//			Fest = 100;
			//			Gun = 0;
			//			OK = 0;
			//			Two = 0;
			//			Rest = 0;
			fest();
 800275c:	f000 fa32 	bl	8002bc4 <fest>
 8002760:	e012      	b.n	8002788 <main+0x4e0>
		}
		else if (Local_u8Max == 3)
 8002762:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002766:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d102      	bne.n	8002776 <main+0x4ce>
		{
			//			Fest = 0;
			//			Gun  = 0;
			//			Two  = 0;
			//			Rest = 100;
			good();
 8002770:	f000 f93c 	bl	80029ec <good>
 8002774:	e008      	b.n	8002788 <main+0x4e0>

		}
		else if (Local_u8Max == 4)
 8002776:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800277a:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d101      	bne.n	8002788 <main+0x4e0>
			//			Fest = 100;
			//			Gun = 0;
			//			OK = 0;
			//			Good = 0;
			//			Two = 0;
			rest();
 8002784:	f000 fa94 	bl	8002cb0 <rest>
		}

		Mode = Local_u8Max;
 8002788:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800278c:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <main+0x524>)
 8002794:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 8002796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800279a:	f001 f827 	bl	80037ec <HAL_Delay>
		Mode = 0;
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <main+0x524>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
		Local_u8Max = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80027aa:	f102 023b 	add.w	r2, r2, #59	; 0x3b
 80027ae:	7013      	strb	r3, [r2, #0]
		for(Local_u32Counter = 0 ;Local_u32Counter < DATA_SIZE ;)
 80027b0:	e68c      	b.n	80024cc <main+0x224>
 80027b2:	bf00      	nop
 80027b4:	20000980 	.word	0x20000980
 80027b8:	200008b0 	.word	0x200008b0
 80027bc:	200008a8 	.word	0x200008a8
 80027c0:	200008a4 	.word	0x200008a4
 80027c4:	200008ac 	.word	0x200008ac
 80027c8:	200008b4 	.word	0x200008b4
 80027cc:	200008b8 	.word	0x200008b8

080027d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b094      	sub	sp, #80	; 0x50
 80027d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027d6:	f107 031c 	add.w	r3, r7, #28
 80027da:	2234      	movs	r2, #52	; 0x34
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f006 fae2 	bl	8008da8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <SystemClock_Config+0xdc>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	4a2b      	ldr	r2, [pc, #172]	; (80028ac <SystemClock_Config+0xdc>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6413      	str	r3, [r2, #64]	; 0x40
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <SystemClock_Config+0xdc>)
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002810:	2300      	movs	r3, #0
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <SystemClock_Config+0xe0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <SystemClock_Config+0xe0>)
 800281a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <SystemClock_Config+0xe0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800282c:	2302      	movs	r3, #2
 800282e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002830:	2301      	movs	r3, #1
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002834:	2310      	movs	r3, #16
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002838:	2302      	movs	r3, #2
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800283c:	2300      	movs	r3, #0
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002840:	2308      	movs	r3, #8
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002844:	23b4      	movs	r3, #180	; 0xb4
 8002846:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002848:	2302      	movs	r3, #2
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800284c:	2302      	movs	r3, #2
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002850:	2302      	movs	r3, #2
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4618      	mov	r0, r3
 800285a:	f002 fb9b 	bl	8004f94 <HAL_RCC_OscConfig>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8002864:	f000 f826 	bl	80028b4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002868:	f001 fffa 	bl	8004860 <HAL_PWREx_EnableOverDrive>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8002872:	f000 f81f 	bl	80028b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002876:	230f      	movs	r3, #15
 8002878:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800287a:	2302      	movs	r3, #2
 800287c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002886:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	2105      	movs	r1, #5
 8002894:	4618      	mov	r0, r3
 8002896:	f002 f833 	bl	8004900 <HAL_RCC_ClockConfig>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80028a0:	f000 f808 	bl	80028b4 <Error_Handler>
	}
}
 80028a4:	bf00      	nop
 80028a6:	3750      	adds	r7, #80	; 0x50
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000

080028b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
}
 80028ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80028bc:	e7fe      	b.n	80028bc <Error_Handler+0x8>
	...

080028c0 <init_servo>:
 */
#include "movements.h"
SERVO_t Servo1, Servo2, Servo3, Servo4, Servo5;

void init_servo(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
	Servo1.Pin = Servo_PA15;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <init_servo+0x2c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
	Servo2.Pin = Servo_PB10;
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <init_servo+0x30>)
 80028cc:	2203      	movs	r2, #3
 80028ce:	601a      	str	r2, [r3, #0]
	Servo3.Pin = Servo_PB14;
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <init_servo+0x34>)
 80028d2:	2204      	movs	r2, #4
 80028d4:	601a      	str	r2, [r3, #0]
	Servo4.Pin = Servo_PB2;
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <init_servo+0x38>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]
	Servo5.Pin = Servo_PB9;
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <init_servo+0x3c>)
 80028de:	2202      	movs	r2, #2
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	2000099c 	.word	0x2000099c
 80028f0:	200009ec 	.word	0x200009ec
 80028f4:	20000a3c 	.word	0x20000a3c
 80028f8:	20000a8c 	.word	0x20000a8c
 80028fc:	20000adc 	.word	0x20000adc

08002900 <two>:
	Servo_void_SetAngle(Servo3, 170);	//Middle
	Servo_void_SetAngle(Servo4, 20);	//Ring
	Servo_void_SetAngle(Servo5, 120);	//Pinky
}
void two(void)
{
 8002900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002902:	b093      	sub	sp, #76	; 0x4c
 8002904:	af12      	add	r7, sp, #72	; 0x48
	Servo_void_SetAngle(Servo1, 100);	//Thumb
 8002906:	4e34      	ldr	r6, [pc, #208]	; (80029d8 <two+0xd8>)
 8002908:	2364      	movs	r3, #100	; 0x64
 800290a:	9310      	str	r3, [sp, #64]	; 0x40
 800290c:	466d      	mov	r5, sp
 800290e:	f106 0410 	add.w	r4, r6, #16
 8002912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002922:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002926:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800292a:	f000 fa67 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo2, 40);	//Index
 800292e:	4e2b      	ldr	r6, [pc, #172]	; (80029dc <two+0xdc>)
 8002930:	2328      	movs	r3, #40	; 0x28
 8002932:	9310      	str	r3, [sp, #64]	; 0x40
 8002934:	466d      	mov	r5, sp
 8002936:	f106 0410 	add.w	r4, r6, #16
 800293a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800293c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800293e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002946:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800294a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800294e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002952:	f000 fa53 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo3, 50);	//Middle
 8002956:	4e22      	ldr	r6, [pc, #136]	; (80029e0 <two+0xe0>)
 8002958:	2332      	movs	r3, #50	; 0x32
 800295a:	9310      	str	r3, [sp, #64]	; 0x40
 800295c:	466d      	mov	r5, sp
 800295e:	f106 0410 	add.w	r4, r6, #16
 8002962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002972:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002976:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800297a:	f000 fa3f 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo4, 20);	//Ring
 800297e:	4e19      	ldr	r6, [pc, #100]	; (80029e4 <two+0xe4>)
 8002980:	2314      	movs	r3, #20
 8002982:	9310      	str	r3, [sp, #64]	; 0x40
 8002984:	466d      	mov	r5, sp
 8002986:	f106 0410 	add.w	r4, r6, #16
 800298a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002996:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800299a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800299e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029a2:	f000 fa2b 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo5, 120);	//Pinky
 80029a6:	4e10      	ldr	r6, [pc, #64]	; (80029e8 <two+0xe8>)
 80029a8:	2378      	movs	r3, #120	; 0x78
 80029aa:	9310      	str	r3, [sp, #64]	; 0x40
 80029ac:	466d      	mov	r5, sp
 80029ae:	f106 0410 	add.w	r4, r6, #16
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029c2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029ca:	f000 fa17 	bl	8002dfc <Servo_void_SetAngle>
}
 80029ce:	bf00      	nop
 80029d0:	3704      	adds	r7, #4
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000099c 	.word	0x2000099c
 80029dc:	200009ec 	.word	0x200009ec
 80029e0:	20000a3c 	.word	0x20000a3c
 80029e4:	20000a8c 	.word	0x20000a8c
 80029e8:	20000adc 	.word	0x20000adc

080029ec <good>:
	Servo_void_SetAngle(Servo3, 50);	//Middle
	Servo_void_SetAngle(Servo4, 120);	//Ring
	Servo_void_SetAngle(Servo5, 50);	//Pinky
}
void good(void)
{
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ee:	b093      	sub	sp, #76	; 0x4c
 80029f0:	af12      	add	r7, sp, #72	; 0x48
	Servo_void_SetAngle(Servo1, 170);	//Thumb
 80029f2:	4e34      	ldr	r6, [pc, #208]	; (8002ac4 <good+0xd8>)
 80029f4:	23aa      	movs	r3, #170	; 0xaa
 80029f6:	9310      	str	r3, [sp, #64]	; 0x40
 80029f8:	466d      	mov	r5, sp
 80029fa:	f106 0410 	add.w	r4, r6, #16
 80029fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a12:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a16:	f000 f9f1 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo2, 120);	//Index
 8002a1a:	4e2b      	ldr	r6, [pc, #172]	; (8002ac8 <good+0xdc>)
 8002a1c:	2378      	movs	r3, #120	; 0x78
 8002a1e:	9310      	str	r3, [sp, #64]	; 0x40
 8002a20:	466d      	mov	r5, sp
 8002a22:	f106 0410 	add.w	r4, r6, #16
 8002a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a3e:	f000 f9dd 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo3, 170);	//Middle
 8002a42:	4e22      	ldr	r6, [pc, #136]	; (8002acc <good+0xe0>)
 8002a44:	23aa      	movs	r3, #170	; 0xaa
 8002a46:	9310      	str	r3, [sp, #64]	; 0x40
 8002a48:	466d      	mov	r5, sp
 8002a4a:	f106 0410 	add.w	r4, r6, #16
 8002a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a66:	f000 f9c9 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo4, 20);	//Ring
 8002a6a:	4e19      	ldr	r6, [pc, #100]	; (8002ad0 <good+0xe4>)
 8002a6c:	2314      	movs	r3, #20
 8002a6e:	9310      	str	r3, [sp, #64]	; 0x40
 8002a70:	466d      	mov	r5, sp
 8002a72:	f106 0410 	add.w	r4, r6, #16
 8002a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002a86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a8a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002a8e:	f000 f9b5 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo5, 120);	//Pinky
 8002a92:	4e10      	ldr	r6, [pc, #64]	; (8002ad4 <good+0xe8>)
 8002a94:	2378      	movs	r3, #120	; 0x78
 8002a96:	9310      	str	r3, [sp, #64]	; 0x40
 8002a98:	466d      	mov	r5, sp
 8002a9a:	f106 0410 	add.w	r4, r6, #16
 8002a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002aae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002ab2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ab6:	f000 f9a1 	bl	8002dfc <Servo_void_SetAngle>
}
 8002aba:	bf00      	nop
 8002abc:	3704      	adds	r7, #4
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2000099c 	.word	0x2000099c
 8002ac8:	200009ec 	.word	0x200009ec
 8002acc:	20000a3c 	.word	0x20000a3c
 8002ad0:	20000a8c 	.word	0x20000a8c
 8002ad4:	20000adc 	.word	0x20000adc

08002ad8 <ok>:
void ok(void)
{
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b093      	sub	sp, #76	; 0x4c
 8002adc:	af12      	add	r7, sp, #72	; 0x48
	Servo_void_SetAngle(Servo1, 100);	//Thumb
 8002ade:	4e34      	ldr	r6, [pc, #208]	; (8002bb0 <ok+0xd8>)
 8002ae0:	2364      	movs	r3, #100	; 0x64
 8002ae2:	9310      	str	r3, [sp, #64]	; 0x40
 8002ae4:	466d      	mov	r5, sp
 8002ae6:	f106 0410 	add.w	r4, r6, #16
 8002aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002afa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002afe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b02:	f000 f97b 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo2, 120);	//Index
 8002b06:	4e2b      	ldr	r6, [pc, #172]	; (8002bb4 <ok+0xdc>)
 8002b08:	2378      	movs	r3, #120	; 0x78
 8002b0a:	9310      	str	r3, [sp, #64]	; 0x40
 8002b0c:	466d      	mov	r5, sp
 8002b0e:	f106 0410 	add.w	r4, r6, #16
 8002b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b2a:	f000 f967 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo3, 50);	//Middle
 8002b2e:	4e22      	ldr	r6, [pc, #136]	; (8002bb8 <ok+0xe0>)
 8002b30:	2332      	movs	r3, #50	; 0x32
 8002b32:	9310      	str	r3, [sp, #64]	; 0x40
 8002b34:	466d      	mov	r5, sp
 8002b36:	f106 0410 	add.w	r4, r6, #16
 8002b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b4e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b52:	f000 f953 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo4, 120);	//Ring
 8002b56:	4e19      	ldr	r6, [pc, #100]	; (8002bbc <ok+0xe4>)
 8002b58:	2378      	movs	r3, #120	; 0x78
 8002b5a:	9310      	str	r3, [sp, #64]	; 0x40
 8002b5c:	466d      	mov	r5, sp
 8002b5e:	f106 0410 	add.w	r4, r6, #16
 8002b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b76:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b7a:	f000 f93f 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo5, 50);	//Pinky
 8002b7e:	4e10      	ldr	r6, [pc, #64]	; (8002bc0 <ok+0xe8>)
 8002b80:	2332      	movs	r3, #50	; 0x32
 8002b82:	9310      	str	r3, [sp, #64]	; 0x40
 8002b84:	466d      	mov	r5, sp
 8002b86:	f106 0410 	add.w	r4, r6, #16
 8002b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002b9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b9e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002ba2:	f000 f92b 	bl	8002dfc <Servo_void_SetAngle>
}
 8002ba6:	bf00      	nop
 8002ba8:	3704      	adds	r7, #4
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000099c 	.word	0x2000099c
 8002bb4:	200009ec 	.word	0x200009ec
 8002bb8:	20000a3c 	.word	0x20000a3c
 8002bbc:	20000a8c 	.word	0x20000a8c
 8002bc0:	20000adc 	.word	0x20000adc

08002bc4 <fest>:
void fest(void)
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	b093      	sub	sp, #76	; 0x4c
 8002bc8:	af12      	add	r7, sp, #72	; 0x48
	Servo_void_SetAngle(Servo1, 100);	//Thumb
 8002bca:	4e34      	ldr	r6, [pc, #208]	; (8002c9c <fest+0xd8>)
 8002bcc:	2364      	movs	r3, #100	; 0x64
 8002bce:	9310      	str	r3, [sp, #64]	; 0x40
 8002bd0:	466d      	mov	r5, sp
 8002bd2:	f106 0410 	add.w	r4, r6, #16
 8002bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002be2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002be6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002bea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002bee:	f000 f905 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo2, 120);	//Index
 8002bf2:	4e2b      	ldr	r6, [pc, #172]	; (8002ca0 <fest+0xdc>)
 8002bf4:	2378      	movs	r3, #120	; 0x78
 8002bf6:	9310      	str	r3, [sp, #64]	; 0x40
 8002bf8:	466d      	mov	r5, sp
 8002bfa:	f106 0410 	add.w	r4, r6, #16
 8002bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c0e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c12:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c16:	f000 f8f1 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo3, 170);	//Middle
 8002c1a:	4e22      	ldr	r6, [pc, #136]	; (8002ca4 <fest+0xe0>)
 8002c1c:	23aa      	movs	r3, #170	; 0xaa
 8002c1e:	9310      	str	r3, [sp, #64]	; 0x40
 8002c20:	466d      	mov	r5, sp
 8002c22:	f106 0410 	add.w	r4, r6, #16
 8002c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c3e:	f000 f8dd 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo4, 20);	//Ring
 8002c42:	4e19      	ldr	r6, [pc, #100]	; (8002ca8 <fest+0xe4>)
 8002c44:	2314      	movs	r3, #20
 8002c46:	9310      	str	r3, [sp, #64]	; 0x40
 8002c48:	466d      	mov	r5, sp
 8002c4a:	f106 0410 	add.w	r4, r6, #16
 8002c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c66:	f000 f8c9 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo5, 120);	//Pinky
 8002c6a:	4e10      	ldr	r6, [pc, #64]	; (8002cac <fest+0xe8>)
 8002c6c:	2378      	movs	r3, #120	; 0x78
 8002c6e:	9310      	str	r3, [sp, #64]	; 0x40
 8002c70:	466d      	mov	r5, sp
 8002c72:	f106 0410 	add.w	r4, r6, #16
 8002c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c82:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c86:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c8a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c8e:	f000 f8b5 	bl	8002dfc <Servo_void_SetAngle>
}
 8002c92:	bf00      	nop
 8002c94:	3704      	adds	r7, #4
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000099c 	.word	0x2000099c
 8002ca0:	200009ec 	.word	0x200009ec
 8002ca4:	20000a3c 	.word	0x20000a3c
 8002ca8:	20000a8c 	.word	0x20000a8c
 8002cac:	20000adc 	.word	0x20000adc

08002cb0 <rest>:
void rest(void)
{
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	b093      	sub	sp, #76	; 0x4c
 8002cb4:	af12      	add	r7, sp, #72	; 0x48
	Servo_void_SetAngle(Servo1, 150);	//Thumb
 8002cb6:	4e34      	ldr	r6, [pc, #208]	; (8002d88 <rest+0xd8>)
 8002cb8:	2396      	movs	r3, #150	; 0x96
 8002cba:	9310      	str	r3, [sp, #64]	; 0x40
 8002cbc:	466d      	mov	r5, sp
 8002cbe:	f106 0410 	add.w	r4, r6, #16
 8002cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cd2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cd6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002cda:	f000 f88f 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo2, 60);	//Index
 8002cde:	4e2b      	ldr	r6, [pc, #172]	; (8002d8c <rest+0xdc>)
 8002ce0:	233c      	movs	r3, #60	; 0x3c
 8002ce2:	9310      	str	r3, [sp, #64]	; 0x40
 8002ce4:	466d      	mov	r5, sp
 8002ce6:	f106 0410 	add.w	r4, r6, #16
 8002cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cfa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cfe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d02:	f000 f87b 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo3, 80);	//Middle
 8002d06:	4e22      	ldr	r6, [pc, #136]	; (8002d90 <rest+0xe0>)
 8002d08:	2350      	movs	r3, #80	; 0x50
 8002d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8002d0c:	466d      	mov	r5, sp
 8002d0e:	f106 0410 	add.w	r4, r6, #16
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d2a:	f000 f867 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo4, 80);	//Ring
 8002d2e:	4e19      	ldr	r6, [pc, #100]	; (8002d94 <rest+0xe4>)
 8002d30:	2350      	movs	r3, #80	; 0x50
 8002d32:	9310      	str	r3, [sp, #64]	; 0x40
 8002d34:	466d      	mov	r5, sp
 8002d36:	f106 0410 	add.w	r4, r6, #16
 8002d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d4a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d4e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d52:	f000 f853 	bl	8002dfc <Servo_void_SetAngle>
	Servo_void_SetAngle(Servo5, 70);	//Pinky
 8002d56:	4e10      	ldr	r6, [pc, #64]	; (8002d98 <rest+0xe8>)
 8002d58:	2346      	movs	r3, #70	; 0x46
 8002d5a:	9310      	str	r3, [sp, #64]	; 0x40
 8002d5c:	466d      	mov	r5, sp
 8002d5e:	f106 0410 	add.w	r4, r6, #16
 8002d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002d72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d76:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d7a:	f000 f83f 	bl	8002dfc <Servo_void_SetAngle>
}
 8002d7e:	bf00      	nop
 8002d80:	3704      	adds	r7, #4
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000099c 	.word	0x2000099c
 8002d8c:	200009ec 	.word	0x200009ec
 8002d90:	20000a3c 	.word	0x20000a3c
 8002d94:	20000a8c 	.word	0x20000a8c
 8002d98:	20000adc 	.word	0x20000adc

08002d9c <analogRead>:
 */

#include "sensor_readings.h"
ADC_HandleTypeDef* hadc_g; // hold the address from the argument of the function
uint32_t analogRead(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	// Get ADC value
	hadc_g = hadc;
 8002da4:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <analogRead+0x5c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
	uint32_t raw;

	if(HAL_ADC_Start(hadc_g) != HAL_OK)
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <analogRead+0x5c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd84 	bl	80038bc <HAL_ADC_Start>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <analogRead+0x22>
		Error_Handler();
 8002dba:	f7ff fd7b 	bl	80028b4 <Error_Handler>

	HAL_ADC_PollForConversion(hadc_g, HAL_MAX_DELAY);
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <analogRead+0x5c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fe4a 	bl	8003a60 <HAL_ADC_PollForConversion>

	if((HAL_ADC_GetState(hadc_g) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <analogRead+0x5c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 f93d 	bl	8004050 <HAL_ADC_GetState>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de0:	d105      	bne.n	8002dee <analogRead+0x52>
		raw = HAL_ADC_GetValue(hadc_g);
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <analogRead+0x5c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 ffd5 	bl	8003d96 <HAL_ADC_GetValue>
 8002dec:	60f8      	str	r0, [r7, #12]

	return raw;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000b2c 	.word	0x20000b2c

08002dfc <Servo_void_SetAngle>:
#include "servo.h"
#include "MAPPING.h"


void Servo_void_SetAngle(SERVO_t Copy_ServoMotor,uint32_t Copy_int32_Angle)
{
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af02      	add	r7, sp, #8
 8002e04:	f107 0c10 	add.w	ip, r7, #16
 8002e08:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t Local_int32_MappedValue;

	Local_int32_MappedValue = Mapping(SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_INPUT, SERVO_MAX_INPUT, SERVO_MIN_INPUT,Copy_int32_Angle);
 8002e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2319      	movs	r3, #25
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	237d      	movs	r3, #125	; 0x7d
 8002e16:	2219      	movs	r2, #25
 8002e18:	21b4      	movs	r1, #180	; 0xb4
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fe fb21 	bl	8001462 <Mapping>
 8002e20:	4603      	mov	r3, r0
 8002e22:	607b      	str	r3, [r7, #4]

	switch(Copy_ServoMotor.Pin)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d843      	bhi.n	8002eb2 <Servo_void_SetAngle+0xb6>
 8002e2a:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <Servo_void_SetAngle+0x34>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e45 	.word	0x08002e45
 8002e34:	08002e5b 	.word	0x08002e5b
 8002e38:	08002e71 	.word	0x08002e71
 8002e3c:	08002e87 	.word	0x08002e87
 8002e40:	08002e9d 	.word	0x08002e9d
	{
	case Servo_PA15 : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel1;break;
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <Servo_void_SetAngle+0xd4>)
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	2248      	movs	r2, #72	; 0x48
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f005 ff9c 	bl	8008d8c <memcpy>
 8002e54:	2300      	movs	r3, #0
 8002e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e58:	e02b      	b.n	8002eb2 <Servo_void_SetAngle+0xb6>
	case Servo_PB2  : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel4;break;
 8002e5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <Servo_void_SetAngle+0xd4>)
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4611      	mov	r1, r2
 8002e62:	2248      	movs	r2, #72	; 0x48
 8002e64:	4618      	mov	r0, r3
 8002e66:	f005 ff91 	bl	8008d8c <memcpy>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e6e:	e020      	b.n	8002eb2 <Servo_void_SetAngle+0xb6>
	case Servo_PB9  : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel2;break;
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <Servo_void_SetAngle+0xd4>)
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	4611      	mov	r1, r2
 8002e78:	2248      	movs	r2, #72	; 0x48
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f005 ff86 	bl	8008d8c <memcpy>
 8002e80:	2301      	movs	r3, #1
 8002e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e84:	e015      	b.n	8002eb2 <Servo_void_SetAngle+0xb6>
	case Servo_PB10 : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel3;break;
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <Servo_void_SetAngle+0xd4>)
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	2248      	movs	r2, #72	; 0x48
 8002e90:	4618      	mov	r0, r3
 8002e92:	f005 ff7b 	bl	8008d8c <memcpy>
 8002e96:	2302      	movs	r3, #2
 8002e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e9a:	e00a      	b.n	8002eb2 <Servo_void_SetAngle+0xb6>
	case Servo_PB14 : Copy_ServoMotor.htim = htim12; Copy_ServoMotor.Channel = PWM_Channel1;break;
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <Servo_void_SetAngle+0xd8>)
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	2248      	movs	r2, #72	; 0x48
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 ff70 	bl	8008d8c <memcpy>
 8002eac:	2300      	movs	r3, #0
 8002eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eb0:	bf00      	nop

	}
	PWM_int32SetPWMValue(Copy_ServoMotor.htim.Instance, Copy_ServoMotor.Channel, Local_int32_MappedValue);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe feb8 	bl	8001c30 <PWM_int32SetPWMValue>

}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eca:	b004      	add	sp, #16
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000b30 	.word	0x20000b30
 8002ed4:	20000c08 	.word	0x20000c08

08002ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_MspInit+0x4c>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <HAL_MspInit+0x4c>)
 8002ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eec:	6453      	str	r3, [r2, #68]	; 0x44
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_MspInit+0x4c>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <HAL_MspInit+0x4c>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <HAL_MspInit+0x4c>)
 8002f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f08:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_MspInit+0x4c>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002f16:	2007      	movs	r0, #7
 8002f18:	f001 fa7c 	bl	8004414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40023800 	.word	0x40023800

08002f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <NMI_Handler+0x4>

08002f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <HardFault_Handler+0x4>

08002f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <MemManage_Handler+0x4>

08002f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <BusFault_Handler+0x4>

08002f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f44:	e7fe      	b.n	8002f44 <UsageFault_Handler+0x4>

08002f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f74:	f000 fc1a 	bl	80037ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f80:	4805      	ldr	r0, [pc, #20]	; (8002f98 <ADC_IRQHandler+0x1c>)
 8002f82:	f000 fdf8 	bl	8003b76 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <ADC_IRQHandler+0x20>)
 8002f88:	f000 fdf5 	bl	8003b76 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <ADC_IRQHandler+0x24>)
 8002f8e:	f000 fdf2 	bl	8003b76 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200007bc 	.word	0x200007bc
 8002f9c:	20000804 	.word	0x20000804
 8002fa0:	2000084c 	.word	0x2000084c

08002fa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002faa:	f002 fc73 	bl	8005894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000b78 	.word	0x20000b78

08002fb8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002fbe:	f002 fc69 	bl	8005894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000bc0 	.word	0x20000bc0

08002fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <TIM2_IRQHandler+0x10>)
 8002fd2:	f002 fc5f 	bl	8005894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000b30 	.word	0x20000b30

08002fe0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002fe6:	f002 fc55 	bl	8005894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000c08 	.word	0x20000c08

08002ff4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002ffa:	f002 fc4b 	bl	8005894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000c50 	.word	0x20000c50

08003008 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800300e:	f002 fc41 	bl	8005894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000c98 	.word	0x20000c98

0800301c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <SystemInit+0x20>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <SystemInit+0x20>)
 8003028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800302c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08e      	sub	sp, #56	; 0x38
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003054:	f107 0320 	add.w	r3, r7, #32
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
 800306c:	615a      	str	r2, [r3, #20]
 800306e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003070:	4b3e      	ldr	r3, [pc, #248]	; (800316c <MX_TIM2_Init+0x12c>)
 8003072:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8003078:	4b3c      	ldr	r3, [pc, #240]	; (800316c <MX_TIM2_Init+0x12c>)
 800307a:	f240 3283 	movw	r2, #899	; 0x383
 800307e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003080:	4b3a      	ldr	r3, [pc, #232]	; (800316c <MX_TIM2_Init+0x12c>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <MX_TIM2_Init+0x12c>)
 8003088:	f240 32e7 	movw	r2, #999	; 0x3e7
 800308c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <MX_TIM2_Init+0x12c>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003094:	4b35      	ldr	r3, [pc, #212]	; (800316c <MX_TIM2_Init+0x12c>)
 8003096:	2200      	movs	r2, #0
 8003098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800309a:	4834      	ldr	r0, [pc, #208]	; (800316c <MX_TIM2_Init+0x12c>)
 800309c:	f002 fa18 	bl	80054d0 <HAL_TIM_Base_Init>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80030a6:	f7ff fc05 	bl	80028b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030b4:	4619      	mov	r1, r3
 80030b6:	482d      	ldr	r0, [pc, #180]	; (800316c <MX_TIM2_Init+0x12c>)
 80030b8:	f002 fdb6 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80030c2:	f7ff fbf7 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80030c6:	4829      	ldr	r0, [pc, #164]	; (800316c <MX_TIM2_Init+0x12c>)
 80030c8:	f002 fac2 	bl	8005650 <HAL_TIM_PWM_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80030d2:	f7ff fbef 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030de:	f107 0320 	add.w	r3, r7, #32
 80030e2:	4619      	mov	r1, r3
 80030e4:	4821      	ldr	r0, [pc, #132]	; (800316c <MX_TIM2_Init+0x12c>)
 80030e6:	f003 f99f 	bl	8006428 <HAL_TIMEx_MasterConfigSynchronization>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80030f0:	f7ff fbe0 	bl	80028b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030f4:	2360      	movs	r3, #96	; 0x60
 80030f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	2200      	movs	r2, #0
 8003108:	4619      	mov	r1, r3
 800310a:	4818      	ldr	r0, [pc, #96]	; (800316c <MX_TIM2_Init+0x12c>)
 800310c:	f002 fcca 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003116:	f7ff fbcd 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	2204      	movs	r2, #4
 800311e:	4619      	mov	r1, r3
 8003120:	4812      	ldr	r0, [pc, #72]	; (800316c <MX_TIM2_Init+0x12c>)
 8003122:	f002 fcbf 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800312c:	f7ff fbc2 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	2208      	movs	r2, #8
 8003134:	4619      	mov	r1, r3
 8003136:	480d      	ldr	r0, [pc, #52]	; (800316c <MX_TIM2_Init+0x12c>)
 8003138:	f002 fcb4 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8003142:	f7ff fbb7 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	220c      	movs	r2, #12
 800314a:	4619      	mov	r1, r3
 800314c:	4807      	ldr	r0, [pc, #28]	; (800316c <MX_TIM2_Init+0x12c>)
 800314e:	f002 fca9 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8003158:	f7ff fbac 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <MX_TIM2_Init+0x12c>)
 800315e:	f000 f9b7 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 8003162:	bf00      	nop
 8003164:	3738      	adds	r7, #56	; 0x38
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000b30 	.word	0x20000b30

08003170 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <MX_TIM10_Init+0x40>)
 8003176:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <MX_TIM10_Init+0x44>)
 8003178:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <MX_TIM10_Init+0x40>)
 800317c:	2200      	movs	r2, #0
 800317e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <MX_TIM10_Init+0x40>)
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003186:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <MX_TIM10_Init+0x40>)
 8003188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800318c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <MX_TIM10_Init+0x40>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <MX_TIM10_Init+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800319a:	4805      	ldr	r0, [pc, #20]	; (80031b0 <MX_TIM10_Init+0x40>)
 800319c:	f002 f998 	bl	80054d0 <HAL_TIM_Base_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80031a6:	f7ff fb85 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000b78 	.word	0x20000b78
 80031b4:	40014400 	.word	0x40014400

080031b8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <MX_TIM11_Init+0x40>)
 80031be:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <MX_TIM11_Init+0x44>)
 80031c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <MX_TIM11_Init+0x40>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <MX_TIM11_Init+0x40>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <MX_TIM11_Init+0x40>)
 80031d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <MX_TIM11_Init+0x40>)
 80031d8:	2200      	movs	r2, #0
 80031da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <MX_TIM11_Init+0x40>)
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80031e2:	4805      	ldr	r0, [pc, #20]	; (80031f8 <MX_TIM11_Init+0x40>)
 80031e4:	f002 f974 	bl	80054d0 <HAL_TIM_Base_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80031ee:	f7ff fb61 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000bc0 	.word	0x20000bc0
 80031fc:	40014800 	.word	0x40014800

08003200 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003206:	f107 0320 	add.w	r3, r7, #32
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	611a      	str	r2, [r3, #16]
 8003222:	615a      	str	r2, [r3, #20]
 8003224:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <MX_TIM12_Init+0xc0>)
 8003228:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <MX_TIM12_Init+0xc4>)
 800322a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 900-1;
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <MX_TIM12_Init+0xc0>)
 800322e:	f240 3283 	movw	r2, #899	; 0x383
 8003232:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003234:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <MX_TIM12_Init+0xc0>)
 8003236:	2200      	movs	r2, #0
 8003238:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 800323a:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <MX_TIM12_Init+0xc0>)
 800323c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003240:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <MX_TIM12_Init+0xc0>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <MX_TIM12_Init+0xc0>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800324e:	481c      	ldr	r0, [pc, #112]	; (80032c0 <MX_TIM12_Init+0xc0>)
 8003250:	f002 f93e 	bl	80054d0 <HAL_TIM_Base_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800325a:	f7ff fb2b 	bl	80028b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800325e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003262:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003264:	f107 0320 	add.w	r3, r7, #32
 8003268:	4619      	mov	r1, r3
 800326a:	4815      	ldr	r0, [pc, #84]	; (80032c0 <MX_TIM12_Init+0xc0>)
 800326c:	f002 fcdc 	bl	8005c28 <HAL_TIM_ConfigClockSource>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8003276:	f7ff fb1d 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800327a:	4811      	ldr	r0, [pc, #68]	; (80032c0 <MX_TIM12_Init+0xc0>)
 800327c:	f002 f9e8 	bl	8005650 <HAL_TIM_PWM_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8003286:	f7ff fb15 	bl	80028b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800328a:	2360      	movs	r3, #96	; 0x60
 800328c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2200      	movs	r2, #0
 800329e:	4619      	mov	r1, r3
 80032a0:	4807      	ldr	r0, [pc, #28]	; (80032c0 <MX_TIM12_Init+0xc0>)
 80032a2:	f002 fbff 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80032ac:	f7ff fb02 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80032b0:	4803      	ldr	r0, [pc, #12]	; (80032c0 <MX_TIM12_Init+0xc0>)
 80032b2:	f000 f90d 	bl	80034d0 <HAL_TIM_MspPostInit>

}
 80032b6:	bf00      	nop
 80032b8:	3730      	adds	r7, #48	; 0x30
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000c08 	.word	0x20000c08
 80032c4:	40001800 	.word	0x40001800

080032c8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <MX_TIM13_Init+0x40>)
 80032ce:	4a0f      	ldr	r2, [pc, #60]	; (800330c <MX_TIM13_Init+0x44>)
 80032d0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <MX_TIM13_Init+0x40>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <MX_TIM13_Init+0x40>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <MX_TIM13_Init+0x40>)
 80032e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <MX_TIM13_Init+0x40>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <MX_TIM13_Init+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80032f2:	4805      	ldr	r0, [pc, #20]	; (8003308 <MX_TIM13_Init+0x40>)
 80032f4:	f002 f8ec 	bl	80054d0 <HAL_TIM_Base_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80032fe:	f7ff fad9 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000c50 	.word	0x20000c50
 800330c:	40001c00 	.word	0x40001c00

08003310 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <MX_TIM14_Init+0x40>)
 8003316:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <MX_TIM14_Init+0x44>)
 8003318:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800331a:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <MX_TIM14_Init+0x40>)
 800331c:	2200      	movs	r2, #0
 800331e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <MX_TIM14_Init+0x40>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <MX_TIM14_Init+0x40>)
 8003328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800332e:	4b08      	ldr	r3, [pc, #32]	; (8003350 <MX_TIM14_Init+0x40>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <MX_TIM14_Init+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <MX_TIM14_Init+0x40>)
 800333c:	f002 f8c8 	bl	80054d0 <HAL_TIM_Base_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003346:	f7ff fab5 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000c98 	.word	0x20000c98
 8003354:	40002000 	.word	0x40002000

08003358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d116      	bne.n	8003398 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	4b52      	ldr	r3, [pc, #328]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a51      	ldr	r2, [pc, #324]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	201c      	movs	r0, #28
 800338c:	f001 f84d 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003390:	201c      	movs	r0, #28
 8003392:	f001 f866 	bl	8004462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8003396:	e08a      	b.n	80034ae <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM10)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a47      	ldr	r2, [pc, #284]	; (80034bc <HAL_TIM_Base_MspInit+0x164>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d116      	bne.n	80033d0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	4a43      	ldr	r2, [pc, #268]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	6453      	str	r3, [r2, #68]	; 0x44
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	2019      	movs	r0, #25
 80033c4:	f001 f831 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033c8:	2019      	movs	r0, #25
 80033ca:	f001 f84a 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 80033ce:	e06e      	b.n	80034ae <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a3a      	ldr	r2, [pc, #232]	; (80034c0 <HAL_TIM_Base_MspInit+0x168>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d116      	bne.n	8003408 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a35      	ldr	r2, [pc, #212]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 80033e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	201a      	movs	r0, #26
 80033fc:	f001 f815 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003400:	201a      	movs	r0, #26
 8003402:	f001 f82e 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 8003406:	e052      	b.n	80034ae <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM12)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <HAL_TIM_Base_MspInit+0x16c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d116      	bne.n	8003440 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 800341c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	202b      	movs	r0, #43	; 0x2b
 8003434:	f000 fff9 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003438:	202b      	movs	r0, #43	; 0x2b
 800343a:	f001 f812 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 800343e:	e036      	b.n	80034ae <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM13)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a20      	ldr	r2, [pc, #128]	; (80034c8 <HAL_TIM_Base_MspInit+0x170>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d116      	bne.n	8003478 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a19      	ldr	r2, [pc, #100]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	202c      	movs	r0, #44	; 0x2c
 800346c:	f000 ffdd 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003470:	202c      	movs	r0, #44	; 0x2c
 8003472:	f000 fff6 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 8003476:	e01a      	b.n	80034ae <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM14)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a13      	ldr	r2, [pc, #76]	; (80034cc <HAL_TIM_Base_MspInit+0x174>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d115      	bne.n	80034ae <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 800348c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003490:	6413      	str	r3, [r2, #64]	; 0x40
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_TIM_Base_MspInit+0x160>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	202d      	movs	r0, #45	; 0x2d
 80034a4:	f000 ffc1 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80034a8:	202d      	movs	r0, #45	; 0x2d
 80034aa:	f000 ffda 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 80034ae:	bf00      	nop
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40014400 	.word	0x40014400
 80034c0:	40014800 	.word	0x40014800
 80034c4:	40001800 	.word	0x40001800
 80034c8:	40001c00 	.word	0x40001c00
 80034cc:	40002000 	.word	0x40002000

080034d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f0:	d13e      	bne.n	8003570 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a31      	ldr	r2, [pc, #196]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a2a      	ldr	r2, [pc, #168]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_9;
 800352a:	f240 6304 	movw	r3, #1540	; 0x604
 800352e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800353c:	2301      	movs	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4619      	mov	r1, r3
 8003546:	481f      	ldr	r0, [pc, #124]	; (80035c4 <HAL_TIM_MspPostInit+0xf4>)
 8003548:	f000 ffc2 	bl	80044d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800354c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800355e:	2301      	movs	r3, #1
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	4817      	ldr	r0, [pc, #92]	; (80035c8 <HAL_TIM_MspPostInit+0xf8>)
 800356a:	f000 ffb1 	bl	80044d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800356e:	e023      	b.n	80035b8 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM12)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <HAL_TIM_MspPostInit+0xfc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d11e      	bne.n	80035b8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	6313      	str	r3, [r2, #48]	; 0x30
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_TIM_MspPostInit+0xf0>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003596:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800359a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a4:	2300      	movs	r3, #0
 80035a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80035a8:	2309      	movs	r3, #9
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4619      	mov	r1, r3
 80035b2:	4804      	ldr	r0, [pc, #16]	; (80035c4 <HAL_TIM_MspPostInit+0xf4>)
 80035b4:	f000 ff8c 	bl	80044d0 <HAL_GPIO_Init>
}
 80035b8:	bf00      	nop
 80035ba:	3728      	adds	r7, #40	; 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40020400 	.word	0x40020400
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40001800 	.word	0x40001800

080035d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <MX_USART2_UART_Init+0x4c>)
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <MX_USART2_UART_Init+0x50>)
 80035d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <MX_USART2_UART_Init+0x4c>)
 80035dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <MX_USART2_UART_Init+0x4c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <MX_USART2_UART_Init+0x4c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <MX_USART2_UART_Init+0x4c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <MX_USART2_UART_Init+0x4c>)
 80035f6:	220c      	movs	r2, #12
 80035f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <MX_USART2_UART_Init+0x4c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003600:	4b06      	ldr	r3, [pc, #24]	; (800361c <MX_USART2_UART_Init+0x4c>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003606:	4805      	ldr	r0, [pc, #20]	; (800361c <MX_USART2_UART_Init+0x4c>)
 8003608:	f002 ff9e 	bl	8006548 <HAL_UART_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003612:	f7ff f94f 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000ce0 	.word	0x20000ce0
 8003620:	40004400 	.word	0x40004400

08003624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362c:	f107 0314 	add.w	r3, r7, #20
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <HAL_UART_MspInit+0x84>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d12b      	bne.n	800369e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <HAL_UART_MspInit+0x88>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a17      	ldr	r2, [pc, #92]	; (80036ac <HAL_UART_MspInit+0x88>)
 8003650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <HAL_UART_MspInit+0x88>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_UART_MspInit+0x88>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a10      	ldr	r2, [pc, #64]	; (80036ac <HAL_UART_MspInit+0x88>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <HAL_UART_MspInit+0x88>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800367e:	230c      	movs	r3, #12
 8003680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368a:	2303      	movs	r3, #3
 800368c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800368e:	2307      	movs	r3, #7
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003692:	f107 0314 	add.w	r3, r7, #20
 8003696:	4619      	mov	r1, r3
 8003698:	4805      	ldr	r0, [pc, #20]	; (80036b0 <HAL_UART_MspInit+0x8c>)
 800369a:	f000 ff19 	bl	80044d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800369e:	bf00      	nop
 80036a0:	3728      	adds	r7, #40	; 0x28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40004400 	.word	0x40004400
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40020000 	.word	0x40020000

080036b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036b8:	480d      	ldr	r0, [pc, #52]	; (80036f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036ba:	490e      	ldr	r1, [pc, #56]	; (80036f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036bc:	4a0e      	ldr	r2, [pc, #56]	; (80036f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c0:	e002      	b.n	80036c8 <LoopCopyDataInit>

080036c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c6:	3304      	adds	r3, #4

080036c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036cc:	d3f9      	bcc.n	80036c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ce:	4a0b      	ldr	r2, [pc, #44]	; (80036fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036d0:	4c0b      	ldr	r4, [pc, #44]	; (8003700 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d4:	e001      	b.n	80036da <LoopFillZerobss>

080036d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d8:	3204      	adds	r2, #4

080036da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036dc:	d3fb      	bcc.n	80036d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036de:	f7ff fc9d 	bl	800301c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036e2:	f005 fb2f 	bl	8008d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036e6:	f7fe fddf 	bl	80022a8 <main>
  bx  lr    
 80036ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f4:	2000079c 	.word	0x2000079c
  ldr r2, =_sidata
 80036f8:	0800b600 	.word	0x0800b600
  ldr r2, =_sbss
 80036fc:	200007a0 	.word	0x200007a0
  ldr r4, =_ebss
 8003700:	20000dbc 	.word	0x20000dbc

08003704 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003704:	e7fe      	b.n	8003704 <CAN1_RX0_IRQHandler>
	...

08003708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800370c:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_Init+0x40>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <HAL_Init+0x40>)
 8003712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_Init+0x40>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <HAL_Init+0x40>)
 800371e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_Init+0x40>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a07      	ldr	r2, [pc, #28]	; (8003748 <HAL_Init+0x40>)
 800372a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003730:	2003      	movs	r0, #3
 8003732:	f000 fe6f 	bl	8004414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003736:	2000      	movs	r0, #0
 8003738:	f000 f808 	bl	800374c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800373c:	f7ff fbcc 	bl	8002ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023c00 	.word	0x40023c00

0800374c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003754:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_InitTick+0x54>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_InitTick+0x58>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003762:	fbb3 f3f1 	udiv	r3, r3, r1
 8003766:	fbb2 f3f3 	udiv	r3, r2, r3
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fe87 	bl	800447e <HAL_SYSTICK_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e00e      	b.n	8003798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b0f      	cmp	r3, #15
 800377e:	d80a      	bhi.n	8003796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003780:	2200      	movs	r2, #0
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	f000 fe4f 	bl	800442a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800378c:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <HAL_InitTick+0x5c>)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
}
 8003798:	4618      	mov	r0, r3
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000000 	.word	0x20000000
 80037a4:	20000008 	.word	0x20000008
 80037a8:	20000004 	.word	0x20000004

080037ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_IncTick+0x20>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_IncTick+0x24>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4413      	add	r3, r2
 80037bc:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <HAL_IncTick+0x24>)
 80037be:	6013      	str	r3, [r2, #0]
}
 80037c0:	bf00      	nop
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000008 	.word	0x20000008
 80037d0:	20000d24 	.word	0x20000d24

080037d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return uwTick;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_GetTick+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000d24 	.word	0x20000d24

080037ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037f4:	f7ff ffee 	bl	80037d4 <HAL_GetTick>
 80037f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d005      	beq.n	8003812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_Delay+0x44>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003812:	bf00      	nop
 8003814:	f7ff ffde 	bl	80037d4 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	429a      	cmp	r2, r3
 8003822:	d8f7      	bhi.n	8003814 <HAL_Delay+0x28>
  {
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000008 	.word	0x20000008

08003834 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e033      	b.n	80038b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe fb34 	bl	8001ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800387a:	f023 0302 	bic.w	r3, r3, #2
 800387e:	f043 0202 	orr.w	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fbee 	bl	8004068 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
 80038a2:	e001      	b.n	80038a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_Start+0x1a>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e0b2      	b.n	8003a3c <HAL_ADC_Start+0x180>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d018      	beq.n	800391e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80038fc:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <HAL_ADC_Start+0x18c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a52      	ldr	r2, [pc, #328]	; (8003a4c <HAL_ADC_Start+0x190>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0c9a      	lsrs	r2, r3, #18
 8003908:	4613      	mov	r3, r2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	4413      	add	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003910:	e002      	b.n	8003918 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	3b01      	subs	r3, #1
 8003916:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f9      	bne.n	8003912 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d17a      	bne.n	8003a22 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003956:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396a:	d106      	bne.n	800397a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f023 0206 	bic.w	r2, r3, #6
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
 8003978:	e002      	b.n	8003980 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_ADC_Start+0x194>)
 800398a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003994:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d12a      	bne.n	80039f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <HAL_ADC_Start+0x198>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d015      	beq.n	80039d8 <HAL_ADC_Start+0x11c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <HAL_ADC_Start+0x19c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d105      	bne.n	80039c2 <HAL_ADC_Start+0x106>
 80039b6:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_ADC_Start+0x194>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <HAL_ADC_Start+0x1a0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d136      	bne.n	8003a3a <HAL_ADC_Start+0x17e>
 80039cc:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_ADC_Start+0x194>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d130      	bne.n	8003a3a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d129      	bne.n	8003a3a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	e020      	b.n	8003a3a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <HAL_ADC_Start+0x198>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d11b      	bne.n	8003a3a <HAL_ADC_Start+0x17e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d114      	bne.n	8003a3a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	e00b      	b.n	8003a3a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f043 0210 	orr.w	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	431bde83 	.word	0x431bde83
 8003a50:	40012300 	.word	0x40012300
 8003a54:	40012000 	.word	0x40012000
 8003a58:	40012100 	.word	0x40012100
 8003a5c:	40012200 	.word	0x40012200

08003a60 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7c:	d113      	bne.n	8003aa6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e063      	b.n	8003b6e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003aa6:	f7ff fe95 	bl	80037d4 <HAL_GetTick>
 8003aaa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003aac:	e021      	b.n	8003af2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d01d      	beq.n	8003af2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_ADC_PollForConversion+0x6c>
 8003abc:	f7ff fe8a 	bl	80037d4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d212      	bcs.n	8003af2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d00b      	beq.n	8003af2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e03d      	b.n	8003b6e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d1d6      	bne.n	8003aae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0212 	mvn.w	r2, #18
 8003b08:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d123      	bne.n	8003b6c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11f      	bne.n	8003b6c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d111      	bne.n	8003b6c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d049      	beq.n	8003c40 <HAL_ADC_IRQHandler+0xca>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d046      	beq.n	8003c40 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d12b      	bne.n	8003c30 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d127      	bne.n	8003c30 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d119      	bne.n	8003c30 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0220 	bic.w	r2, r2, #32
 8003c0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d105      	bne.n	8003c30 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0201 	orr.w	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8bd 	bl	8003db0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f06f 0212 	mvn.w	r2, #18
 8003c3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d057      	beq.n	8003d06 <HAL_ADC_IRQHandler+0x190>
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d054      	beq.n	8003d06 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d139      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d006      	beq.n	8003c9e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d12b      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d124      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11d      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d119      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fab2 	bl	8004260 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 020c 	mvn.w	r2, #12
 8003d04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d017      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x1d6>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d014      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d10d      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f841 	bl	8003dc4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f06f 0201 	mvn.w	r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d5a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d015      	beq.n	8003d8e <HAL_ADC_IRQHandler+0x218>
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f043 0202 	orr.w	r2, r3, #2
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0220 	mvn.w	r2, #32
 8003d7c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f82a 	bl	8003dd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0220 	mvn.w	r2, #32
 8003d8c:	601a      	str	r2, [r3, #0]
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x1c>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e113      	b.n	8004030 <HAL_ADC_ConfigChannel+0x244>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b09      	cmp	r3, #9
 8003e16:	d925      	bls.n	8003e64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68d9      	ldr	r1, [r3, #12]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3b1e      	subs	r3, #30
 8003e2e:	2207      	movs	r2, #7
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43da      	mvns	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68d9      	ldr	r1, [r3, #12]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	4618      	mov	r0, r3
 8003e50:	4603      	mov	r3, r0
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4403      	add	r3, r0
 8003e56:	3b1e      	subs	r3, #30
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	60da      	str	r2, [r3, #12]
 8003e62:	e022      	b.n	8003eaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6919      	ldr	r1, [r3, #16]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	2207      	movs	r2, #7
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	400a      	ands	r2, r1
 8003e86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6919      	ldr	r1, [r3, #16]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	4618      	mov	r0, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4403      	add	r3, r0
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d824      	bhi.n	8003efc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3b05      	subs	r3, #5
 8003ec4:	221f      	movs	r2, #31
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	400a      	ands	r2, r1
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	3b05      	subs	r3, #5
 8003eee:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8003efa:	e04c      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	d824      	bhi.n	8003f4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	3b23      	subs	r3, #35	; 0x23
 8003f16:	221f      	movs	r2, #31
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	400a      	ands	r2, r1
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	4618      	mov	r0, r3
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3b23      	subs	r3, #35	; 0x23
 8003f40:	fa00 f203 	lsl.w	r2, r0, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f4c:	e023      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3b41      	subs	r3, #65	; 0x41
 8003f60:	221f      	movs	r2, #31
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43da      	mvns	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	3b41      	subs	r3, #65	; 0x41
 8003f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f96:	4b29      	ldr	r3, [pc, #164]	; (800403c <HAL_ADC_ConfigChannel+0x250>)
 8003f98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a28      	ldr	r2, [pc, #160]	; (8004040 <HAL_ADC_ConfigChannel+0x254>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x1d8>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b12      	cmp	r3, #18
 8003faa:	d10b      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	; (8004040 <HAL_ADC_ConfigChannel+0x254>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d12b      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x23a>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <HAL_ADC_ConfigChannel+0x258>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <HAL_ADC_ConfigChannel+0x1f4>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b11      	cmp	r3, #17
 8003fde:	d122      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a11      	ldr	r2, [pc, #68]	; (8004044 <HAL_ADC_ConfigChannel+0x258>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d111      	bne.n	8004026 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_ADC_ConfigChannel+0x25c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a11      	ldr	r2, [pc, #68]	; (800404c <HAL_ADC_ConfigChannel+0x260>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	0c9a      	lsrs	r2, r3, #18
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004018:	e002      	b.n	8004020 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3b01      	subs	r3, #1
 800401e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f9      	bne.n	800401a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40012300 	.word	0x40012300
 8004040:	40012000 	.word	0x40012000
 8004044:	10000012 	.word	0x10000012
 8004048:	20000000 	.word	0x20000000
 800404c:	431bde83 	.word	0x431bde83

08004050 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004070:	4b79      	ldr	r3, [pc, #484]	; (8004258 <ADC_Init+0x1f0>)
 8004072:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	431a      	orrs	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800409c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	021a      	lsls	r2, r3, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80040c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6899      	ldr	r1, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fa:	4a58      	ldr	r2, [pc, #352]	; (800425c <ADC_Init+0x1f4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800410e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6899      	ldr	r1, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6899      	ldr	r1, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	e00f      	b.n	8004166 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004164:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0202 	bic.w	r2, r2, #2
 8004174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6899      	ldr	r1, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7e1b      	ldrb	r3, [r3, #24]
 8004180:	005a      	lsls	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6859      	ldr	r1, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	3b01      	subs	r3, #1
 80041c0:	035a      	lsls	r2, r3, #13
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	e007      	b.n	80041dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	051a      	lsls	r2, r3, #20
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6899      	ldr	r1, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800421e:	025a      	lsls	r2, r3, #9
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6899      	ldr	r1, [r3, #8]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	029a      	lsls	r2, r3, #10
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40012300 	.word	0x40012300
 800425c:	0f000001 	.word	0x0f000001

08004260 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800429c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042a6:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	60d3      	str	r3, [r2, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <__NVIC_GetPriorityGrouping+0x18>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	f003 0307 	and.w	r3, r3, #7
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	db0b      	blt.n	8004302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	f003 021f 	and.w	r2, r3, #31
 80042f0:	4907      	ldr	r1, [pc, #28]	; (8004310 <__NVIC_EnableIRQ+0x38>)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2001      	movs	r0, #1
 80042fa:	fa00 f202 	lsl.w	r2, r0, r2
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000e100 	.word	0xe000e100

08004314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db0a      	blt.n	800433e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	490c      	ldr	r1, [pc, #48]	; (8004360 <__NVIC_SetPriority+0x4c>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	440b      	add	r3, r1
 8004338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800433c:	e00a      	b.n	8004354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4908      	ldr	r1, [pc, #32]	; (8004364 <__NVIC_SetPriority+0x50>)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	3b04      	subs	r3, #4
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	440b      	add	r3, r1
 8004352:	761a      	strb	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000e100 	.word	0xe000e100
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f1c3 0307 	rsb	r3, r3, #7
 8004382:	2b04      	cmp	r3, #4
 8004384:	bf28      	it	cs
 8004386:	2304      	movcs	r3, #4
 8004388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3304      	adds	r3, #4
 800438e:	2b06      	cmp	r3, #6
 8004390:	d902      	bls.n	8004398 <NVIC_EncodePriority+0x30>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3b03      	subs	r3, #3
 8004396:	e000      	b.n	800439a <NVIC_EncodePriority+0x32>
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	f04f 32ff 	mov.w	r2, #4294967295
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	401a      	ands	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b0:	f04f 31ff 	mov.w	r1, #4294967295
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	43d9      	mvns	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	4313      	orrs	r3, r2
         );
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e0:	d301      	bcc.n	80043e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043e2:	2301      	movs	r3, #1
 80043e4:	e00f      	b.n	8004406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <SysTick_Config+0x40>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ee:	210f      	movs	r1, #15
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	f7ff ff8e 	bl	8004314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <SysTick_Config+0x40>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <SysTick_Config+0x40>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010

08004414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff29 	bl	8004274 <__NVIC_SetPriorityGrouping>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800443c:	f7ff ff3e 	bl	80042bc <__NVIC_GetPriorityGrouping>
 8004440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	6978      	ldr	r0, [r7, #20]
 8004448:	f7ff ff8e 	bl	8004368 <NVIC_EncodePriority>
 800444c:	4602      	mov	r2, r0
 800444e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff5d 	bl	8004314 <__NVIC_SetPriority>
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800446c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff31 	bl	80042d8 <__NVIC_EnableIRQ>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ffa2 	bl	80043d0 <SysTick_Config>
 800448c:	4603      	mov	r3, r0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b082      	sub	sp, #8
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e00e      	b.n	80044c6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	795b      	ldrb	r3, [r3, #5]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d105      	bne.n	80044be <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fd fdd3 	bl	8002064 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b089      	sub	sp, #36	; 0x24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e165      	b.n	80047b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044ec:	2201      	movs	r2, #1
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	429a      	cmp	r2, r3
 8004506:	f040 8154 	bne.w	80047b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d005      	beq.n	8004522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800451e:	2b02      	cmp	r3, #2
 8004520:	d130      	bne.n	8004584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004558:	2201      	movs	r2, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 0201 	and.w	r2, r3, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b03      	cmp	r3, #3
 800458e:	d017      	beq.n	80045c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	2203      	movs	r2, #3
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d123      	bne.n	8004614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	08da      	lsrs	r2, r3, #3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3208      	adds	r2, #8
 80045d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	220f      	movs	r2, #15
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	08da      	lsrs	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3208      	adds	r2, #8
 800460e:	69b9      	ldr	r1, [r7, #24]
 8004610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2203      	movs	r2, #3
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0203 	and.w	r2, r3, #3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80ae 	beq.w	80047b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <HAL_GPIO_Init+0x300>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	4a5c      	ldr	r2, [pc, #368]	; (80047d0 <HAL_GPIO_Init+0x300>)
 8004660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004664:	6453      	str	r3, [r2, #68]	; 0x44
 8004666:	4b5a      	ldr	r3, [pc, #360]	; (80047d0 <HAL_GPIO_Init+0x300>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004672:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <HAL_GPIO_Init+0x304>)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	089b      	lsrs	r3, r3, #2
 8004678:	3302      	adds	r3, #2
 800467a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	220f      	movs	r2, #15
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4013      	ands	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4f      	ldr	r2, [pc, #316]	; (80047d8 <HAL_GPIO_Init+0x308>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d025      	beq.n	80046ea <HAL_GPIO_Init+0x21a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4e      	ldr	r2, [pc, #312]	; (80047dc <HAL_GPIO_Init+0x30c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01f      	beq.n	80046e6 <HAL_GPIO_Init+0x216>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a4d      	ldr	r2, [pc, #308]	; (80047e0 <HAL_GPIO_Init+0x310>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d019      	beq.n	80046e2 <HAL_GPIO_Init+0x212>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a4c      	ldr	r2, [pc, #304]	; (80047e4 <HAL_GPIO_Init+0x314>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_GPIO_Init+0x20e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a4b      	ldr	r2, [pc, #300]	; (80047e8 <HAL_GPIO_Init+0x318>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00d      	beq.n	80046da <HAL_GPIO_Init+0x20a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a4a      	ldr	r2, [pc, #296]	; (80047ec <HAL_GPIO_Init+0x31c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <HAL_GPIO_Init+0x206>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a49      	ldr	r2, [pc, #292]	; (80047f0 <HAL_GPIO_Init+0x320>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_GPIO_Init+0x202>
 80046ce:	2306      	movs	r3, #6
 80046d0:	e00c      	b.n	80046ec <HAL_GPIO_Init+0x21c>
 80046d2:	2307      	movs	r3, #7
 80046d4:	e00a      	b.n	80046ec <HAL_GPIO_Init+0x21c>
 80046d6:	2305      	movs	r3, #5
 80046d8:	e008      	b.n	80046ec <HAL_GPIO_Init+0x21c>
 80046da:	2304      	movs	r3, #4
 80046dc:	e006      	b.n	80046ec <HAL_GPIO_Init+0x21c>
 80046de:	2303      	movs	r3, #3
 80046e0:	e004      	b.n	80046ec <HAL_GPIO_Init+0x21c>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e002      	b.n	80046ec <HAL_GPIO_Init+0x21c>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_GPIO_Init+0x21c>
 80046ea:	2300      	movs	r3, #0
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	f002 0203 	and.w	r2, r2, #3
 80046f2:	0092      	lsls	r2, r2, #2
 80046f4:	4093      	lsls	r3, r2
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046fc:	4935      	ldr	r1, [pc, #212]	; (80047d4 <HAL_GPIO_Init+0x304>)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	089b      	lsrs	r3, r3, #2
 8004702:	3302      	adds	r3, #2
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800470a:	4b3a      	ldr	r3, [pc, #232]	; (80047f4 <HAL_GPIO_Init+0x324>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	43db      	mvns	r3, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4013      	ands	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800472e:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <HAL_GPIO_Init+0x324>)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004734:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <HAL_GPIO_Init+0x324>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004758:	4a26      	ldr	r2, [pc, #152]	; (80047f4 <HAL_GPIO_Init+0x324>)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800475e:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <HAL_GPIO_Init+0x324>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	43db      	mvns	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004782:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <HAL_GPIO_Init+0x324>)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_GPIO_Init+0x324>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047ac:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <HAL_GPIO_Init+0x324>)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	3301      	adds	r3, #1
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	f67f ae96 	bls.w	80044ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	3724      	adds	r7, #36	; 0x24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40013800 	.word	0x40013800
 80047d8:	40020000 	.word	0x40020000
 80047dc:	40020400 	.word	0x40020400
 80047e0:	40020800 	.word	0x40020800
 80047e4:	40020c00 	.word	0x40020c00
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40021400 	.word	0x40021400
 80047f0:	40021800 	.word	0x40021800
 80047f4:	40013c00 	.word	0x40013c00

080047f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	807b      	strh	r3, [r7, #2]
 8004804:	4613      	mov	r3, r2
 8004806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004808:	787b      	ldrb	r3, [r7, #1]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004814:	e003      	b.n	800481e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	041a      	lsls	r2, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	619a      	str	r2, [r3, #24]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800483c:	887a      	ldrh	r2, [r7, #2]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	041a      	lsls	r2, r3, #16
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	43d9      	mvns	r1, r3
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	400b      	ands	r3, r1
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	619a      	str	r2, [r3, #24]
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	603b      	str	r3, [r7, #0]
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004886:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800488c:	f7fe ffa2 	bl	80037d4 <HAL_GetTick>
 8004890:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004892:	e009      	b.n	80048a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004894:	f7fe ff9e 	bl	80037d4 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048a2:	d901      	bls.n	80048a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e01f      	b.n	80048e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b4:	d1ee      	bne.n	8004894 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048b6:	4b11      	ldr	r3, [pc, #68]	; (80048fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048bc:	f7fe ff8a 	bl	80037d4 <HAL_GetTick>
 80048c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048c2:	e009      	b.n	80048d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048c4:	f7fe ff86 	bl	80037d4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d2:	d901      	bls.n	80048d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e007      	b.n	80048e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048d8:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048e4:	d1ee      	bne.n	80048c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	420e0040 	.word	0x420e0040
 80048f8:	40007000 	.word	0x40007000
 80048fc:	420e0044 	.word	0x420e0044

08004900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0cc      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004914:	4b68      	ldr	r3, [pc, #416]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d90c      	bls.n	800493c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b65      	ldr	r3, [pc, #404]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b63      	ldr	r3, [pc, #396]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0b8      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d020      	beq.n	800498a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004954:	4b59      	ldr	r3, [pc, #356]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a58      	ldr	r2, [pc, #352]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800495e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800496c:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4a52      	ldr	r2, [pc, #328]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004978:	4b50      	ldr	r3, [pc, #320]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	494d      	ldr	r1, [pc, #308]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d044      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d107      	bne.n	80049ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d119      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e07f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d003      	beq.n	80049be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d107      	bne.n	80049ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049be:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e06f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e067      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049de:	4b37      	ldr	r3, [pc, #220]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 0203 	bic.w	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4934      	ldr	r1, [pc, #208]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f0:	f7fe fef0 	bl	80037d4 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fe feec 	bl	80037d4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e04f      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 020c 	and.w	r2, r3, #12
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d1eb      	bne.n	80049f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d20c      	bcs.n	8004a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e032      	b.n	8004aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4916      	ldr	r1, [pc, #88]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	490e      	ldr	r1, [pc, #56]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a86:	f000 f855 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	490a      	ldr	r1, [pc, #40]	; (8004ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	5ccb      	ldrb	r3, [r1, r3]
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe fe50 	bl	800374c <HAL_InitTick>

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40023c00 	.word	0x40023c00
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	0800ae90 	.word	0x0800ae90
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	20000004 	.word	0x20000004

08004acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad0:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000000 	.word	0x20000000

08004ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae8:	f7ff fff0 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	0a9b      	lsrs	r3, r3, #10
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	4903      	ldr	r1, [pc, #12]	; (8004b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afa:	5ccb      	ldrb	r3, [r1, r3]
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	0800aea0 	.word	0x0800aea0

08004b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b10:	f7ff ffdc 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	0b5b      	lsrs	r3, r3, #13
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4903      	ldr	r1, [pc, #12]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b22:	5ccb      	ldrb	r3, [r1, r3]
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	0800aea0 	.word	0x0800aea0

08004b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b38:	b0ae      	sub	sp, #184	; 0xb8
 8004b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b5a:	4bcb      	ldr	r3, [pc, #812]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	f200 8206 	bhi.w	8004f74 <HAL_RCC_GetSysClockFreq+0x440>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004f75 	.word	0x08004f75
 8004b78:	08004f75 	.word	0x08004f75
 8004b7c:	08004f75 	.word	0x08004f75
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004f75 	.word	0x08004f75
 8004b88:	08004f75 	.word	0x08004f75
 8004b8c:	08004f75 	.word	0x08004f75
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004f75 	.word	0x08004f75
 8004b98:	08004f75 	.word	0x08004f75
 8004b9c:	08004f75 	.word	0x08004f75
 8004ba0:	08004da5 	.word	0x08004da5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4bb9      	ldr	r3, [pc, #740]	; (8004e8c <HAL_RCC_GetSysClockFreq+0x358>)
 8004ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004baa:	e1e7      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bac:	4bb8      	ldr	r3, [pc, #736]	; (8004e90 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bb2:	e1e3      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb4:	4bb4      	ldr	r3, [pc, #720]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc0:	4bb1      	ldr	r3, [pc, #708]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d071      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bcc:	4bae      	ldr	r3, [pc, #696]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bf2:	4622      	mov	r2, r4
 8004bf4:	462b      	mov	r3, r5
 8004bf6:	f04f 0000 	mov.w	r0, #0
 8004bfa:	f04f 0100 	mov.w	r1, #0
 8004bfe:	0159      	lsls	r1, r3, #5
 8004c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c04:	0150      	lsls	r0, r2, #5
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	1a51      	subs	r1, r2, r1
 8004c0e:	6439      	str	r1, [r7, #64]	; 0x40
 8004c10:	4629      	mov	r1, r5
 8004c12:	eb63 0301 	sbc.w	r3, r3, r1
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c24:	4649      	mov	r1, r9
 8004c26:	018b      	lsls	r3, r1, #6
 8004c28:	4641      	mov	r1, r8
 8004c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c2e:	4641      	mov	r1, r8
 8004c30:	018a      	lsls	r2, r1, #6
 8004c32:	4641      	mov	r1, r8
 8004c34:	1a51      	subs	r1, r2, r1
 8004c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c38:	4649      	mov	r1, r9
 8004c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	00cb      	lsls	r3, r1, #3
 8004c50:	4641      	mov	r1, r8
 8004c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c56:	4641      	mov	r1, r8
 8004c58:	00ca      	lsls	r2, r1, #3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4622      	mov	r2, r4
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
 8004c66:	462b      	mov	r3, r5
 8004c68:	460a      	mov	r2, r1
 8004c6a:	eb42 0303 	adc.w	r3, r2, r3
 8004c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	024b      	lsls	r3, r1, #9
 8004c80:	4621      	mov	r1, r4
 8004c82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c86:	4621      	mov	r1, r4
 8004c88:	024a      	lsls	r2, r1, #9
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004ca0:	f7fb ff6e 	bl	8000b80 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cae:	e067      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb0:	4b75      	ldr	r3, [pc, #468]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cbc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cca:	2300      	movs	r3, #0
 8004ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	f04f 0000 	mov.w	r0, #0
 8004cda:	f04f 0100 	mov.w	r1, #0
 8004cde:	0159      	lsls	r1, r3, #5
 8004ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ce4:	0150      	lsls	r0, r2, #5
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4621      	mov	r1, r4
 8004cec:	1a51      	subs	r1, r2, r1
 8004cee:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004d04:	4649      	mov	r1, r9
 8004d06:	018b      	lsls	r3, r1, #6
 8004d08:	4641      	mov	r1, r8
 8004d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d0e:	4641      	mov	r1, r8
 8004d10:	018a      	lsls	r2, r1, #6
 8004d12:	4641      	mov	r1, r8
 8004d14:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d18:	4649      	mov	r1, r9
 8004d1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d32:	4692      	mov	sl, r2
 8004d34:	469b      	mov	fp, r3
 8004d36:	4623      	mov	r3, r4
 8004d38:	eb1a 0303 	adds.w	r3, sl, r3
 8004d3c:	623b      	str	r3, [r7, #32]
 8004d3e:	462b      	mov	r3, r5
 8004d40:	eb4b 0303 	adc.w	r3, fp, r3
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d52:	4629      	mov	r1, r5
 8004d54:	028b      	lsls	r3, r1, #10
 8004d56:	4621      	mov	r1, r4
 8004d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	028a      	lsls	r2, r1, #10
 8004d60:	4610      	mov	r0, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d68:	2200      	movs	r2, #0
 8004d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d6c:	677a      	str	r2, [r7, #116]	; 0x74
 8004d6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004d72:	f7fb ff05 	bl	8000b80 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d80:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004d92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004da2:	e0eb      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da4:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db0:	4b35      	ldr	r3, [pc, #212]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d06b      	beq.n	8004e94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dbc:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	099b      	lsrs	r3, r3, #6
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	663b      	str	r3, [r7, #96]	; 0x60
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	667b      	str	r3, [r7, #100]	; 0x64
 8004dd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004dd8:	4622      	mov	r2, r4
 8004dda:	462b      	mov	r3, r5
 8004ddc:	f04f 0000 	mov.w	r0, #0
 8004de0:	f04f 0100 	mov.w	r1, #0
 8004de4:	0159      	lsls	r1, r3, #5
 8004de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dea:	0150      	lsls	r0, r2, #5
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4621      	mov	r1, r4
 8004df2:	1a51      	subs	r1, r2, r1
 8004df4:	61b9      	str	r1, [r7, #24]
 8004df6:	4629      	mov	r1, r5
 8004df8:	eb63 0301 	sbc.w	r3, r3, r1
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	f04f 0200 	mov.w	r2, #0
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e0a:	4659      	mov	r1, fp
 8004e0c:	018b      	lsls	r3, r1, #6
 8004e0e:	4651      	mov	r1, sl
 8004e10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e14:	4651      	mov	r1, sl
 8004e16:	018a      	lsls	r2, r1, #6
 8004e18:	4651      	mov	r1, sl
 8004e1a:	ebb2 0801 	subs.w	r8, r2, r1
 8004e1e:	4659      	mov	r1, fp
 8004e20:	eb63 0901 	sbc.w	r9, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e38:	4690      	mov	r8, r2
 8004e3a:	4699      	mov	r9, r3
 8004e3c:	4623      	mov	r3, r4
 8004e3e:	eb18 0303 	adds.w	r3, r8, r3
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	462b      	mov	r3, r5
 8004e46:	eb49 0303 	adc.w	r3, r9, r3
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e58:	4629      	mov	r1, r5
 8004e5a:	024b      	lsls	r3, r1, #9
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e62:	4621      	mov	r1, r4
 8004e64:	024a      	lsls	r2, r1, #9
 8004e66:	4610      	mov	r0, r2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e6e:	2200      	movs	r2, #0
 8004e70:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004e74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e78:	f7fb fe82 	bl	8000b80 <__aeabi_uldivmod>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4613      	mov	r3, r2
 8004e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e86:	e065      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x420>
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	00f42400 	.word	0x00f42400
 8004e90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e94:	4b3d      	ldr	r3, [pc, #244]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ea4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	657b      	str	r3, [r7, #84]	; 0x54
 8004eaa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004eae:	4642      	mov	r2, r8
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f04f 0100 	mov.w	r1, #0
 8004eba:	0159      	lsls	r1, r3, #5
 8004ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ec0:	0150      	lsls	r0, r2, #5
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4641      	mov	r1, r8
 8004ec8:	1a51      	subs	r1, r2, r1
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	4649      	mov	r1, r9
 8004ece:	eb63 0301 	sbc.w	r3, r3, r1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	018b      	lsls	r3, r1, #6
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eea:	4651      	mov	r1, sl
 8004eec:	018a      	lsls	r2, r1, #6
 8004eee:	4651      	mov	r1, sl
 8004ef0:	1a54      	subs	r4, r2, r1
 8004ef2:	4659      	mov	r1, fp
 8004ef4:	eb63 0501 	sbc.w	r5, r3, r1
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	00eb      	lsls	r3, r5, #3
 8004f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f06:	00e2      	lsls	r2, r4, #3
 8004f08:	4614      	mov	r4, r2
 8004f0a:	461d      	mov	r5, r3
 8004f0c:	4643      	mov	r3, r8
 8004f0e:	18e3      	adds	r3, r4, r3
 8004f10:	603b      	str	r3, [r7, #0]
 8004f12:	464b      	mov	r3, r9
 8004f14:	eb45 0303 	adc.w	r3, r5, r3
 8004f18:	607b      	str	r3, [r7, #4]
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f26:	4629      	mov	r1, r5
 8004f28:	028b      	lsls	r3, r1, #10
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f30:	4621      	mov	r1, r4
 8004f32:	028a      	lsls	r2, r1, #10
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f40:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f46:	f7fb fe1b 	bl	8000b80 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4613      	mov	r3, r2
 8004f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x458>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	0f1b      	lsrs	r3, r3, #28
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004f62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f72:	e003      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004f76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	37b8      	adds	r7, #184	; 0xb8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	00f42400 	.word	0x00f42400

08004f94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e28d      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 8083 	beq.w	80050ba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fb4:	4b94      	ldr	r3, [pc, #592]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d019      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fc0:	4b91      	ldr	r3, [pc, #580]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d106      	bne.n	8004fda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fcc:	4b8e      	ldr	r3, [pc, #568]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fda:	4b8b      	ldr	r3, [pc, #556]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fe2:	2b0c      	cmp	r3, #12
 8004fe4:	d112      	bne.n	800500c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe6:	4b88      	ldr	r3, [pc, #544]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff2:	d10b      	bne.n	800500c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff4:	4b84      	ldr	r3, [pc, #528]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d05b      	beq.n	80050b8 <HAL_RCC_OscConfig+0x124>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d157      	bne.n	80050b8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e25a      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005014:	d106      	bne.n	8005024 <HAL_RCC_OscConfig+0x90>
 8005016:	4b7c      	ldr	r3, [pc, #496]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a7b      	ldr	r2, [pc, #492]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e01d      	b.n	8005060 <HAL_RCC_OscConfig+0xcc>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0xb4>
 800502e:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a75      	ldr	r2, [pc, #468]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b73      	ldr	r3, [pc, #460]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a72      	ldr	r2, [pc, #456]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e00b      	b.n	8005060 <HAL_RCC_OscConfig+0xcc>
 8005048:	4b6f      	ldr	r3, [pc, #444]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a6e      	ldr	r2, [pc, #440]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800504e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b6c      	ldr	r3, [pc, #432]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6b      	ldr	r2, [pc, #428]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800505a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d013      	beq.n	8005090 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fe fbb4 	bl	80037d4 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005070:	f7fe fbb0 	bl	80037d4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b64      	cmp	r3, #100	; 0x64
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e21f      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	4b61      	ldr	r3, [pc, #388]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0xdc>
 800508e:	e014      	b.n	80050ba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fe fba0 	bl	80037d4 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005098:	f7fe fb9c 	bl	80037d4 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e20b      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050aa:	4b57      	ldr	r3, [pc, #348]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x104>
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d06f      	beq.n	80051a6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050c6:	4b50      	ldr	r3, [pc, #320]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d017      	beq.n	8005102 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050d2:	4b4d      	ldr	r3, [pc, #308]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d105      	bne.n	80050ea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050de:	4b4a      	ldr	r3, [pc, #296]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ea:	4b47      	ldr	r3, [pc, #284]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	d11c      	bne.n	8005130 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f6:	4b44      	ldr	r3, [pc, #272]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d116      	bne.n	8005130 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005102:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_RCC_OscConfig+0x186>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d001      	beq.n	800511a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e1d3      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511a:	4b3b      	ldr	r3, [pc, #236]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4937      	ldr	r1, [pc, #220]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512e:	e03a      	b.n	80051a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d020      	beq.n	800517a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005138:	4b34      	ldr	r3, [pc, #208]	; (800520c <HAL_RCC_OscConfig+0x278>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fe fb49 	bl	80037d4 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005146:	f7fe fb45 	bl	80037d4 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e1b4      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005158:	4b2b      	ldr	r3, [pc, #172]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005164:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4925      	ldr	r1, [pc, #148]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]
 8005178:	e015      	b.n	80051a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_RCC_OscConfig+0x278>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fe fb28 	bl	80037d4 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005188:	f7fe fb24 	bl	80037d4 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e193      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d036      	beq.n	8005220 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	2201      	movs	r2, #1
 80051be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fe fb08 	bl	80037d4 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c8:	f7fe fb04 	bl	80037d4 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e173      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCC_OscConfig+0x274>)
 80051dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x234>
 80051e6:	e01b      	b.n	8005220 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCC_OscConfig+0x27c>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fe faf1 	bl	80037d4 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f4:	e00e      	b.n	8005214 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051f6:	f7fe faed 	bl	80037d4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d907      	bls.n	8005214 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e15c      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
 8005208:	40023800 	.word	0x40023800
 800520c:	42470000 	.word	0x42470000
 8005210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005214:	4b8a      	ldr	r3, [pc, #552]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ea      	bne.n	80051f6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8097 	beq.w	800535c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005232:	4b83      	ldr	r3, [pc, #524]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10f      	bne.n	800525e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	4b7f      	ldr	r3, [pc, #508]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	4a7e      	ldr	r2, [pc, #504]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524c:	6413      	str	r3, [r2, #64]	; 0x40
 800524e:	4b7c      	ldr	r3, [pc, #496]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525e:	4b79      	ldr	r3, [pc, #484]	; (8005444 <HAL_RCC_OscConfig+0x4b0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d118      	bne.n	800529c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800526a:	4b76      	ldr	r3, [pc, #472]	; (8005444 <HAL_RCC_OscConfig+0x4b0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a75      	ldr	r2, [pc, #468]	; (8005444 <HAL_RCC_OscConfig+0x4b0>)
 8005270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005276:	f7fe faad 	bl	80037d4 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527e:	f7fe faa9 	bl	80037d4 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e118      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005290:	4b6c      	ldr	r3, [pc, #432]	; (8005444 <HAL_RCC_OscConfig+0x4b0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d106      	bne.n	80052b2 <HAL_RCC_OscConfig+0x31e>
 80052a4:	4b66      	ldr	r3, [pc, #408]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a65      	ldr	r2, [pc, #404]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	e01c      	b.n	80052ec <HAL_RCC_OscConfig+0x358>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b05      	cmp	r3, #5
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCC_OscConfig+0x340>
 80052ba:	4b61      	ldr	r3, [pc, #388]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	4a60      	ldr	r2, [pc, #384]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052c0:	f043 0304 	orr.w	r3, r3, #4
 80052c4:	6713      	str	r3, [r2, #112]	; 0x70
 80052c6:	4b5e      	ldr	r3, [pc, #376]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	4a5d      	ldr	r2, [pc, #372]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6713      	str	r3, [r2, #112]	; 0x70
 80052d2:	e00b      	b.n	80052ec <HAL_RCC_OscConfig+0x358>
 80052d4:	4b5a      	ldr	r3, [pc, #360]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	4a59      	ldr	r2, [pc, #356]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	6713      	str	r3, [r2, #112]	; 0x70
 80052e0:	4b57      	ldr	r3, [pc, #348]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e4:	4a56      	ldr	r2, [pc, #344]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80052e6:	f023 0304 	bic.w	r3, r3, #4
 80052ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f4:	f7fe fa6e 	bl	80037d4 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fa:	e00a      	b.n	8005312 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fe fa6a 	bl	80037d4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e0d7      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005312:	4b4b      	ldr	r3, [pc, #300]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0ee      	beq.n	80052fc <HAL_RCC_OscConfig+0x368>
 800531e:	e014      	b.n	800534a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005320:	f7fe fa58 	bl	80037d4 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005326:	e00a      	b.n	800533e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fe fa54 	bl	80037d4 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	f241 3288 	movw	r2, #5000	; 0x1388
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e0c1      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533e:	4b40      	ldr	r3, [pc, #256]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1ee      	bne.n	8005328 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800534a:	7dfb      	ldrb	r3, [r7, #23]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	4a3a      	ldr	r2, [pc, #232]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80ad 	beq.w	80054c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b08      	cmp	r3, #8
 8005370:	d060      	beq.n	8005434 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d145      	bne.n	8005406 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537a:	4b33      	ldr	r3, [pc, #204]	; (8005448 <HAL_RCC_OscConfig+0x4b4>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fe fa28 	bl	80037d4 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005388:	f7fe fa24 	bl	80037d4 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e093      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539a:	4b29      	ldr	r3, [pc, #164]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	019b      	lsls	r3, r3, #6
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	085b      	lsrs	r3, r3, #1
 80053be:	3b01      	subs	r3, #1
 80053c0:	041b      	lsls	r3, r3, #16
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	491b      	ldr	r1, [pc, #108]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_RCC_OscConfig+0x4b4>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053de:	f7fe f9f9 	bl	80037d4 <HAL_GetTick>
 80053e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e6:	f7fe f9f5 	bl	80037d4 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e064      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f0      	beq.n	80053e6 <HAL_RCC_OscConfig+0x452>
 8005404:	e05c      	b.n	80054c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b10      	ldr	r3, [pc, #64]	; (8005448 <HAL_RCC_OscConfig+0x4b4>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fe f9e2 	bl	80037d4 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005414:	f7fe f9de 	bl	80037d4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e04d      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_RCC_OscConfig+0x4ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x480>
 8005432:	e045      	b.n	80054c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d107      	bne.n	800544c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e040      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
 8005440:	40023800 	.word	0x40023800
 8005444:	40007000 	.word	0x40007000
 8005448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800544c:	4b1f      	ldr	r3, [pc, #124]	; (80054cc <HAL_RCC_OscConfig+0x538>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d030      	beq.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d129      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	429a      	cmp	r2, r3
 8005474:	d122      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800547c:	4013      	ands	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005484:	4293      	cmp	r3, r2
 8005486:	d119      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	3b01      	subs	r3, #1
 8005496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d10f      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800

080054d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e041      	b.n	8005566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fd ff2e 	bl	8003358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3304      	adds	r3, #4
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f000 fc7a 	bl	8005e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d001      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e04e      	b.n	8005626 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a23      	ldr	r2, [pc, #140]	; (8005634 <HAL_TIM_Base_Start_IT+0xc4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d022      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x80>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b2:	d01d      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x80>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_TIM_Base_Start_IT+0xc8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d018      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x80>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1e      	ldr	r2, [pc, #120]	; (800563c <HAL_TIM_Base_Start_IT+0xcc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d013      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x80>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_TIM_Base_Start_IT+0xd0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00e      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x80>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	; (8005644 <HAL_TIM_Base_Start_IT+0xd4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d009      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x80>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_TIM_Base_Start_IT+0xd8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <HAL_TIM_Base_Start_IT+0x80>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_TIM_Base_Start_IT+0xdc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d111      	bne.n	8005614 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b06      	cmp	r3, #6
 8005600:	d010      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005612:	e007      	b.n	8005624 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40010400 	.word	0x40010400
 8005648:	40014000 	.word	0x40014000
 800564c:	40001800 	.word	0x40001800

08005650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e041      	b.n	80056e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f839 	bl	80056ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f000 fbba 	bl	8005e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_TIM_PWM_Start+0x24>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e022      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d109      	bne.n	8005742 <HAL_TIM_PWM_Start+0x3e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e015      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d109      	bne.n	800575c <HAL_TIM_PWM_Start+0x58>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e008      	b.n	800576e <HAL_TIM_PWM_Start+0x6a>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e07c      	b.n	8005870 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0x82>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005784:	e013      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b04      	cmp	r3, #4
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0x92>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005794:	e00b      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xa2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a4:	e003      	b.n	80057ae <HAL_TIM_PWM_Start+0xaa>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2201      	movs	r2, #1
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fe10 	bl	80063dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2d      	ldr	r2, [pc, #180]	; (8005878 <HAL_TIM_PWM_Start+0x174>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_TIM_PWM_Start+0xcc>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2c      	ldr	r2, [pc, #176]	; (800587c <HAL_TIM_PWM_Start+0x178>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d101      	bne.n	80057d4 <HAL_TIM_PWM_Start+0xd0>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <HAL_TIM_PWM_Start+0xd2>
 80057d4:	2300      	movs	r3, #0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d007      	beq.n	80057ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a22      	ldr	r2, [pc, #136]	; (8005878 <HAL_TIM_PWM_Start+0x174>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <HAL_TIM_PWM_Start+0x136>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d01d      	beq.n	800583a <HAL_TIM_PWM_Start+0x136>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <HAL_TIM_PWM_Start+0x17c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <HAL_TIM_PWM_Start+0x136>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <HAL_TIM_PWM_Start+0x180>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_TIM_PWM_Start+0x136>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <HAL_TIM_PWM_Start+0x184>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <HAL_TIM_PWM_Start+0x136>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a16      	ldr	r2, [pc, #88]	; (800587c <HAL_TIM_PWM_Start+0x178>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <HAL_TIM_PWM_Start+0x136>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a18      	ldr	r2, [pc, #96]	; (800588c <HAL_TIM_PWM_Start+0x188>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <HAL_TIM_PWM_Start+0x136>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a16      	ldr	r2, [pc, #88]	; (8005890 <HAL_TIM_PWM_Start+0x18c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d111      	bne.n	800585e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b06      	cmp	r3, #6
 800584a:	d010      	beq.n	800586e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	e007      	b.n	800586e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0201 	orr.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40010000 	.word	0x40010000
 800587c:	40010400 	.word	0x40010400
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40014000 	.word	0x40014000
 8005890:	40001800 	.word	0x40001800

08005894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d122      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d11b      	bne.n	80058f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0202 	mvn.w	r2, #2
 80058c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa77 	bl	8005dca <HAL_TIM_IC_CaptureCallback>
 80058dc:	e005      	b.n	80058ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fa69 	bl	8005db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fa7a 	bl	8005dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d122      	bne.n	8005944 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b04      	cmp	r3, #4
 800590a:	d11b      	bne.n	8005944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0204 	mvn.w	r2, #4
 8005914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2202      	movs	r2, #2
 800591a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa4d 	bl	8005dca <HAL_TIM_IC_CaptureCallback>
 8005930:	e005      	b.n	800593e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa3f 	bl	8005db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fa50 	bl	8005dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b08      	cmp	r3, #8
 8005950:	d122      	bne.n	8005998 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b08      	cmp	r3, #8
 800595e:	d11b      	bne.n	8005998 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0208 	mvn.w	r2, #8
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2204      	movs	r2, #4
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa23 	bl	8005dca <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa15 	bl	8005db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fa26 	bl	8005dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d122      	bne.n	80059ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0210 	mvn.w	r2, #16
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2208      	movs	r2, #8
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f9f9 	bl	8005dca <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f9eb 	bl	8005db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f9fc 	bl	8005dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d10e      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d107      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0201 	mvn.w	r2, #1
 8005a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7fc fbb6 	bl	8002184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d10e      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a30:	2b80      	cmp	r3, #128	; 0x80
 8005a32:	d107      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fd78 	bl	8006534 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d10e      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d107      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9c1 	bl	8005df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d10e      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d107      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0220 	mvn.w	r2, #32
 8005a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fd42 	bl	8006520 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e0ae      	b.n	8005c20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	f200 809f 	bhi.w	8005c10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ad2:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005b0d 	.word	0x08005b0d
 8005adc:	08005c11 	.word	0x08005c11
 8005ae0:	08005c11 	.word	0x08005c11
 8005ae4:	08005c11 	.word	0x08005c11
 8005ae8:	08005b4d 	.word	0x08005b4d
 8005aec:	08005c11 	.word	0x08005c11
 8005af0:	08005c11 	.word	0x08005c11
 8005af4:	08005c11 	.word	0x08005c11
 8005af8:	08005b8f 	.word	0x08005b8f
 8005afc:	08005c11 	.word	0x08005c11
 8005b00:	08005c11 	.word	0x08005c11
 8005b04:	08005c11 	.word	0x08005c11
 8005b08:	08005bcf 	.word	0x08005bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fa18 	bl	8005f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0208 	orr.w	r2, r2, #8
 8005b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0204 	bic.w	r2, r2, #4
 8005b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6999      	ldr	r1, [r3, #24]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	619a      	str	r2, [r3, #24]
      break;
 8005b4a:	e064      	b.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fa68 	bl	8006028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6999      	ldr	r1, [r3, #24]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	021a      	lsls	r2, r3, #8
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	619a      	str	r2, [r3, #24]
      break;
 8005b8c:	e043      	b.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fabd 	bl	8006114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0208 	orr.w	r2, r2, #8
 8005ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0204 	bic.w	r2, r2, #4
 8005bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69d9      	ldr	r1, [r3, #28]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	61da      	str	r2, [r3, #28]
      break;
 8005bcc:	e023      	b.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fb11 	bl	80061fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69d9      	ldr	r1, [r3, #28]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	021a      	lsls	r2, r3, #8
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	61da      	str	r2, [r3, #28]
      break;
 8005c0e:	e002      	b.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
      break;
 8005c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_TIM_ConfigClockSource+0x1c>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e0b4      	b.n	8005dae <HAL_TIM_ConfigClockSource+0x186>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7c:	d03e      	beq.n	8005cfc <HAL_TIM_ConfigClockSource+0xd4>
 8005c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c82:	f200 8087 	bhi.w	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	f000 8086 	beq.w	8005d9a <HAL_TIM_ConfigClockSource+0x172>
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c92:	d87f      	bhi.n	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b70      	cmp	r3, #112	; 0x70
 8005c96:	d01a      	beq.n	8005cce <HAL_TIM_ConfigClockSource+0xa6>
 8005c98:	2b70      	cmp	r3, #112	; 0x70
 8005c9a:	d87b      	bhi.n	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b60      	cmp	r3, #96	; 0x60
 8005c9e:	d050      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x11a>
 8005ca0:	2b60      	cmp	r3, #96	; 0x60
 8005ca2:	d877      	bhi.n	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b50      	cmp	r3, #80	; 0x50
 8005ca6:	d03c      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0xfa>
 8005ca8:	2b50      	cmp	r3, #80	; 0x50
 8005caa:	d873      	bhi.n	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d058      	beq.n	8005d62 <HAL_TIM_ConfigClockSource+0x13a>
 8005cb0:	2b40      	cmp	r3, #64	; 0x40
 8005cb2:	d86f      	bhi.n	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b30      	cmp	r3, #48	; 0x30
 8005cb6:	d064      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	2b30      	cmp	r3, #48	; 0x30
 8005cba:	d86b      	bhi.n	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	d060      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x15a>
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d867      	bhi.n	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05c      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x15a>
 8005cc8:	2b10      	cmp	r3, #16
 8005cca:	d05a      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0x15a>
 8005ccc:	e062      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6899      	ldr	r1, [r3, #8]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f000 fb5d 	bl	800639c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	609a      	str	r2, [r3, #8]
      break;
 8005cfa:	e04f      	b.n	8005d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	6899      	ldr	r1, [r3, #8]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f000 fb46 	bl	800639c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d1e:	609a      	str	r2, [r3, #8]
      break;
 8005d20:	e03c      	b.n	8005d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 faba 	bl	80062a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2150      	movs	r1, #80	; 0x50
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fb13 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005d40:	e02c      	b.n	8005d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	f000 fad9 	bl	8006306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2160      	movs	r1, #96	; 0x60
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fb03 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005d60:	e01c      	b.n	8005d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f000 fa9a 	bl	80062a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2140      	movs	r1, #64	; 0x40
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 faf3 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005d80:	e00c      	b.n	8005d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f000 faea 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005d92:	e003      	b.n	8005d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e000      	b.n	8005d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a40      	ldr	r2, [pc, #256]	; (8005f1c <TIM_Base_SetConfig+0x114>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d013      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d00f      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a3d      	ldr	r2, [pc, #244]	; (8005f20 <TIM_Base_SetConfig+0x118>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00b      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a3c      	ldr	r2, [pc, #240]	; (8005f24 <TIM_Base_SetConfig+0x11c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d007      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a3b      	ldr	r2, [pc, #236]	; (8005f28 <TIM_Base_SetConfig+0x120>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_Base_SetConfig+0x40>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a3a      	ldr	r2, [pc, #232]	; (8005f2c <TIM_Base_SetConfig+0x124>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d108      	bne.n	8005e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2f      	ldr	r2, [pc, #188]	; (8005f1c <TIM_Base_SetConfig+0x114>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d02b      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e68:	d027      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2c      	ldr	r2, [pc, #176]	; (8005f20 <TIM_Base_SetConfig+0x118>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d023      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a2b      	ldr	r2, [pc, #172]	; (8005f24 <TIM_Base_SetConfig+0x11c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01f      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <TIM_Base_SetConfig+0x120>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01b      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a29      	ldr	r2, [pc, #164]	; (8005f2c <TIM_Base_SetConfig+0x124>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d017      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a28      	ldr	r2, [pc, #160]	; (8005f30 <TIM_Base_SetConfig+0x128>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a27      	ldr	r2, [pc, #156]	; (8005f34 <TIM_Base_SetConfig+0x12c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00f      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <TIM_Base_SetConfig+0x130>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a25      	ldr	r2, [pc, #148]	; (8005f3c <TIM_Base_SetConfig+0x134>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a24      	ldr	r2, [pc, #144]	; (8005f40 <TIM_Base_SetConfig+0x138>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a23      	ldr	r2, [pc, #140]	; (8005f44 <TIM_Base_SetConfig+0x13c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d108      	bne.n	8005ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <TIM_Base_SetConfig+0x114>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_Base_SetConfig+0xf8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a0c      	ldr	r2, [pc, #48]	; (8005f2c <TIM_Base_SetConfig+0x124>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d103      	bne.n	8005f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	615a      	str	r2, [r3, #20]
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40010000 	.word	0x40010000
 8005f20:	40000400 	.word	0x40000400
 8005f24:	40000800 	.word	0x40000800
 8005f28:	40000c00 	.word	0x40000c00
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40014000 	.word	0x40014000
 8005f34:	40014400 	.word	0x40014400
 8005f38:	40014800 	.word	0x40014800
 8005f3c:	40001800 	.word	0x40001800
 8005f40:	40001c00 	.word	0x40001c00
 8005f44:	40002000 	.word	0x40002000

08005f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0303 	bic.w	r3, r3, #3
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f023 0302 	bic.w	r3, r3, #2
 8005f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a20      	ldr	r2, [pc, #128]	; (8006020 <TIM_OC1_SetConfig+0xd8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_OC1_SetConfig+0x64>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1f      	ldr	r2, [pc, #124]	; (8006024 <TIM_OC1_SetConfig+0xdc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10c      	bne.n	8005fc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0308 	bic.w	r3, r3, #8
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 0304 	bic.w	r3, r3, #4
 8005fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	; (8006020 <TIM_OC1_SetConfig+0xd8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC1_SetConfig+0x8e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a14      	ldr	r2, [pc, #80]	; (8006024 <TIM_OC1_SetConfig+0xdc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d111      	bne.n	8005ffa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	621a      	str	r2, [r3, #32]
}
 8006014:	bf00      	nop
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	40010000 	.word	0x40010000
 8006024:	40010400 	.word	0x40010400

08006028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f023 0210 	bic.w	r2, r3, #16
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800605e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0320 	bic.w	r3, r3, #32
 8006072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a22      	ldr	r2, [pc, #136]	; (800610c <TIM_OC2_SetConfig+0xe4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC2_SetConfig+0x68>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a21      	ldr	r2, [pc, #132]	; (8006110 <TIM_OC2_SetConfig+0xe8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10d      	bne.n	80060ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a17      	ldr	r2, [pc, #92]	; (800610c <TIM_OC2_SetConfig+0xe4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC2_SetConfig+0x94>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a16      	ldr	r2, [pc, #88]	; (8006110 <TIM_OC2_SetConfig+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d113      	bne.n	80060e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40010400 	.word	0x40010400

08006114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800615c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a21      	ldr	r2, [pc, #132]	; (80061f4 <TIM_OC3_SetConfig+0xe0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_OC3_SetConfig+0x66>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a20      	ldr	r2, [pc, #128]	; (80061f8 <TIM_OC3_SetConfig+0xe4>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10d      	bne.n	8006196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <TIM_OC3_SetConfig+0xe0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC3_SetConfig+0x92>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <TIM_OC3_SetConfig+0xe4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d113      	bne.n	80061ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40010400 	.word	0x40010400

080061fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	031b      	lsls	r3, r3, #12
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a12      	ldr	r2, [pc, #72]	; (80062a0 <TIM_OC4_SetConfig+0xa4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d003      	beq.n	8006264 <TIM_OC4_SetConfig+0x68>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a11      	ldr	r2, [pc, #68]	; (80062a4 <TIM_OC4_SetConfig+0xa8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d109      	bne.n	8006278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800626a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	019b      	lsls	r3, r3, #6
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40010400 	.word	0x40010400

080062a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f023 0201 	bic.w	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 030a 	bic.w	r3, r3, #10
 80062e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006306:	b480      	push	{r7}
 8006308:	b087      	sub	sp, #28
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0210 	bic.w	r2, r3, #16
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	031b      	lsls	r3, r3, #12
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	f043 0307 	orr.w	r3, r3, #7
 8006388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	609a      	str	r2, [r3, #8]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	021a      	lsls	r2, r3, #8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	431a      	orrs	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2201      	movs	r2, #1
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	43db      	mvns	r3, r3
 80063fe:	401a      	ands	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	fa01 f303 	lsl.w	r3, r1, r3
 8006414:	431a      	orrs	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	621a      	str	r2, [r3, #32]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800643c:	2302      	movs	r3, #2
 800643e:	e05a      	b.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a21      	ldr	r2, [pc, #132]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d022      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648c:	d01d      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d018      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1b      	ldr	r2, [pc, #108]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1a      	ldr	r2, [pc, #104]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00e      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a18      	ldr	r2, [pc, #96]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d009      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a17      	ldr	r2, [pc, #92]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d004      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a15      	ldr	r2, [pc, #84]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d10c      	bne.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40010000 	.word	0x40010000
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40010400 	.word	0x40010400
 8006518:	40014000 	.word	0x40014000
 800651c:	40001800 	.word	0x40001800

08006520 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e03f      	b.n	80065da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fd f858 	bl	8003624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2224      	movs	r2, #36	; 0x24
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f829 	bl	80065e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e8:	b0c0      	sub	sp, #256	; 0x100
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006600:	68d9      	ldr	r1, [r3, #12]
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	ea40 0301 	orr.w	r3, r0, r1
 800660c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	431a      	orrs	r2, r3
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	431a      	orrs	r2, r3
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800663c:	f021 010c 	bic.w	r1, r1, #12
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800664a:	430b      	orrs	r3, r1
 800664c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	6999      	ldr	r1, [r3, #24]
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	ea40 0301 	orr.w	r3, r0, r1
 800666a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b8f      	ldr	r3, [pc, #572]	; (80068b0 <UART_SetConfig+0x2cc>)
 8006674:	429a      	cmp	r2, r3
 8006676:	d005      	beq.n	8006684 <UART_SetConfig+0xa0>
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4b8d      	ldr	r3, [pc, #564]	; (80068b4 <UART_SetConfig+0x2d0>)
 8006680:	429a      	cmp	r2, r3
 8006682:	d104      	bne.n	800668e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fe fa42 	bl	8004b0c <HAL_RCC_GetPCLK2Freq>
 8006688:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800668c:	e003      	b.n	8006696 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800668e:	f7fe fa29 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8006692:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a0:	f040 810c 	bne.w	80068bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066b6:	4622      	mov	r2, r4
 80066b8:	462b      	mov	r3, r5
 80066ba:	1891      	adds	r1, r2, r2
 80066bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80066be:	415b      	adcs	r3, r3
 80066c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066c6:	4621      	mov	r1, r4
 80066c8:	eb12 0801 	adds.w	r8, r2, r1
 80066cc:	4629      	mov	r1, r5
 80066ce:	eb43 0901 	adc.w	r9, r3, r1
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066e6:	4690      	mov	r8, r2
 80066e8:	4699      	mov	r9, r3
 80066ea:	4623      	mov	r3, r4
 80066ec:	eb18 0303 	adds.w	r3, r8, r3
 80066f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066f4:	462b      	mov	r3, r5
 80066f6:	eb49 0303 	adc.w	r3, r9, r3
 80066fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800670a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800670e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006712:	460b      	mov	r3, r1
 8006714:	18db      	adds	r3, r3, r3
 8006716:	653b      	str	r3, [r7, #80]	; 0x50
 8006718:	4613      	mov	r3, r2
 800671a:	eb42 0303 	adc.w	r3, r2, r3
 800671e:	657b      	str	r3, [r7, #84]	; 0x54
 8006720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006724:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006728:	f7fa fa2a 	bl	8000b80 <__aeabi_uldivmod>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4b61      	ldr	r3, [pc, #388]	; (80068b8 <UART_SetConfig+0x2d4>)
 8006732:	fba3 2302 	umull	r2, r3, r3, r2
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	011c      	lsls	r4, r3, #4
 800673a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800673e:	2200      	movs	r2, #0
 8006740:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006744:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006748:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800674c:	4642      	mov	r2, r8
 800674e:	464b      	mov	r3, r9
 8006750:	1891      	adds	r1, r2, r2
 8006752:	64b9      	str	r1, [r7, #72]	; 0x48
 8006754:	415b      	adcs	r3, r3
 8006756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006758:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800675c:	4641      	mov	r1, r8
 800675e:	eb12 0a01 	adds.w	sl, r2, r1
 8006762:	4649      	mov	r1, r9
 8006764:	eb43 0b01 	adc.w	fp, r3, r1
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006774:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006778:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800677c:	4692      	mov	sl, r2
 800677e:	469b      	mov	fp, r3
 8006780:	4643      	mov	r3, r8
 8006782:	eb1a 0303 	adds.w	r3, sl, r3
 8006786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800678a:	464b      	mov	r3, r9
 800678c:	eb4b 0303 	adc.w	r3, fp, r3
 8006790:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067a8:	460b      	mov	r3, r1
 80067aa:	18db      	adds	r3, r3, r3
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
 80067ae:	4613      	mov	r3, r2
 80067b0:	eb42 0303 	adc.w	r3, r2, r3
 80067b4:	647b      	str	r3, [r7, #68]	; 0x44
 80067b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067be:	f7fa f9df 	bl	8000b80 <__aeabi_uldivmod>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4611      	mov	r1, r2
 80067c8:	4b3b      	ldr	r3, [pc, #236]	; (80068b8 <UART_SetConfig+0x2d4>)
 80067ca:	fba3 2301 	umull	r2, r3, r3, r1
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	2264      	movs	r2, #100	; 0x64
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	1acb      	subs	r3, r1, r3
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067de:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <UART_SetConfig+0x2d4>)
 80067e0:	fba3 2302 	umull	r2, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067ec:	441c      	add	r4, r3
 80067ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006800:	4642      	mov	r2, r8
 8006802:	464b      	mov	r3, r9
 8006804:	1891      	adds	r1, r2, r2
 8006806:	63b9      	str	r1, [r7, #56]	; 0x38
 8006808:	415b      	adcs	r3, r3
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006810:	4641      	mov	r1, r8
 8006812:	1851      	adds	r1, r2, r1
 8006814:	6339      	str	r1, [r7, #48]	; 0x30
 8006816:	4649      	mov	r1, r9
 8006818:	414b      	adcs	r3, r1
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006828:	4659      	mov	r1, fp
 800682a:	00cb      	lsls	r3, r1, #3
 800682c:	4651      	mov	r1, sl
 800682e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006832:	4651      	mov	r1, sl
 8006834:	00ca      	lsls	r2, r1, #3
 8006836:	4610      	mov	r0, r2
 8006838:	4619      	mov	r1, r3
 800683a:	4603      	mov	r3, r0
 800683c:	4642      	mov	r2, r8
 800683e:	189b      	adds	r3, r3, r2
 8006840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006844:	464b      	mov	r3, r9
 8006846:	460a      	mov	r2, r1
 8006848:	eb42 0303 	adc.w	r3, r2, r3
 800684c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800685c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006860:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006864:	460b      	mov	r3, r1
 8006866:	18db      	adds	r3, r3, r3
 8006868:	62bb      	str	r3, [r7, #40]	; 0x28
 800686a:	4613      	mov	r3, r2
 800686c:	eb42 0303 	adc.w	r3, r2, r3
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006876:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800687a:	f7fa f981 	bl	8000b80 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4b0d      	ldr	r3, [pc, #52]	; (80068b8 <UART_SetConfig+0x2d4>)
 8006884:	fba3 1302 	umull	r1, r3, r3, r2
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	2164      	movs	r1, #100	; 0x64
 800688c:	fb01 f303 	mul.w	r3, r1, r3
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	3332      	adds	r3, #50	; 0x32
 8006896:	4a08      	ldr	r2, [pc, #32]	; (80068b8 <UART_SetConfig+0x2d4>)
 8006898:	fba2 2303 	umull	r2, r3, r2, r3
 800689c:	095b      	lsrs	r3, r3, #5
 800689e:	f003 0207 	and.w	r2, r3, #7
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4422      	add	r2, r4
 80068aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068ac:	e105      	b.n	8006aba <UART_SetConfig+0x4d6>
 80068ae:	bf00      	nop
 80068b0:	40011000 	.word	0x40011000
 80068b4:	40011400 	.word	0x40011400
 80068b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068ce:	4642      	mov	r2, r8
 80068d0:	464b      	mov	r3, r9
 80068d2:	1891      	adds	r1, r2, r2
 80068d4:	6239      	str	r1, [r7, #32]
 80068d6:	415b      	adcs	r3, r3
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
 80068da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068de:	4641      	mov	r1, r8
 80068e0:	1854      	adds	r4, r2, r1
 80068e2:	4649      	mov	r1, r9
 80068e4:	eb43 0501 	adc.w	r5, r3, r1
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	f04f 0300 	mov.w	r3, #0
 80068f0:	00eb      	lsls	r3, r5, #3
 80068f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068f6:	00e2      	lsls	r2, r4, #3
 80068f8:	4614      	mov	r4, r2
 80068fa:	461d      	mov	r5, r3
 80068fc:	4643      	mov	r3, r8
 80068fe:	18e3      	adds	r3, r4, r3
 8006900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006904:	464b      	mov	r3, r9
 8006906:	eb45 0303 	adc.w	r3, r5, r3
 800690a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800690e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800691a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800692a:	4629      	mov	r1, r5
 800692c:	008b      	lsls	r3, r1, #2
 800692e:	4621      	mov	r1, r4
 8006930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006934:	4621      	mov	r1, r4
 8006936:	008a      	lsls	r2, r1, #2
 8006938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800693c:	f7fa f920 	bl	8000b80 <__aeabi_uldivmod>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4b60      	ldr	r3, [pc, #384]	; (8006ac8 <UART_SetConfig+0x4e4>)
 8006946:	fba3 2302 	umull	r2, r3, r3, r2
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	011c      	lsls	r4, r3, #4
 800694e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006952:	2200      	movs	r2, #0
 8006954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006958:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800695c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006960:	4642      	mov	r2, r8
 8006962:	464b      	mov	r3, r9
 8006964:	1891      	adds	r1, r2, r2
 8006966:	61b9      	str	r1, [r7, #24]
 8006968:	415b      	adcs	r3, r3
 800696a:	61fb      	str	r3, [r7, #28]
 800696c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006970:	4641      	mov	r1, r8
 8006972:	1851      	adds	r1, r2, r1
 8006974:	6139      	str	r1, [r7, #16]
 8006976:	4649      	mov	r1, r9
 8006978:	414b      	adcs	r3, r1
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006988:	4659      	mov	r1, fp
 800698a:	00cb      	lsls	r3, r1, #3
 800698c:	4651      	mov	r1, sl
 800698e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006992:	4651      	mov	r1, sl
 8006994:	00ca      	lsls	r2, r1, #3
 8006996:	4610      	mov	r0, r2
 8006998:	4619      	mov	r1, r3
 800699a:	4603      	mov	r3, r0
 800699c:	4642      	mov	r2, r8
 800699e:	189b      	adds	r3, r3, r2
 80069a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069a4:	464b      	mov	r3, r9
 80069a6:	460a      	mov	r2, r1
 80069a8:	eb42 0303 	adc.w	r3, r2, r3
 80069ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069c8:	4649      	mov	r1, r9
 80069ca:	008b      	lsls	r3, r1, #2
 80069cc:	4641      	mov	r1, r8
 80069ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d2:	4641      	mov	r1, r8
 80069d4:	008a      	lsls	r2, r1, #2
 80069d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069da:	f7fa f8d1 	bl	8000b80 <__aeabi_uldivmod>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	4b39      	ldr	r3, [pc, #228]	; (8006ac8 <UART_SetConfig+0x4e4>)
 80069e4:	fba3 1302 	umull	r1, r3, r3, r2
 80069e8:	095b      	lsrs	r3, r3, #5
 80069ea:	2164      	movs	r1, #100	; 0x64
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	3332      	adds	r3, #50	; 0x32
 80069f6:	4a34      	ldr	r2, [pc, #208]	; (8006ac8 <UART_SetConfig+0x4e4>)
 80069f8:	fba2 2303 	umull	r2, r3, r2, r3
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a02:	441c      	add	r4, r3
 8006a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a08:	2200      	movs	r2, #0
 8006a0a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a0c:	677a      	str	r2, [r7, #116]	; 0x74
 8006a0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a12:	4642      	mov	r2, r8
 8006a14:	464b      	mov	r3, r9
 8006a16:	1891      	adds	r1, r2, r2
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	415b      	adcs	r3, r3
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a22:	4641      	mov	r1, r8
 8006a24:	1851      	adds	r1, r2, r1
 8006a26:	6039      	str	r1, [r7, #0]
 8006a28:	4649      	mov	r1, r9
 8006a2a:	414b      	adcs	r3, r1
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	00cb      	lsls	r3, r1, #3
 8006a3e:	4651      	mov	r1, sl
 8006a40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a44:	4651      	mov	r1, sl
 8006a46:	00ca      	lsls	r2, r1, #3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	4642      	mov	r2, r8
 8006a50:	189b      	adds	r3, r3, r2
 8006a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a54:	464b      	mov	r3, r9
 8006a56:	460a      	mov	r2, r1
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	663b      	str	r3, [r7, #96]	; 0x60
 8006a68:	667a      	str	r2, [r7, #100]	; 0x64
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a76:	4649      	mov	r1, r9
 8006a78:	008b      	lsls	r3, r1, #2
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a80:	4641      	mov	r1, r8
 8006a82:	008a      	lsls	r2, r1, #2
 8006a84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a88:	f7fa f87a 	bl	8000b80 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4b0d      	ldr	r3, [pc, #52]	; (8006ac8 <UART_SetConfig+0x4e4>)
 8006a92:	fba3 1302 	umull	r1, r3, r3, r2
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	2164      	movs	r1, #100	; 0x64
 8006a9a:	fb01 f303 	mul.w	r3, r1, r3
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	3332      	adds	r3, #50	; 0x32
 8006aa4:	4a08      	ldr	r2, [pc, #32]	; (8006ac8 <UART_SetConfig+0x4e4>)
 8006aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4422      	add	r2, r4
 8006ab8:	609a      	str	r2, [r3, #8]
}
 8006aba:	bf00      	nop
 8006abc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac6:	bf00      	nop
 8006ac8:	51eb851f 	.word	0x51eb851f

08006acc <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4829      	ldr	r0, [pc, #164]	; (8006b80 <network_configure_activations+0xb4>)
 8006adc:	f000 fad0 	bl	8007080 <ai_platform_get_activations_map>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d041      	beq.n	8006b6a <network_configure_activations+0x9e>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006ae6:	4b26      	ldr	r3, [pc, #152]	; (8006b80 <network_configure_activations+0xb4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a26      	ldr	r2, [pc, #152]	; (8006b84 <network_configure_activations+0xb8>)
 8006aec:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006aee:	4b24      	ldr	r3, [pc, #144]	; (8006b80 <network_configure_activations+0xb4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a24      	ldr	r2, [pc, #144]	; (8006b84 <network_configure_activations+0xb8>)
 8006af4:	60d3      	str	r3, [r2, #12]
    
    dense_50_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 48);
 8006af6:	4b22      	ldr	r3, [pc, #136]	; (8006b80 <network_configure_activations+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	3330      	adds	r3, #48	; 0x30
 8006afc:	4a22      	ldr	r2, [pc, #136]	; (8006b88 <network_configure_activations+0xbc>)
 8006afe:	6093      	str	r3, [r2, #8]
    dense_50_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 48);
 8006b00:	4b1f      	ldr	r3, [pc, #124]	; (8006b80 <network_configure_activations+0xb4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3330      	adds	r3, #48	; 0x30
 8006b06:	4a20      	ldr	r2, [pc, #128]	; (8006b88 <network_configure_activations+0xbc>)
 8006b08:	60d3      	str	r3, [r2, #12]
    
    dense_50_output_array.data = AI_PTR(g_network_activations_map[0] + 48);
 8006b0a:	4b1d      	ldr	r3, [pc, #116]	; (8006b80 <network_configure_activations+0xb4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3330      	adds	r3, #48	; 0x30
 8006b10:	4a1e      	ldr	r2, [pc, #120]	; (8006b8c <network_configure_activations+0xc0>)
 8006b12:	6093      	str	r3, [r2, #8]
    dense_50_output_array.data_start = AI_PTR(g_network_activations_map[0] + 48);
 8006b14:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <network_configure_activations+0xb4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3330      	adds	r3, #48	; 0x30
 8006b1a:	4a1c      	ldr	r2, [pc, #112]	; (8006b8c <network_configure_activations+0xc0>)
 8006b1c:	60d3      	str	r3, [r2, #12]
    
    dense_51_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006b1e:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <network_configure_activations+0xb4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1b      	ldr	r2, [pc, #108]	; (8006b90 <network_configure_activations+0xc4>)
 8006b24:	6093      	str	r3, [r2, #8]
    dense_51_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006b26:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <network_configure_activations+0xb4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a19      	ldr	r2, [pc, #100]	; (8006b90 <network_configure_activations+0xc4>)
 8006b2c:	60d3      	str	r3, [r2, #12]
    
    dense_51_output_array.data = AI_PTR(g_network_activations_map[0] + 40);
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <network_configure_activations+0xb4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3328      	adds	r3, #40	; 0x28
 8006b34:	4a17      	ldr	r2, [pc, #92]	; (8006b94 <network_configure_activations+0xc8>)
 8006b36:	6093      	str	r3, [r2, #8]
    dense_51_output_array.data_start = AI_PTR(g_network_activations_map[0] + 40);
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <network_configure_activations+0xb4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3328      	adds	r3, #40	; 0x28
 8006b3e:	4a15      	ldr	r2, [pc, #84]	; (8006b94 <network_configure_activations+0xc8>)
 8006b40:	60d3      	str	r3, [r2, #12]
    
    dense_52_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <network_configure_activations+0xb4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a14      	ldr	r2, [pc, #80]	; (8006b98 <network_configure_activations+0xcc>)
 8006b48:	6093      	str	r3, [r2, #8]
    dense_52_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <network_configure_activations+0xb4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a12      	ldr	r2, [pc, #72]	; (8006b98 <network_configure_activations+0xcc>)
 8006b50:	60d3      	str	r3, [r2, #12]
    
    dense_52_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 8006b52:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <network_configure_activations+0xb4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3314      	adds	r3, #20
 8006b58:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <network_configure_activations+0xd0>)
 8006b5a:	6093      	str	r3, [r2, #8]
    dense_52_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 8006b5c:	4b08      	ldr	r3, [pc, #32]	; (8006b80 <network_configure_activations+0xb4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3314      	adds	r3, #20
 8006b62:	4a0e      	ldr	r2, [pc, #56]	; (8006b9c <network_configure_activations+0xd0>)
 8006b64:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e005      	b.n	8006b76 <network_configure_activations+0xaa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006b6a:	2213      	movs	r2, #19
 8006b6c:	2130      	movs	r1, #48	; 0x30
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb6a 	bl	8007248 <ai_platform_network_set_error>
  return false;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000d28 	.word	0x20000d28
 8006b84:	2000001c 	.word	0x2000001c
 8006b88:	2000002c 	.word	0x2000002c
 8006b8c:	2000004c 	.word	0x2000004c
 8006b90:	2000005c 	.word	0x2000005c
 8006b94:	2000007c 	.word	0x2000007c
 8006b98:	2000008c 	.word	0x2000008c
 8006b9c:	2000009c 	.word	0x2000009c

08006ba0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	2101      	movs	r1, #1
 8006bae:	483b      	ldr	r0, [pc, #236]	; (8006c9c <network_configure_weights+0xfc>)
 8006bb0:	f000 fa12 	bl	8006fd8 <ai_platform_get_weights_map>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d065      	beq.n	8006c86 <network_configure_weights+0xe6>
    /* Updating weights (byte) offsets */
    
    dense_51_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006bba:	4b39      	ldr	r3, [pc, #228]	; (8006ca0 <network_configure_weights+0x100>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bc2:	4a37      	ldr	r2, [pc, #220]	; (8006ca0 <network_configure_weights+0x100>)
 8006bc4:	6013      	str	r3, [r2, #0]
    dense_51_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8006bc6:	4b35      	ldr	r3, [pc, #212]	; (8006c9c <network_configure_weights+0xfc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a35      	ldr	r2, [pc, #212]	; (8006ca0 <network_configure_weights+0x100>)
 8006bcc:	6093      	str	r3, [r2, #8]
    dense_51_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8006bce:	4b33      	ldr	r3, [pc, #204]	; (8006c9c <network_configure_weights+0xfc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a33      	ldr	r2, [pc, #204]	; (8006ca0 <network_configure_weights+0x100>)
 8006bd4:	60d3      	str	r3, [r2, #12]
    
    dense_52_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006bd6:	4b33      	ldr	r3, [pc, #204]	; (8006ca4 <network_configure_weights+0x104>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bde:	4a31      	ldr	r2, [pc, #196]	; (8006ca4 <network_configure_weights+0x104>)
 8006be0:	6013      	str	r3, [r2, #0]
    dense_52_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 40);
 8006be2:	4b2e      	ldr	r3, [pc, #184]	; (8006c9c <network_configure_weights+0xfc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3328      	adds	r3, #40	; 0x28
 8006be8:	4a2e      	ldr	r2, [pc, #184]	; (8006ca4 <network_configure_weights+0x104>)
 8006bea:	6093      	str	r3, [r2, #8]
    dense_52_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 40);
 8006bec:	4b2b      	ldr	r3, [pc, #172]	; (8006c9c <network_configure_weights+0xfc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3328      	adds	r3, #40	; 0x28
 8006bf2:	4a2c      	ldr	r2, [pc, #176]	; (8006ca4 <network_configure_weights+0x104>)
 8006bf4:	60d3      	str	r3, [r2, #12]
    
    dense_52_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006bf6:	4b2c      	ldr	r3, [pc, #176]	; (8006ca8 <network_configure_weights+0x108>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bfe:	4a2a      	ldr	r2, [pc, #168]	; (8006ca8 <network_configure_weights+0x108>)
 8006c00:	6013      	str	r3, [r2, #0]
    dense_52_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 240);
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <network_configure_weights+0xfc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	33f0      	adds	r3, #240	; 0xf0
 8006c08:	4a27      	ldr	r2, [pc, #156]	; (8006ca8 <network_configure_weights+0x108>)
 8006c0a:	6093      	str	r3, [r2, #8]
    dense_52_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 240);
 8006c0c:	4b23      	ldr	r3, [pc, #140]	; (8006c9c <network_configure_weights+0xfc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	33f0      	adds	r3, #240	; 0xf0
 8006c12:	4a25      	ldr	r2, [pc, #148]	; (8006ca8 <network_configure_weights+0x108>)
 8006c14:	60d3      	str	r3, [r2, #12]
    
    dense_50_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006c16:	4b25      	ldr	r3, [pc, #148]	; (8006cac <network_configure_weights+0x10c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c1e:	4a23      	ldr	r2, [pc, #140]	; (8006cac <network_configure_weights+0x10c>)
 8006c20:	6013      	str	r3, [r2, #0]
    dense_50_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 260);
 8006c22:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <network_configure_weights+0xfc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006c2a:	4a20      	ldr	r2, [pc, #128]	; (8006cac <network_configure_weights+0x10c>)
 8006c2c:	6093      	str	r3, [r2, #8]
    dense_50_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 260);
 8006c2e:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <network_configure_weights+0xfc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006c36:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <network_configure_weights+0x10c>)
 8006c38:	60d3      	str	r3, [r2, #12]
    
    dense_50_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006c3a:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <network_configure_weights+0x110>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c42:	4a1b      	ldr	r2, [pc, #108]	; (8006cb0 <network_configure_weights+0x110>)
 8006c44:	6013      	str	r3, [r2, #0]
    dense_50_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 980);
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <network_configure_weights+0xfc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8006c4e:	4a18      	ldr	r2, [pc, #96]	; (8006cb0 <network_configure_weights+0x110>)
 8006c50:	6093      	str	r3, [r2, #8]
    dense_50_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 980);
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <network_configure_weights+0xfc>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8006c5a:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <network_configure_weights+0x110>)
 8006c5c:	60d3      	str	r3, [r2, #12]
    
    dense_51_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <network_configure_weights+0x114>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c66:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <network_configure_weights+0x114>)
 8006c68:	6013      	str	r3, [r2, #0]
    dense_51_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 1040);
 8006c6a:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <network_configure_weights+0xfc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8006c72:	4a10      	ldr	r2, [pc, #64]	; (8006cb4 <network_configure_weights+0x114>)
 8006c74:	6093      	str	r3, [r2, #8]
    dense_51_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1040);
 8006c76:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <network_configure_weights+0xfc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8006c7e:	4a0d      	ldr	r2, [pc, #52]	; (8006cb4 <network_configure_weights+0x114>)
 8006c80:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e005      	b.n	8006c92 <network_configure_weights+0xf2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006c86:	2212      	movs	r2, #18
 8006c88:	2130      	movs	r1, #48	; 0x30
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fadc 	bl	8007248 <ai_platform_network_set_error>
  return false;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000d2c 	.word	0x20000d2c
 8006ca0:	2000000c 	.word	0x2000000c
 8006ca4:	2000003c 	.word	0x2000003c
 8006ca8:	2000006c 	.word	0x2000006c
 8006cac:	200000ac 	.word	0x200000ac
 8006cb0:	200000bc 	.word	0x200000bc
 8006cb4:	200000cc 	.word	0x200000cc

08006cb8 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa53 	bl	800716c <ai_platform_network_get_error>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006cda:	2300      	movs	r3, #0
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	2305      	movs	r3, #5
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <ai_network_create+0x28>)
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fc59 	bl	80075a0 <ai_platform_network_create>
 8006cee:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000694 	.word	0x20000694

08006cfc <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b096      	sub	sp, #88	; 0x58
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006d08:	2100      	movs	r1, #0
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff ffe0 	bl	8006cd0 <ai_network_create>
 8006d10:	4603      	mov	r3, r0
 8006d12:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8006d14:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <ai_network_create_and_init+0x24>
        return err;
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1e:	e05d      	b.n	8006ddc <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8006d20:	f107 0314 	add.w	r3, r7, #20
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 f8dd 	bl	8006ee4 <ai_network_data_params_get>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f083 0301 	eor.w	r3, r3, #1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d008      	beq.n	8006d48 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff ffbc 	bl	8006cb8 <ai_network_get_error>
 8006d40:	4603      	mov	r3, r0
 8006d42:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8006d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d46:	e049      	b.n	8006ddc <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d016      	beq.n	8006d7c <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006d4e:	2300      	movs	r3, #0
 8006d50:	657b      	str	r3, [r7, #84]	; 0x54
 8006d52:	e00e      	b.n	8006d72 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006d54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	f107 0314 	add.w	r3, r7, #20
 8006d64:	330c      	adds	r3, #12
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 f922 	bl	8006fb0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d6e:	3301      	adds	r3, #1
 8006d70:	657b      	str	r3, [r7, #84]	; 0x54
 8006d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d74:	461a      	mov	r2, r3
 8006d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	dbeb      	blt.n	8006d54 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d016      	beq.n	8006db0 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	653b      	str	r3, [r7, #80]	; 0x50
 8006d86:	e00e      	b.n	8006da6 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006d88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4413      	add	r3, r2
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 f908 	bl	8006fb0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da2:	3301      	adds	r3, #1
 8006da4:	653b      	str	r3, [r7, #80]	; 0x50
 8006da6:	8b7b      	ldrh	r3, [r7, #26]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dac:	4293      	cmp	r3, r2
 8006dae:	dbeb      	blt.n	8006d88 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f107 0214 	add.w	r2, r7, #20
 8006db8:	4611      	mov	r1, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f846 	bl	8006e4c <ai_network_init>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f083 0301 	eor.w	r3, r3, #1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d006      	beq.n	8006dda <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff ff71 	bl	8006cb8 <ai_network_get_error>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8006dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3758      	adds	r7, #88	; 0x58
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d104      	bne.n	8006dfe <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006df4:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <ai_network_inputs_get+0x2c>)
 8006df6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a06      	ldr	r2, [pc, #24]	; (8006e14 <ai_network_inputs_get+0x30>)
 8006dfc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fa27 	bl	8007254 <ai_platform_inputs_get>
 8006e06:	4603      	mov	r3, r0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	20000694 	.word	0x20000694
 8006e14:	a1c00100 	.word	0xa1c00100

08006e18 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <ai_network_outputs_get+0x2c>)
 8006e2a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a06      	ldr	r2, [pc, #24]	; (8006e48 <ai_network_outputs_get+0x30>)
 8006e30:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fae3 	bl	8007400 <ai_platform_outputs_get>
 8006e3a:	4603      	mov	r3, r0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20000694 	.word	0x20000694
 8006e48:	a1c00100 	.word	0xa1c00100

08006e4c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc77 	bl	800774c <ai_platform_network_init>
 8006e5e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <ai_network_init+0x1e>
 8006e66:	2300      	movs	r3, #0
 8006e68:	e028      	b.n	8006ebc <ai_network_init+0x70>

  ai_bool ok = true;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f7ff fe95 	bl	8006ba0 <network_configure_weights>
 8006e76:	4603      	mov	r3, r0
 8006e78:	461a      	mov	r2, r3
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bf14      	ite	ne
 8006e82:	2301      	movne	r3, #1
 8006e84:	2300      	moveq	r3, #0
 8006e86:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7ff fe1e 	bl	8006acc <network_configure_activations>
 8006e90:	4603      	mov	r3, r0
 8006e92:	461a      	mov	r2, r3
 8006e94:	7afb      	ldrb	r3, [r7, #11]
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fd40 	bl	8007928 <ai_platform_network_post_init>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	461a      	mov	r2, r3
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006eba:	7afb      	ldrb	r3, [r7, #11]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fdaf 	bl	8007a38 <ai_platform_network_process>
 8006eda:	4603      	mov	r3, r0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <ai_network_data_params_get+0x12>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e016      	b.n	8006f24 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006ef6:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <ai_network_data_params_get+0x48>)
 8006ef8:	f107 0310 	add.w	r3, r7, #16
 8006efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f00:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006f04:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <ai_network_data_params_get+0x4c>)
 8006f06:	f107 0308 	add.w	r3, r7, #8
 8006f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006f0e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006f12:	f107 0210 	add.w	r2, r7, #16
 8006f16:	f107 0308 	add.w	r3, r7, #8
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f903 	bl	8007128 <ai_platform_bind_network_params>
 8006f22:	4603      	mov	r3, r0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	0800ae80 	.word	0x0800ae80
 8006f30:	0800ae88 	.word	0x0800ae88

08006f34 <ai_buffer_get_size>:
 8006f34:	b378      	cbz	r0, 8006f96 <ai_buffer_get_size+0x62>
 8006f36:	b410      	push	{r4}
 8006f38:	6803      	ldr	r3, [r0, #0]
 8006f3a:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <ai_buffer_get_size+0x64>)
 8006f3c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006f40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d01e      	beq.n	8006f86 <ai_buffer_get_size+0x52>
 8006f48:	6984      	ldr	r4, [r0, #24]
 8006f4a:	6862      	ldr	r2, [r4, #4]
 8006f4c:	7d03      	ldrb	r3, [r0, #20]
 8006f4e:	6941      	ldr	r1, [r0, #20]
 8006f50:	f1a3 0301 	sub.w	r3, r3, #1
 8006f54:	fab3 f383 	clz	r3, r3
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006f5e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006f62:	da0b      	bge.n	8006f7c <ai_buffer_get_size+0x48>
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d102      	bne.n	8006f6e <ai_buffer_get_size+0x3a>
 8006f68:	2802      	cmp	r0, #2
 8006f6a:	d007      	beq.n	8006f7c <ai_buffer_get_size+0x48>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4298      	cmp	r0, r3
 8006f76:	fb01 f202 	mul.w	r2, r1, r2
 8006f7a:	d1f3      	bne.n	8006f64 <ai_buffer_get_size+0x30>
 8006f7c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	2900      	cmp	r1, #0
 8006f88:	d0de      	beq.n	8006f48 <ai_buffer_get_size+0x14>
 8006f8a:	6984      	ldr	r4, [r0, #24]
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	331f      	adds	r3, #31
 8006f90:	f023 021f 	bic.w	r2, r3, #31
 8006f94:	e7da      	b.n	8006f4c <ai_buffer_get_size+0x18>
 8006f96:	4770      	bx	lr
 8006f98:	000400c0 	.word	0x000400c0

08006f9c <ai_buffer_array_sane>:
 8006f9c:	b138      	cbz	r0, 8006fae <ai_buffer_array_sane+0x12>
 8006f9e:	6843      	ldr	r3, [r0, #4]
 8006fa0:	b123      	cbz	r3, 8006fac <ai_buffer_array_sane+0x10>
 8006fa2:	8840      	ldrh	r0, [r0, #2]
 8006fa4:	3800      	subs	r0, #0
 8006fa6:	bf18      	it	ne
 8006fa8:	2001      	movne	r0, #1
 8006faa:	4770      	bx	lr
 8006fac:	4618      	mov	r0, r3
 8006fae:	4770      	bx	lr

08006fb0 <ai_buffer_array_item_set_address>:
 8006fb0:	b150      	cbz	r0, 8006fc8 <ai_buffer_array_item_set_address+0x18>
 8006fb2:	6843      	ldr	r3, [r0, #4]
 8006fb4:	b14b      	cbz	r3, 8006fca <ai_buffer_array_item_set_address+0x1a>
 8006fb6:	8840      	ldrh	r0, [r0, #2]
 8006fb8:	b900      	cbnz	r0, 8006fbc <ai_buffer_array_item_set_address+0xc>
 8006fba:	4770      	bx	lr
 8006fbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006fc0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	604a      	str	r2, [r1, #4]
 8006fc8:	4770      	bx	lr
 8006fca:	4618      	mov	r0, r3
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop

08006fd0 <_ai_platform_acquire_crc>:
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	4770      	bx	lr

08006fd4 <_ai_platform_release_crc>:
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop

08006fd8 <ai_platform_get_weights_map>:
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	d037      	beq.n	800704c <ai_platform_get_weights_map+0x74>
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	4604      	mov	r4, r0
 8006fe0:	b1a0      	cbz	r0, 800700c <ai_platform_get_weights_map+0x34>
 8006fe2:	460f      	mov	r7, r1
 8006fe4:	b191      	cbz	r1, 800700c <ai_platform_get_weights_map+0x34>
 8006fe6:	4b25      	ldr	r3, [pc, #148]	; (800707c <ai_platform_get_weights_map+0xa4>)
 8006fe8:	6810      	ldr	r0, [r2, #0]
 8006fea:	4298      	cmp	r0, r3
 8006fec:	4615      	mov	r5, r2
 8006fee:	d00f      	beq.n	8007010 <ai_platform_get_weights_map+0x38>
 8006ff0:	6855      	ldr	r5, [r2, #4]
 8006ff2:	b15d      	cbz	r5, 800700c <ai_platform_get_weights_map+0x34>
 8006ff4:	682e      	ldr	r6, [r5, #0]
 8006ff6:	429e      	cmp	r6, r3
 8006ff8:	d02a      	beq.n	8007050 <ai_platform_get_weights_map+0x78>
 8006ffa:	f1a1 0001 	sub.w	r0, r1, #1
 8006ffe:	6025      	str	r5, [r4, #0]
 8007000:	fab0 f080 	clz	r0, r0
 8007004:	0940      	lsrs	r0, r0, #5
 8007006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007008:	42a7      	cmp	r7, r4
 800700a:	d034      	beq.n	8007076 <ai_platform_get_weights_map+0x9e>
 800700c:	2000      	movs	r0, #0
 800700e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007010:	1d10      	adds	r0, r2, #4
 8007012:	f7ff ffc3 	bl	8006f9c <ai_buffer_array_sane>
 8007016:	2800      	cmp	r0, #0
 8007018:	d0f8      	beq.n	800700c <ai_platform_get_weights_map+0x34>
 800701a:	88eb      	ldrh	r3, [r5, #6]
 800701c:	429f      	cmp	r7, r3
 800701e:	d1f5      	bne.n	800700c <ai_platform_get_weights_map+0x34>
 8007020:	f04f 0e00 	mov.w	lr, #0
 8007024:	1f23      	subs	r3, r4, #4
 8007026:	4670      	mov	r0, lr
 8007028:	68aa      	ldr	r2, [r5, #8]
 800702a:	eb02 0c0e 	add.w	ip, r2, lr
 800702e:	f10e 0e1c 	add.w	lr, lr, #28
 8007032:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8007036:	b124      	cbz	r4, 8007042 <ai_platform_get_weights_map+0x6a>
 8007038:	3001      	adds	r0, #1
 800703a:	4287      	cmp	r7, r0
 800703c:	f843 4f04 	str.w	r4, [r3, #4]!
 8007040:	d1f2      	bne.n	8007028 <ai_platform_get_weights_map+0x50>
 8007042:	1a38      	subs	r0, r7, r0
 8007044:	fab0 f080 	clz	r0, r0
 8007048:	0940      	lsrs	r0, r0, #5
 800704a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704c:	2000      	movs	r0, #0
 800704e:	4770      	bx	lr
 8007050:	1f23      	subs	r3, r4, #4
 8007052:	4628      	mov	r0, r5
 8007054:	2400      	movs	r4, #0
 8007056:	e000      	b.n	800705a <ai_platform_get_weights_map+0x82>
 8007058:	4614      	mov	r4, r2
 800705a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800705e:	42b2      	cmp	r2, r6
 8007060:	d0d2      	beq.n	8007008 <ai_platform_get_weights_map+0x30>
 8007062:	f843 2f04 	str.w	r2, [r3, #4]!
 8007066:	1c62      	adds	r2, r4, #1
 8007068:	4297      	cmp	r7, r2
 800706a:	d1f5      	bne.n	8007058 <ai_platform_get_weights_map+0x80>
 800706c:	3402      	adds	r4, #2
 800706e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007072:	42b3      	cmp	r3, r6
 8007074:	d1ca      	bne.n	800700c <ai_platform_get_weights_map+0x34>
 8007076:	2001      	movs	r0, #1
 8007078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800707a:	bf00      	nop
 800707c:	a1facade 	.word	0xa1facade

08007080 <ai_platform_get_activations_map>:
 8007080:	2a00      	cmp	r2, #0
 8007082:	d038      	beq.n	80070f6 <ai_platform_get_activations_map+0x76>
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	4604      	mov	r4, r0
 8007088:	b1a0      	cbz	r0, 80070b4 <ai_platform_get_activations_map+0x34>
 800708a:	460f      	mov	r7, r1
 800708c:	b191      	cbz	r1, 80070b4 <ai_platform_get_activations_map+0x34>
 800708e:	4b25      	ldr	r3, [pc, #148]	; (8007124 <ai_platform_get_activations_map+0xa4>)
 8007090:	6810      	ldr	r0, [r2, #0]
 8007092:	4298      	cmp	r0, r3
 8007094:	4615      	mov	r5, r2
 8007096:	d00f      	beq.n	80070b8 <ai_platform_get_activations_map+0x38>
 8007098:	6a15      	ldr	r5, [r2, #32]
 800709a:	b15d      	cbz	r5, 80070b4 <ai_platform_get_activations_map+0x34>
 800709c:	682e      	ldr	r6, [r5, #0]
 800709e:	429e      	cmp	r6, r3
 80070a0:	d02b      	beq.n	80070fa <ai_platform_get_activations_map+0x7a>
 80070a2:	f1a1 0001 	sub.w	r0, r1, #1
 80070a6:	6025      	str	r5, [r4, #0]
 80070a8:	fab0 f080 	clz	r0, r0
 80070ac:	0940      	lsrs	r0, r0, #5
 80070ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b0:	42a7      	cmp	r7, r4
 80070b2:	d035      	beq.n	8007120 <ai_platform_get_activations_map+0xa0>
 80070b4:	2000      	movs	r0, #0
 80070b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070b8:	f102 000c 	add.w	r0, r2, #12
 80070bc:	f7ff ff6e 	bl	8006f9c <ai_buffer_array_sane>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d0f7      	beq.n	80070b4 <ai_platform_get_activations_map+0x34>
 80070c4:	89eb      	ldrh	r3, [r5, #14]
 80070c6:	429f      	cmp	r7, r3
 80070c8:	d1f4      	bne.n	80070b4 <ai_platform_get_activations_map+0x34>
 80070ca:	f04f 0e00 	mov.w	lr, #0
 80070ce:	1f23      	subs	r3, r4, #4
 80070d0:	4670      	mov	r0, lr
 80070d2:	692a      	ldr	r2, [r5, #16]
 80070d4:	eb02 0c0e 	add.w	ip, r2, lr
 80070d8:	f10e 0e1c 	add.w	lr, lr, #28
 80070dc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80070e0:	b124      	cbz	r4, 80070ec <ai_platform_get_activations_map+0x6c>
 80070e2:	3001      	adds	r0, #1
 80070e4:	4287      	cmp	r7, r0
 80070e6:	f843 4f04 	str.w	r4, [r3, #4]!
 80070ea:	d1f2      	bne.n	80070d2 <ai_platform_get_activations_map+0x52>
 80070ec:	1a38      	subs	r0, r7, r0
 80070ee:	fab0 f080 	clz	r0, r0
 80070f2:	0940      	lsrs	r0, r0, #5
 80070f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f6:	2000      	movs	r0, #0
 80070f8:	4770      	bx	lr
 80070fa:	1f23      	subs	r3, r4, #4
 80070fc:	4628      	mov	r0, r5
 80070fe:	2400      	movs	r4, #0
 8007100:	e000      	b.n	8007104 <ai_platform_get_activations_map+0x84>
 8007102:	4614      	mov	r4, r2
 8007104:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8007108:	42b2      	cmp	r2, r6
 800710a:	d0d1      	beq.n	80070b0 <ai_platform_get_activations_map+0x30>
 800710c:	f843 2f04 	str.w	r2, [r3, #4]!
 8007110:	1c62      	adds	r2, r4, #1
 8007112:	4297      	cmp	r7, r2
 8007114:	d1f5      	bne.n	8007102 <ai_platform_get_activations_map+0x82>
 8007116:	3402      	adds	r4, #2
 8007118:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800711c:	42b3      	cmp	r3, r6
 800711e:	d1c9      	bne.n	80070b4 <ai_platform_get_activations_map+0x34>
 8007120:	2001      	movs	r0, #1
 8007122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007124:	a1facade 	.word	0xa1facade

08007128 <ai_platform_bind_network_params>:
 8007128:	b1a0      	cbz	r0, 8007154 <ai_platform_bind_network_params+0x2c>
 800712a:	b1b1      	cbz	r1, 800715a <ai_platform_bind_network_params+0x32>
 800712c:	b1c2      	cbz	r2, 8007160 <ai_platform_bind_network_params+0x38>
 800712e:	b410      	push	{r4}
 8007130:	4603      	mov	r3, r0
 8007132:	4c0d      	ldr	r4, [pc, #52]	; (8007168 <ai_platform_bind_network_params+0x40>)
 8007134:	f843 4b04 	str.w	r4, [r3], #4
 8007138:	f100 0c0c 	add.w	ip, r0, #12
 800713c:	c903      	ldmia	r1, {r0, r1}
 800713e:	e883 0003 	stmia.w	r3, {r0, r1}
 8007142:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007146:	e88c 0003 	stmia.w	ip, {r0, r1}
 800714a:	2301      	movs	r3, #1
 800714c:	4618      	mov	r0, r3
 800714e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	4603      	mov	r3, r0
 8007156:	4618      	mov	r0, r3
 8007158:	4770      	bx	lr
 800715a:	460b      	mov	r3, r1
 800715c:	4618      	mov	r0, r3
 800715e:	4770      	bx	lr
 8007160:	4613      	mov	r3, r2
 8007162:	4618      	mov	r0, r3
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	a1facade 	.word	0xa1facade

0800716c <ai_platform_network_get_error>:
 800716c:	b510      	push	{r4, lr}
 800716e:	b1f0      	cbz	r0, 80071ae <ai_platform_network_get_error+0x42>
 8007170:	4b2f      	ldr	r3, [pc, #188]	; (8007230 <ai_platform_network_get_error+0xc4>)
 8007172:	6802      	ldr	r2, [r0, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	4604      	mov	r4, r0
 8007178:	d119      	bne.n	80071ae <ai_platform_network_get_error+0x42>
 800717a:	f7ff ff29 	bl	8006fd0 <_ai_platform_acquire_crc>
 800717e:	4b2d      	ldr	r3, [pc, #180]	; (8007234 <ai_platform_network_get_error+0xc8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800718a:	d03c      	beq.n	8007206 <ai_platform_network_get_error+0x9a>
 800718c:	4a2a      	ldr	r2, [pc, #168]	; (8007238 <ai_platform_network_get_error+0xcc>)
 800718e:	2301      	movs	r3, #1
 8007190:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007194:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1fb      	bne.n	8007194 <ai_platform_network_get_error+0x28>
 800719c:	4b27      	ldr	r3, [pc, #156]	; (800723c <ai_platform_network_get_error+0xd0>)
 800719e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80071a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80071a6:	4b26      	ldr	r3, [pc, #152]	; (8007240 <ai_platform_network_get_error+0xd4>)
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d038      	beq.n	800721e <ai_platform_network_get_error+0xb2>
 80071ac:	e7fe      	b.n	80071ac <ai_platform_network_get_error+0x40>
 80071ae:	f7ff ff0f 	bl	8006fd0 <_ai_platform_acquire_crc>
 80071b2:	4b20      	ldr	r3, [pc, #128]	; (8007234 <ai_platform_network_get_error+0xc8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071be:	d010      	beq.n	80071e2 <ai_platform_network_get_error+0x76>
 80071c0:	4a1d      	ldr	r2, [pc, #116]	; (8007238 <ai_platform_network_get_error+0xcc>)
 80071c2:	2301      	movs	r3, #1
 80071c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80071c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1fb      	bne.n	80071c8 <ai_platform_network_get_error+0x5c>
 80071d0:	4b1a      	ldr	r3, [pc, #104]	; (800723c <ai_platform_network_get_error+0xd0>)
 80071d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80071d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80071da:	4b19      	ldr	r3, [pc, #100]	; (8007240 <ai_platform_network_get_error+0xd4>)
 80071dc:	429a      	cmp	r2, r3
 80071de:	d00d      	beq.n	80071fc <ai_platform_network_get_error+0x90>
 80071e0:	e7fe      	b.n	80071e0 <ai_platform_network_get_error+0x74>
 80071e2:	4a18      	ldr	r2, [pc, #96]	; (8007244 <ai_platform_network_get_error+0xd8>)
 80071e4:	2301      	movs	r3, #1
 80071e6:	6093      	str	r3, [r2, #8]
 80071e8:	6893      	ldr	r3, [r2, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1fc      	bne.n	80071e8 <ai_platform_network_get_error+0x7c>
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <ai_platform_network_get_error+0xd0>)
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	4b12      	ldr	r3, [pc, #72]	; (8007240 <ai_platform_network_get_error+0xd4>)
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d000      	beq.n	80071fc <ai_platform_network_get_error+0x90>
 80071fa:	e7fe      	b.n	80071fa <ai_platform_network_get_error+0x8e>
 80071fc:	f7ff feea 	bl	8006fd4 <_ai_platform_release_crc>
 8007200:	f241 0010 	movw	r0, #4112	; 0x1010
 8007204:	bd10      	pop	{r4, pc}
 8007206:	4a0f      	ldr	r2, [pc, #60]	; (8007244 <ai_platform_network_get_error+0xd8>)
 8007208:	2301      	movs	r3, #1
 800720a:	6093      	str	r3, [r2, #8]
 800720c:	6893      	ldr	r3, [r2, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1fc      	bne.n	800720c <ai_platform_network_get_error+0xa0>
 8007212:	4b0a      	ldr	r3, [pc, #40]	; (800723c <ai_platform_network_get_error+0xd0>)
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	6812      	ldr	r2, [r2, #0]
 8007218:	4b09      	ldr	r3, [pc, #36]	; (8007240 <ai_platform_network_get_error+0xd4>)
 800721a:	429a      	cmp	r2, r3
 800721c:	d107      	bne.n	800722e <ai_platform_network_get_error+0xc2>
 800721e:	f7ff fed9 	bl	8006fd4 <_ai_platform_release_crc>
 8007222:	f104 0010 	add.w	r0, r4, #16
 8007226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800722a:	f000 be8d 	b.w	8007f48 <core_get_error>
 800722e:	e7fe      	b.n	800722e <ai_platform_network_get_error+0xc2>
 8007230:	a1c00100 	.word	0xa1c00100
 8007234:	e0042000 	.word	0xe0042000
 8007238:	58024000 	.word	0x58024000
 800723c:	f407a5c2 	.word	0xf407a5c2
 8007240:	b5e8b5cd 	.word	0xb5e8b5cd
 8007244:	40023000 	.word	0x40023000

08007248 <ai_platform_network_set_error>:
 8007248:	b110      	cbz	r0, 8007250 <ai_platform_network_set_error+0x8>
 800724a:	3010      	adds	r0, #16
 800724c:	f000 be82 	b.w	8007f54 <core_set_error>
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop

08007254 <ai_platform_inputs_get>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	b085      	sub	sp, #20
 800725a:	9102      	str	r1, [sp, #8]
 800725c:	b1f0      	cbz	r0, 800729c <ai_platform_inputs_get+0x48>
 800725e:	4b62      	ldr	r3, [pc, #392]	; (80073e8 <ai_platform_inputs_get+0x194>)
 8007260:	6802      	ldr	r2, [r0, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	4607      	mov	r7, r0
 8007266:	d119      	bne.n	800729c <ai_platform_inputs_get+0x48>
 8007268:	f7ff feb2 	bl	8006fd0 <_ai_platform_acquire_crc>
 800726c:	4b5f      	ldr	r3, [pc, #380]	; (80073ec <ai_platform_inputs_get+0x198>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007278:	d03d      	beq.n	80072f6 <ai_platform_inputs_get+0xa2>
 800727a:	4a5d      	ldr	r2, [pc, #372]	; (80073f0 <ai_platform_inputs_get+0x19c>)
 800727c:	2301      	movs	r3, #1
 800727e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007282:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1fb      	bne.n	8007282 <ai_platform_inputs_get+0x2e>
 800728a:	4b5a      	ldr	r3, [pc, #360]	; (80073f4 <ai_platform_inputs_get+0x1a0>)
 800728c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007290:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007294:	4b58      	ldr	r3, [pc, #352]	; (80073f8 <ai_platform_inputs_get+0x1a4>)
 8007296:	429a      	cmp	r2, r3
 8007298:	d039      	beq.n	800730e <ai_platform_inputs_get+0xba>
 800729a:	e7fe      	b.n	800729a <ai_platform_inputs_get+0x46>
 800729c:	f7ff fe98 	bl	8006fd0 <_ai_platform_acquire_crc>
 80072a0:	4b52      	ldr	r3, [pc, #328]	; (80073ec <ai_platform_inputs_get+0x198>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ac:	d010      	beq.n	80072d0 <ai_platform_inputs_get+0x7c>
 80072ae:	4a50      	ldr	r2, [pc, #320]	; (80073f0 <ai_platform_inputs_get+0x19c>)
 80072b0:	2301      	movs	r3, #1
 80072b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80072b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1fb      	bne.n	80072b6 <ai_platform_inputs_get+0x62>
 80072be:	4b4d      	ldr	r3, [pc, #308]	; (80073f4 <ai_platform_inputs_get+0x1a0>)
 80072c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80072c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072c8:	4b4b      	ldr	r3, [pc, #300]	; (80073f8 <ai_platform_inputs_get+0x1a4>)
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d00d      	beq.n	80072ea <ai_platform_inputs_get+0x96>
 80072ce:	e7fe      	b.n	80072ce <ai_platform_inputs_get+0x7a>
 80072d0:	4a4a      	ldr	r2, [pc, #296]	; (80073fc <ai_platform_inputs_get+0x1a8>)
 80072d2:	2301      	movs	r3, #1
 80072d4:	6093      	str	r3, [r2, #8]
 80072d6:	6893      	ldr	r3, [r2, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1fc      	bne.n	80072d6 <ai_platform_inputs_get+0x82>
 80072dc:	4b45      	ldr	r3, [pc, #276]	; (80073f4 <ai_platform_inputs_get+0x1a0>)
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	4b45      	ldr	r3, [pc, #276]	; (80073f8 <ai_platform_inputs_get+0x1a4>)
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d000      	beq.n	80072ea <ai_platform_inputs_get+0x96>
 80072e8:	e7fe      	b.n	80072e8 <ai_platform_inputs_get+0x94>
 80072ea:	f7ff fe73 	bl	8006fd4 <_ai_platform_release_crc>
 80072ee:	2000      	movs	r0, #0
 80072f0:	b005      	add	sp, #20
 80072f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f6:	4a41      	ldr	r2, [pc, #260]	; (80073fc <ai_platform_inputs_get+0x1a8>)
 80072f8:	2301      	movs	r3, #1
 80072fa:	6093      	str	r3, [r2, #8]
 80072fc:	6893      	ldr	r3, [r2, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1fc      	bne.n	80072fc <ai_platform_inputs_get+0xa8>
 8007302:	4b3c      	ldr	r3, [pc, #240]	; (80073f4 <ai_platform_inputs_get+0x1a0>)
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	6812      	ldr	r2, [r2, #0]
 8007308:	4b3b      	ldr	r3, [pc, #236]	; (80073f8 <ai_platform_inputs_get+0x1a4>)
 800730a:	429a      	cmp	r2, r3
 800730c:	d155      	bne.n	80073ba <ai_platform_inputs_get+0x166>
 800730e:	f7ff fe61 	bl	8006fd4 <_ai_platform_release_crc>
 8007312:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d051      	beq.n	80073bc <ai_platform_inputs_get+0x168>
 8007318:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800731c:	f1ba 0f00 	cmp.w	sl, #0
 8007320:	d04c      	beq.n	80073bc <ai_platform_inputs_get+0x168>
 8007322:	f04f 0b00 	mov.w	fp, #0
 8007326:	465d      	mov	r5, fp
 8007328:	9703      	str	r7, [sp, #12]
 800732a:	e016      	b.n	800735a <ai_platform_inputs_get+0x106>
 800732c:	9901      	ldr	r1, [sp, #4]
 800732e:	2301      	movs	r3, #1
 8007330:	507b      	str	r3, [r7, r1]
 8007332:	69b1      	ldr	r1, [r6, #24]
 8007334:	6849      	ldr	r1, [r1, #4]
 8007336:	6121      	str	r1, [r4, #16]
 8007338:	f04f 0301 	mov.w	r3, #1
 800733c:	7523      	strb	r3, [r4, #20]
 800733e:	e9c4 c200 	strd	ip, r2, [r4]
 8007342:	6962      	ldr	r2, [r4, #20]
 8007344:	60a0      	str	r0, [r4, #8]
 8007346:	2300      	movs	r3, #0
 8007348:	f369 221f 	bfi	r2, r9, #8, #24
 800734c:	f8c4 8018 	str.w	r8, [r4, #24]
 8007350:	60e3      	str	r3, [r4, #12]
 8007352:	3501      	adds	r5, #1
 8007354:	f10b 0b1c 	add.w	fp, fp, #28
 8007358:	6162      	str	r2, [r4, #20]
 800735a:	f8ba 3000 	ldrh.w	r3, [sl]
 800735e:	42ab      	cmp	r3, r5
 8007360:	b2aa      	uxth	r2, r5
 8007362:	d93a      	bls.n	80073da <ai_platform_inputs_get+0x186>
 8007364:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007368:	00e9      	lsls	r1, r5, #3
 800736a:	9101      	str	r1, [sp, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d034      	beq.n	80073da <ai_platform_inputs_get+0x186>
 8007370:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007374:	2e00      	cmp	r6, #0
 8007376:	d030      	beq.n	80073da <ai_platform_inputs_get+0x186>
 8007378:	f8da 3008 	ldr.w	r3, [sl, #8]
 800737c:	69b2      	ldr	r2, [r6, #24]
 800737e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8007382:	6810      	ldr	r0, [r2, #0]
 8007384:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007388:	68b3      	ldr	r3, [r6, #8]
 800738a:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800738e:	f001 fc2d 	bl	8008bec <ai_array_to_buffer_fmt>
 8007392:	69b1      	ldr	r1, [r6, #24]
 8007394:	4684      	mov	ip, r0
 8007396:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800739a:	688a      	ldr	r2, [r1, #8]
 800739c:	445c      	add	r4, fp
 800739e:	2800      	cmp	r0, #0
 80073a0:	d0c8      	beq.n	8007334 <ai_platform_inputs_get+0xe0>
 80073a2:	2100      	movs	r1, #0
 80073a4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80073a8:	6831      	ldr	r1, [r6, #0]
 80073aa:	6041      	str	r1, [r0, #4]
 80073ac:	b111      	cbz	r1, 80073b4 <ai_platform_inputs_get+0x160>
 80073ae:	8849      	ldrh	r1, [r1, #2]
 80073b0:	2900      	cmp	r1, #0
 80073b2:	d1bb      	bne.n	800732c <ai_platform_inputs_get+0xd8>
 80073b4:	69b1      	ldr	r1, [r6, #24]
 80073b6:	2000      	movs	r0, #0
 80073b8:	e7bc      	b.n	8007334 <ai_platform_inputs_get+0xe0>
 80073ba:	e7fe      	b.n	80073ba <ai_platform_inputs_get+0x166>
 80073bc:	2218      	movs	r2, #24
 80073be:	2111      	movs	r1, #17
 80073c0:	f107 0010 	add.w	r0, r7, #16
 80073c4:	f000 fdc6 	bl	8007f54 <core_set_error>
 80073c8:	2200      	movs	r2, #0
 80073ca:	4610      	mov	r0, r2
 80073cc:	9b02      	ldr	r3, [sp, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d08e      	beq.n	80072f0 <ai_platform_inputs_get+0x9c>
 80073d2:	801a      	strh	r2, [r3, #0]
 80073d4:	b005      	add	sp, #20
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	9f03      	ldr	r7, [sp, #12]
 80073dc:	2a00      	cmp	r2, #0
 80073de:	d0ed      	beq.n	80073bc <ai_platform_inputs_get+0x168>
 80073e0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80073e4:	6858      	ldr	r0, [r3, #4]
 80073e6:	e7f1      	b.n	80073cc <ai_platform_inputs_get+0x178>
 80073e8:	a1c00100 	.word	0xa1c00100
 80073ec:	e0042000 	.word	0xe0042000
 80073f0:	58024000 	.word	0x58024000
 80073f4:	f407a5c2 	.word	0xf407a5c2
 80073f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80073fc:	40023000 	.word	0x40023000

08007400 <ai_platform_outputs_get>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	b085      	sub	sp, #20
 8007406:	9102      	str	r1, [sp, #8]
 8007408:	b1f0      	cbz	r0, 8007448 <ai_platform_outputs_get+0x48>
 800740a:	4b5f      	ldr	r3, [pc, #380]	; (8007588 <ai_platform_outputs_get+0x188>)
 800740c:	6802      	ldr	r2, [r0, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	4607      	mov	r7, r0
 8007412:	d119      	bne.n	8007448 <ai_platform_outputs_get+0x48>
 8007414:	f7ff fddc 	bl	8006fd0 <_ai_platform_acquire_crc>
 8007418:	4b5c      	ldr	r3, [pc, #368]	; (800758c <ai_platform_outputs_get+0x18c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007424:	d03d      	beq.n	80074a2 <ai_platform_outputs_get+0xa2>
 8007426:	4a5a      	ldr	r2, [pc, #360]	; (8007590 <ai_platform_outputs_get+0x190>)
 8007428:	2301      	movs	r3, #1
 800742a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800742e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1fb      	bne.n	800742e <ai_platform_outputs_get+0x2e>
 8007436:	4b57      	ldr	r3, [pc, #348]	; (8007594 <ai_platform_outputs_get+0x194>)
 8007438:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800743c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007440:	4b55      	ldr	r3, [pc, #340]	; (8007598 <ai_platform_outputs_get+0x198>)
 8007442:	429a      	cmp	r2, r3
 8007444:	d039      	beq.n	80074ba <ai_platform_outputs_get+0xba>
 8007446:	e7fe      	b.n	8007446 <ai_platform_outputs_get+0x46>
 8007448:	f7ff fdc2 	bl	8006fd0 <_ai_platform_acquire_crc>
 800744c:	4b4f      	ldr	r3, [pc, #316]	; (800758c <ai_platform_outputs_get+0x18c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007458:	d010      	beq.n	800747c <ai_platform_outputs_get+0x7c>
 800745a:	4a4d      	ldr	r2, [pc, #308]	; (8007590 <ai_platform_outputs_get+0x190>)
 800745c:	2301      	movs	r3, #1
 800745e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007462:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1fb      	bne.n	8007462 <ai_platform_outputs_get+0x62>
 800746a:	4b4a      	ldr	r3, [pc, #296]	; (8007594 <ai_platform_outputs_get+0x194>)
 800746c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007470:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007474:	4b48      	ldr	r3, [pc, #288]	; (8007598 <ai_platform_outputs_get+0x198>)
 8007476:	429a      	cmp	r2, r3
 8007478:	d00d      	beq.n	8007496 <ai_platform_outputs_get+0x96>
 800747a:	e7fe      	b.n	800747a <ai_platform_outputs_get+0x7a>
 800747c:	4a47      	ldr	r2, [pc, #284]	; (800759c <ai_platform_outputs_get+0x19c>)
 800747e:	2301      	movs	r3, #1
 8007480:	6093      	str	r3, [r2, #8]
 8007482:	6893      	ldr	r3, [r2, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1fc      	bne.n	8007482 <ai_platform_outputs_get+0x82>
 8007488:	4b42      	ldr	r3, [pc, #264]	; (8007594 <ai_platform_outputs_get+0x194>)
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	4b42      	ldr	r3, [pc, #264]	; (8007598 <ai_platform_outputs_get+0x198>)
 8007490:	429a      	cmp	r2, r3
 8007492:	d000      	beq.n	8007496 <ai_platform_outputs_get+0x96>
 8007494:	e7fe      	b.n	8007494 <ai_platform_outputs_get+0x94>
 8007496:	f7ff fd9d 	bl	8006fd4 <_ai_platform_release_crc>
 800749a:	2000      	movs	r0, #0
 800749c:	b005      	add	sp, #20
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	4a3e      	ldr	r2, [pc, #248]	; (800759c <ai_platform_outputs_get+0x19c>)
 80074a4:	2301      	movs	r3, #1
 80074a6:	6093      	str	r3, [r2, #8]
 80074a8:	6893      	ldr	r3, [r2, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1fc      	bne.n	80074a8 <ai_platform_outputs_get+0xa8>
 80074ae:	4b39      	ldr	r3, [pc, #228]	; (8007594 <ai_platform_outputs_get+0x194>)
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	4b38      	ldr	r3, [pc, #224]	; (8007598 <ai_platform_outputs_get+0x198>)
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d150      	bne.n	800755c <ai_platform_outputs_get+0x15c>
 80074ba:	f7ff fd8b 	bl	8006fd4 <_ai_platform_release_crc>
 80074be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d958      	bls.n	8007576 <ai_platform_outputs_get+0x176>
 80074c4:	f04f 0b00 	mov.w	fp, #0
 80074c8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80074cc:	9703      	str	r7, [sp, #12]
 80074ce:	465d      	mov	r5, fp
 80074d0:	e016      	b.n	8007500 <ai_platform_outputs_get+0x100>
 80074d2:	9901      	ldr	r1, [sp, #4]
 80074d4:	2301      	movs	r3, #1
 80074d6:	507b      	str	r3, [r7, r1]
 80074d8:	69b1      	ldr	r1, [r6, #24]
 80074da:	6849      	ldr	r1, [r1, #4]
 80074dc:	6121      	str	r1, [r4, #16]
 80074de:	f04f 0301 	mov.w	r3, #1
 80074e2:	7523      	strb	r3, [r4, #20]
 80074e4:	e9c4 c200 	strd	ip, r2, [r4]
 80074e8:	6962      	ldr	r2, [r4, #20]
 80074ea:	60a0      	str	r0, [r4, #8]
 80074ec:	2300      	movs	r3, #0
 80074ee:	f369 221f 	bfi	r2, r9, #8, #24
 80074f2:	f8c4 8018 	str.w	r8, [r4, #24]
 80074f6:	60e3      	str	r3, [r4, #12]
 80074f8:	3501      	adds	r5, #1
 80074fa:	f10b 0b1c 	add.w	fp, fp, #28
 80074fe:	6162      	str	r2, [r4, #20]
 8007500:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007504:	42ab      	cmp	r3, r5
 8007506:	b2aa      	uxth	r2, r5
 8007508:	d929      	bls.n	800755e <ai_platform_outputs_get+0x15e>
 800750a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800750e:	00e9      	lsls	r1, r5, #3
 8007510:	9101      	str	r1, [sp, #4]
 8007512:	b323      	cbz	r3, 800755e <ai_platform_outputs_get+0x15e>
 8007514:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007518:	b30e      	cbz	r6, 800755e <ai_platform_outputs_get+0x15e>
 800751a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800751e:	69b2      	ldr	r2, [r6, #24]
 8007520:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8007524:	6810      	ldr	r0, [r2, #0]
 8007526:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800752a:	68b3      	ldr	r3, [r6, #8]
 800752c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007530:	f001 fb5c 	bl	8008bec <ai_array_to_buffer_fmt>
 8007534:	69b1      	ldr	r1, [r6, #24]
 8007536:	4684      	mov	ip, r0
 8007538:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800753c:	688a      	ldr	r2, [r1, #8]
 800753e:	445c      	add	r4, fp
 8007540:	2800      	cmp	r0, #0
 8007542:	d0ca      	beq.n	80074da <ai_platform_outputs_get+0xda>
 8007544:	2100      	movs	r1, #0
 8007546:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800754a:	6831      	ldr	r1, [r6, #0]
 800754c:	6041      	str	r1, [r0, #4]
 800754e:	b111      	cbz	r1, 8007556 <ai_platform_outputs_get+0x156>
 8007550:	8849      	ldrh	r1, [r1, #2]
 8007552:	2900      	cmp	r1, #0
 8007554:	d1bd      	bne.n	80074d2 <ai_platform_outputs_get+0xd2>
 8007556:	69b1      	ldr	r1, [r6, #24]
 8007558:	2000      	movs	r0, #0
 800755a:	e7be      	b.n	80074da <ai_platform_outputs_get+0xda>
 800755c:	e7fe      	b.n	800755c <ai_platform_outputs_get+0x15c>
 800755e:	9f03      	ldr	r7, [sp, #12]
 8007560:	b14a      	cbz	r2, 8007576 <ai_platform_outputs_get+0x176>
 8007562:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007566:	6858      	ldr	r0, [r3, #4]
 8007568:	9b02      	ldr	r3, [sp, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d096      	beq.n	800749c <ai_platform_outputs_get+0x9c>
 800756e:	801a      	strh	r2, [r3, #0]
 8007570:	b005      	add	sp, #20
 8007572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007576:	2218      	movs	r2, #24
 8007578:	2111      	movs	r1, #17
 800757a:	f107 0010 	add.w	r0, r7, #16
 800757e:	f000 fce9 	bl	8007f54 <core_set_error>
 8007582:	2200      	movs	r2, #0
 8007584:	4610      	mov	r0, r2
 8007586:	e7ef      	b.n	8007568 <ai_platform_outputs_get+0x168>
 8007588:	a1c00100 	.word	0xa1c00100
 800758c:	e0042000 	.word	0xe0042000
 8007590:	58024000 	.word	0x58024000
 8007594:	f407a5c2 	.word	0xf407a5c2
 8007598:	b5e8b5cd 	.word	0xb5e8b5cd
 800759c:	40023000 	.word	0x40023000

080075a0 <ai_platform_network_create>:
 80075a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075a4:	b083      	sub	sp, #12
 80075a6:	4606      	mov	r6, r0
 80075a8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80075ac:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80075b0:	4615      	mov	r5, r2
 80075b2:	461f      	mov	r7, r3
 80075b4:	f7ff fd0c 	bl	8006fd0 <_ai_platform_acquire_crc>
 80075b8:	b188      	cbz	r0, 80075de <ai_platform_network_create+0x3e>
 80075ba:	4a5d      	ldr	r2, [pc, #372]	; (8007730 <ai_platform_network_create+0x190>)
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80075c2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80075c6:	4603      	mov	r3, r0
 80075c8:	d00e      	beq.n	80075e8 <ai_platform_network_create+0x48>
 80075ca:	4a5a      	ldr	r2, [pc, #360]	; (8007734 <ai_platform_network_create+0x194>)
 80075cc:	2118      	movs	r1, #24
 80075ce:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80075d2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80075d6:	2918      	cmp	r1, #24
 80075d8:	d018      	beq.n	800760c <ai_platform_network_create+0x6c>
 80075da:	f7ff fcfb 	bl	8006fd4 <_ai_platform_release_crc>
 80075de:	f244 1033 	movw	r0, #16691	; 0x4133
 80075e2:	b003      	add	sp, #12
 80075e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075e8:	4a53      	ldr	r2, [pc, #332]	; (8007738 <ai_platform_network_create+0x198>)
 80075ea:	2101      	movs	r1, #1
 80075ec:	6091      	str	r1, [r2, #8]
 80075ee:	2114      	movs	r1, #20
 80075f0:	e001      	b.n	80075f6 <ai_platform_network_create+0x56>
 80075f2:	3901      	subs	r1, #1
 80075f4:	d002      	beq.n	80075fc <ai_platform_network_create+0x5c>
 80075f6:	6894      	ldr	r4, [r2, #8]
 80075f8:	2c00      	cmp	r4, #0
 80075fa:	d1fa      	bne.n	80075f2 <ai_platform_network_create+0x52>
 80075fc:	4a4e      	ldr	r2, [pc, #312]	; (8007738 <ai_platform_network_create+0x198>)
 80075fe:	6891      	ldr	r1, [r2, #8]
 8007600:	b911      	cbnz	r1, 8007608 <ai_platform_network_create+0x68>
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	3201      	adds	r2, #1
 8007606:	d008      	beq.n	800761a <ai_platform_network_create+0x7a>
 8007608:	4618      	mov	r0, r3
 800760a:	e7e6      	b.n	80075da <ai_platform_network_create+0x3a>
 800760c:	2101      	movs	r1, #1
 800760e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8007612:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8007616:	2900      	cmp	r1, #0
 8007618:	d1fb      	bne.n	8007612 <ai_platform_network_create+0x72>
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fcda 	bl	8006fd4 <_ai_platform_release_crc>
 8007620:	f7ff fcd6 	bl	8006fd0 <_ai_platform_acquire_crc>
 8007624:	4b42      	ldr	r3, [pc, #264]	; (8007730 <ai_platform_network_create+0x190>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007630:	d010      	beq.n	8007654 <ai_platform_network_create+0xb4>
 8007632:	4b40      	ldr	r3, [pc, #256]	; (8007734 <ai_platform_network_create+0x194>)
 8007634:	2201      	movs	r2, #1
 8007636:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800763a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800763e:	2900      	cmp	r1, #0
 8007640:	d1fb      	bne.n	800763a <ai_platform_network_create+0x9a>
 8007642:	4a3e      	ldr	r2, [pc, #248]	; (800773c <ai_platform_network_create+0x19c>)
 8007644:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8007648:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800764c:	4b3c      	ldr	r3, [pc, #240]	; (8007740 <ai_platform_network_create+0x1a0>)
 800764e:	429a      	cmp	r2, r3
 8007650:	d00c      	beq.n	800766c <ai_platform_network_create+0xcc>
 8007652:	e7fe      	b.n	8007652 <ai_platform_network_create+0xb2>
 8007654:	4a38      	ldr	r2, [pc, #224]	; (8007738 <ai_platform_network_create+0x198>)
 8007656:	2301      	movs	r3, #1
 8007658:	6093      	str	r3, [r2, #8]
 800765a:	6893      	ldr	r3, [r2, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1fc      	bne.n	800765a <ai_platform_network_create+0xba>
 8007660:	4b36      	ldr	r3, [pc, #216]	; (800773c <ai_platform_network_create+0x19c>)
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	4b36      	ldr	r3, [pc, #216]	; (8007740 <ai_platform_network_create+0x1a0>)
 8007668:	429a      	cmp	r2, r3
 800766a:	d122      	bne.n	80076b2 <ai_platform_network_create+0x112>
 800766c:	f7ff fcb2 	bl	8006fd4 <_ai_platform_release_crc>
 8007670:	b38e      	cbz	r6, 80076d6 <ai_platform_network_create+0x136>
 8007672:	4b34      	ldr	r3, [pc, #208]	; (8007744 <ai_platform_network_create+0x1a4>)
 8007674:	602b      	str	r3, [r5, #0]
 8007676:	6035      	str	r5, [r6, #0]
 8007678:	f000 fc64 	bl	8007f44 <core_init>
 800767c:	b1d0      	cbz	r0, 80076b4 <ai_platform_network_create+0x114>
 800767e:	f7ff fca7 	bl	8006fd0 <_ai_platform_acquire_crc>
 8007682:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <ai_platform_network_create+0x190>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800768a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768e:	d025      	beq.n	80076dc <ai_platform_network_create+0x13c>
 8007690:	4a28      	ldr	r2, [pc, #160]	; (8007734 <ai_platform_network_create+0x194>)
 8007692:	2301      	movs	r3, #1
 8007694:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007698:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1fb      	bne.n	8007698 <ai_platform_network_create+0xf8>
 80076a0:	4b26      	ldr	r3, [pc, #152]	; (800773c <ai_platform_network_create+0x19c>)
 80076a2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80076a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80076aa:	4b25      	ldr	r3, [pc, #148]	; (8007740 <ai_platform_network_create+0x1a0>)
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d022      	beq.n	80076f6 <ai_platform_network_create+0x156>
 80076b0:	e7fe      	b.n	80076b0 <ai_platform_network_create+0x110>
 80076b2:	e7fe      	b.n	80076b2 <ai_platform_network_create+0x112>
 80076b4:	2430      	movs	r4, #48	; 0x30
 80076b6:	2300      	movs	r3, #0
 80076b8:	6033      	str	r3, [r6, #0]
 80076ba:	2610      	movs	r6, #16
 80076bc:	464a      	mov	r2, r9
 80076be:	4641      	mov	r1, r8
 80076c0:	4638      	mov	r0, r7
 80076c2:	f001 fa75 	bl	8008bb0 <ai_version_get>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2000      	movs	r0, #0
 80076ca:	f364 0007 	bfi	r0, r4, #0, #8
 80076ce:	64ab      	str	r3, [r5, #72]	; 0x48
 80076d0:	f366 201f 	bfi	r0, r6, #8, #24
 80076d4:	e785      	b.n	80075e2 <ai_platform_network_create+0x42>
 80076d6:	f241 0010 	movw	r0, #4112	; 0x1010
 80076da:	e782      	b.n	80075e2 <ai_platform_network_create+0x42>
 80076dc:	4a16      	ldr	r2, [pc, #88]	; (8007738 <ai_platform_network_create+0x198>)
 80076de:	2301      	movs	r3, #1
 80076e0:	6093      	str	r3, [r2, #8]
 80076e2:	6893      	ldr	r3, [r2, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1fc      	bne.n	80076e2 <ai_platform_network_create+0x142>
 80076e8:	4b14      	ldr	r3, [pc, #80]	; (800773c <ai_platform_network_create+0x19c>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	4b14      	ldr	r3, [pc, #80]	; (8007740 <ai_platform_network_create+0x1a0>)
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d000      	beq.n	80076f6 <ai_platform_network_create+0x156>
 80076f4:	e7fe      	b.n	80076f4 <ai_platform_network_create+0x154>
 80076f6:	f7ff fc6d 	bl	8006fd4 <_ai_platform_release_crc>
 80076fa:	2200      	movs	r2, #0
 80076fc:	4641      	mov	r1, r8
 80076fe:	4638      	mov	r0, r7
 8007700:	f001 fa56 	bl	8008bb0 <ai_version_get>
 8007704:	2200      	movs	r2, #0
 8007706:	4604      	mov	r4, r0
 8007708:	2105      	movs	r1, #5
 800770a:	2001      	movs	r0, #1
 800770c:	f001 fa50 	bl	8008bb0 <ai_version_get>
 8007710:	4284      	cmp	r4, r0
 8007712:	d001      	beq.n	8007718 <ai_platform_network_create+0x178>
 8007714:	2401      	movs	r4, #1
 8007716:	e7ce      	b.n	80076b6 <ai_platform_network_create+0x116>
 8007718:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <ai_platform_network_create+0x1a8>)
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	a801      	add	r0, sp, #4
 800771e:	f001 f88d 	bl	800883c <ai_check_custom_types>
 8007722:	b110      	cbz	r0, 800772a <ai_platform_network_create+0x18a>
 8007724:	2600      	movs	r6, #0
 8007726:	4634      	mov	r4, r6
 8007728:	e7c8      	b.n	80076bc <ai_platform_network_create+0x11c>
 800772a:	2402      	movs	r4, #2
 800772c:	e7c3      	b.n	80076b6 <ai_platform_network_create+0x116>
 800772e:	bf00      	nop
 8007730:	e0042000 	.word	0xe0042000
 8007734:	58024000 	.word	0x58024000
 8007738:	40023000 	.word	0x40023000
 800773c:	f407a5c2 	.word	0xf407a5c2
 8007740:	b5e8b5cd 	.word	0xb5e8b5cd
 8007744:	a1c00100 	.word	0xa1c00100
 8007748:	84048403 	.word	0x84048403

0800774c <ai_platform_network_init>:
 800774c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007750:	b1f8      	cbz	r0, 8007792 <ai_platform_network_init+0x46>
 8007752:	4b6e      	ldr	r3, [pc, #440]	; (800790c <ai_platform_network_init+0x1c0>)
 8007754:	6802      	ldr	r2, [r0, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	4604      	mov	r4, r0
 800775a:	d11a      	bne.n	8007792 <ai_platform_network_init+0x46>
 800775c:	460e      	mov	r6, r1
 800775e:	f7ff fc37 	bl	8006fd0 <_ai_platform_acquire_crc>
 8007762:	4b6b      	ldr	r3, [pc, #428]	; (8007910 <ai_platform_network_init+0x1c4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800776a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776e:	d03d      	beq.n	80077ec <ai_platform_network_init+0xa0>
 8007770:	4a68      	ldr	r2, [pc, #416]	; (8007914 <ai_platform_network_init+0x1c8>)
 8007772:	2301      	movs	r3, #1
 8007774:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007778:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1fb      	bne.n	8007778 <ai_platform_network_init+0x2c>
 8007780:	4b65      	ldr	r3, [pc, #404]	; (8007918 <ai_platform_network_init+0x1cc>)
 8007782:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007786:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800778a:	4b64      	ldr	r3, [pc, #400]	; (800791c <ai_platform_network_init+0x1d0>)
 800778c:	429a      	cmp	r2, r3
 800778e:	d039      	beq.n	8007804 <ai_platform_network_init+0xb8>
 8007790:	e7fe      	b.n	8007790 <ai_platform_network_init+0x44>
 8007792:	f7ff fc1d 	bl	8006fd0 <_ai_platform_acquire_crc>
 8007796:	4b5e      	ldr	r3, [pc, #376]	; (8007910 <ai_platform_network_init+0x1c4>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800779e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a2:	d010      	beq.n	80077c6 <ai_platform_network_init+0x7a>
 80077a4:	4a5b      	ldr	r2, [pc, #364]	; (8007914 <ai_platform_network_init+0x1c8>)
 80077a6:	2301      	movs	r3, #1
 80077a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80077ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1fb      	bne.n	80077ac <ai_platform_network_init+0x60>
 80077b4:	4b58      	ldr	r3, [pc, #352]	; (8007918 <ai_platform_network_init+0x1cc>)
 80077b6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80077ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80077be:	4b57      	ldr	r3, [pc, #348]	; (800791c <ai_platform_network_init+0x1d0>)
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d00d      	beq.n	80077e0 <ai_platform_network_init+0x94>
 80077c4:	e7fe      	b.n	80077c4 <ai_platform_network_init+0x78>
 80077c6:	4a56      	ldr	r2, [pc, #344]	; (8007920 <ai_platform_network_init+0x1d4>)
 80077c8:	2301      	movs	r3, #1
 80077ca:	6093      	str	r3, [r2, #8]
 80077cc:	6893      	ldr	r3, [r2, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1fc      	bne.n	80077cc <ai_platform_network_init+0x80>
 80077d2:	4b51      	ldr	r3, [pc, #324]	; (8007918 <ai_platform_network_init+0x1cc>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	4b50      	ldr	r3, [pc, #320]	; (800791c <ai_platform_network_init+0x1d0>)
 80077da:	429a      	cmp	r2, r3
 80077dc:	d000      	beq.n	80077e0 <ai_platform_network_init+0x94>
 80077de:	e7fe      	b.n	80077de <ai_platform_network_init+0x92>
 80077e0:	f7ff fbf8 	bl	8006fd4 <_ai_platform_release_crc>
 80077e4:	2600      	movs	r6, #0
 80077e6:	4630      	mov	r0, r6
 80077e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ec:	4a4c      	ldr	r2, [pc, #304]	; (8007920 <ai_platform_network_init+0x1d4>)
 80077ee:	2301      	movs	r3, #1
 80077f0:	6093      	str	r3, [r2, #8]
 80077f2:	6893      	ldr	r3, [r2, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1fc      	bne.n	80077f2 <ai_platform_network_init+0xa6>
 80077f8:	4b47      	ldr	r3, [pc, #284]	; (8007918 <ai_platform_network_init+0x1cc>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	4b47      	ldr	r3, [pc, #284]	; (800791c <ai_platform_network_init+0x1d0>)
 8007800:	429a      	cmp	r2, r3
 8007802:	d11c      	bne.n	800783e <ai_platform_network_init+0xf2>
 8007804:	f7ff fbe6 	bl	8006fd4 <_ai_platform_release_crc>
 8007808:	2e00      	cmp	r6, #0
 800780a:	d06f      	beq.n	80078ec <ai_platform_network_init+0x1a0>
 800780c:	4b45      	ldr	r3, [pc, #276]	; (8007924 <ai_platform_network_init+0x1d8>)
 800780e:	6832      	ldr	r2, [r6, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d115      	bne.n	8007840 <ai_platform_network_init+0xf4>
 8007814:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8007818:	6933      	ldr	r3, [r6, #16]
 800781a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800781e:	89f7      	ldrh	r7, [r6, #14]
 8007820:	62a3      	str	r3, [r4, #40]	; 0x28
 8007822:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007826:	2303      	movs	r3, #3
 8007828:	84e7      	strh	r7, [r4, #38]	; 0x26
 800782a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800782e:	60e3      	str	r3, [r4, #12]
 8007830:	4620      	mov	r0, r4
 8007832:	4626      	mov	r6, r4
 8007834:	f001 f82c 	bl	8008890 <ai_layers_init_all>
 8007838:	4630      	mov	r0, r6
 800783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783e:	e7fe      	b.n	800783e <ai_platform_network_init+0xf2>
 8007840:	2101      	movs	r1, #1
 8007842:	4630      	mov	r0, r6
 8007844:	4635      	mov	r5, r6
 8007846:	6876      	ldr	r6, [r6, #4]
 8007848:	f7ff fb74 	bl	8006f34 <ai_buffer_get_size>
 800784c:	f105 081c 	add.w	r8, r5, #28
 8007850:	4681      	mov	r9, r0
 8007852:	2101      	movs	r1, #1
 8007854:	4640      	mov	r0, r8
 8007856:	6a2f      	ldr	r7, [r5, #32]
 8007858:	f7ff fb6c 	bl	8006f34 <ai_buffer_get_size>
 800785c:	f1b9 0f00 	cmp.w	r9, #0
 8007860:	d025      	beq.n	80078ae <ai_platform_network_init+0x162>
 8007862:	2201      	movs	r2, #1
 8007864:	4696      	mov	lr, r2
 8007866:	bb30      	cbnz	r0, 80078b6 <ai_platform_network_init+0x16a>
 8007868:	4680      	mov	r8, r0
 800786a:	4607      	mov	r7, r0
 800786c:	b376      	cbz	r6, 80078cc <ai_platform_network_init+0x180>
 800786e:	8be3      	ldrh	r3, [r4, #30]
 8007870:	4573      	cmp	r3, lr
 8007872:	d323      	bcc.n	80078bc <ai_platform_network_init+0x170>
 8007874:	b142      	cbz	r2, 8007888 <ai_platform_network_init+0x13c>
 8007876:	46ac      	mov	ip, r5
 8007878:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800787c:	6a25      	ldr	r5, [r4, #32]
 800787e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007880:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007884:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007888:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800788a:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800788e:	2600      	movs	r6, #0
 8007890:	42bb      	cmp	r3, r7
 8007892:	83a6      	strh	r6, [r4, #28]
 8007894:	d323      	bcc.n	80078de <ai_platform_network_init+0x192>
 8007896:	b37f      	cbz	r7, 80078f8 <ai_platform_network_init+0x1ac>
 8007898:	46c4      	mov	ip, r8
 800789a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800789e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80078a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80078a2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80078a6:	46b6      	mov	lr, r6
 80078a8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80078ac:	e7bb      	b.n	8007826 <ai_platform_network_init+0xda>
 80078ae:	464a      	mov	r2, r9
 80078b0:	46ce      	mov	lr, r9
 80078b2:	464d      	mov	r5, r9
 80078b4:	e7d7      	b.n	8007866 <ai_platform_network_init+0x11a>
 80078b6:	b30f      	cbz	r7, 80078fc <ai_platform_network_init+0x1b0>
 80078b8:	2701      	movs	r7, #1
 80078ba:	e7d7      	b.n	800786c <ai_platform_network_init+0x120>
 80078bc:	2212      	movs	r2, #18
 80078be:	2116      	movs	r1, #22
 80078c0:	f104 0010 	add.w	r0, r4, #16
 80078c4:	f000 fb46 	bl	8007f54 <core_set_error>
 80078c8:	2600      	movs	r6, #0
 80078ca:	e78c      	b.n	80077e6 <ai_platform_network_init+0x9a>
 80078cc:	f1b9 0f00 	cmp.w	r9, #0
 80078d0:	d0cd      	beq.n	800786e <ai_platform_network_init+0x122>
 80078d2:	2110      	movs	r1, #16
 80078d4:	2212      	movs	r2, #18
 80078d6:	1860      	adds	r0, r4, r1
 80078d8:	f000 fb3c 	bl	8007f54 <core_set_error>
 80078dc:	e783      	b.n	80077e6 <ai_platform_network_init+0x9a>
 80078de:	2213      	movs	r2, #19
 80078e0:	2116      	movs	r1, #22
 80078e2:	f104 0010 	add.w	r0, r4, #16
 80078e6:	f000 fb35 	bl	8007f54 <core_set_error>
 80078ea:	e77c      	b.n	80077e6 <ai_platform_network_init+0x9a>
 80078ec:	2110      	movs	r1, #16
 80078ee:	2211      	movs	r2, #17
 80078f0:	1860      	adds	r0, r4, r1
 80078f2:	f000 fb2f 	bl	8007f54 <core_set_error>
 80078f6:	e776      	b.n	80077e6 <ai_platform_network_init+0x9a>
 80078f8:	46be      	mov	lr, r7
 80078fa:	e794      	b.n	8007826 <ai_platform_network_init+0xda>
 80078fc:	2110      	movs	r1, #16
 80078fe:	2213      	movs	r2, #19
 8007900:	1860      	adds	r0, r4, r1
 8007902:	f000 fb27 	bl	8007f54 <core_set_error>
 8007906:	463e      	mov	r6, r7
 8007908:	e76d      	b.n	80077e6 <ai_platform_network_init+0x9a>
 800790a:	bf00      	nop
 800790c:	a1c00100 	.word	0xa1c00100
 8007910:	e0042000 	.word	0xe0042000
 8007914:	58024000 	.word	0x58024000
 8007918:	f407a5c2 	.word	0xf407a5c2
 800791c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007920:	40023000 	.word	0x40023000
 8007924:	a1facade 	.word	0xa1facade

08007928 <ai_platform_network_post_init>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	b1f0      	cbz	r0, 800796a <ai_platform_network_post_init+0x42>
 800792c:	4b3c      	ldr	r3, [pc, #240]	; (8007a20 <ai_platform_network_post_init+0xf8>)
 800792e:	6802      	ldr	r2, [r0, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	4604      	mov	r4, r0
 8007934:	d119      	bne.n	800796a <ai_platform_network_post_init+0x42>
 8007936:	f7ff fb4b 	bl	8006fd0 <_ai_platform_acquire_crc>
 800793a:	4b3a      	ldr	r3, [pc, #232]	; (8007a24 <ai_platform_network_post_init+0xfc>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007946:	d03b      	beq.n	80079c0 <ai_platform_network_post_init+0x98>
 8007948:	4a37      	ldr	r2, [pc, #220]	; (8007a28 <ai_platform_network_post_init+0x100>)
 800794a:	2301      	movs	r3, #1
 800794c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007950:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1fb      	bne.n	8007950 <ai_platform_network_post_init+0x28>
 8007958:	4b34      	ldr	r3, [pc, #208]	; (8007a2c <ai_platform_network_post_init+0x104>)
 800795a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800795e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <ai_platform_network_post_init+0x108>)
 8007964:	429a      	cmp	r2, r3
 8007966:	d037      	beq.n	80079d8 <ai_platform_network_post_init+0xb0>
 8007968:	e7fe      	b.n	8007968 <ai_platform_network_post_init+0x40>
 800796a:	f7ff fb31 	bl	8006fd0 <_ai_platform_acquire_crc>
 800796e:	4b2d      	ldr	r3, [pc, #180]	; (8007a24 <ai_platform_network_post_init+0xfc>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797a:	d010      	beq.n	800799e <ai_platform_network_post_init+0x76>
 800797c:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <ai_platform_network_post_init+0x100>)
 800797e:	2301      	movs	r3, #1
 8007980:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007984:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1fb      	bne.n	8007984 <ai_platform_network_post_init+0x5c>
 800798c:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <ai_platform_network_post_init+0x104>)
 800798e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007992:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007996:	4b26      	ldr	r3, [pc, #152]	; (8007a30 <ai_platform_network_post_init+0x108>)
 8007998:	429a      	cmp	r2, r3
 800799a:	d00d      	beq.n	80079b8 <ai_platform_network_post_init+0x90>
 800799c:	e7fe      	b.n	800799c <ai_platform_network_post_init+0x74>
 800799e:	4a25      	ldr	r2, [pc, #148]	; (8007a34 <ai_platform_network_post_init+0x10c>)
 80079a0:	2301      	movs	r3, #1
 80079a2:	6093      	str	r3, [r2, #8]
 80079a4:	6893      	ldr	r3, [r2, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1fc      	bne.n	80079a4 <ai_platform_network_post_init+0x7c>
 80079aa:	4b20      	ldr	r3, [pc, #128]	; (8007a2c <ai_platform_network_post_init+0x104>)
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	4b1f      	ldr	r3, [pc, #124]	; (8007a30 <ai_platform_network_post_init+0x108>)
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d000      	beq.n	80079b8 <ai_platform_network_post_init+0x90>
 80079b6:	e7fe      	b.n	80079b6 <ai_platform_network_post_init+0x8e>
 80079b8:	f7ff fb0c 	bl	8006fd4 <_ai_platform_release_crc>
 80079bc:	2000      	movs	r0, #0
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	4a1c      	ldr	r2, [pc, #112]	; (8007a34 <ai_platform_network_post_init+0x10c>)
 80079c2:	2301      	movs	r3, #1
 80079c4:	6093      	str	r3, [r2, #8]
 80079c6:	6893      	ldr	r3, [r2, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1fc      	bne.n	80079c6 <ai_platform_network_post_init+0x9e>
 80079cc:	4b17      	ldr	r3, [pc, #92]	; (8007a2c <ai_platform_network_post_init+0x104>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	6812      	ldr	r2, [r2, #0]
 80079d2:	4b17      	ldr	r3, [pc, #92]	; (8007a30 <ai_platform_network_post_init+0x108>)
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d11a      	bne.n	8007a0e <ai_platform_network_post_init+0xe6>
 80079d8:	f7ff fafc 	bl	8006fd4 <_ai_platform_release_crc>
 80079dc:	68e3      	ldr	r3, [r4, #12]
 80079de:	f013 0502 	ands.w	r5, r3, #2
 80079e2:	d015      	beq.n	8007a10 <ai_platform_network_post_init+0xe8>
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 ff61 	bl	80088ac <ai_layers_post_init_all>
 80079ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079ec:	b16b      	cbz	r3, 8007a0a <ai_platform_network_post_init+0xe2>
 80079ee:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80079f0:	e007      	b.n	8007a02 <ai_platform_network_post_init+0xda>
 80079f2:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 80079f6:	4798      	blx	r3
 80079f8:	692b      	ldr	r3, [r5, #16]
 80079fa:	42ab      	cmp	r3, r5
 80079fc:	d005      	beq.n	8007a0a <ai_platform_network_post_init+0xe2>
 80079fe:	b123      	cbz	r3, 8007a0a <ai_platform_network_post_init+0xe2>
 8007a00:	461d      	mov	r5, r3
 8007a02:	4629      	mov	r1, r5
 8007a04:	2000      	movs	r0, #0
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	d1f3      	bne.n	80079f2 <ai_platform_network_post_init+0xca>
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	e7fe      	b.n	8007a0e <ai_platform_network_post_init+0xe6>
 8007a10:	2210      	movs	r2, #16
 8007a12:	2111      	movs	r1, #17
 8007a14:	18a0      	adds	r0, r4, r2
 8007a16:	f000 fa9d 	bl	8007f54 <core_set_error>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	bd38      	pop	{r3, r4, r5, pc}
 8007a1e:	bf00      	nop
 8007a20:	a1c00100 	.word	0xa1c00100
 8007a24:	e0042000 	.word	0xe0042000
 8007a28:	58024000 	.word	0x58024000
 8007a2c:	f407a5c2 	.word	0xf407a5c2
 8007a30:	b5e8b5cd 	.word	0xb5e8b5cd
 8007a34:	40023000 	.word	0x40023000

08007a38 <ai_platform_network_process>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	460e      	mov	r6, r1
 8007a3e:	b085      	sub	sp, #20
 8007a40:	4693      	mov	fp, r2
 8007a42:	4605      	mov	r5, r0
 8007a44:	b120      	cbz	r0, 8007a50 <ai_platform_network_process+0x18>
 8007a46:	4bb8      	ldr	r3, [pc, #736]	; (8007d28 <ai_platform_network_process+0x2f0>)
 8007a48:	6802      	ldr	r2, [r0, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	bf18      	it	ne
 8007a4e:	2500      	movne	r5, #0
 8007a50:	f7ff fabe 	bl	8006fd0 <_ai_platform_acquire_crc>
 8007a54:	4bb5      	ldr	r3, [pc, #724]	; (8007d2c <ai_platform_network_process+0x2f4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a60:	d010      	beq.n	8007a84 <ai_platform_network_process+0x4c>
 8007a62:	4ab3      	ldr	r2, [pc, #716]	; (8007d30 <ai_platform_network_process+0x2f8>)
 8007a64:	2301      	movs	r3, #1
 8007a66:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007a6a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1fb      	bne.n	8007a6a <ai_platform_network_process+0x32>
 8007a72:	4bb0      	ldr	r3, [pc, #704]	; (8007d34 <ai_platform_network_process+0x2fc>)
 8007a74:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007a78:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007a7c:	4bae      	ldr	r3, [pc, #696]	; (8007d38 <ai_platform_network_process+0x300>)
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d00d      	beq.n	8007a9e <ai_platform_network_process+0x66>
 8007a82:	e7fe      	b.n	8007a82 <ai_platform_network_process+0x4a>
 8007a84:	4aad      	ldr	r2, [pc, #692]	; (8007d3c <ai_platform_network_process+0x304>)
 8007a86:	2301      	movs	r3, #1
 8007a88:	6093      	str	r3, [r2, #8]
 8007a8a:	6893      	ldr	r3, [r2, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1fc      	bne.n	8007a8a <ai_platform_network_process+0x52>
 8007a90:	4ba8      	ldr	r3, [pc, #672]	; (8007d34 <ai_platform_network_process+0x2fc>)
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	4ba8      	ldr	r3, [pc, #672]	; (8007d38 <ai_platform_network_process+0x300>)
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	f040 812c 	bne.w	8007cf6 <ai_platform_network_process+0x2be>
 8007a9e:	f7ff fa99 	bl	8006fd4 <_ai_platform_release_crc>
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	f000 8154 	beq.w	8007d50 <ai_platform_network_process+0x318>
 8007aa8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 8124 	beq.w	8007cf8 <ai_platform_network_process+0x2c0>
 8007ab0:	68eb      	ldr	r3, [r5, #12]
 8007ab2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2700      	movs	r7, #0
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	616f      	str	r7, [r5, #20]
 8007ac0:	f040 813e 	bne.w	8007d40 <ai_platform_network_process+0x308>
 8007ac4:	2e00      	cmp	r6, #0
 8007ac6:	f000 811d 	beq.w	8007d04 <ai_platform_network_process+0x2cc>
 8007aca:	f1ba 0f00 	cmp.w	sl, #0
 8007ace:	f000 8119 	beq.w	8007d04 <ai_platform_network_process+0x2cc>
 8007ad2:	f8ba 3000 	ldrh.w	r3, [sl]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8114 	beq.w	8007d04 <ai_platform_network_process+0x2cc>
 8007adc:	69b3      	ldr	r3, [r6, #24]
 8007ade:	f8cd b00c 	str.w	fp, [sp, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007ae8:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d072      	beq.n	8007bd6 <ai_platform_network_process+0x19e>
 8007af0:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007af4:	2c00      	cmp	r4, #0
 8007af6:	d06e      	beq.n	8007bd6 <ai_platform_network_process+0x19e>
 8007af8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007afc:	f8d3 9000 	ldr.w	r9, [r3]
 8007b00:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007b04:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007b08:	f000 81e0 	beq.w	8007ecc <ai_platform_network_process+0x494>
 8007b0c:	69a3      	ldr	r3, [r4, #24]
 8007b0e:	2101      	movs	r1, #1
 8007b10:	4630      	mov	r0, r6
 8007b12:	685d      	ldr	r5, [r3, #4]
 8007b14:	f7ff fa0e 	bl	8006f34 <ai_buffer_get_size>
 8007b18:	4285      	cmp	r5, r0
 8007b1a:	f0c0 811b 	bcc.w	8007d54 <ai_platform_network_process+0x31c>
 8007b1e:	68e0      	ldr	r0, [r4, #12]
 8007b20:	69b1      	ldr	r1, [r6, #24]
 8007b22:	68c2      	ldr	r2, [r0, #12]
 8007b24:	68cb      	ldr	r3, [r1, #12]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	f040 8114 	bne.w	8007d54 <ai_platform_network_process+0x31c>
 8007b2c:	6882      	ldr	r2, [r0, #8]
 8007b2e:	688b      	ldr	r3, [r1, #8]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	f040 810f 	bne.w	8007d54 <ai_platform_network_process+0x31c>
 8007b36:	6842      	ldr	r2, [r0, #4]
 8007b38:	684b      	ldr	r3, [r1, #4]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	f040 810a 	bne.w	8007d54 <ai_platform_network_process+0x31c>
 8007b40:	69a3      	ldr	r3, [r4, #24]
 8007b42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b46:	f001 f8e5 	bl	8008d14 <ai_array_get_data_byte_size>
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f001 f835 	bl	8008bbc <get_tensor_byte_size>
 8007b52:	4285      	cmp	r5, r0
 8007b54:	f0c0 80fe 	bcc.w	8007d54 <ai_platform_network_process+0x31c>
 8007b58:	69a3      	ldr	r3, [r4, #24]
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	f001 f846 	bl	8008bec <ai_array_to_buffer_fmt>
 8007b60:	6833      	ldr	r3, [r6, #0]
 8007b62:	4058      	eors	r0, r3
 8007b64:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007b68:	f040 81bb 	bne.w	8007ee2 <ai_platform_network_process+0x4aa>
 8007b6c:	6873      	ldr	r3, [r6, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 81ae 	beq.w	8007ed0 <ai_platform_network_process+0x498>
 8007b74:	69b3      	ldr	r3, [r6, #24]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 819e 	beq.w	8007eba <ai_platform_network_process+0x482>
 8007b7e:	9a01      	ldr	r2, [sp, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	bf38      	it	cc
 8007b84:	461a      	movcc	r2, r3
 8007b86:	4620      	mov	r0, r4
 8007b88:	9201      	str	r2, [sp, #4]
 8007b8a:	f001 f817 	bl	8008bbc <get_tensor_byte_size>
 8007b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b92:	69b3      	ldr	r3, [r6, #24]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	fb00 f303 	mul.w	r3, r0, r3
 8007b9a:	f8c8 300c 	str.w	r3, [r8, #12]
 8007b9e:	6871      	ldr	r1, [r6, #4]
 8007ba0:	f8c8 1004 	str.w	r1, [r8, #4]
 8007ba4:	440b      	add	r3, r1
 8007ba6:	f849 300b 	str.w	r3, [r9, fp]
 8007baa:	69a0      	ldr	r0, [r4, #24]
 8007bac:	6803      	ldr	r3, [r0, #0]
 8007bae:	009a      	lsls	r2, r3, #2
 8007bb0:	f107 0701 	add.w	r7, r7, #1
 8007bb4:	f106 061c 	add.w	r6, r6, #28
 8007bb8:	f100 80af 	bmi.w	8007d1a <ai_platform_network_process+0x2e2>
 8007bbc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	4419      	add	r1, r3
 8007bc4:	6081      	str	r1, [r0, #8]
 8007bc6:	69a3      	ldr	r3, [r4, #24]
 8007bc8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007bcc:	60da      	str	r2, [r3, #12]
 8007bce:	f8ba 3000 	ldrh.w	r3, [sl]
 8007bd2:	42bb      	cmp	r3, r7
 8007bd4:	d888      	bhi.n	8007ae8 <ai_platform_network_process+0xb0>
 8007bd6:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8007bda:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007bdc:	f1bb 0f00 	cmp.w	fp, #0
 8007be0:	f000 8188 	beq.w	8007ef4 <ai_platform_network_process+0x4bc>
 8007be4:	2a01      	cmp	r2, #1
 8007be6:	f240 8160 	bls.w	8007eaa <ai_platform_network_process+0x472>
 8007bea:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8007bee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 8159 	beq.w	8007eaa <ai_platform_network_process+0x472>
 8007bf8:	465e      	mov	r6, fp
 8007bfa:	2700      	movs	r7, #0
 8007bfc:	462c      	mov	r4, r5
 8007bfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80b4 	beq.w	8007d70 <ai_platform_network_process+0x338>
 8007c08:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	f000 80af 	beq.w	8007d70 <ai_platform_network_process+0x338>
 8007c12:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007c16:	f8d3 8000 	ldr.w	r8, [r3]
 8007c1a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007c1e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007c22:	f000 8173 	beq.w	8007f0c <ai_platform_network_process+0x4d4>
 8007c26:	69ab      	ldr	r3, [r5, #24]
 8007c28:	2101      	movs	r1, #1
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	9302      	str	r3, [sp, #8]
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff f980 	bl	8006f34 <ai_buffer_get_size>
 8007c34:	9b02      	ldr	r3, [sp, #8]
 8007c36:	4283      	cmp	r3, r0
 8007c38:	f0c0 8136 	bcc.w	8007ea8 <ai_platform_network_process+0x470>
 8007c3c:	68e8      	ldr	r0, [r5, #12]
 8007c3e:	69b1      	ldr	r1, [r6, #24]
 8007c40:	68c2      	ldr	r2, [r0, #12]
 8007c42:	68cb      	ldr	r3, [r1, #12]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	f040 812f 	bne.w	8007ea8 <ai_platform_network_process+0x470>
 8007c4a:	6882      	ldr	r2, [r0, #8]
 8007c4c:	688b      	ldr	r3, [r1, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	f040 812a 	bne.w	8007ea8 <ai_platform_network_process+0x470>
 8007c54:	6842      	ldr	r2, [r0, #4]
 8007c56:	684b      	ldr	r3, [r1, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	f040 8125 	bne.w	8007ea8 <ai_platform_network_process+0x470>
 8007c5e:	69ab      	ldr	r3, [r5, #24]
 8007c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c64:	f001 f856 	bl	8008d14 <ai_array_get_data_byte_size>
 8007c68:	9002      	str	r0, [sp, #8]
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f000 ffa6 	bl	8008bbc <get_tensor_byte_size>
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	4283      	cmp	r3, r0
 8007c74:	f0c0 8118 	bcc.w	8007ea8 <ai_platform_network_process+0x470>
 8007c78:	69ab      	ldr	r3, [r5, #24]
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	f000 ffb6 	bl	8008bec <ai_array_to_buffer_fmt>
 8007c80:	6833      	ldr	r3, [r6, #0]
 8007c82:	4058      	eors	r0, r3
 8007c84:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007c88:	f040 8138 	bne.w	8007efc <ai_platform_network_process+0x4c4>
 8007c8c:	6873      	ldr	r3, [r6, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 814f 	beq.w	8007f32 <ai_platform_network_process+0x4fa>
 8007c94:	69b3      	ldr	r3, [r6, #24]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8141 	beq.w	8007f20 <ai_platform_network_process+0x4e8>
 8007c9e:	9a01      	ldr	r2, [sp, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	bf38      	it	cc
 8007ca4:	461a      	movcc	r2, r3
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	9201      	str	r2, [sp, #4]
 8007caa:	f000 ff87 	bl	8008bbc <get_tensor_byte_size>
 8007cae:	f8ca 0008 	str.w	r0, [sl, #8]
 8007cb2:	69b3      	ldr	r3, [r6, #24]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	fb00 f303 	mul.w	r3, r0, r3
 8007cba:	f8ca 300c 	str.w	r3, [sl, #12]
 8007cbe:	6871      	ldr	r1, [r6, #4]
 8007cc0:	f8ca 1004 	str.w	r1, [sl, #4]
 8007cc4:	440b      	add	r3, r1
 8007cc6:	f848 300b 	str.w	r3, [r8, fp]
 8007cca:	69a8      	ldr	r0, [r5, #24]
 8007ccc:	6803      	ldr	r3, [r0, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	f107 0701 	add.w	r7, r7, #1
 8007cd4:	f106 061c 	add.w	r6, r6, #28
 8007cd8:	d445      	bmi.n	8007d66 <ai_platform_network_process+0x32e>
 8007cda:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	4419      	add	r1, r3
 8007ce2:	6081      	str	r1, [r0, #8]
 8007ce4:	69ab      	ldr	r3, [r5, #24]
 8007ce6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007cea:	60da      	str	r2, [r3, #12]
 8007cec:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007cf0:	429f      	cmp	r7, r3
 8007cf2:	d384      	bcc.n	8007bfe <ai_platform_network_process+0x1c6>
 8007cf4:	e03c      	b.n	8007d70 <ai_platform_network_process+0x338>
 8007cf6:	e7fe      	b.n	8007cf6 <ai_platform_network_process+0x2be>
 8007cf8:	68ea      	ldr	r2, [r5, #12]
 8007cfa:	616b      	str	r3, [r5, #20]
 8007cfc:	f002 0203 	and.w	r2, r2, #3
 8007d00:	2a03      	cmp	r2, #3
 8007d02:	d11d      	bne.n	8007d40 <ai_platform_network_process+0x308>
 8007d04:	2217      	movs	r2, #23
 8007d06:	2112      	movs	r1, #18
 8007d08:	f105 0010 	add.w	r0, r5, #16
 8007d0c:	f000 f922 	bl	8007f54 <core_set_error>
 8007d10:	2400      	movs	r4, #0
 8007d12:	4620      	mov	r0, r4
 8007d14:	b005      	add	sp, #20
 8007d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1a:	f8ba 3000 	ldrh.w	r3, [sl]
 8007d1e:	429f      	cmp	r7, r3
 8007d20:	f4ff aee2 	bcc.w	8007ae8 <ai_platform_network_process+0xb0>
 8007d24:	e757      	b.n	8007bd6 <ai_platform_network_process+0x19e>
 8007d26:	bf00      	nop
 8007d28:	a1c00100 	.word	0xa1c00100
 8007d2c:	e0042000 	.word	0xe0042000
 8007d30:	58024000 	.word	0x58024000
 8007d34:	f407a5c2 	.word	0xf407a5c2
 8007d38:	b5e8b5cd 	.word	0xb5e8b5cd
 8007d3c:	40023000 	.word	0x40023000
 8007d40:	2230      	movs	r2, #48	; 0x30
 8007d42:	2111      	movs	r1, #17
 8007d44:	f105 0010 	add.w	r0, r5, #16
 8007d48:	f000 f904 	bl	8007f54 <core_set_error>
 8007d4c:	2400      	movs	r4, #0
 8007d4e:	e7e0      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007d50:	462c      	mov	r4, r5
 8007d52:	e7de      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007d54:	9d02      	ldr	r5, [sp, #8]
 8007d56:	2218      	movs	r2, #24
 8007d58:	2112      	movs	r1, #18
 8007d5a:	f105 0010 	add.w	r0, r5, #16
 8007d5e:	f000 f8f9 	bl	8007f54 <core_set_error>
 8007d62:	2400      	movs	r4, #0
 8007d64:	e7d5      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007d66:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007d6a:	429f      	cmp	r7, r3
 8007d6c:	f4ff af47 	bcc.w	8007bfe <ai_platform_network_process+0x1c6>
 8007d70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007d74:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8007d76:	82a3      	strh	r3, [r4, #20]
 8007d78:	4625      	mov	r5, r4
 8007d7a:	2a00      	cmp	r2, #0
 8007d7c:	f040 808e 	bne.w	8007e9c <ai_platform_network_process+0x464>
 8007d80:	4616      	mov	r6, r2
 8007d82:	4617      	mov	r7, r2
 8007d84:	8aec      	ldrh	r4, [r5, #22]
 8007d86:	429c      	cmp	r4, r3
 8007d88:	bf38      	it	cc
 8007d8a:	46ab      	movcc	fp, r5
 8007d8c:	d2c1      	bcs.n	8007d12 <ai_platform_network_process+0x2da>
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d030      	beq.n	8007df4 <ai_platform_network_process+0x3bc>
 8007d92:	f04f 0800 	mov.w	r8, #0
 8007d96:	e014      	b.n	8007dc2 <ai_platform_network_process+0x38a>
 8007d98:	6882      	ldr	r2, [r0, #8]
 8007d9a:	68c5      	ldr	r5, [r0, #12]
 8007d9c:	6863      	ldr	r3, [r4, #4]
 8007d9e:	1b52      	subs	r2, r2, r5
 8007da0:	4413      	add	r3, r2
 8007da2:	6083      	str	r3, [r0, #8]
 8007da4:	698b      	ldr	r3, [r1, #24]
 8007da6:	6862      	ldr	r2, [r4, #4]
 8007da8:	60da      	str	r2, [r3, #12]
 8007daa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007dae:	f859 200a 	ldr.w	r2, [r9, sl]
 8007db2:	440b      	add	r3, r1
 8007db4:	4293      	cmp	r3, r2
 8007db6:	bf24      	itt	cs
 8007db8:	68e3      	ldrcs	r3, [r4, #12]
 8007dba:	1ad3      	subcs	r3, r2, r3
 8007dbc:	6063      	str	r3, [r4, #4]
 8007dbe:	f108 0801 	add.w	r8, r8, #1
 8007dc2:	8833      	ldrh	r3, [r6, #0]
 8007dc4:	4543      	cmp	r3, r8
 8007dc6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007dca:	d913      	bls.n	8007df4 <ai_platform_network_process+0x3bc>
 8007dcc:	6873      	ldr	r3, [r6, #4]
 8007dce:	b18b      	cbz	r3, 8007df4 <ai_platform_network_process+0x3bc>
 8007dd0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007dd4:	b171      	cbz	r1, 8007df4 <ai_platform_network_process+0x3bc>
 8007dd6:	6988      	ldr	r0, [r1, #24]
 8007dd8:	68b2      	ldr	r2, [r6, #8]
 8007dda:	6803      	ldr	r3, [r0, #0]
 8007ddc:	f8d2 9000 	ldr.w	r9, [r2]
 8007de0:	009d      	lsls	r5, r3, #2
 8007de2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007de6:	d5d7      	bpl.n	8007d98 <ai_platform_network_process+0x360>
 8007de8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007dec:	6880      	ldr	r0, [r0, #8]
 8007dee:	f000 ffcd 	bl	8008d8c <memcpy>
 8007df2:	e7da      	b.n	8007daa <ai_platform_network_process+0x372>
 8007df4:	4658      	mov	r0, fp
 8007df6:	f000 fd6d 	bl	80088d4 <ai_layers_forward_all>
 8007dfa:	2f00      	cmp	r7, #0
 8007dfc:	d03f      	beq.n	8007e7e <ai_platform_network_process+0x446>
 8007dfe:	2400      	movs	r4, #0
 8007e00:	e016      	b.n	8007e30 <ai_platform_network_process+0x3f8>
 8007e02:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007e06:	f859 100a 	ldr.w	r1, [r9, sl]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	428b      	cmp	r3, r1
 8007e0e:	bf24      	itt	cs
 8007e10:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007e14:	1acb      	subcs	r3, r1, r3
 8007e16:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e1a:	6981      	ldr	r1, [r0, #24]
 8007e1c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007e20:	1b52      	subs	r2, r2, r5
 8007e22:	4413      	add	r3, r2
 8007e24:	608b      	str	r3, [r1, #8]
 8007e26:	6983      	ldr	r3, [r0, #24]
 8007e28:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007e2c:	60da      	str	r2, [r3, #12]
 8007e2e:	3401      	adds	r4, #1
 8007e30:	883b      	ldrh	r3, [r7, #0]
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	d923      	bls.n	8007e7e <ai_platform_network_process+0x446>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	b30b      	cbz	r3, 8007e7e <ai_platform_network_process+0x446>
 8007e3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007e3e:	b1f0      	cbz	r0, 8007e7e <ai_platform_network_process+0x446>
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	6983      	ldr	r3, [r0, #24]
 8007e44:	f8d2 9000 	ldr.w	r9, [r2]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	0092      	lsls	r2, r2, #2
 8007e4c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007e50:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007e54:	d5d5      	bpl.n	8007e02 <ai_platform_network_process+0x3ca>
 8007e56:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007e5a:	6899      	ldr	r1, [r3, #8]
 8007e5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007e60:	f000 ff94 	bl	8008d8c <memcpy>
 8007e64:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007e68:	f859 200a 	ldr.w	r2, [r9, sl]
 8007e6c:	440b      	add	r3, r1
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	bf24      	itt	cs
 8007e72:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007e76:	1ad3      	subcs	r3, r2, r3
 8007e78:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e7c:	e7d7      	b.n	8007e2e <ai_platform_network_process+0x3f6>
 8007e7e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007e82:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007e86:	3401      	adds	r4, #1
 8007e88:	b2a4      	uxth	r4, r4
 8007e8a:	42a3      	cmp	r3, r4
 8007e8c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007e90:	f63f af7d 	bhi.w	8007d8e <ai_platform_network_process+0x356>
 8007e94:	4620      	mov	r0, r4
 8007e96:	b005      	add	sp, #20
 8007e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9c:	2a01      	cmp	r2, #1
 8007e9e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007ea0:	d03c      	beq.n	8007f1c <ai_platform_network_process+0x4e4>
 8007ea2:	f106 070c 	add.w	r7, r6, #12
 8007ea6:	e76d      	b.n	8007d84 <ai_platform_network_process+0x34c>
 8007ea8:	4625      	mov	r5, r4
 8007eaa:	2218      	movs	r2, #24
 8007eac:	2113      	movs	r1, #19
 8007eae:	f105 0010 	add.w	r0, r5, #16
 8007eb2:	f000 f84f 	bl	8007f54 <core_set_error>
 8007eb6:	2400      	movs	r4, #0
 8007eb8:	e72b      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007eba:	9d02      	ldr	r5, [sp, #8]
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	2221      	movs	r2, #33	; 0x21
 8007ec0:	2112      	movs	r1, #18
 8007ec2:	f105 0010 	add.w	r0, r5, #16
 8007ec6:	f000 f845 	bl	8007f54 <core_set_error>
 8007eca:	e722      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007ecc:	9d02      	ldr	r5, [sp, #8]
 8007ece:	e719      	b.n	8007d04 <ai_platform_network_process+0x2cc>
 8007ed0:	9d02      	ldr	r5, [sp, #8]
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	2217      	movs	r2, #23
 8007ed6:	2112      	movs	r1, #18
 8007ed8:	f105 0010 	add.w	r0, r5, #16
 8007edc:	f000 f83a 	bl	8007f54 <core_set_error>
 8007ee0:	e717      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007ee2:	9d02      	ldr	r5, [sp, #8]
 8007ee4:	2219      	movs	r2, #25
 8007ee6:	2112      	movs	r1, #18
 8007ee8:	f105 0010 	add.w	r0, r5, #16
 8007eec:	f000 f832 	bl	8007f54 <core_set_error>
 8007ef0:	2400      	movs	r4, #0
 8007ef2:	e70e      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007ef4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007ef8:	82ab      	strh	r3, [r5, #20]
 8007efa:	e73e      	b.n	8007d7a <ai_platform_network_process+0x342>
 8007efc:	f104 0010 	add.w	r0, r4, #16
 8007f00:	2219      	movs	r2, #25
 8007f02:	2113      	movs	r1, #19
 8007f04:	f000 f826 	bl	8007f54 <core_set_error>
 8007f08:	2400      	movs	r4, #0
 8007f0a:	e702      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007f0c:	f104 0010 	add.w	r0, r4, #16
 8007f10:	2217      	movs	r2, #23
 8007f12:	2113      	movs	r1, #19
 8007f14:	f000 f81e 	bl	8007f54 <core_set_error>
 8007f18:	4654      	mov	r4, sl
 8007f1a:	e6fa      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007f1c:	2700      	movs	r7, #0
 8007f1e:	e731      	b.n	8007d84 <ai_platform_network_process+0x34c>
 8007f20:	4625      	mov	r5, r4
 8007f22:	2221      	movs	r2, #33	; 0x21
 8007f24:	4604      	mov	r4, r0
 8007f26:	2113      	movs	r1, #19
 8007f28:	f105 0010 	add.w	r0, r5, #16
 8007f2c:	f000 f812 	bl	8007f54 <core_set_error>
 8007f30:	e6ef      	b.n	8007d12 <ai_platform_network_process+0x2da>
 8007f32:	4625      	mov	r5, r4
 8007f34:	2217      	movs	r2, #23
 8007f36:	4604      	mov	r4, r0
 8007f38:	2113      	movs	r1, #19
 8007f3a:	f105 0010 	add.w	r0, r5, #16
 8007f3e:	f000 f809 	bl	8007f54 <core_set_error>
 8007f42:	e6e6      	b.n	8007d12 <ai_platform_network_process+0x2da>

08007f44 <core_init>:
 8007f44:	2001      	movs	r0, #1
 8007f46:	4770      	bx	lr

08007f48 <core_get_error>:
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	6800      	ldr	r0, [r0, #0]
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop

08007f54 <core_set_error>:
 8007f54:	4603      	mov	r3, r0
 8007f56:	7800      	ldrb	r0, [r0, #0]
 8007f58:	b108      	cbz	r0, 8007f5e <core_set_error+0xa>
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	4770      	bx	lr
 8007f5e:	7019      	strb	r1, [r3, #0]
 8007f60:	6819      	ldr	r1, [r3, #0]
 8007f62:	f362 211f 	bfi	r1, r2, #8, #24
 8007f66:	2001      	movs	r0, #1
 8007f68:	6019      	str	r1, [r3, #0]
 8007f6a:	4770      	bx	lr

08007f6c <forward_dense>:
 8007f6c:	6983      	ldr	r3, [r0, #24]
 8007f6e:	881a      	ldrh	r2, [r3, #0]
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	f000 8181 	beq.w	8008278 <forward_dense+0x30c>
 8007f76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7a:	ed2d 8b02 	vpush	{d8}
 8007f7e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007f82:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007f86:	b095      	sub	sp, #84	; 0x54
 8007f88:	b105      	cbz	r5, 8007f8c <forward_dense+0x20>
 8007f8a:	682d      	ldr	r5, [r5, #0]
 8007f8c:	2a01      	cmp	r2, #1
 8007f8e:	f000 828f 	beq.w	80084b0 <forward_dense+0x544>
 8007f92:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8007f96:	b106      	cbz	r6, 8007f9a <forward_dense+0x2e>
 8007f98:	6836      	ldr	r6, [r6, #0]
 8007f9a:	2a02      	cmp	r2, #2
 8007f9c:	f000 816e 	beq.w	800827c <forward_dense+0x310>
 8007fa0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8007fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 8274 	beq.w	8008494 <forward_dense+0x528>
 8007fac:	4619      	mov	r1, r3
 8007fae:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8007fb2:	6809      	ldr	r1, [r1, #0]
 8007fb4:	910d      	str	r1, [sp, #52]	; 0x34
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	f240 826e 	bls.w	8008498 <forward_dense+0x52c>
 8007fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	68e8      	ldr	r0, [r5, #12]
 8007fc6:	68f7      	ldr	r7, [r6, #12]
 8007fc8:	6840      	ldr	r0, [r0, #4]
 8007fca:	6999      	ldr	r1, [r3, #24]
 8007fcc:	9013      	str	r0, [sp, #76]	; 0x4c
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	680b      	ldr	r3, [r1, #0]
 8007fd2:	9012      	str	r0, [sp, #72]	; 0x48
 8007fd4:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8007fd8:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8007fdc:	fb00 f404 	mul.w	r4, r0, r4
 8007fe0:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8007fe4:	fa4e f000 	asr.w	r0, lr, r0
 8007fe8:	2a03      	cmp	r2, #3
 8007fea:	9010      	str	r0, [sp, #64]	; 0x40
 8007fec:	f000 825d 	beq.w	80084aa <forward_dense+0x53e>
 8007ff0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8007ff4:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	f000 8246 	beq.w	800848a <forward_dense+0x51e>
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	2a00      	cmp	r2, #0
 8008002:	f000 8242 	beq.w	800848a <forward_dense+0x51e>
 8008006:	2b04      	cmp	r3, #4
 8008008:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800800c:	f000 822c 	beq.w	8008468 <forward_dense+0x4fc>
 8008010:	2b08      	cmp	r3, #8
 8008012:	f000 8229 	beq.w	8008468 <forward_dense+0x4fc>
 8008016:	f04f 0b00 	mov.w	fp, #0
 800801a:	69b2      	ldr	r2, [r6, #24]
 800801c:	69ab      	ldr	r3, [r5, #24]
 800801e:	6891      	ldr	r1, [r2, #8]
 8008020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	6952      	ldr	r2, [r2, #20]
 8008026:	9106      	str	r1, [sp, #24]
 8008028:	fb07 f404 	mul.w	r4, r7, r4
 800802c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8008030:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008032:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008036:	4281      	cmp	r1, r0
 8008038:	ea4f 0482 	mov.w	r4, r2, lsl #2
 800803c:	900e      	str	r0, [sp, #56]	; 0x38
 800803e:	940c      	str	r4, [sp, #48]	; 0x30
 8008040:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8008044:	f080 8113 	bcs.w	800826e <forward_dense+0x302>
 8008048:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800804a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8008298 <forward_dense+0x32c>
 800804e:	f021 0201 	bic.w	r2, r1, #1
 8008052:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008056:	9204      	str	r2, [sp, #16]
 8008058:	f001 0201 	and.w	r2, r1, #1
 800805c:	08c8      	lsrs	r0, r1, #3
 800805e:	9208      	str	r2, [sp, #32]
 8008060:	008a      	lsls	r2, r1, #2
 8008062:	f001 0a07 	and.w	sl, r1, #7
 8008066:	920f      	str	r2, [sp, #60]	; 0x3c
 8008068:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 800806c:	3320      	adds	r3, #32
 800806e:	465c      	mov	r4, fp
 8008070:	9007      	str	r0, [sp, #28]
 8008072:	46cb      	mov	fp, r9
 8008074:	9205      	str	r2, [sp, #20]
 8008076:	9302      	str	r3, [sp, #8]
 8008078:	46c1      	mov	r9, r8
 800807a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800807e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	9b02      	ldr	r3, [sp, #8]
 8008086:	3b20      	subs	r3, #32
 8008088:	930a      	str	r3, [sp, #40]	; 0x28
 800808a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800808c:	b10b      	cbz	r3, 8008092 <forward_dense+0x126>
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2c00      	cmp	r4, #0
 8008094:	f000 81da 	beq.w	800844c <forward_dense+0x4e0>
 8008098:	9910      	ldr	r1, [sp, #64]	; 0x40
 800809a:	2904      	cmp	r1, #4
 800809c:	9906      	ldr	r1, [sp, #24]
 800809e:	f000 80fd 	beq.w	800829c <forward_dense+0x330>
 80080a2:	4549      	cmp	r1, r9
 80080a4:	f080 80d2 	bcs.w	800824c <forward_dense+0x2e0>
 80080a8:	460f      	mov	r7, r1
 80080aa:	9907      	ldr	r1, [sp, #28]
 80080ac:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080b0:	f8dd a014 	ldr.w	sl, [sp, #20]
 80080b4:	1c4e      	adds	r6, r1, #1
 80080b6:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80080ba:	4694      	mov	ip, r2
 80080bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80080be:	468e      	mov	lr, r1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80de 	beq.w	8008282 <forward_dense+0x316>
 80080c6:	ecf3 2a01 	vldmia	r3!, {s5}
 80080ca:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008298 <forward_dense+0x32c>
 80080ce:	f1be 0f00 	cmp.w	lr, #0
 80080d2:	f000 80de 	beq.w	8008292 <forward_dense+0x326>
 80080d6:	f10c 0108 	add.w	r1, ip, #8
 80080da:	4640      	mov	r0, r8
 80080dc:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80080e0:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80080e4:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80080e8:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80080ec:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80080f0:	ed10 5a04 	vldr	s10, [r0, #-16]
 80080f4:	ed50 5a03 	vldr	s11, [r0, #-12]
 80080f8:	ed10 6a02 	vldr	s12, [r0, #-8]
 80080fc:	ed50 6a01 	vldr	s13, [r0, #-4]
 8008100:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008104:	edd5 7a00 	vldr	s15, [r5]
 8008108:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 800810c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008110:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008114:	ed95 3a00 	vldr	s6, [r5]
 8008118:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 800811c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008120:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008124:	3108      	adds	r1, #8
 8008126:	edd5 3a00 	vldr	s7, [r5]
 800812a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800812e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008132:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008136:	3020      	adds	r0, #32
 8008138:	ed95 4a00 	vldr	s8, [r5]
 800813c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8008140:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008144:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008148:	edd5 4a00 	vldr	s9, [r5]
 800814c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8008150:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008154:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008158:	ed95 5a00 	vldr	s10, [r5]
 800815c:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8008160:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008164:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008168:	edd5 5a00 	vldr	s11, [r5]
 800816c:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8008170:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008174:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008178:	428e      	cmp	r6, r1
 800817a:	ed95 6a00 	vldr	s12, [r5]
 800817e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008186:	d1a9      	bne.n	80080dc <forward_dense+0x170>
 8008188:	f1a6 0108 	sub.w	r1, r6, #8
 800818c:	4650      	mov	r0, sl
 800818e:	2a00      	cmp	r2, #0
 8008190:	d04a      	beq.n	8008228 <forward_dense+0x2bc>
 8008192:	780d      	ldrb	r5, [r1, #0]
 8008194:	edd0 6a00 	vldr	s13, [r0]
 8008198:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800819c:	edd5 7a00 	vldr	s15, [r5]
 80081a0:	2a01      	cmp	r2, #1
 80081a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081a6:	d03f      	beq.n	8008228 <forward_dense+0x2bc>
 80081a8:	784d      	ldrb	r5, [r1, #1]
 80081aa:	edd0 6a01 	vldr	s13, [r0, #4]
 80081ae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80081b2:	edd5 7a00 	vldr	s15, [r5]
 80081b6:	2a02      	cmp	r2, #2
 80081b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081bc:	d034      	beq.n	8008228 <forward_dense+0x2bc>
 80081be:	788d      	ldrb	r5, [r1, #2]
 80081c0:	edd0 6a02 	vldr	s13, [r0, #8]
 80081c4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80081c8:	edd5 7a00 	vldr	s15, [r5]
 80081cc:	2a03      	cmp	r2, #3
 80081ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081d2:	d029      	beq.n	8008228 <forward_dense+0x2bc>
 80081d4:	78cd      	ldrb	r5, [r1, #3]
 80081d6:	edd0 6a03 	vldr	s13, [r0, #12]
 80081da:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80081de:	edd5 7a00 	vldr	s15, [r5]
 80081e2:	2a04      	cmp	r2, #4
 80081e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081e8:	d01e      	beq.n	8008228 <forward_dense+0x2bc>
 80081ea:	790d      	ldrb	r5, [r1, #4]
 80081ec:	edd0 6a04 	vldr	s13, [r0, #16]
 80081f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80081f4:	edd5 7a00 	vldr	s15, [r5]
 80081f8:	2a05      	cmp	r2, #5
 80081fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081fe:	d013      	beq.n	8008228 <forward_dense+0x2bc>
 8008200:	794d      	ldrb	r5, [r1, #5]
 8008202:	edd0 6a05 	vldr	s13, [r0, #20]
 8008206:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800820a:	edd5 7a00 	vldr	s15, [r5]
 800820e:	2a06      	cmp	r2, #6
 8008210:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008214:	d008      	beq.n	8008228 <forward_dense+0x2bc>
 8008216:	7989      	ldrb	r1, [r1, #6]
 8008218:	edd0 7a06 	vldr	s15, [r0, #24]
 800821c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008220:	edd1 6a00 	vldr	s13, [r1]
 8008224:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008228:	44dc      	add	ip, fp
 800822a:	445e      	add	r6, fp
 800822c:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008230:	eca7 7a01 	vstmia	r7!, {s14}
 8008234:	454f      	cmp	r7, r9
 8008236:	f4ff af43 	bcc.w	80080c0 <forward_dense+0x154>
 800823a:	9a06      	ldr	r2, [sp, #24]
 800823c:	eba9 0302 	sub.w	r3, r9, r2
 8008240:	3b01      	subs	r3, #1
 8008242:	f023 0303 	bic.w	r3, r3, #3
 8008246:	3304      	adds	r3, #4
 8008248:	18d3      	adds	r3, r2, r3
 800824a:	9306      	str	r3, [sp, #24]
 800824c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800824e:	9a05      	ldr	r2, [sp, #20]
 8008250:	4499      	add	r9, r3
 8008252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008254:	441a      	add	r2, r3
 8008256:	9205      	str	r2, [sp, #20]
 8008258:	9a02      	ldr	r2, [sp, #8]
 800825a:	441a      	add	r2, r3
 800825c:	9202      	str	r2, [sp, #8]
 800825e:	9a04      	ldr	r2, [sp, #16]
 8008260:	441a      	add	r2, r3
 8008262:	9204      	str	r2, [sp, #16]
 8008264:	9b06      	ldr	r3, [sp, #24]
 8008266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008268:	4293      	cmp	r3, r2
 800826a:	f4ff af08 	bcc.w	800807e <forward_dense+0x112>
 800826e:	b015      	add	sp, #84	; 0x54
 8008270:	ecbd 8b02 	vpop	{d8}
 8008274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008278:	6853      	ldr	r3, [r2, #4]
 800827a:	deff      	udf	#255	; 0xff
 800827c:	2300      	movs	r3, #0
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	deff      	udf	#255	; 0xff
 8008282:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008298 <forward_dense+0x32c>
 8008286:	eef0 2a48 	vmov.f32	s5, s16
 800828a:	f1be 0f00 	cmp.w	lr, #0
 800828e:	f47f af22 	bne.w	80080d6 <forward_dense+0x16a>
 8008292:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008294:	4661      	mov	r1, ip
 8008296:	e77a      	b.n	800818e <forward_dense+0x222>
 8008298:	00000000 	.word	0x00000000
 800829c:	4549      	cmp	r1, r9
 800829e:	d2d5      	bcs.n	800824c <forward_dense+0x2e0>
 80082a0:	9807      	ldr	r0, [sp, #28]
 80082a2:	9103      	str	r1, [sp, #12]
 80082a4:	9904      	ldr	r1, [sp, #16]
 80082a6:	f100 0c01 	add.w	ip, r0, #1
 80082aa:	3901      	subs	r1, #1
 80082ac:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80082b0:	9109      	str	r1, [sp, #36]	; 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80b2 	beq.w	800841c <forward_dense+0x4b0>
 80082b8:	9907      	ldr	r1, [sp, #28]
 80082ba:	ecf3 2a01 	vldmia	r3!, {s5}
 80082be:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8008298 <forward_dense+0x32c>
 80082c2:	2900      	cmp	r1, #0
 80082c4:	f000 80b2 	beq.w	800842c <forward_dense+0x4c0>
 80082c8:	9902      	ldr	r1, [sp, #8]
 80082ca:	1d10      	adds	r0, r2, #4
 80082cc:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80082d0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80082d4:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80082d8:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80082dc:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80082e0:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80082e4:	ed11 5a04 	vldr	s10, [r1, #-16]
 80082e8:	ed51 5a03 	vldr	s11, [r1, #-12]
 80082ec:	ed11 6a02 	vldr	s12, [r1, #-8]
 80082f0:	ed51 6a01 	vldr	s13, [r1, #-4]
 80082f4:	f006 070f 	and.w	r7, r6, #15
 80082f8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80082fc:	edd7 7a00 	vldr	s15, [r7]
 8008300:	0936      	lsrs	r6, r6, #4
 8008302:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008306:	ed96 3a00 	vldr	s6, [r6]
 800830a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800830e:	092e      	lsrs	r6, r5, #4
 8008310:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008314:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008318:	f005 050f 	and.w	r5, r5, #15
 800831c:	edd6 3a00 	vldr	s7, [r6]
 8008320:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8008324:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008328:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800832c:	0937      	lsrs	r7, r6, #4
 800832e:	ed95 4a00 	vldr	s8, [r5]
 8008332:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8008336:	eee4 7a24 	vfma.f32	s15, s8, s9
 800833a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800833e:	f006 060f 	and.w	r6, r6, #15
 8008342:	edd7 4a00 	vldr	s9, [r7]
 8008346:	eee4 7a85 	vfma.f32	s15, s9, s10
 800834a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800834e:	3004      	adds	r0, #4
 8008350:	ed96 5a00 	vldr	s10, [r6]
 8008354:	092e      	lsrs	r6, r5, #4
 8008356:	eee5 7a25 	vfma.f32	s15, s10, s11
 800835a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800835e:	f005 050f 	and.w	r5, r5, #15
 8008362:	edd6 5a00 	vldr	s11, [r6]
 8008366:	eee5 7a86 	vfma.f32	s15, s11, s12
 800836a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800836e:	4584      	cmp	ip, r0
 8008370:	ed95 6a00 	vldr	s12, [r5]
 8008374:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008378:	f101 0120 	add.w	r1, r1, #32
 800837c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008380:	d1a4      	bne.n	80082cc <forward_dense+0x360>
 8008382:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008386:	f1ac 0804 	sub.w	r8, ip, #4
 800838a:	9904      	ldr	r1, [sp, #16]
 800838c:	458e      	cmp	lr, r1
 800838e:	d22a      	bcs.n	80083e6 <forward_dense+0x47a>
 8008390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008392:	eba1 070e 	sub.w	r7, r1, lr
 8008396:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800839a:	f10e 0008 	add.w	r0, lr, #8
 800839e:	f108 36ff 	add.w	r6, r8, #4294967295
 80083a2:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80083a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083aa:	ed50 5a01 	vldr	s11, [r0, #-4]
 80083ae:	ed50 6a02 	vldr	s13, [r0, #-8]
 80083b2:	f001 050f 	and.w	r5, r1, #15
 80083b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80083ba:	edd5 7a00 	vldr	s15, [r5]
 80083be:	0909      	lsrs	r1, r1, #4
 80083c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80083c4:	ed91 6a00 	vldr	s12, [r1]
 80083c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80083cc:	42b7      	cmp	r7, r6
 80083ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80083d2:	f100 0008 	add.w	r0, r0, #8
 80083d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083da:	d1e4      	bne.n	80083a6 <forward_dense+0x43a>
 80083dc:	f10a 0a01 	add.w	sl, sl, #1
 80083e0:	44d0      	add	r8, sl
 80083e2:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80083e6:	9908      	ldr	r1, [sp, #32]
 80083e8:	b321      	cbz	r1, 8008434 <forward_dense+0x4c8>
 80083ea:	f898 1000 	ldrb.w	r1, [r8]
 80083ee:	edde 7a00 	vldr	s15, [lr]
 80083f2:	0909      	lsrs	r1, r1, #4
 80083f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80083f8:	edd1 6a00 	vldr	s13, [r1]
 80083fc:	9903      	ldr	r1, [sp, #12]
 80083fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008402:	445a      	add	r2, fp
 8008404:	44dc      	add	ip, fp
 8008406:	ee72 2a87 	vadd.f32	s5, s5, s14
 800840a:	ece1 2a01 	vstmia	r1!, {s5}
 800840e:	4589      	cmp	r9, r1
 8008410:	9103      	str	r1, [sp, #12]
 8008412:	f67f af12 	bls.w	800823a <forward_dense+0x2ce>
 8008416:	2b00      	cmp	r3, #0
 8008418:	f47f af4e 	bne.w	80082b8 <forward_dense+0x34c>
 800841c:	9907      	ldr	r1, [sp, #28]
 800841e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8008298 <forward_dense+0x32c>
 8008422:	eef0 2a48 	vmov.f32	s5, s16
 8008426:	2900      	cmp	r1, #0
 8008428:	f47f af4e 	bne.w	80082c8 <forward_dense+0x35c>
 800842c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8008430:	4690      	mov	r8, r2
 8008432:	e7aa      	b.n	800838a <forward_dense+0x41e>
 8008434:	9903      	ldr	r1, [sp, #12]
 8008436:	ee32 7a87 	vadd.f32	s14, s5, s14
 800843a:	445a      	add	r2, fp
 800843c:	eca1 7a01 	vstmia	r1!, {s14}
 8008440:	4549      	cmp	r1, r9
 8008442:	9103      	str	r1, [sp, #12]
 8008444:	44dc      	add	ip, fp
 8008446:	f4ff af34 	bcc.w	80082b2 <forward_dense+0x346>
 800844a:	e6f6      	b.n	800823a <forward_dense+0x2ce>
 800844c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800844e:	9d06      	ldr	r5, [sp, #24]
 8008450:	9101      	str	r1, [sp, #4]
 8008452:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008454:	9100      	str	r1, [sp, #0]
 8008456:	4628      	mov	r0, r5
 8008458:	990a      	ldr	r1, [sp, #40]	; 0x28
 800845a:	f000 fa85 	bl	8008968 <lite_dense_if32of32wf32>
 800845e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008460:	462b      	mov	r3, r5
 8008462:	4413      	add	r3, r2
 8008464:	9306      	str	r3, [sp, #24]
 8008466:	e6f1      	b.n	800824c <forward_dense+0x2e0>
 8008468:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800846c:	f1b9 0f00 	cmp.w	r9, #0
 8008470:	d016      	beq.n	80084a0 <forward_dense+0x534>
 8008472:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008476:	f000 fc25 	bl	8008cc4 <ai_array_get_byte_size>
 800847a:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800847e:	4602      	mov	r2, r0
 8008480:	4641      	mov	r1, r8
 8008482:	4658      	mov	r0, fp
 8008484:	f000 fc82 	bl	8008d8c <memcpy>
 8008488:	e5c7      	b.n	800801a <forward_dense+0xae>
 800848a:	2b04      	cmp	r3, #4
 800848c:	d00a      	beq.n	80084a4 <forward_dense+0x538>
 800848e:	f04f 0900 	mov.w	r9, #0
 8008492:	e5bd      	b.n	8008010 <forward_dense+0xa4>
 8008494:	930d      	str	r3, [sp, #52]	; 0x34
 8008496:	e595      	b.n	8007fc4 <forward_dense+0x58>
 8008498:	2300      	movs	r3, #0
 800849a:	930b      	str	r3, [sp, #44]	; 0x2c
 800849c:	460b      	mov	r3, r1
 800849e:	e591      	b.n	8007fc4 <forward_dense+0x58>
 80084a0:	46c3      	mov	fp, r8
 80084a2:	e5ba      	b.n	800801a <forward_dense+0xae>
 80084a4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80084a8:	e5b7      	b.n	800801a <forward_dense+0xae>
 80084aa:	2300      	movs	r3, #0
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	deff      	udf	#255	; 0xff
 80084b0:	2300      	movs	r3, #0
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	deff      	udf	#255	; 0xff
 80084b6:	bf00      	nop

080084b8 <forward_relu>:
 80084b8:	6982      	ldr	r2, [r0, #24]
 80084ba:	8813      	ldrh	r3, [r2, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d05b      	beq.n	8008578 <forward_relu+0xc0>
 80084c0:	6851      	ldr	r1, [r2, #4]
 80084c2:	684a      	ldr	r2, [r1, #4]
 80084c4:	b102      	cbz	r2, 80084c8 <forward_relu+0x10>
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	f000 8123 	beq.w	8008714 <forward_relu+0x25c>
 80084ce:	b470      	push	{r4, r5, r6}
 80084d0:	6909      	ldr	r1, [r1, #16]
 80084d2:	b101      	cbz	r1, 80084d6 <forward_relu+0x1e>
 80084d4:	6809      	ldr	r1, [r1, #0]
 80084d6:	69c6      	ldr	r6, [r0, #28]
 80084d8:	2e00      	cmp	r6, #0
 80084da:	f000 8097 	beq.w	800860c <forward_relu+0x154>
 80084de:	6873      	ldr	r3, [r6, #4]
 80084e0:	6988      	ldr	r0, [r1, #24]
 80084e2:	6991      	ldr	r1, [r2, #24]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	f000 80c1 	beq.w	800866c <forward_relu+0x1b4>
 80084ea:	6893      	ldr	r3, [r2, #8]
 80084ec:	6880      	ldr	r0, [r0, #8]
 80084ee:	688c      	ldr	r4, [r1, #8]
 80084f0:	0a1b      	lsrs	r3, r3, #8
 80084f2:	f000 80f2 	beq.w	80086da <forward_relu+0x222>
 80084f6:	68d5      	ldr	r5, [r2, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80084fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008502:	42ab      	cmp	r3, r5
 8008504:	fb01 f202 	mul.w	r2, r1, r2
 8008508:	d1f9      	bne.n	80084fe <forward_relu+0x46>
 800850a:	68b3      	ldr	r3, [r6, #8]
 800850c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008510:	edd3 6a00 	vldr	s13, [r3]
 8008514:	ed93 6a01 	vldr	s12, [r3, #4]
 8008518:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800851c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008520:	3a01      	subs	r2, #1
 8008522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008526:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800852a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800852e:	d425      	bmi.n	800857c <forward_relu+0xc4>
 8008530:	429c      	cmp	r4, r3
 8008532:	d81f      	bhi.n	8008574 <forward_relu+0xbc>
 8008534:	1d1a      	adds	r2, r3, #4
 8008536:	1d01      	adds	r1, r0, #4
 8008538:	e00d      	b.n	8008556 <forward_relu+0x9e>
 800853a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	db03      	blt.n	800854c <forward_relu+0x94>
 8008544:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008548:	ee67 7a86 	vmul.f32	s15, s15, s12
 800854c:	3b08      	subs	r3, #8
 800854e:	429c      	cmp	r4, r3
 8008550:	ed61 7a01 	vstmdb	r1!, {s15}
 8008554:	d80e      	bhi.n	8008574 <forward_relu+0xbc>
 8008556:	4613      	mov	r3, r2
 8008558:	ed72 7a01 	vldmdb	r2!, {s15}
 800855c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008564:	d9e9      	bls.n	800853a <forward_relu+0x82>
 8008566:	3b08      	subs	r3, #8
 8008568:	eef0 7a47 	vmov.f32	s15, s14
 800856c:	429c      	cmp	r4, r3
 800856e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008572:	d9f0      	bls.n	8008556 <forward_relu+0x9e>
 8008574:	bc70      	pop	{r4, r5, r6}
 8008576:	4770      	bx	lr
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	deff      	udf	#255	; 0xff
 800857c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008584:	d11f      	bne.n	80085c6 <forward_relu+0x10e>
 8008586:	429c      	cmp	r4, r3
 8008588:	d8f4      	bhi.n	8008574 <forward_relu+0xbc>
 800858a:	1b1c      	subs	r4, r3, r4
 800858c:	f024 0403 	bic.w	r4, r4, #3
 8008590:	1d1a      	adds	r2, r3, #4
 8008592:	2500      	movs	r5, #0
 8008594:	1b1b      	subs	r3, r3, r4
 8008596:	1d01      	adds	r1, r0, #4
 8008598:	ed72 7a01 	vldmdb	r2!, {s15}
 800859c:	eef4 7ae6 	vcmpe.f32	s15, s13
 80085a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a4:	dc0a      	bgt.n	80085bc <forward_relu+0x104>
 80085a6:	429a      	cmp	r2, r3
 80085a8:	f841 5d04 	str.w	r5, [r1, #-4]!
 80085ac:	d0e2      	beq.n	8008574 <forward_relu+0xbc>
 80085ae:	ed72 7a01 	vldmdb	r2!, {s15}
 80085b2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80085b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ba:	ddf4      	ble.n	80085a6 <forward_relu+0xee>
 80085bc:	429a      	cmp	r2, r3
 80085be:	ed61 7a01 	vstmdb	r1!, {s15}
 80085c2:	d1e9      	bne.n	8008598 <forward_relu+0xe0>
 80085c4:	e7d6      	b.n	8008574 <forward_relu+0xbc>
 80085c6:	429c      	cmp	r4, r3
 80085c8:	d8d4      	bhi.n	8008574 <forward_relu+0xbc>
 80085ca:	1b1c      	subs	r4, r3, r4
 80085cc:	f024 0403 	bic.w	r4, r4, #3
 80085d0:	1d1a      	adds	r2, r3, #4
 80085d2:	1d01      	adds	r1, r0, #4
 80085d4:	1b1b      	subs	r3, r3, r4
 80085d6:	ed72 7a01 	vldmdb	r2!, {s15}
 80085da:	eef4 6ae7 	vcmpe.f32	s13, s15
 80085de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e2:	db0e      	blt.n	8008602 <forward_relu+0x14a>
 80085e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085e8:	4293      	cmp	r3, r2
 80085ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80085ee:	ed61 7a01 	vstmdb	r1!, {s15}
 80085f2:	d0bf      	beq.n	8008574 <forward_relu+0xbc>
 80085f4:	ed72 7a01 	vldmdb	r2!, {s15}
 80085f8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80085fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008600:	daf0      	bge.n	80085e4 <forward_relu+0x12c>
 8008602:	4293      	cmp	r3, r2
 8008604:	ed61 7a01 	vstmdb	r1!, {s15}
 8008608:	d1e5      	bne.n	80085d6 <forward_relu+0x11e>
 800860a:	e7b3      	b.n	8008574 <forward_relu+0xbc>
 800860c:	6893      	ldr	r3, [r2, #8]
 800860e:	6989      	ldr	r1, [r1, #24]
 8008610:	6990      	ldr	r0, [r2, #24]
 8008612:	6889      	ldr	r1, [r1, #8]
 8008614:	6884      	ldr	r4, [r0, #8]
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	d075      	beq.n	8008706 <forward_relu+0x24e>
 800861a:	68d5      	ldr	r5, [r2, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008622:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008626:	429d      	cmp	r5, r3
 8008628:	fb00 f202 	mul.w	r2, r0, r2
 800862c:	d1f9      	bne.n	8008622 <forward_relu+0x16a>
 800862e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8008632:	3b01      	subs	r3, #1
 8008634:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008638:	4294      	cmp	r4, r2
 800863a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800863e:	d899      	bhi.n	8008574 <forward_relu+0xbc>
 8008640:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800871c <forward_relu+0x264>
 8008644:	3204      	adds	r2, #4
 8008646:	3104      	adds	r1, #4
 8008648:	4613      	mov	r3, r2
 800864a:	ed72 7a01 	vldmdb	r2!, {s15}
 800864e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008656:	f1a3 0308 	sub.w	r3, r3, #8
 800865a:	bfb8      	it	lt
 800865c:	eef0 7a47 	vmovlt.f32	s15, s14
 8008660:	429c      	cmp	r4, r3
 8008662:	ed61 7a01 	vstmdb	r1!, {s15}
 8008666:	d9ef      	bls.n	8008648 <forward_relu+0x190>
 8008668:	bc70      	pop	{r4, r5, r6}
 800866a:	4770      	bx	lr
 800866c:	688c      	ldr	r4, [r1, #8]
 800866e:	6891      	ldr	r1, [r2, #8]
 8008670:	6880      	ldr	r0, [r0, #8]
 8008672:	0a09      	lsrs	r1, r1, #8
 8008674:	d049      	beq.n	800870a <forward_relu+0x252>
 8008676:	68d5      	ldr	r5, [r2, #12]
 8008678:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800867c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008680:	42aa      	cmp	r2, r5
 8008682:	fb01 f303 	mul.w	r3, r1, r3
 8008686:	d1f9      	bne.n	800867c <forward_relu+0x1c4>
 8008688:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800868c:	3a01      	subs	r2, #1
 800868e:	68b1      	ldr	r1, [r6, #8]
 8008690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008694:	429c      	cmp	r4, r3
 8008696:	ed91 7a00 	vldr	s14, [r1]
 800869a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800869e:	f63f af69 	bhi.w	8008574 <forward_relu+0xbc>
 80086a2:	2500      	movs	r5, #0
 80086a4:	3304      	adds	r3, #4
 80086a6:	1d02      	adds	r2, r0, #4
 80086a8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80086ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b4:	f1a3 0104 	sub.w	r1, r3, #4
 80086b8:	f1a3 0308 	sub.w	r3, r3, #8
 80086bc:	d406      	bmi.n	80086cc <forward_relu+0x214>
 80086be:	429c      	cmp	r4, r3
 80086c0:	f842 5d04 	str.w	r5, [r2, #-4]!
 80086c4:	f63f af56 	bhi.w	8008574 <forward_relu+0xbc>
 80086c8:	460b      	mov	r3, r1
 80086ca:	e7ed      	b.n	80086a8 <forward_relu+0x1f0>
 80086cc:	429c      	cmp	r4, r3
 80086ce:	ed62 7a01 	vstmdb	r2!, {s15}
 80086d2:	f63f af4f 	bhi.w	8008574 <forward_relu+0xbc>
 80086d6:	460b      	mov	r3, r1
 80086d8:	e7e6      	b.n	80086a8 <forward_relu+0x1f0>
 80086da:	68b3      	ldr	r3, [r6, #8]
 80086dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80086e0:	edd3 6a00 	vldr	s13, [r3]
 80086e4:	ed93 6a01 	vldr	s12, [r3, #4]
 80086e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80086ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f0:	d401      	bmi.n	80086f6 <forward_relu+0x23e>
 80086f2:	4623      	mov	r3, r4
 80086f4:	e71e      	b.n	8008534 <forward_relu+0x7c>
 80086f6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80086fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086fe:	4623      	mov	r3, r4
 8008700:	f47f af63 	bne.w	80085ca <forward_relu+0x112>
 8008704:	e741      	b.n	800858a <forward_relu+0xd2>
 8008706:	4622      	mov	r2, r4
 8008708:	e79a      	b.n	8008640 <forward_relu+0x188>
 800870a:	68b2      	ldr	r2, [r6, #8]
 800870c:	4623      	mov	r3, r4
 800870e:	ed92 7a00 	vldr	s14, [r2]
 8008712:	e7c6      	b.n	80086a2 <forward_relu+0x1ea>
 8008714:	2300      	movs	r3, #0
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	deff      	udf	#255	; 0xff
 800871a:	bf00      	nop
 800871c:	00000000 	.word	0x00000000

08008720 <forward_sm>:
 8008720:	6982      	ldr	r2, [r0, #24]
 8008722:	8813      	ldrh	r3, [r2, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d07c      	beq.n	8008822 <forward_sm+0x102>
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	ed2d 8b04 	vpush	{d8-d9}
 8008730:	6852      	ldr	r2, [r2, #4]
 8008732:	6854      	ldr	r4, [r2, #4]
 8008734:	b085      	sub	sp, #20
 8008736:	b104      	cbz	r4, 800873a <forward_sm+0x1a>
 8008738:	6824      	ldr	r4, [r4, #0]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d076      	beq.n	800882c <forward_sm+0x10c>
 800873e:	6913      	ldr	r3, [r2, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d076      	beq.n	8008832 <forward_sm+0x112>
 8008744:	681e      	ldr	r6, [r3, #0]
 8008746:	68a3      	ldr	r3, [r4, #8]
 8008748:	68e0      	ldr	r0, [r4, #12]
 800874a:	68f2      	ldr	r2, [r6, #12]
 800874c:	6845      	ldr	r5, [r0, #4]
 800874e:	6857      	ldr	r7, [r2, #4]
 8008750:	0a1b      	lsrs	r3, r3, #8
 8008752:	d068      	beq.n	8008826 <forward_sm+0x106>
 8008754:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008758:	2201      	movs	r2, #1
 800875a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800875e:	4298      	cmp	r0, r3
 8008760:	fb01 f202 	mul.w	r2, r1, r2
 8008764:	d1f9      	bne.n	800875a <forward_sm+0x3a>
 8008766:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800876a:	69a2      	ldr	r2, [r4, #24]
 800876c:	69b3      	ldr	r3, [r6, #24]
 800876e:	6892      	ldr	r2, [r2, #8]
 8008770:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008774:	eb02 0309 	add.w	r3, r2, r9
 8008778:	429a      	cmp	r2, r3
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	d24c      	bcs.n	8008818 <forward_sm+0xf8>
 800877e:	00bb      	lsls	r3, r7, #2
 8008780:	9303      	str	r3, [sp, #12]
 8008782:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8008786:	00ab      	lsls	r3, r5, #2
 8008788:	2d01      	cmp	r5, #1
 800878a:	ed92 8a00 	vldr	s16, [r2]
 800878e:	9302      	str	r3, [sp, #8]
 8008790:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8008794:	463e      	mov	r6, r7
 8008796:	d93c      	bls.n	8008812 <forward_sm+0xf2>
 8008798:	1d13      	adds	r3, r2, #4
 800879a:	ecf3 7a01 	vldmia	r3!, {s15}
 800879e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80087a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a6:	bfb8      	it	lt
 80087a8:	eeb0 8a67 	vmovlt.f32	s16, s15
 80087ac:	429e      	cmp	r6, r3
 80087ae:	d1f4      	bne.n	800879a <forward_sm+0x7a>
 80087b0:	eddf 8a21 	vldr	s17, [pc, #132]	; 8008838 <forward_sm+0x118>
 80087b4:	4692      	mov	sl, r2
 80087b6:	46c3      	mov	fp, r8
 80087b8:	46c1      	mov	r9, r8
 80087ba:	2400      	movs	r4, #0
 80087bc:	ecba 0a01 	vldmia	sl!, {s0}
 80087c0:	ee30 0a48 	vsub.f32	s0, s0, s16
 80087c4:	f000 fb68 	bl	8008e98 <expf>
 80087c8:	3401      	adds	r4, #1
 80087ca:	42a5      	cmp	r5, r4
 80087cc:	ee78 8a80 	vadd.f32	s17, s17, s0
 80087d0:	eca9 0a01 	vstmia	r9!, {s0}
 80087d4:	d8f2      	bhi.n	80087bc <forward_sm+0x9c>
 80087d6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80087da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087de:	d00b      	beq.n	80087f8 <forward_sm+0xd8>
 80087e0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80087e4:	2300      	movs	r3, #0
 80087e6:	3301      	adds	r3, #1
 80087e8:	429d      	cmp	r5, r3
 80087ea:	eddb 7a00 	vldr	s15, [fp]
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	eceb 7a01 	vstmia	fp!, {s15}
 80087f6:	d8f6      	bhi.n	80087e6 <forward_sm+0xc6>
 80087f8:	9b03      	ldr	r3, [sp, #12]
 80087fa:	9901      	ldr	r1, [sp, #4]
 80087fc:	4498      	add	r8, r3
 80087fe:	9b02      	ldr	r3, [sp, #8]
 8008800:	42b9      	cmp	r1, r7
 8008802:	463a      	mov	r2, r7
 8008804:	441e      	add	r6, r3
 8008806:	d907      	bls.n	8008818 <forward_sm+0xf8>
 8008808:	2d01      	cmp	r5, #1
 800880a:	ed92 8a00 	vldr	s16, [r2]
 800880e:	441f      	add	r7, r3
 8008810:	d8c2      	bhi.n	8008798 <forward_sm+0x78>
 8008812:	2d00      	cmp	r5, #0
 8008814:	d0f0      	beq.n	80087f8 <forward_sm+0xd8>
 8008816:	e7cb      	b.n	80087b0 <forward_sm+0x90>
 8008818:	b005      	add	sp, #20
 800881a:	ecbd 8b04 	vpop	{d8-d9}
 800881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	deff      	udf	#255	; 0xff
 8008826:	f04f 0904 	mov.w	r9, #4
 800882a:	e79e      	b.n	800876a <forward_sm+0x4a>
 800882c:	2300      	movs	r3, #0
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	deff      	udf	#255	; 0xff
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	deff      	udf	#255	; 0xff
 8008836:	bf00      	nop
 8008838:	00000000 	.word	0x00000000

0800883c <ai_check_custom_types>:
 800883c:	b082      	sub	sp, #8
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <ai_check_custom_types+0x50>)
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	b118      	cbz	r0, 800884c <ai_check_custom_types+0x10>
 8008844:	7803      	ldrb	r3, [r0, #0]
 8008846:	2b03      	cmp	r3, #3
 8008848:	d002      	beq.n	8008850 <ai_check_custom_types+0x14>
 800884a:	2000      	movs	r0, #0
 800884c:	b002      	add	sp, #8
 800884e:	4770      	bx	lr
 8008850:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008854:	4293      	cmp	r3, r2
 8008856:	d004      	beq.n	8008862 <ai_check_custom_types+0x26>
 8008858:	2001      	movs	r0, #1
 800885a:	f080 0001 	eor.w	r0, r0, #1
 800885e:	b002      	add	sp, #8
 8008860:	4770      	bx	lr
 8008862:	7842      	ldrb	r2, [r0, #1]
 8008864:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008868:	429a      	cmp	r2, r3
 800886a:	f100 0001 	add.w	r0, r0, #1
 800886e:	d1f3      	bne.n	8008858 <ai_check_custom_types+0x1c>
 8008870:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008874:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008878:	429a      	cmp	r2, r3
 800887a:	d1ed      	bne.n	8008858 <ai_check_custom_types+0x1c>
 800887c:	7842      	ldrb	r2, [r0, #1]
 800887e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008882:	429a      	cmp	r2, r3
 8008884:	d1e8      	bne.n	8008858 <ai_check_custom_types+0x1c>
 8008886:	2000      	movs	r0, #0
 8008888:	e7e7      	b.n	800885a <ai_check_custom_types+0x1e>
 800888a:	bf00      	nop
 800888c:	84048403 	.word	0x84048403

08008890 <ai_layers_init_all>:
 8008890:	4601      	mov	r1, r0
 8008892:	2000      	movs	r0, #0
 8008894:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008896:	b143      	cbz	r3, 80088aa <ai_layers_init_all+0x1a>
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	60d9      	str	r1, [r3, #12]
 800889c:	429a      	cmp	r2, r3
 800889e:	f100 0001 	add.w	r0, r0, #1
 80088a2:	d002      	beq.n	80088aa <ai_layers_init_all+0x1a>
 80088a4:	b10a      	cbz	r2, 80088aa <ai_layers_init_all+0x1a>
 80088a6:	4613      	mov	r3, r2
 80088a8:	e7f5      	b.n	8008896 <ai_layers_init_all+0x6>
 80088aa:	4770      	bx	lr

080088ac <ai_layers_post_init_all>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80088b0:	2500      	movs	r5, #0
 80088b2:	b16c      	cbz	r4, 80088d0 <ai_layers_post_init_all+0x24>
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	07db      	lsls	r3, r3, #31
 80088b8:	d504      	bpl.n	80088c4 <ai_layers_post_init_all+0x18>
 80088ba:	6a23      	ldr	r3, [r4, #32]
 80088bc:	4620      	mov	r0, r4
 80088be:	b10b      	cbz	r3, 80088c4 <ai_layers_post_init_all+0x18>
 80088c0:	4798      	blx	r3
 80088c2:	3501      	adds	r5, #1
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	42a3      	cmp	r3, r4
 80088c8:	d002      	beq.n	80088d0 <ai_layers_post_init_all+0x24>
 80088ca:	b10b      	cbz	r3, 80088d0 <ai_layers_post_init_all+0x24>
 80088cc:	461c      	mov	r4, r3
 80088ce:	e7f0      	b.n	80088b2 <ai_layers_post_init_all+0x6>
 80088d0:	4628      	mov	r0, r5
 80088d2:	bd38      	pop	{r3, r4, r5, pc}

080088d4 <ai_layers_forward_all>:
 80088d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80088dc:	4604      	mov	r4, r0
 80088de:	f1b8 0f00 	cmp.w	r8, #0
 80088e2:	d02b      	beq.n	800893c <ai_layers_forward_all+0x68>
 80088e4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80088e6:	6381      	str	r1, [r0, #56]	; 0x38
 80088e8:	b321      	cbz	r1, 8008934 <ai_layers_forward_all+0x60>
 80088ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80088ec:	2001      	movs	r0, #1
 80088ee:	47c0      	blx	r8
 80088f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80088f2:	b1fe      	cbz	r6, 8008934 <ai_layers_forward_all+0x60>
 80088f4:	2700      	movs	r7, #0
 80088f6:	4631      	mov	r1, r6
 80088f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80088fa:	2002      	movs	r0, #2
 80088fc:	47c0      	blx	r8
 80088fe:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008900:	4628      	mov	r0, r5
 8008902:	696b      	ldr	r3, [r5, #20]
 8008904:	4798      	blx	r3
 8008906:	692e      	ldr	r6, [r5, #16]
 8008908:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800890a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800890c:	42b5      	cmp	r5, r6
 800890e:	f04f 0003 	mov.w	r0, #3
 8008912:	d007      	beq.n	8008924 <ai_layers_forward_all+0x50>
 8008914:	47c0      	blx	r8
 8008916:	3701      	adds	r7, #1
 8008918:	63a6      	str	r6, [r4, #56]	; 0x38
 800891a:	2e00      	cmp	r6, #0
 800891c:	d1eb      	bne.n	80088f6 <ai_layers_forward_all+0x22>
 800891e:	4638      	mov	r0, r7
 8008920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008924:	2003      	movs	r0, #3
 8008926:	47c0      	blx	r8
 8008928:	2300      	movs	r3, #0
 800892a:	3701      	adds	r7, #1
 800892c:	63a3      	str	r3, [r4, #56]	; 0x38
 800892e:	4638      	mov	r0, r7
 8008930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008934:	2700      	movs	r7, #0
 8008936:	4638      	mov	r0, r7
 8008938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800893c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800893e:	6385      	str	r5, [r0, #56]	; 0x38
 8008940:	2d00      	cmp	r5, #0
 8008942:	d0f7      	beq.n	8008934 <ai_layers_forward_all+0x60>
 8008944:	4647      	mov	r7, r8
 8008946:	696b      	ldr	r3, [r5, #20]
 8008948:	4628      	mov	r0, r5
 800894a:	4798      	blx	r3
 800894c:	462b      	mov	r3, r5
 800894e:	692d      	ldr	r5, [r5, #16]
 8008950:	429d      	cmp	r5, r3
 8008952:	d004      	beq.n	800895e <ai_layers_forward_all+0x8a>
 8008954:	63a5      	str	r5, [r4, #56]	; 0x38
 8008956:	3701      	adds	r7, #1
 8008958:	2d00      	cmp	r5, #0
 800895a:	d1f4      	bne.n	8008946 <ai_layers_forward_all+0x72>
 800895c:	e7df      	b.n	800891e <ai_layers_forward_all+0x4a>
 800895e:	2300      	movs	r3, #0
 8008960:	63a3      	str	r3, [r4, #56]	; 0x38
 8008962:	3701      	adds	r7, #1
 8008964:	e7db      	b.n	800891e <ai_layers_forward_all+0x4a>
 8008966:	bf00      	nop

08008968 <lite_dense_if32of32wf32>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8008970:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008974:	4287      	cmp	r7, r0
 8008976:	f240 8106 	bls.w	8008b86 <lite_dense_if32of32wf32+0x21e>
 800897a:	f1a6 0810 	sub.w	r8, r6, #16
 800897e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800898a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800898e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8008992:	4605      	mov	r5, r0
 8008994:	f006 0a0f 	and.w	sl, r6, #15
 8008998:	2e0f      	cmp	r6, #15
 800899a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8008bac <lite_dense_if32of32wf32+0x244>
 800899e:	f240 8101 	bls.w	8008ba4 <lite_dense_if32of32wf32+0x23c>
 80089a2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80089a6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80089aa:	46b6      	mov	lr, r6
 80089ac:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 80089b0:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80089b4:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80089b8:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80089bc:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80089c0:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80089c4:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80089c8:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80089cc:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80089d0:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80089d4:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80089d8:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80089dc:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80089e0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80089e4:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80089e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089ec:	f1ae 0e10 	sub.w	lr, lr, #16
 80089f0:	f1be 0f0f 	cmp.w	lr, #15
 80089f4:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80089f8:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80089fc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008a00:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008a04:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008a08:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8008a0c:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8008a10:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008a14:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8008a18:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8008a1c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008a20:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8008a24:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8008a28:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008a2c:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8008a30:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8008a34:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008a38:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008a3c:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8008a40:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008a44:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008a48:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008a4c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008a50:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8008a54:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8008a58:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008a5c:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8008a60:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8008a64:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008a68:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008a6c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008a70:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008a74:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008a78:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a80:	d894      	bhi.n	80089ac <lite_dense_if32of32wf32+0x44>
 8008a82:	eb02 0e0b 	add.w	lr, r2, fp
 8008a86:	4654      	mov	r4, sl
 8008a88:	46c4      	mov	ip, r8
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d075      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008a8e:	eddc 6a00 	vldr	s13, [ip]
 8008a92:	edde 7a00 	vldr	s15, [lr]
 8008a96:	2c01      	cmp	r4, #1
 8008a98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a9c:	d06d      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008a9e:	eddc 6a01 	vldr	s13, [ip, #4]
 8008aa2:	edde 7a01 	vldr	s15, [lr, #4]
 8008aa6:	2c02      	cmp	r4, #2
 8008aa8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008aac:	d065      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008aae:	eddc 6a02 	vldr	s13, [ip, #8]
 8008ab2:	edde 7a02 	vldr	s15, [lr, #8]
 8008ab6:	2c03      	cmp	r4, #3
 8008ab8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008abc:	d05d      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008abe:	eddc 6a03 	vldr	s13, [ip, #12]
 8008ac2:	edde 7a03 	vldr	s15, [lr, #12]
 8008ac6:	2c04      	cmp	r4, #4
 8008ac8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008acc:	d055      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008ace:	eddc 6a04 	vldr	s13, [ip, #16]
 8008ad2:	edde 7a04 	vldr	s15, [lr, #16]
 8008ad6:	2c05      	cmp	r4, #5
 8008ad8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008adc:	d04d      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008ade:	eddc 6a05 	vldr	s13, [ip, #20]
 8008ae2:	edde 7a05 	vldr	s15, [lr, #20]
 8008ae6:	2c06      	cmp	r4, #6
 8008ae8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008aec:	d045      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008aee:	eddc 6a06 	vldr	s13, [ip, #24]
 8008af2:	edde 7a06 	vldr	s15, [lr, #24]
 8008af6:	2c07      	cmp	r4, #7
 8008af8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008afc:	d03d      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008afe:	eddc 6a07 	vldr	s13, [ip, #28]
 8008b02:	edde 7a07 	vldr	s15, [lr, #28]
 8008b06:	2c08      	cmp	r4, #8
 8008b08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b0c:	d035      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008b0e:	eddc 6a08 	vldr	s13, [ip, #32]
 8008b12:	edde 7a08 	vldr	s15, [lr, #32]
 8008b16:	2c09      	cmp	r4, #9
 8008b18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b1c:	d02d      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008b1e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8008b22:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8008b26:	2c0a      	cmp	r4, #10
 8008b28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b2c:	d025      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008b2e:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8008b32:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8008b36:	2c0b      	cmp	r4, #11
 8008b38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b3c:	d01d      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008b3e:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8008b42:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8008b46:	2c0c      	cmp	r4, #12
 8008b48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b4c:	d015      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008b4e:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8008b52:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8008b56:	3c0d      	subs	r4, #13
 8008b58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b5c:	d00d      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008b5e:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8008b62:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8008b66:	2c01      	cmp	r4, #1
 8008b68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b6c:	d005      	beq.n	8008b7a <lite_dense_if32of32wf32+0x212>
 8008b6e:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8008b72:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8008b76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b7a:	444a      	add	r2, r9
 8008b7c:	eca5 7a01 	vstmia	r5!, {s14}
 8008b80:	42af      	cmp	r7, r5
 8008b82:	f63f af09 	bhi.w	8008998 <lite_dense_if32of32wf32+0x30>
 8008b86:	b15b      	cbz	r3, 8008ba0 <lite_dense_if32of32wf32+0x238>
 8008b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b8a:	b14a      	cbz	r2, 8008ba0 <lite_dense_if32of32wf32+0x238>
 8008b8c:	edd0 7a00 	vldr	s15, [r0]
 8008b90:	ecb3 7a01 	vldmia	r3!, {s14}
 8008b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b98:	ece0 7a01 	vstmia	r0!, {s15}
 8008b9c:	4287      	cmp	r7, r0
 8008b9e:	d1f5      	bne.n	8008b8c <lite_dense_if32of32wf32+0x224>
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	4634      	mov	r4, r6
 8008ba6:	4696      	mov	lr, r2
 8008ba8:	468c      	mov	ip, r1
 8008baa:	e76e      	b.n	8008a8a <lite_dense_if32of32wf32+0x122>
 8008bac:	00000000 	.word	0x00000000

08008bb0 <ai_version_get>:
 8008bb0:	0212      	lsls	r2, r2, #8
 8008bb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008bb6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008bba:	4770      	bx	lr

08008bbc <get_tensor_byte_size>:
 8008bbc:	b410      	push	{r4}
 8008bbe:	6983      	ldr	r3, [r0, #24]
 8008bc0:	68c4      	ldr	r4, [r0, #12]
 8008bc2:	6941      	ldr	r1, [r0, #20]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68e0      	ldr	r0, [r4, #12]
 8008bc8:	4a07      	ldr	r2, [pc, #28]	; (8008be8 <get_tensor_byte_size+0x2c>)
 8008bca:	68c9      	ldr	r1, [r1, #12]
 8008bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008bd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008bd8:	fb01 f000 	mul.w	r0, r1, r0
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	bf04      	itt	eq
 8008be0:	3007      	addeq	r0, #7
 8008be2:	08c0      	lsreq	r0, r0, #3
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	000400c0 	.word	0x000400c0

08008bec <ai_array_to_buffer_fmt>:
 8008bec:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d050      	beq.n	8008c96 <ai_array_to_buffer_fmt+0xaa>
 8008bf4:	4b2a      	ldr	r3, [pc, #168]	; (8008ca0 <ai_array_to_buffer_fmt+0xb4>)
 8008bf6:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d00b      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008bfe:	dc1c      	bgt.n	8008c3a <ai_array_to_buffer_fmt+0x4e>
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <ai_array_to_buffer_fmt+0xb8>)
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d007      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c06:	dd0b      	ble.n	8008c20 <ai_array_to_buffer_fmt+0x34>
 8008c08:	4b27      	ldr	r3, [pc, #156]	; (8008ca8 <ai_array_to_buffer_fmt+0xbc>)
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d003      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c0e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d131      	bne.n	8008c7a <ai_array_to_buffer_fmt+0x8e>
 8008c16:	4613      	mov	r3, r2
 8008c18:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008c1c:	4318      	orrs	r0, r3
 8008c1e:	4770      	bx	lr
 8008c20:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d0f6      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c28:	dd2c      	ble.n	8008c84 <ai_array_to_buffer_fmt+0x98>
 8008c2a:	4b20      	ldr	r3, [pc, #128]	; (8008cac <ai_array_to_buffer_fmt+0xc0>)
 8008c2c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bf18      	it	ne
 8008c34:	2340      	movne	r3, #64	; 0x40
 8008c36:	4318      	orrs	r0, r3
 8008c38:	4770      	bx	lr
 8008c3a:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <ai_array_to_buffer_fmt+0xc4>)
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d0ea      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c40:	dd0e      	ble.n	8008c60 <ai_array_to_buffer_fmt+0x74>
 8008c42:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <ai_array_to_buffer_fmt+0xc8>)
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d0e6      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c48:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d0e2      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c50:	4b19      	ldr	r3, [pc, #100]	; (8008cb8 <ai_array_to_buffer_fmt+0xcc>)
 8008c52:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008c56:	429a      	cmp	r2, r3
 8008c58:	bf18      	it	ne
 8008c5a:	2340      	movne	r3, #64	; 0x40
 8008c5c:	4318      	orrs	r0, r3
 8008c5e:	4770      	bx	lr
 8008c60:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d0d6      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c68:	3307      	adds	r3, #7
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d0d3      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c6e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8008c72:	429a      	cmp	r2, r3
 8008c74:	bf18      	it	ne
 8008c76:	2340      	movne	r3, #64	; 0x40
 8008c78:	e7ce      	b.n	8008c18 <ai_array_to_buffer_fmt+0x2c>
 8008c7a:	4b10      	ldr	r3, [pc, #64]	; (8008cbc <ai_array_to_buffer_fmt+0xd0>)
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	bf18      	it	ne
 8008c80:	2340      	movne	r3, #64	; 0x40
 8008c82:	e7c9      	b.n	8008c18 <ai_array_to_buffer_fmt+0x2c>
 8008c84:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d0c4      	beq.n	8008c16 <ai_array_to_buffer_fmt+0x2a>
 8008c8c:	3380      	adds	r3, #128	; 0x80
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	bf18      	it	ne
 8008c92:	2340      	movne	r3, #64	; 0x40
 8008c94:	e7c0      	b.n	8008c18 <ai_array_to_buffer_fmt+0x2c>
 8008c96:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <ai_array_to_buffer_fmt+0xd4>)
 8008c98:	4003      	ands	r3, r0
 8008c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c9e:	e7bb      	b.n	8008c18 <ai_array_to_buffer_fmt+0x2c>
 8008ca0:	00840040 	.word	0x00840040
 8008ca4:	00040840 	.word	0x00040840
 8008ca8:	00041040 	.word	0x00041040
 8008cac:	00040447 	.word	0x00040447
 8008cb0:	00840840 	.word	0x00840840
 8008cb4:	00841040 	.word	0x00841040
 8008cb8:	0084084f 	.word	0x0084084f
 8008cbc:	0004084f 	.word	0x0004084f
 8008cc0:	00803fff 	.word	0x00803fff

08008cc4 <ai_array_get_byte_size>:
 8008cc4:	b319      	cbz	r1, 8008d0e <ai_array_get_byte_size+0x4a>
 8008cc6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008cca:	fb03 f101 	mul.w	r1, r3, r1
 8008cce:	3107      	adds	r1, #7
 8008cd0:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008cd4:	f021 0307 	bic.w	r3, r1, #7
 8008cd8:	2a04      	cmp	r2, #4
 8008cda:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8008cde:	fa23 f101 	lsr.w	r1, r3, r1
 8008ce2:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8008ce6:	d00b      	beq.n	8008d00 <ai_array_get_byte_size+0x3c>
 8008ce8:	2a08      	cmp	r2, #8
 8008cea:	d002      	beq.n	8008cf2 <ai_array_get_byte_size+0x2e>
 8008cec:	3107      	adds	r1, #7
 8008cee:	08c8      	lsrs	r0, r1, #3
 8008cf0:	4770      	bx	lr
 8008cf2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008cf6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008cfa:	3107      	adds	r1, #7
 8008cfc:	08c8      	lsrs	r0, r1, #3
 8008cfe:	4770      	bx	lr
 8008d00:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008d04:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008d08:	3107      	adds	r1, #7
 8008d0a:	08c8      	lsrs	r0, r1, #3
 8008d0c:	4770      	bx	lr
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop

08008d14 <ai_array_get_data_byte_size>:
 8008d14:	b169      	cbz	r1, 8008d32 <ai_array_get_data_byte_size+0x1e>
 8008d16:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8008d1a:	fb02 f101 	mul.w	r1, r2, r1
 8008d1e:	1dcb      	adds	r3, r1, #7
 8008d20:	f023 0307 	bic.w	r3, r3, #7
 8008d24:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008d28:	fa23 f000 	lsr.w	r0, r3, r0
 8008d2c:	3007      	adds	r0, #7
 8008d2e:	08c0      	lsrs	r0, r0, #3
 8008d30:	4770      	bx	lr
 8008d32:	4608      	mov	r0, r1
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop

08008d38 <__errno>:
 8008d38:	4b01      	ldr	r3, [pc, #4]	; (8008d40 <__errno+0x8>)
 8008d3a:	6818      	ldr	r0, [r3, #0]
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	20000738 	.word	0x20000738

08008d44 <__libc_init_array>:
 8008d44:	b570      	push	{r4, r5, r6, lr}
 8008d46:	4d0d      	ldr	r5, [pc, #52]	; (8008d7c <__libc_init_array+0x38>)
 8008d48:	4c0d      	ldr	r4, [pc, #52]	; (8008d80 <__libc_init_array+0x3c>)
 8008d4a:	1b64      	subs	r4, r4, r5
 8008d4c:	10a4      	asrs	r4, r4, #2
 8008d4e:	2600      	movs	r6, #0
 8008d50:	42a6      	cmp	r6, r4
 8008d52:	d109      	bne.n	8008d68 <__libc_init_array+0x24>
 8008d54:	4d0b      	ldr	r5, [pc, #44]	; (8008d84 <__libc_init_array+0x40>)
 8008d56:	4c0c      	ldr	r4, [pc, #48]	; (8008d88 <__libc_init_array+0x44>)
 8008d58:	f001 f89e 	bl	8009e98 <_init>
 8008d5c:	1b64      	subs	r4, r4, r5
 8008d5e:	10a4      	asrs	r4, r4, #2
 8008d60:	2600      	movs	r6, #0
 8008d62:	42a6      	cmp	r6, r4
 8008d64:	d105      	bne.n	8008d72 <__libc_init_array+0x2e>
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d6c:	4798      	blx	r3
 8008d6e:	3601      	adds	r6, #1
 8008d70:	e7ee      	b.n	8008d50 <__libc_init_array+0xc>
 8008d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d76:	4798      	blx	r3
 8008d78:	3601      	adds	r6, #1
 8008d7a:	e7f2      	b.n	8008d62 <__libc_init_array+0x1e>
 8008d7c:	0800b5f8 	.word	0x0800b5f8
 8008d80:	0800b5f8 	.word	0x0800b5f8
 8008d84:	0800b5f8 	.word	0x0800b5f8
 8008d88:	0800b5fc 	.word	0x0800b5fc

08008d8c <memcpy>:
 8008d8c:	440a      	add	r2, r1
 8008d8e:	4291      	cmp	r1, r2
 8008d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d94:	d100      	bne.n	8008d98 <memcpy+0xc>
 8008d96:	4770      	bx	lr
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da2:	4291      	cmp	r1, r2
 8008da4:	d1f9      	bne.n	8008d9a <memcpy+0xe>
 8008da6:	bd10      	pop	{r4, pc}

08008da8 <memset>:
 8008da8:	4402      	add	r2, r0
 8008daa:	4603      	mov	r3, r0
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d100      	bne.n	8008db2 <memset+0xa>
 8008db0:	4770      	bx	lr
 8008db2:	f803 1b01 	strb.w	r1, [r3], #1
 8008db6:	e7f9      	b.n	8008dac <memset+0x4>

08008db8 <pow>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	ed2d 8b02 	vpush	{d8}
 8008dbe:	eeb0 8a40 	vmov.f32	s16, s0
 8008dc2:	eef0 8a60 	vmov.f32	s17, s1
 8008dc6:	ec55 4b11 	vmov	r4, r5, d1
 8008dca:	f000 f8b9 	bl	8008f40 <__ieee754_pow>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	ec57 6b10 	vmov	r6, r7, d0
 8008dda:	f7f7 fe6b 	bl	8000ab4 <__aeabi_dcmpun>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d13b      	bne.n	8008e5a <pow+0xa2>
 8008de2:	ec51 0b18 	vmov	r0, r1, d8
 8008de6:	2200      	movs	r2, #0
 8008de8:	2300      	movs	r3, #0
 8008dea:	f7f7 fe31 	bl	8000a50 <__aeabi_dcmpeq>
 8008dee:	b1b8      	cbz	r0, 8008e20 <pow+0x68>
 8008df0:	2200      	movs	r2, #0
 8008df2:	2300      	movs	r3, #0
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f7f7 fe2a 	bl	8000a50 <__aeabi_dcmpeq>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d146      	bne.n	8008e8e <pow+0xd6>
 8008e00:	ec45 4b10 	vmov	d0, r4, r5
 8008e04:	f000 ffa9 	bl	8009d5a <finite>
 8008e08:	b338      	cbz	r0, 8008e5a <pow+0xa2>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4620      	mov	r0, r4
 8008e10:	4629      	mov	r1, r5
 8008e12:	f7f7 fe27 	bl	8000a64 <__aeabi_dcmplt>
 8008e16:	b300      	cbz	r0, 8008e5a <pow+0xa2>
 8008e18:	f7ff ff8e 	bl	8008d38 <__errno>
 8008e1c:	2322      	movs	r3, #34	; 0x22
 8008e1e:	e01b      	b.n	8008e58 <pow+0xa0>
 8008e20:	ec47 6b10 	vmov	d0, r6, r7
 8008e24:	f000 ff99 	bl	8009d5a <finite>
 8008e28:	b9e0      	cbnz	r0, 8008e64 <pow+0xac>
 8008e2a:	eeb0 0a48 	vmov.f32	s0, s16
 8008e2e:	eef0 0a68 	vmov.f32	s1, s17
 8008e32:	f000 ff92 	bl	8009d5a <finite>
 8008e36:	b1a8      	cbz	r0, 8008e64 <pow+0xac>
 8008e38:	ec45 4b10 	vmov	d0, r4, r5
 8008e3c:	f000 ff8d 	bl	8009d5a <finite>
 8008e40:	b180      	cbz	r0, 8008e64 <pow+0xac>
 8008e42:	4632      	mov	r2, r6
 8008e44:	463b      	mov	r3, r7
 8008e46:	4630      	mov	r0, r6
 8008e48:	4639      	mov	r1, r7
 8008e4a:	f7f7 fe33 	bl	8000ab4 <__aeabi_dcmpun>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d0e2      	beq.n	8008e18 <pow+0x60>
 8008e52:	f7ff ff71 	bl	8008d38 <__errno>
 8008e56:	2321      	movs	r3, #33	; 0x21
 8008e58:	6003      	str	r3, [r0, #0]
 8008e5a:	ecbd 8b02 	vpop	{d8}
 8008e5e:	ec47 6b10 	vmov	d0, r6, r7
 8008e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e64:	2200      	movs	r2, #0
 8008e66:	2300      	movs	r3, #0
 8008e68:	4630      	mov	r0, r6
 8008e6a:	4639      	mov	r1, r7
 8008e6c:	f7f7 fdf0 	bl	8000a50 <__aeabi_dcmpeq>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d0f2      	beq.n	8008e5a <pow+0xa2>
 8008e74:	eeb0 0a48 	vmov.f32	s0, s16
 8008e78:	eef0 0a68 	vmov.f32	s1, s17
 8008e7c:	f000 ff6d 	bl	8009d5a <finite>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d0ea      	beq.n	8008e5a <pow+0xa2>
 8008e84:	ec45 4b10 	vmov	d0, r4, r5
 8008e88:	f000 ff67 	bl	8009d5a <finite>
 8008e8c:	e7c3      	b.n	8008e16 <pow+0x5e>
 8008e8e:	4f01      	ldr	r7, [pc, #4]	; (8008e94 <pow+0xdc>)
 8008e90:	2600      	movs	r6, #0
 8008e92:	e7e2      	b.n	8008e5a <pow+0xa2>
 8008e94:	3ff00000 	.word	0x3ff00000

08008e98 <expf>:
 8008e98:	b508      	push	{r3, lr}
 8008e9a:	ed2d 8b02 	vpush	{d8}
 8008e9e:	eef0 8a40 	vmov.f32	s17, s0
 8008ea2:	f000 fe2d 	bl	8009b00 <__ieee754_expf>
 8008ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8008eaa:	eeb0 0a68 	vmov.f32	s0, s17
 8008eae:	f000 ffe5 	bl	8009e7c <finitef>
 8008eb2:	b160      	cbz	r0, 8008ece <expf+0x36>
 8008eb4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008ef4 <expf+0x5c>
 8008eb8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec0:	dd0a      	ble.n	8008ed8 <expf+0x40>
 8008ec2:	f7ff ff39 	bl	8008d38 <__errno>
 8008ec6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008ef8 <expf+0x60>
 8008eca:	2322      	movs	r3, #34	; 0x22
 8008ecc:	6003      	str	r3, [r0, #0]
 8008ece:	eeb0 0a48 	vmov.f32	s0, s16
 8008ed2:	ecbd 8b02 	vpop	{d8}
 8008ed6:	bd08      	pop	{r3, pc}
 8008ed8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008efc <expf+0x64>
 8008edc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee4:	d5f3      	bpl.n	8008ece <expf+0x36>
 8008ee6:	f7ff ff27 	bl	8008d38 <__errno>
 8008eea:	2322      	movs	r3, #34	; 0x22
 8008eec:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008f00 <expf+0x68>
 8008ef0:	6003      	str	r3, [r0, #0]
 8008ef2:	e7ec      	b.n	8008ece <expf+0x36>
 8008ef4:	42b17180 	.word	0x42b17180
 8008ef8:	7f800000 	.word	0x7f800000
 8008efc:	c2cff1b5 	.word	0xc2cff1b5
 8008f00:	00000000 	.word	0x00000000

08008f04 <sqrtf>:
 8008f04:	b508      	push	{r3, lr}
 8008f06:	ed2d 8b02 	vpush	{d8}
 8008f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8008f0e:	f000 fec5 	bl	8009c9c <__ieee754_sqrtf>
 8008f12:	eeb4 8a48 	vcmp.f32	s16, s16
 8008f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1a:	d60c      	bvs.n	8008f36 <sqrtf+0x32>
 8008f1c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008f3c <sqrtf+0x38>
 8008f20:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f28:	d505      	bpl.n	8008f36 <sqrtf+0x32>
 8008f2a:	f7ff ff05 	bl	8008d38 <__errno>
 8008f2e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008f32:	2321      	movs	r3, #33	; 0x21
 8008f34:	6003      	str	r3, [r0, #0]
 8008f36:	ecbd 8b02 	vpop	{d8}
 8008f3a:	bd08      	pop	{r3, pc}
 8008f3c:	00000000 	.word	0x00000000

08008f40 <__ieee754_pow>:
 8008f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	ed2d 8b06 	vpush	{d8-d10}
 8008f48:	b089      	sub	sp, #36	; 0x24
 8008f4a:	ed8d 1b00 	vstr	d1, [sp]
 8008f4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008f52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008f56:	ea58 0102 	orrs.w	r1, r8, r2
 8008f5a:	ec57 6b10 	vmov	r6, r7, d0
 8008f5e:	d115      	bne.n	8008f8c <__ieee754_pow+0x4c>
 8008f60:	19b3      	adds	r3, r6, r6
 8008f62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008f66:	4152      	adcs	r2, r2
 8008f68:	4299      	cmp	r1, r3
 8008f6a:	4b89      	ldr	r3, [pc, #548]	; (8009190 <__ieee754_pow+0x250>)
 8008f6c:	4193      	sbcs	r3, r2
 8008f6e:	f080 84d2 	bcs.w	8009916 <__ieee754_pow+0x9d6>
 8008f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f76:	4630      	mov	r0, r6
 8008f78:	4639      	mov	r1, r7
 8008f7a:	f7f7 f94b 	bl	8000214 <__adddf3>
 8008f7e:	ec41 0b10 	vmov	d0, r0, r1
 8008f82:	b009      	add	sp, #36	; 0x24
 8008f84:	ecbd 8b06 	vpop	{d8-d10}
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	4b81      	ldr	r3, [pc, #516]	; (8009194 <__ieee754_pow+0x254>)
 8008f8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008f92:	429c      	cmp	r4, r3
 8008f94:	ee10 aa10 	vmov	sl, s0
 8008f98:	463d      	mov	r5, r7
 8008f9a:	dc06      	bgt.n	8008faa <__ieee754_pow+0x6a>
 8008f9c:	d101      	bne.n	8008fa2 <__ieee754_pow+0x62>
 8008f9e:	2e00      	cmp	r6, #0
 8008fa0:	d1e7      	bne.n	8008f72 <__ieee754_pow+0x32>
 8008fa2:	4598      	cmp	r8, r3
 8008fa4:	dc01      	bgt.n	8008faa <__ieee754_pow+0x6a>
 8008fa6:	d10f      	bne.n	8008fc8 <__ieee754_pow+0x88>
 8008fa8:	b172      	cbz	r2, 8008fc8 <__ieee754_pow+0x88>
 8008faa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008fae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008fb2:	ea55 050a 	orrs.w	r5, r5, sl
 8008fb6:	d1dc      	bne.n	8008f72 <__ieee754_pow+0x32>
 8008fb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008fbc:	18db      	adds	r3, r3, r3
 8008fbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008fc2:	4152      	adcs	r2, r2
 8008fc4:	429d      	cmp	r5, r3
 8008fc6:	e7d0      	b.n	8008f6a <__ieee754_pow+0x2a>
 8008fc8:	2d00      	cmp	r5, #0
 8008fca:	da3b      	bge.n	8009044 <__ieee754_pow+0x104>
 8008fcc:	4b72      	ldr	r3, [pc, #456]	; (8009198 <__ieee754_pow+0x258>)
 8008fce:	4598      	cmp	r8, r3
 8008fd0:	dc51      	bgt.n	8009076 <__ieee754_pow+0x136>
 8008fd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008fd6:	4598      	cmp	r8, r3
 8008fd8:	f340 84ac 	ble.w	8009934 <__ieee754_pow+0x9f4>
 8008fdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008fe0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008fe4:	2b14      	cmp	r3, #20
 8008fe6:	dd0f      	ble.n	8009008 <__ieee754_pow+0xc8>
 8008fe8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008fec:	fa22 f103 	lsr.w	r1, r2, r3
 8008ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	f040 849d 	bne.w	8009934 <__ieee754_pow+0x9f4>
 8008ffa:	f001 0101 	and.w	r1, r1, #1
 8008ffe:	f1c1 0302 	rsb	r3, r1, #2
 8009002:	9304      	str	r3, [sp, #16]
 8009004:	b182      	cbz	r2, 8009028 <__ieee754_pow+0xe8>
 8009006:	e05f      	b.n	80090c8 <__ieee754_pow+0x188>
 8009008:	2a00      	cmp	r2, #0
 800900a:	d15b      	bne.n	80090c4 <__ieee754_pow+0x184>
 800900c:	f1c3 0314 	rsb	r3, r3, #20
 8009010:	fa48 f103 	asr.w	r1, r8, r3
 8009014:	fa01 f303 	lsl.w	r3, r1, r3
 8009018:	4543      	cmp	r3, r8
 800901a:	f040 8488 	bne.w	800992e <__ieee754_pow+0x9ee>
 800901e:	f001 0101 	and.w	r1, r1, #1
 8009022:	f1c1 0302 	rsb	r3, r1, #2
 8009026:	9304      	str	r3, [sp, #16]
 8009028:	4b5c      	ldr	r3, [pc, #368]	; (800919c <__ieee754_pow+0x25c>)
 800902a:	4598      	cmp	r8, r3
 800902c:	d132      	bne.n	8009094 <__ieee754_pow+0x154>
 800902e:	f1b9 0f00 	cmp.w	r9, #0
 8009032:	f280 8478 	bge.w	8009926 <__ieee754_pow+0x9e6>
 8009036:	4959      	ldr	r1, [pc, #356]	; (800919c <__ieee754_pow+0x25c>)
 8009038:	4632      	mov	r2, r6
 800903a:	463b      	mov	r3, r7
 800903c:	2000      	movs	r0, #0
 800903e:	f7f7 fbc9 	bl	80007d4 <__aeabi_ddiv>
 8009042:	e79c      	b.n	8008f7e <__ieee754_pow+0x3e>
 8009044:	2300      	movs	r3, #0
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	2a00      	cmp	r2, #0
 800904a:	d13d      	bne.n	80090c8 <__ieee754_pow+0x188>
 800904c:	4b51      	ldr	r3, [pc, #324]	; (8009194 <__ieee754_pow+0x254>)
 800904e:	4598      	cmp	r8, r3
 8009050:	d1ea      	bne.n	8009028 <__ieee754_pow+0xe8>
 8009052:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009056:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800905a:	ea53 030a 	orrs.w	r3, r3, sl
 800905e:	f000 845a 	beq.w	8009916 <__ieee754_pow+0x9d6>
 8009062:	4b4f      	ldr	r3, [pc, #316]	; (80091a0 <__ieee754_pow+0x260>)
 8009064:	429c      	cmp	r4, r3
 8009066:	dd08      	ble.n	800907a <__ieee754_pow+0x13a>
 8009068:	f1b9 0f00 	cmp.w	r9, #0
 800906c:	f2c0 8457 	blt.w	800991e <__ieee754_pow+0x9de>
 8009070:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009074:	e783      	b.n	8008f7e <__ieee754_pow+0x3e>
 8009076:	2302      	movs	r3, #2
 8009078:	e7e5      	b.n	8009046 <__ieee754_pow+0x106>
 800907a:	f1b9 0f00 	cmp.w	r9, #0
 800907e:	f04f 0000 	mov.w	r0, #0
 8009082:	f04f 0100 	mov.w	r1, #0
 8009086:	f6bf af7a 	bge.w	8008f7e <__ieee754_pow+0x3e>
 800908a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800908e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009092:	e774      	b.n	8008f7e <__ieee754_pow+0x3e>
 8009094:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009098:	d106      	bne.n	80090a8 <__ieee754_pow+0x168>
 800909a:	4632      	mov	r2, r6
 800909c:	463b      	mov	r3, r7
 800909e:	4630      	mov	r0, r6
 80090a0:	4639      	mov	r1, r7
 80090a2:	f7f7 fa6d 	bl	8000580 <__aeabi_dmul>
 80090a6:	e76a      	b.n	8008f7e <__ieee754_pow+0x3e>
 80090a8:	4b3e      	ldr	r3, [pc, #248]	; (80091a4 <__ieee754_pow+0x264>)
 80090aa:	4599      	cmp	r9, r3
 80090ac:	d10c      	bne.n	80090c8 <__ieee754_pow+0x188>
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	db0a      	blt.n	80090c8 <__ieee754_pow+0x188>
 80090b2:	ec47 6b10 	vmov	d0, r6, r7
 80090b6:	b009      	add	sp, #36	; 0x24
 80090b8:	ecbd 8b06 	vpop	{d8-d10}
 80090bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	f000 bc6c 	b.w	800999c <__ieee754_sqrt>
 80090c4:	2300      	movs	r3, #0
 80090c6:	9304      	str	r3, [sp, #16]
 80090c8:	ec47 6b10 	vmov	d0, r6, r7
 80090cc:	f000 fe3c 	bl	8009d48 <fabs>
 80090d0:	ec51 0b10 	vmov	r0, r1, d0
 80090d4:	f1ba 0f00 	cmp.w	sl, #0
 80090d8:	d129      	bne.n	800912e <__ieee754_pow+0x1ee>
 80090da:	b124      	cbz	r4, 80090e6 <__ieee754_pow+0x1a6>
 80090dc:	4b2f      	ldr	r3, [pc, #188]	; (800919c <__ieee754_pow+0x25c>)
 80090de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d123      	bne.n	800912e <__ieee754_pow+0x1ee>
 80090e6:	f1b9 0f00 	cmp.w	r9, #0
 80090ea:	da05      	bge.n	80090f8 <__ieee754_pow+0x1b8>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	2000      	movs	r0, #0
 80090f2:	492a      	ldr	r1, [pc, #168]	; (800919c <__ieee754_pow+0x25c>)
 80090f4:	f7f7 fb6e 	bl	80007d4 <__aeabi_ddiv>
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	f6bf af40 	bge.w	8008f7e <__ieee754_pow+0x3e>
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009104:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009108:	4323      	orrs	r3, r4
 800910a:	d108      	bne.n	800911e <__ieee754_pow+0x1de>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4610      	mov	r0, r2
 8009112:	4619      	mov	r1, r3
 8009114:	f7f7 f87c 	bl	8000210 <__aeabi_dsub>
 8009118:	4602      	mov	r2, r0
 800911a:	460b      	mov	r3, r1
 800911c:	e78f      	b.n	800903e <__ieee754_pow+0xfe>
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	2b01      	cmp	r3, #1
 8009122:	f47f af2c 	bne.w	8008f7e <__ieee754_pow+0x3e>
 8009126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800912a:	4619      	mov	r1, r3
 800912c:	e727      	b.n	8008f7e <__ieee754_pow+0x3e>
 800912e:	0feb      	lsrs	r3, r5, #31
 8009130:	3b01      	subs	r3, #1
 8009132:	9306      	str	r3, [sp, #24]
 8009134:	9a06      	ldr	r2, [sp, #24]
 8009136:	9b04      	ldr	r3, [sp, #16]
 8009138:	4313      	orrs	r3, r2
 800913a:	d102      	bne.n	8009142 <__ieee754_pow+0x202>
 800913c:	4632      	mov	r2, r6
 800913e:	463b      	mov	r3, r7
 8009140:	e7e6      	b.n	8009110 <__ieee754_pow+0x1d0>
 8009142:	4b19      	ldr	r3, [pc, #100]	; (80091a8 <__ieee754_pow+0x268>)
 8009144:	4598      	cmp	r8, r3
 8009146:	f340 80fb 	ble.w	8009340 <__ieee754_pow+0x400>
 800914a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800914e:	4598      	cmp	r8, r3
 8009150:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <__ieee754_pow+0x260>)
 8009152:	dd0c      	ble.n	800916e <__ieee754_pow+0x22e>
 8009154:	429c      	cmp	r4, r3
 8009156:	dc0f      	bgt.n	8009178 <__ieee754_pow+0x238>
 8009158:	f1b9 0f00 	cmp.w	r9, #0
 800915c:	da0f      	bge.n	800917e <__ieee754_pow+0x23e>
 800915e:	2000      	movs	r0, #0
 8009160:	b009      	add	sp, #36	; 0x24
 8009162:	ecbd 8b06 	vpop	{d8-d10}
 8009166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	f000 bdc1 	b.w	8009cf0 <__math_oflow>
 800916e:	429c      	cmp	r4, r3
 8009170:	dbf2      	blt.n	8009158 <__ieee754_pow+0x218>
 8009172:	4b0a      	ldr	r3, [pc, #40]	; (800919c <__ieee754_pow+0x25c>)
 8009174:	429c      	cmp	r4, r3
 8009176:	dd19      	ble.n	80091ac <__ieee754_pow+0x26c>
 8009178:	f1b9 0f00 	cmp.w	r9, #0
 800917c:	dcef      	bgt.n	800915e <__ieee754_pow+0x21e>
 800917e:	2000      	movs	r0, #0
 8009180:	b009      	add	sp, #36	; 0x24
 8009182:	ecbd 8b06 	vpop	{d8-d10}
 8009186:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918a:	f000 bda8 	b.w	8009cde <__math_uflow>
 800918e:	bf00      	nop
 8009190:	fff00000 	.word	0xfff00000
 8009194:	7ff00000 	.word	0x7ff00000
 8009198:	433fffff 	.word	0x433fffff
 800919c:	3ff00000 	.word	0x3ff00000
 80091a0:	3fefffff 	.word	0x3fefffff
 80091a4:	3fe00000 	.word	0x3fe00000
 80091a8:	41e00000 	.word	0x41e00000
 80091ac:	4b60      	ldr	r3, [pc, #384]	; (8009330 <__ieee754_pow+0x3f0>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	f7f7 f82e 	bl	8000210 <__aeabi_dsub>
 80091b4:	a354      	add	r3, pc, #336	; (adr r3, 8009308 <__ieee754_pow+0x3c8>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	4604      	mov	r4, r0
 80091bc:	460d      	mov	r5, r1
 80091be:	f7f7 f9df 	bl	8000580 <__aeabi_dmul>
 80091c2:	a353      	add	r3, pc, #332	; (adr r3, 8009310 <__ieee754_pow+0x3d0>)
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	4606      	mov	r6, r0
 80091ca:	460f      	mov	r7, r1
 80091cc:	4620      	mov	r0, r4
 80091ce:	4629      	mov	r1, r5
 80091d0:	f7f7 f9d6 	bl	8000580 <__aeabi_dmul>
 80091d4:	4b57      	ldr	r3, [pc, #348]	; (8009334 <__ieee754_pow+0x3f4>)
 80091d6:	4682      	mov	sl, r0
 80091d8:	468b      	mov	fp, r1
 80091da:	2200      	movs	r2, #0
 80091dc:	4620      	mov	r0, r4
 80091de:	4629      	mov	r1, r5
 80091e0:	f7f7 f9ce 	bl	8000580 <__aeabi_dmul>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	a14b      	add	r1, pc, #300	; (adr r1, 8009318 <__ieee754_pow+0x3d8>)
 80091ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ee:	f7f7 f80f 	bl	8000210 <__aeabi_dsub>
 80091f2:	4622      	mov	r2, r4
 80091f4:	462b      	mov	r3, r5
 80091f6:	f7f7 f9c3 	bl	8000580 <__aeabi_dmul>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	2000      	movs	r0, #0
 8009200:	494d      	ldr	r1, [pc, #308]	; (8009338 <__ieee754_pow+0x3f8>)
 8009202:	f7f7 f805 	bl	8000210 <__aeabi_dsub>
 8009206:	4622      	mov	r2, r4
 8009208:	4680      	mov	r8, r0
 800920a:	4689      	mov	r9, r1
 800920c:	462b      	mov	r3, r5
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 f9b5 	bl	8000580 <__aeabi_dmul>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4640      	mov	r0, r8
 800921c:	4649      	mov	r1, r9
 800921e:	f7f7 f9af 	bl	8000580 <__aeabi_dmul>
 8009222:	a33f      	add	r3, pc, #252	; (adr r3, 8009320 <__ieee754_pow+0x3e0>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f7 f9aa 	bl	8000580 <__aeabi_dmul>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4650      	mov	r0, sl
 8009232:	4659      	mov	r1, fp
 8009234:	f7f6 ffec 	bl	8000210 <__aeabi_dsub>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4680      	mov	r8, r0
 800923e:	4689      	mov	r9, r1
 8009240:	4630      	mov	r0, r6
 8009242:	4639      	mov	r1, r7
 8009244:	f7f6 ffe6 	bl	8000214 <__adddf3>
 8009248:	2000      	movs	r0, #0
 800924a:	4632      	mov	r2, r6
 800924c:	463b      	mov	r3, r7
 800924e:	4604      	mov	r4, r0
 8009250:	460d      	mov	r5, r1
 8009252:	f7f6 ffdd 	bl	8000210 <__aeabi_dsub>
 8009256:	4602      	mov	r2, r0
 8009258:	460b      	mov	r3, r1
 800925a:	4640      	mov	r0, r8
 800925c:	4649      	mov	r1, r9
 800925e:	f7f6 ffd7 	bl	8000210 <__aeabi_dsub>
 8009262:	9b04      	ldr	r3, [sp, #16]
 8009264:	9a06      	ldr	r2, [sp, #24]
 8009266:	3b01      	subs	r3, #1
 8009268:	4313      	orrs	r3, r2
 800926a:	4682      	mov	sl, r0
 800926c:	468b      	mov	fp, r1
 800926e:	f040 81e7 	bne.w	8009640 <__ieee754_pow+0x700>
 8009272:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009328 <__ieee754_pow+0x3e8>
 8009276:	eeb0 8a47 	vmov.f32	s16, s14
 800927a:	eef0 8a67 	vmov.f32	s17, s15
 800927e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009282:	2600      	movs	r6, #0
 8009284:	4632      	mov	r2, r6
 8009286:	463b      	mov	r3, r7
 8009288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800928c:	f7f6 ffc0 	bl	8000210 <__aeabi_dsub>
 8009290:	4622      	mov	r2, r4
 8009292:	462b      	mov	r3, r5
 8009294:	f7f7 f974 	bl	8000580 <__aeabi_dmul>
 8009298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	4650      	mov	r0, sl
 80092a2:	4659      	mov	r1, fp
 80092a4:	f7f7 f96c 	bl	8000580 <__aeabi_dmul>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4640      	mov	r0, r8
 80092ae:	4649      	mov	r1, r9
 80092b0:	f7f6 ffb0 	bl	8000214 <__adddf3>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	4680      	mov	r8, r0
 80092ba:	4689      	mov	r9, r1
 80092bc:	4620      	mov	r0, r4
 80092be:	4629      	mov	r1, r5
 80092c0:	f7f7 f95e 	bl	8000580 <__aeabi_dmul>
 80092c4:	460b      	mov	r3, r1
 80092c6:	4604      	mov	r4, r0
 80092c8:	460d      	mov	r5, r1
 80092ca:	4602      	mov	r2, r0
 80092cc:	4649      	mov	r1, r9
 80092ce:	4640      	mov	r0, r8
 80092d0:	f7f6 ffa0 	bl	8000214 <__adddf3>
 80092d4:	4b19      	ldr	r3, [pc, #100]	; (800933c <__ieee754_pow+0x3fc>)
 80092d6:	4299      	cmp	r1, r3
 80092d8:	ec45 4b19 	vmov	d9, r4, r5
 80092dc:	4606      	mov	r6, r0
 80092de:	460f      	mov	r7, r1
 80092e0:	468b      	mov	fp, r1
 80092e2:	f340 82f1 	ble.w	80098c8 <__ieee754_pow+0x988>
 80092e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80092ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80092ee:	4303      	orrs	r3, r0
 80092f0:	f000 81e4 	beq.w	80096bc <__ieee754_pow+0x77c>
 80092f4:	ec51 0b18 	vmov	r0, r1, d8
 80092f8:	2200      	movs	r2, #0
 80092fa:	2300      	movs	r3, #0
 80092fc:	f7f7 fbb2 	bl	8000a64 <__aeabi_dcmplt>
 8009300:	3800      	subs	r0, #0
 8009302:	bf18      	it	ne
 8009304:	2001      	movne	r0, #1
 8009306:	e72b      	b.n	8009160 <__ieee754_pow+0x220>
 8009308:	60000000 	.word	0x60000000
 800930c:	3ff71547 	.word	0x3ff71547
 8009310:	f85ddf44 	.word	0xf85ddf44
 8009314:	3e54ae0b 	.word	0x3e54ae0b
 8009318:	55555555 	.word	0x55555555
 800931c:	3fd55555 	.word	0x3fd55555
 8009320:	652b82fe 	.word	0x652b82fe
 8009324:	3ff71547 	.word	0x3ff71547
 8009328:	00000000 	.word	0x00000000
 800932c:	bff00000 	.word	0xbff00000
 8009330:	3ff00000 	.word	0x3ff00000
 8009334:	3fd00000 	.word	0x3fd00000
 8009338:	3fe00000 	.word	0x3fe00000
 800933c:	408fffff 	.word	0x408fffff
 8009340:	4bd5      	ldr	r3, [pc, #852]	; (8009698 <__ieee754_pow+0x758>)
 8009342:	402b      	ands	r3, r5
 8009344:	2200      	movs	r2, #0
 8009346:	b92b      	cbnz	r3, 8009354 <__ieee754_pow+0x414>
 8009348:	4bd4      	ldr	r3, [pc, #848]	; (800969c <__ieee754_pow+0x75c>)
 800934a:	f7f7 f919 	bl	8000580 <__aeabi_dmul>
 800934e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009352:	460c      	mov	r4, r1
 8009354:	1523      	asrs	r3, r4, #20
 8009356:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800935a:	4413      	add	r3, r2
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	4bd0      	ldr	r3, [pc, #832]	; (80096a0 <__ieee754_pow+0x760>)
 8009360:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009364:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009368:	429c      	cmp	r4, r3
 800936a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800936e:	dd08      	ble.n	8009382 <__ieee754_pow+0x442>
 8009370:	4bcc      	ldr	r3, [pc, #816]	; (80096a4 <__ieee754_pow+0x764>)
 8009372:	429c      	cmp	r4, r3
 8009374:	f340 8162 	ble.w	800963c <__ieee754_pow+0x6fc>
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	3301      	adds	r3, #1
 800937c:	9305      	str	r3, [sp, #20]
 800937e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009382:	2400      	movs	r4, #0
 8009384:	00e3      	lsls	r3, r4, #3
 8009386:	9307      	str	r3, [sp, #28]
 8009388:	4bc7      	ldr	r3, [pc, #796]	; (80096a8 <__ieee754_pow+0x768>)
 800938a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800938e:	ed93 7b00 	vldr	d7, [r3]
 8009392:	4629      	mov	r1, r5
 8009394:	ec53 2b17 	vmov	r2, r3, d7
 8009398:	eeb0 9a47 	vmov.f32	s18, s14
 800939c:	eef0 9a67 	vmov.f32	s19, s15
 80093a0:	4682      	mov	sl, r0
 80093a2:	f7f6 ff35 	bl	8000210 <__aeabi_dsub>
 80093a6:	4652      	mov	r2, sl
 80093a8:	4606      	mov	r6, r0
 80093aa:	460f      	mov	r7, r1
 80093ac:	462b      	mov	r3, r5
 80093ae:	ec51 0b19 	vmov	r0, r1, d9
 80093b2:	f7f6 ff2f 	bl	8000214 <__adddf3>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	2000      	movs	r0, #0
 80093bc:	49bb      	ldr	r1, [pc, #748]	; (80096ac <__ieee754_pow+0x76c>)
 80093be:	f7f7 fa09 	bl	80007d4 <__aeabi_ddiv>
 80093c2:	ec41 0b1a 	vmov	d10, r0, r1
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	f7f7 f8d7 	bl	8000580 <__aeabi_dmul>
 80093d2:	2300      	movs	r3, #0
 80093d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d8:	9302      	str	r3, [sp, #8]
 80093da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80093de:	46ab      	mov	fp, r5
 80093e0:	106d      	asrs	r5, r5, #1
 80093e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80093e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80093ea:	ec41 0b18 	vmov	d8, r0, r1
 80093ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80093f2:	2200      	movs	r2, #0
 80093f4:	4640      	mov	r0, r8
 80093f6:	4649      	mov	r1, r9
 80093f8:	4614      	mov	r4, r2
 80093fa:	461d      	mov	r5, r3
 80093fc:	f7f7 f8c0 	bl	8000580 <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4630      	mov	r0, r6
 8009406:	4639      	mov	r1, r7
 8009408:	f7f6 ff02 	bl	8000210 <__aeabi_dsub>
 800940c:	ec53 2b19 	vmov	r2, r3, d9
 8009410:	4606      	mov	r6, r0
 8009412:	460f      	mov	r7, r1
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	f7f6 fefa 	bl	8000210 <__aeabi_dsub>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	f7f6 fef4 	bl	8000210 <__aeabi_dsub>
 8009428:	4642      	mov	r2, r8
 800942a:	464b      	mov	r3, r9
 800942c:	f7f7 f8a8 	bl	8000580 <__aeabi_dmul>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	f7f6 feea 	bl	8000210 <__aeabi_dsub>
 800943c:	ec53 2b1a 	vmov	r2, r3, d10
 8009440:	f7f7 f89e 	bl	8000580 <__aeabi_dmul>
 8009444:	ec53 2b18 	vmov	r2, r3, d8
 8009448:	ec41 0b19 	vmov	d9, r0, r1
 800944c:	ec51 0b18 	vmov	r0, r1, d8
 8009450:	f7f7 f896 	bl	8000580 <__aeabi_dmul>
 8009454:	a37c      	add	r3, pc, #496	; (adr r3, 8009648 <__ieee754_pow+0x708>)
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	4604      	mov	r4, r0
 800945c:	460d      	mov	r5, r1
 800945e:	f7f7 f88f 	bl	8000580 <__aeabi_dmul>
 8009462:	a37b      	add	r3, pc, #492	; (adr r3, 8009650 <__ieee754_pow+0x710>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f7f6 fed4 	bl	8000214 <__adddf3>
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	f7f7 f886 	bl	8000580 <__aeabi_dmul>
 8009474:	a378      	add	r3, pc, #480	; (adr r3, 8009658 <__ieee754_pow+0x718>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	f7f6 fecb 	bl	8000214 <__adddf3>
 800947e:	4622      	mov	r2, r4
 8009480:	462b      	mov	r3, r5
 8009482:	f7f7 f87d 	bl	8000580 <__aeabi_dmul>
 8009486:	a376      	add	r3, pc, #472	; (adr r3, 8009660 <__ieee754_pow+0x720>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f7f6 fec2 	bl	8000214 <__adddf3>
 8009490:	4622      	mov	r2, r4
 8009492:	462b      	mov	r3, r5
 8009494:	f7f7 f874 	bl	8000580 <__aeabi_dmul>
 8009498:	a373      	add	r3, pc, #460	; (adr r3, 8009668 <__ieee754_pow+0x728>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f6 feb9 	bl	8000214 <__adddf3>
 80094a2:	4622      	mov	r2, r4
 80094a4:	462b      	mov	r3, r5
 80094a6:	f7f7 f86b 	bl	8000580 <__aeabi_dmul>
 80094aa:	a371      	add	r3, pc, #452	; (adr r3, 8009670 <__ieee754_pow+0x730>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f6 feb0 	bl	8000214 <__adddf3>
 80094b4:	4622      	mov	r2, r4
 80094b6:	4606      	mov	r6, r0
 80094b8:	460f      	mov	r7, r1
 80094ba:	462b      	mov	r3, r5
 80094bc:	4620      	mov	r0, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	f7f7 f85e 	bl	8000580 <__aeabi_dmul>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f7 f858 	bl	8000580 <__aeabi_dmul>
 80094d0:	4642      	mov	r2, r8
 80094d2:	4604      	mov	r4, r0
 80094d4:	460d      	mov	r5, r1
 80094d6:	464b      	mov	r3, r9
 80094d8:	ec51 0b18 	vmov	r0, r1, d8
 80094dc:	f7f6 fe9a 	bl	8000214 <__adddf3>
 80094e0:	ec53 2b19 	vmov	r2, r3, d9
 80094e4:	f7f7 f84c 	bl	8000580 <__aeabi_dmul>
 80094e8:	4622      	mov	r2, r4
 80094ea:	462b      	mov	r3, r5
 80094ec:	f7f6 fe92 	bl	8000214 <__adddf3>
 80094f0:	4642      	mov	r2, r8
 80094f2:	4682      	mov	sl, r0
 80094f4:	468b      	mov	fp, r1
 80094f6:	464b      	mov	r3, r9
 80094f8:	4640      	mov	r0, r8
 80094fa:	4649      	mov	r1, r9
 80094fc:	f7f7 f840 	bl	8000580 <__aeabi_dmul>
 8009500:	4b6b      	ldr	r3, [pc, #428]	; (80096b0 <__ieee754_pow+0x770>)
 8009502:	2200      	movs	r2, #0
 8009504:	4606      	mov	r6, r0
 8009506:	460f      	mov	r7, r1
 8009508:	f7f6 fe84 	bl	8000214 <__adddf3>
 800950c:	4652      	mov	r2, sl
 800950e:	465b      	mov	r3, fp
 8009510:	f7f6 fe80 	bl	8000214 <__adddf3>
 8009514:	2000      	movs	r0, #0
 8009516:	4604      	mov	r4, r0
 8009518:	460d      	mov	r5, r1
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4640      	mov	r0, r8
 8009520:	4649      	mov	r1, r9
 8009522:	f7f7 f82d 	bl	8000580 <__aeabi_dmul>
 8009526:	4b62      	ldr	r3, [pc, #392]	; (80096b0 <__ieee754_pow+0x770>)
 8009528:	4680      	mov	r8, r0
 800952a:	4689      	mov	r9, r1
 800952c:	2200      	movs	r2, #0
 800952e:	4620      	mov	r0, r4
 8009530:	4629      	mov	r1, r5
 8009532:	f7f6 fe6d 	bl	8000210 <__aeabi_dsub>
 8009536:	4632      	mov	r2, r6
 8009538:	463b      	mov	r3, r7
 800953a:	f7f6 fe69 	bl	8000210 <__aeabi_dsub>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	4650      	mov	r0, sl
 8009544:	4659      	mov	r1, fp
 8009546:	f7f6 fe63 	bl	8000210 <__aeabi_dsub>
 800954a:	ec53 2b18 	vmov	r2, r3, d8
 800954e:	f7f7 f817 	bl	8000580 <__aeabi_dmul>
 8009552:	4622      	mov	r2, r4
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	462b      	mov	r3, r5
 800955a:	ec51 0b19 	vmov	r0, r1, d9
 800955e:	f7f7 f80f 	bl	8000580 <__aeabi_dmul>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4630      	mov	r0, r6
 8009568:	4639      	mov	r1, r7
 800956a:	f7f6 fe53 	bl	8000214 <__adddf3>
 800956e:	4606      	mov	r6, r0
 8009570:	460f      	mov	r7, r1
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	4640      	mov	r0, r8
 8009578:	4649      	mov	r1, r9
 800957a:	f7f6 fe4b 	bl	8000214 <__adddf3>
 800957e:	a33e      	add	r3, pc, #248	; (adr r3, 8009678 <__ieee754_pow+0x738>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	2000      	movs	r0, #0
 8009586:	4604      	mov	r4, r0
 8009588:	460d      	mov	r5, r1
 800958a:	f7f6 fff9 	bl	8000580 <__aeabi_dmul>
 800958e:	4642      	mov	r2, r8
 8009590:	ec41 0b18 	vmov	d8, r0, r1
 8009594:	464b      	mov	r3, r9
 8009596:	4620      	mov	r0, r4
 8009598:	4629      	mov	r1, r5
 800959a:	f7f6 fe39 	bl	8000210 <__aeabi_dsub>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4630      	mov	r0, r6
 80095a4:	4639      	mov	r1, r7
 80095a6:	f7f6 fe33 	bl	8000210 <__aeabi_dsub>
 80095aa:	a335      	add	r3, pc, #212	; (adr r3, 8009680 <__ieee754_pow+0x740>)
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	f7f6 ffe6 	bl	8000580 <__aeabi_dmul>
 80095b4:	a334      	add	r3, pc, #208	; (adr r3, 8009688 <__ieee754_pow+0x748>)
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	4606      	mov	r6, r0
 80095bc:	460f      	mov	r7, r1
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f6 ffdd 	bl	8000580 <__aeabi_dmul>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4630      	mov	r0, r6
 80095cc:	4639      	mov	r1, r7
 80095ce:	f7f6 fe21 	bl	8000214 <__adddf3>
 80095d2:	9a07      	ldr	r2, [sp, #28]
 80095d4:	4b37      	ldr	r3, [pc, #220]	; (80096b4 <__ieee754_pow+0x774>)
 80095d6:	4413      	add	r3, r2
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f7f6 fe1a 	bl	8000214 <__adddf3>
 80095e0:	4682      	mov	sl, r0
 80095e2:	9805      	ldr	r0, [sp, #20]
 80095e4:	468b      	mov	fp, r1
 80095e6:	f7f6 ff61 	bl	80004ac <__aeabi_i2d>
 80095ea:	9a07      	ldr	r2, [sp, #28]
 80095ec:	4b32      	ldr	r3, [pc, #200]	; (80096b8 <__ieee754_pow+0x778>)
 80095ee:	4413      	add	r3, r2
 80095f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095f4:	4606      	mov	r6, r0
 80095f6:	460f      	mov	r7, r1
 80095f8:	4652      	mov	r2, sl
 80095fa:	465b      	mov	r3, fp
 80095fc:	ec51 0b18 	vmov	r0, r1, d8
 8009600:	f7f6 fe08 	bl	8000214 <__adddf3>
 8009604:	4642      	mov	r2, r8
 8009606:	464b      	mov	r3, r9
 8009608:	f7f6 fe04 	bl	8000214 <__adddf3>
 800960c:	4632      	mov	r2, r6
 800960e:	463b      	mov	r3, r7
 8009610:	f7f6 fe00 	bl	8000214 <__adddf3>
 8009614:	2000      	movs	r0, #0
 8009616:	4632      	mov	r2, r6
 8009618:	463b      	mov	r3, r7
 800961a:	4604      	mov	r4, r0
 800961c:	460d      	mov	r5, r1
 800961e:	f7f6 fdf7 	bl	8000210 <__aeabi_dsub>
 8009622:	4642      	mov	r2, r8
 8009624:	464b      	mov	r3, r9
 8009626:	f7f6 fdf3 	bl	8000210 <__aeabi_dsub>
 800962a:	ec53 2b18 	vmov	r2, r3, d8
 800962e:	f7f6 fdef 	bl	8000210 <__aeabi_dsub>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4650      	mov	r0, sl
 8009638:	4659      	mov	r1, fp
 800963a:	e610      	b.n	800925e <__ieee754_pow+0x31e>
 800963c:	2401      	movs	r4, #1
 800963e:	e6a1      	b.n	8009384 <__ieee754_pow+0x444>
 8009640:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009690 <__ieee754_pow+0x750>
 8009644:	e617      	b.n	8009276 <__ieee754_pow+0x336>
 8009646:	bf00      	nop
 8009648:	4a454eef 	.word	0x4a454eef
 800964c:	3fca7e28 	.word	0x3fca7e28
 8009650:	93c9db65 	.word	0x93c9db65
 8009654:	3fcd864a 	.word	0x3fcd864a
 8009658:	a91d4101 	.word	0xa91d4101
 800965c:	3fd17460 	.word	0x3fd17460
 8009660:	518f264d 	.word	0x518f264d
 8009664:	3fd55555 	.word	0x3fd55555
 8009668:	db6fabff 	.word	0xdb6fabff
 800966c:	3fdb6db6 	.word	0x3fdb6db6
 8009670:	33333303 	.word	0x33333303
 8009674:	3fe33333 	.word	0x3fe33333
 8009678:	e0000000 	.word	0xe0000000
 800967c:	3feec709 	.word	0x3feec709
 8009680:	dc3a03fd 	.word	0xdc3a03fd
 8009684:	3feec709 	.word	0x3feec709
 8009688:	145b01f5 	.word	0x145b01f5
 800968c:	be3e2fe0 	.word	0xbe3e2fe0
 8009690:	00000000 	.word	0x00000000
 8009694:	3ff00000 	.word	0x3ff00000
 8009698:	7ff00000 	.word	0x7ff00000
 800969c:	43400000 	.word	0x43400000
 80096a0:	0003988e 	.word	0x0003988e
 80096a4:	000bb679 	.word	0x000bb679
 80096a8:	0800b5a8 	.word	0x0800b5a8
 80096ac:	3ff00000 	.word	0x3ff00000
 80096b0:	40080000 	.word	0x40080000
 80096b4:	0800b5c8 	.word	0x0800b5c8
 80096b8:	0800b5b8 	.word	0x0800b5b8
 80096bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8009994 <__ieee754_pow+0xa54>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	4640      	mov	r0, r8
 80096c4:	4649      	mov	r1, r9
 80096c6:	f7f6 fda5 	bl	8000214 <__adddf3>
 80096ca:	4622      	mov	r2, r4
 80096cc:	ec41 0b1a 	vmov	d10, r0, r1
 80096d0:	462b      	mov	r3, r5
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	f7f6 fd9b 	bl	8000210 <__aeabi_dsub>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	ec51 0b1a 	vmov	r0, r1, d10
 80096e2:	f7f7 f9dd 	bl	8000aa0 <__aeabi_dcmpgt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f47f ae04 	bne.w	80092f4 <__ieee754_pow+0x3b4>
 80096ec:	4aa4      	ldr	r2, [pc, #656]	; (8009980 <__ieee754_pow+0xa40>)
 80096ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096f2:	4293      	cmp	r3, r2
 80096f4:	f340 8108 	ble.w	8009908 <__ieee754_pow+0x9c8>
 80096f8:	151b      	asrs	r3, r3, #20
 80096fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80096fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009702:	fa4a f303 	asr.w	r3, sl, r3
 8009706:	445b      	add	r3, fp
 8009708:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800970c:	4e9d      	ldr	r6, [pc, #628]	; (8009984 <__ieee754_pow+0xa44>)
 800970e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009712:	4116      	asrs	r6, r2
 8009714:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009718:	2000      	movs	r0, #0
 800971a:	ea23 0106 	bic.w	r1, r3, r6
 800971e:	f1c2 0214 	rsb	r2, r2, #20
 8009722:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009726:	fa4a fa02 	asr.w	sl, sl, r2
 800972a:	f1bb 0f00 	cmp.w	fp, #0
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4620      	mov	r0, r4
 8009734:	4629      	mov	r1, r5
 8009736:	bfb8      	it	lt
 8009738:	f1ca 0a00 	rsblt	sl, sl, #0
 800973c:	f7f6 fd68 	bl	8000210 <__aeabi_dsub>
 8009740:	ec41 0b19 	vmov	d9, r0, r1
 8009744:	4642      	mov	r2, r8
 8009746:	464b      	mov	r3, r9
 8009748:	ec51 0b19 	vmov	r0, r1, d9
 800974c:	f7f6 fd62 	bl	8000214 <__adddf3>
 8009750:	a37b      	add	r3, pc, #492	; (adr r3, 8009940 <__ieee754_pow+0xa00>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	2000      	movs	r0, #0
 8009758:	4604      	mov	r4, r0
 800975a:	460d      	mov	r5, r1
 800975c:	f7f6 ff10 	bl	8000580 <__aeabi_dmul>
 8009760:	ec53 2b19 	vmov	r2, r3, d9
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	4620      	mov	r0, r4
 800976a:	4629      	mov	r1, r5
 800976c:	f7f6 fd50 	bl	8000210 <__aeabi_dsub>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4640      	mov	r0, r8
 8009776:	4649      	mov	r1, r9
 8009778:	f7f6 fd4a 	bl	8000210 <__aeabi_dsub>
 800977c:	a372      	add	r3, pc, #456	; (adr r3, 8009948 <__ieee754_pow+0xa08>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f6 fefd 	bl	8000580 <__aeabi_dmul>
 8009786:	a372      	add	r3, pc, #456	; (adr r3, 8009950 <__ieee754_pow+0xa10>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	4680      	mov	r8, r0
 800978e:	4689      	mov	r9, r1
 8009790:	4620      	mov	r0, r4
 8009792:	4629      	mov	r1, r5
 8009794:	f7f6 fef4 	bl	8000580 <__aeabi_dmul>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4640      	mov	r0, r8
 800979e:	4649      	mov	r1, r9
 80097a0:	f7f6 fd38 	bl	8000214 <__adddf3>
 80097a4:	4604      	mov	r4, r0
 80097a6:	460d      	mov	r5, r1
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	4630      	mov	r0, r6
 80097ae:	4639      	mov	r1, r7
 80097b0:	f7f6 fd30 	bl	8000214 <__adddf3>
 80097b4:	4632      	mov	r2, r6
 80097b6:	463b      	mov	r3, r7
 80097b8:	4680      	mov	r8, r0
 80097ba:	4689      	mov	r9, r1
 80097bc:	f7f6 fd28 	bl	8000210 <__aeabi_dsub>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4620      	mov	r0, r4
 80097c6:	4629      	mov	r1, r5
 80097c8:	f7f6 fd22 	bl	8000210 <__aeabi_dsub>
 80097cc:	4642      	mov	r2, r8
 80097ce:	4606      	mov	r6, r0
 80097d0:	460f      	mov	r7, r1
 80097d2:	464b      	mov	r3, r9
 80097d4:	4640      	mov	r0, r8
 80097d6:	4649      	mov	r1, r9
 80097d8:	f7f6 fed2 	bl	8000580 <__aeabi_dmul>
 80097dc:	a35e      	add	r3, pc, #376	; (adr r3, 8009958 <__ieee754_pow+0xa18>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	f7f6 fecb 	bl	8000580 <__aeabi_dmul>
 80097ea:	a35d      	add	r3, pc, #372	; (adr r3, 8009960 <__ieee754_pow+0xa20>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f7f6 fd0e 	bl	8000210 <__aeabi_dsub>
 80097f4:	4622      	mov	r2, r4
 80097f6:	462b      	mov	r3, r5
 80097f8:	f7f6 fec2 	bl	8000580 <__aeabi_dmul>
 80097fc:	a35a      	add	r3, pc, #360	; (adr r3, 8009968 <__ieee754_pow+0xa28>)
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	f7f6 fd07 	bl	8000214 <__adddf3>
 8009806:	4622      	mov	r2, r4
 8009808:	462b      	mov	r3, r5
 800980a:	f7f6 feb9 	bl	8000580 <__aeabi_dmul>
 800980e:	a358      	add	r3, pc, #352	; (adr r3, 8009970 <__ieee754_pow+0xa30>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fcfc 	bl	8000210 <__aeabi_dsub>
 8009818:	4622      	mov	r2, r4
 800981a:	462b      	mov	r3, r5
 800981c:	f7f6 feb0 	bl	8000580 <__aeabi_dmul>
 8009820:	a355      	add	r3, pc, #340	; (adr r3, 8009978 <__ieee754_pow+0xa38>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 fcf5 	bl	8000214 <__adddf3>
 800982a:	4622      	mov	r2, r4
 800982c:	462b      	mov	r3, r5
 800982e:	f7f6 fea7 	bl	8000580 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f6 fce9 	bl	8000210 <__aeabi_dsub>
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f6 fe99 	bl	8000580 <__aeabi_dmul>
 800984e:	2200      	movs	r2, #0
 8009850:	ec41 0b19 	vmov	d9, r0, r1
 8009854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009858:	4620      	mov	r0, r4
 800985a:	4629      	mov	r1, r5
 800985c:	f7f6 fcd8 	bl	8000210 <__aeabi_dsub>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	ec51 0b19 	vmov	r0, r1, d9
 8009868:	f7f6 ffb4 	bl	80007d4 <__aeabi_ddiv>
 800986c:	4632      	mov	r2, r6
 800986e:	4604      	mov	r4, r0
 8009870:	460d      	mov	r5, r1
 8009872:	463b      	mov	r3, r7
 8009874:	4640      	mov	r0, r8
 8009876:	4649      	mov	r1, r9
 8009878:	f7f6 fe82 	bl	8000580 <__aeabi_dmul>
 800987c:	4632      	mov	r2, r6
 800987e:	463b      	mov	r3, r7
 8009880:	f7f6 fcc8 	bl	8000214 <__adddf3>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4620      	mov	r0, r4
 800988a:	4629      	mov	r1, r5
 800988c:	f7f6 fcc0 	bl	8000210 <__aeabi_dsub>
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	f7f6 fcbc 	bl	8000210 <__aeabi_dsub>
 8009898:	460b      	mov	r3, r1
 800989a:	4602      	mov	r2, r0
 800989c:	493a      	ldr	r1, [pc, #232]	; (8009988 <__ieee754_pow+0xa48>)
 800989e:	2000      	movs	r0, #0
 80098a0:	f7f6 fcb6 	bl	8000210 <__aeabi_dsub>
 80098a4:	ec41 0b10 	vmov	d0, r0, r1
 80098a8:	ee10 3a90 	vmov	r3, s1
 80098ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80098b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098b4:	da2b      	bge.n	800990e <__ieee754_pow+0x9ce>
 80098b6:	4650      	mov	r0, sl
 80098b8:	f000 fa5a 	bl	8009d70 <scalbn>
 80098bc:	ec51 0b10 	vmov	r0, r1, d0
 80098c0:	ec53 2b18 	vmov	r2, r3, d8
 80098c4:	f7ff bbed 	b.w	80090a2 <__ieee754_pow+0x162>
 80098c8:	4b30      	ldr	r3, [pc, #192]	; (800998c <__ieee754_pow+0xa4c>)
 80098ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80098ce:	429e      	cmp	r6, r3
 80098d0:	f77f af0c 	ble.w	80096ec <__ieee754_pow+0x7ac>
 80098d4:	4b2e      	ldr	r3, [pc, #184]	; (8009990 <__ieee754_pow+0xa50>)
 80098d6:	440b      	add	r3, r1
 80098d8:	4303      	orrs	r3, r0
 80098da:	d009      	beq.n	80098f0 <__ieee754_pow+0x9b0>
 80098dc:	ec51 0b18 	vmov	r0, r1, d8
 80098e0:	2200      	movs	r2, #0
 80098e2:	2300      	movs	r3, #0
 80098e4:	f7f7 f8be 	bl	8000a64 <__aeabi_dcmplt>
 80098e8:	3800      	subs	r0, #0
 80098ea:	bf18      	it	ne
 80098ec:	2001      	movne	r0, #1
 80098ee:	e447      	b.n	8009180 <__ieee754_pow+0x240>
 80098f0:	4622      	mov	r2, r4
 80098f2:	462b      	mov	r3, r5
 80098f4:	f7f6 fc8c 	bl	8000210 <__aeabi_dsub>
 80098f8:	4642      	mov	r2, r8
 80098fa:	464b      	mov	r3, r9
 80098fc:	f7f7 f8c6 	bl	8000a8c <__aeabi_dcmpge>
 8009900:	2800      	cmp	r0, #0
 8009902:	f43f aef3 	beq.w	80096ec <__ieee754_pow+0x7ac>
 8009906:	e7e9      	b.n	80098dc <__ieee754_pow+0x99c>
 8009908:	f04f 0a00 	mov.w	sl, #0
 800990c:	e71a      	b.n	8009744 <__ieee754_pow+0x804>
 800990e:	ec51 0b10 	vmov	r0, r1, d0
 8009912:	4619      	mov	r1, r3
 8009914:	e7d4      	b.n	80098c0 <__ieee754_pow+0x980>
 8009916:	491c      	ldr	r1, [pc, #112]	; (8009988 <__ieee754_pow+0xa48>)
 8009918:	2000      	movs	r0, #0
 800991a:	f7ff bb30 	b.w	8008f7e <__ieee754_pow+0x3e>
 800991e:	2000      	movs	r0, #0
 8009920:	2100      	movs	r1, #0
 8009922:	f7ff bb2c 	b.w	8008f7e <__ieee754_pow+0x3e>
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7ff bb28 	b.w	8008f7e <__ieee754_pow+0x3e>
 800992e:	9204      	str	r2, [sp, #16]
 8009930:	f7ff bb7a 	b.w	8009028 <__ieee754_pow+0xe8>
 8009934:	2300      	movs	r3, #0
 8009936:	f7ff bb64 	b.w	8009002 <__ieee754_pow+0xc2>
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w
 8009940:	00000000 	.word	0x00000000
 8009944:	3fe62e43 	.word	0x3fe62e43
 8009948:	fefa39ef 	.word	0xfefa39ef
 800994c:	3fe62e42 	.word	0x3fe62e42
 8009950:	0ca86c39 	.word	0x0ca86c39
 8009954:	be205c61 	.word	0xbe205c61
 8009958:	72bea4d0 	.word	0x72bea4d0
 800995c:	3e663769 	.word	0x3e663769
 8009960:	c5d26bf1 	.word	0xc5d26bf1
 8009964:	3ebbbd41 	.word	0x3ebbbd41
 8009968:	af25de2c 	.word	0xaf25de2c
 800996c:	3f11566a 	.word	0x3f11566a
 8009970:	16bebd93 	.word	0x16bebd93
 8009974:	3f66c16c 	.word	0x3f66c16c
 8009978:	5555553e 	.word	0x5555553e
 800997c:	3fc55555 	.word	0x3fc55555
 8009980:	3fe00000 	.word	0x3fe00000
 8009984:	000fffff 	.word	0x000fffff
 8009988:	3ff00000 	.word	0x3ff00000
 800998c:	4090cbff 	.word	0x4090cbff
 8009990:	3f6f3400 	.word	0x3f6f3400
 8009994:	652b82fe 	.word	0x652b82fe
 8009998:	3c971547 	.word	0x3c971547

0800999c <__ieee754_sqrt>:
 800999c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a0:	ec55 4b10 	vmov	r4, r5, d0
 80099a4:	4e55      	ldr	r6, [pc, #340]	; (8009afc <__ieee754_sqrt+0x160>)
 80099a6:	43ae      	bics	r6, r5
 80099a8:	ee10 0a10 	vmov	r0, s0
 80099ac:	ee10 3a10 	vmov	r3, s0
 80099b0:	462a      	mov	r2, r5
 80099b2:	4629      	mov	r1, r5
 80099b4:	d110      	bne.n	80099d8 <__ieee754_sqrt+0x3c>
 80099b6:	ee10 2a10 	vmov	r2, s0
 80099ba:	462b      	mov	r3, r5
 80099bc:	f7f6 fde0 	bl	8000580 <__aeabi_dmul>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4620      	mov	r0, r4
 80099c6:	4629      	mov	r1, r5
 80099c8:	f7f6 fc24 	bl	8000214 <__adddf3>
 80099cc:	4604      	mov	r4, r0
 80099ce:	460d      	mov	r5, r1
 80099d0:	ec45 4b10 	vmov	d0, r4, r5
 80099d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d8:	2d00      	cmp	r5, #0
 80099da:	dc10      	bgt.n	80099fe <__ieee754_sqrt+0x62>
 80099dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80099e0:	4330      	orrs	r0, r6
 80099e2:	d0f5      	beq.n	80099d0 <__ieee754_sqrt+0x34>
 80099e4:	b15d      	cbz	r5, 80099fe <__ieee754_sqrt+0x62>
 80099e6:	ee10 2a10 	vmov	r2, s0
 80099ea:	462b      	mov	r3, r5
 80099ec:	ee10 0a10 	vmov	r0, s0
 80099f0:	f7f6 fc0e 	bl	8000210 <__aeabi_dsub>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	f7f6 feec 	bl	80007d4 <__aeabi_ddiv>
 80099fc:	e7e6      	b.n	80099cc <__ieee754_sqrt+0x30>
 80099fe:	1512      	asrs	r2, r2, #20
 8009a00:	d074      	beq.n	8009aec <__ieee754_sqrt+0x150>
 8009a02:	07d4      	lsls	r4, r2, #31
 8009a04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009a08:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009a0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009a10:	bf5e      	ittt	pl
 8009a12:	0fda      	lsrpl	r2, r3, #31
 8009a14:	005b      	lslpl	r3, r3, #1
 8009a16:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	0fda      	lsrs	r2, r3, #31
 8009a1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009a22:	107f      	asrs	r7, r7, #1
 8009a24:	005b      	lsls	r3, r3, #1
 8009a26:	2516      	movs	r5, #22
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009a2e:	1886      	adds	r6, r0, r2
 8009a30:	428e      	cmp	r6, r1
 8009a32:	bfde      	ittt	le
 8009a34:	1b89      	suble	r1, r1, r6
 8009a36:	18b0      	addle	r0, r6, r2
 8009a38:	18a4      	addle	r4, r4, r2
 8009a3a:	0049      	lsls	r1, r1, #1
 8009a3c:	3d01      	subs	r5, #1
 8009a3e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009a42:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009a46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a4a:	d1f0      	bne.n	8009a2e <__ieee754_sqrt+0x92>
 8009a4c:	462a      	mov	r2, r5
 8009a4e:	f04f 0e20 	mov.w	lr, #32
 8009a52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009a56:	4281      	cmp	r1, r0
 8009a58:	eb06 0c05 	add.w	ip, r6, r5
 8009a5c:	dc02      	bgt.n	8009a64 <__ieee754_sqrt+0xc8>
 8009a5e:	d113      	bne.n	8009a88 <__ieee754_sqrt+0xec>
 8009a60:	459c      	cmp	ip, r3
 8009a62:	d811      	bhi.n	8009a88 <__ieee754_sqrt+0xec>
 8009a64:	f1bc 0f00 	cmp.w	ip, #0
 8009a68:	eb0c 0506 	add.w	r5, ip, r6
 8009a6c:	da43      	bge.n	8009af6 <__ieee754_sqrt+0x15a>
 8009a6e:	2d00      	cmp	r5, #0
 8009a70:	db41      	blt.n	8009af6 <__ieee754_sqrt+0x15a>
 8009a72:	f100 0801 	add.w	r8, r0, #1
 8009a76:	1a09      	subs	r1, r1, r0
 8009a78:	459c      	cmp	ip, r3
 8009a7a:	bf88      	it	hi
 8009a7c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009a80:	eba3 030c 	sub.w	r3, r3, ip
 8009a84:	4432      	add	r2, r6
 8009a86:	4640      	mov	r0, r8
 8009a88:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009a8c:	f1be 0e01 	subs.w	lr, lr, #1
 8009a90:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009a94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a9c:	d1db      	bne.n	8009a56 <__ieee754_sqrt+0xba>
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	d006      	beq.n	8009ab0 <__ieee754_sqrt+0x114>
 8009aa2:	1c50      	adds	r0, r2, #1
 8009aa4:	bf13      	iteet	ne
 8009aa6:	3201      	addne	r2, #1
 8009aa8:	3401      	addeq	r4, #1
 8009aaa:	4672      	moveq	r2, lr
 8009aac:	f022 0201 	bicne.w	r2, r2, #1
 8009ab0:	1063      	asrs	r3, r4, #1
 8009ab2:	0852      	lsrs	r2, r2, #1
 8009ab4:	07e1      	lsls	r1, r4, #31
 8009ab6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009aba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009abe:	bf48      	it	mi
 8009ac0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009ac4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009ac8:	4614      	mov	r4, r2
 8009aca:	e781      	b.n	80099d0 <__ieee754_sqrt+0x34>
 8009acc:	0ad9      	lsrs	r1, r3, #11
 8009ace:	3815      	subs	r0, #21
 8009ad0:	055b      	lsls	r3, r3, #21
 8009ad2:	2900      	cmp	r1, #0
 8009ad4:	d0fa      	beq.n	8009acc <__ieee754_sqrt+0x130>
 8009ad6:	02cd      	lsls	r5, r1, #11
 8009ad8:	d50a      	bpl.n	8009af0 <__ieee754_sqrt+0x154>
 8009ada:	f1c2 0420 	rsb	r4, r2, #32
 8009ade:	fa23 f404 	lsr.w	r4, r3, r4
 8009ae2:	1e55      	subs	r5, r2, #1
 8009ae4:	4093      	lsls	r3, r2
 8009ae6:	4321      	orrs	r1, r4
 8009ae8:	1b42      	subs	r2, r0, r5
 8009aea:	e78a      	b.n	8009a02 <__ieee754_sqrt+0x66>
 8009aec:	4610      	mov	r0, r2
 8009aee:	e7f0      	b.n	8009ad2 <__ieee754_sqrt+0x136>
 8009af0:	0049      	lsls	r1, r1, #1
 8009af2:	3201      	adds	r2, #1
 8009af4:	e7ef      	b.n	8009ad6 <__ieee754_sqrt+0x13a>
 8009af6:	4680      	mov	r8, r0
 8009af8:	e7bd      	b.n	8009a76 <__ieee754_sqrt+0xda>
 8009afa:	bf00      	nop
 8009afc:	7ff00000 	.word	0x7ff00000

08009b00 <__ieee754_expf>:
 8009b00:	ee10 2a10 	vmov	r2, s0
 8009b04:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009b08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009b0c:	d902      	bls.n	8009b14 <__ieee754_expf+0x14>
 8009b0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009b12:	4770      	bx	lr
 8009b14:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009b18:	d106      	bne.n	8009b28 <__ieee754_expf+0x28>
 8009b1a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009c54 <__ieee754_expf+0x154>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bf18      	it	ne
 8009b22:	eeb0 0a67 	vmovne.f32	s0, s15
 8009b26:	4770      	bx	lr
 8009b28:	484b      	ldr	r0, [pc, #300]	; (8009c58 <__ieee754_expf+0x158>)
 8009b2a:	4282      	cmp	r2, r0
 8009b2c:	dd02      	ble.n	8009b34 <__ieee754_expf+0x34>
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f000 b904 	b.w	8009d3c <__math_oflowf>
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	da05      	bge.n	8009b44 <__ieee754_expf+0x44>
 8009b38:	4a48      	ldr	r2, [pc, #288]	; (8009c5c <__ieee754_expf+0x15c>)
 8009b3a:	4291      	cmp	r1, r2
 8009b3c:	d902      	bls.n	8009b44 <__ieee754_expf+0x44>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	f000 b8f6 	b.w	8009d30 <__math_uflowf>
 8009b44:	4a46      	ldr	r2, [pc, #280]	; (8009c60 <__ieee754_expf+0x160>)
 8009b46:	4291      	cmp	r1, r2
 8009b48:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009b4c:	d952      	bls.n	8009bf4 <__ieee754_expf+0xf4>
 8009b4e:	4a45      	ldr	r2, [pc, #276]	; (8009c64 <__ieee754_expf+0x164>)
 8009b50:	4291      	cmp	r1, r2
 8009b52:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009b56:	d834      	bhi.n	8009bc2 <__ieee754_expf+0xc2>
 8009b58:	4943      	ldr	r1, [pc, #268]	; (8009c68 <__ieee754_expf+0x168>)
 8009b5a:	4411      	add	r1, r2
 8009b5c:	ed91 7a00 	vldr	s14, [r1]
 8009b60:	4942      	ldr	r1, [pc, #264]	; (8009c6c <__ieee754_expf+0x16c>)
 8009b62:	440a      	add	r2, r1
 8009b64:	edd2 7a00 	vldr	s15, [r2]
 8009b68:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009b6c:	f1c3 0201 	rsb	r2, r3, #1
 8009b70:	1ad2      	subs	r2, r2, r3
 8009b72:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009b76:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009b7a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009c70 <__ieee754_expf+0x170>
 8009b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c74 <__ieee754_expf+0x174>
 8009b82:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009b86:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009c78 <__ieee754_expf+0x178>
 8009b8a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009b8e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009c7c <__ieee754_expf+0x17c>
 8009b92:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009b96:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009c80 <__ieee754_expf+0x180>
 8009b9a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009b9e:	eef0 6a40 	vmov.f32	s13, s0
 8009ba2:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009ba6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009baa:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009bae:	bb92      	cbnz	r2, 8009c16 <__ieee754_expf+0x116>
 8009bb0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009bb4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009bb8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009bbc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009bc0:	4770      	bx	lr
 8009bc2:	4b30      	ldr	r3, [pc, #192]	; (8009c84 <__ieee754_expf+0x184>)
 8009bc4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009c88 <__ieee754_expf+0x188>
 8009bc8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009c8c <__ieee754_expf+0x18c>
 8009bcc:	4413      	add	r3, r2
 8009bce:	edd3 7a00 	vldr	s15, [r3]
 8009bd2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009bd6:	eeb0 7a40 	vmov.f32	s14, s0
 8009bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bde:	ee17 2a90 	vmov	r2, s15
 8009be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009be6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009bea:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009c90 <__ieee754_expf+0x190>
 8009bee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009bf2:	e7be      	b.n	8009b72 <__ieee754_expf+0x72>
 8009bf4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8009bf8:	d20b      	bcs.n	8009c12 <__ieee754_expf+0x112>
 8009bfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009c94 <__ieee754_expf+0x194>
 8009bfe:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009c02:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c0a:	dd02      	ble.n	8009c12 <__ieee754_expf+0x112>
 8009c0c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009c10:	4770      	bx	lr
 8009c12:	2200      	movs	r2, #0
 8009c14:	e7af      	b.n	8009b76 <__ieee754_expf+0x76>
 8009c16:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009c1a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009c1e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8009c22:	bfb8      	it	lt
 8009c24:	3264      	addlt	r2, #100	; 0x64
 8009c26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009c2a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009c2e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8009c32:	ee17 3a90 	vmov	r3, s15
 8009c36:	bfab      	itete	ge
 8009c38:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009c3c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009c40:	ee00 3a10 	vmovge	s0, r3
 8009c44:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009c98 <__ieee754_expf+0x198>
 8009c48:	bfbc      	itt	lt
 8009c4a:	ee00 3a10 	vmovlt	s0, r3
 8009c4e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009c52:	4770      	bx	lr
 8009c54:	00000000 	.word	0x00000000
 8009c58:	42b17217 	.word	0x42b17217
 8009c5c:	42cff1b5 	.word	0x42cff1b5
 8009c60:	3eb17218 	.word	0x3eb17218
 8009c64:	3f851591 	.word	0x3f851591
 8009c68:	0800b5e0 	.word	0x0800b5e0
 8009c6c:	0800b5e8 	.word	0x0800b5e8
 8009c70:	3331bb4c 	.word	0x3331bb4c
 8009c74:	b5ddea0e 	.word	0xb5ddea0e
 8009c78:	388ab355 	.word	0x388ab355
 8009c7c:	bb360b61 	.word	0xbb360b61
 8009c80:	3e2aaaab 	.word	0x3e2aaaab
 8009c84:	0800b5d8 	.word	0x0800b5d8
 8009c88:	3fb8aa3b 	.word	0x3fb8aa3b
 8009c8c:	3f317180 	.word	0x3f317180
 8009c90:	3717f7d1 	.word	0x3717f7d1
 8009c94:	7149f2ca 	.word	0x7149f2ca
 8009c98:	0d800000 	.word	0x0d800000

08009c9c <__ieee754_sqrtf>:
 8009c9c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009ca0:	4770      	bx	lr

08009ca2 <with_errno>:
 8009ca2:	b570      	push	{r4, r5, r6, lr}
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	4616      	mov	r6, r2
 8009caa:	f7ff f845 	bl	8008d38 <__errno>
 8009cae:	4629      	mov	r1, r5
 8009cb0:	6006      	str	r6, [r0, #0]
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}

08009cb6 <xflow>:
 8009cb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cb8:	4614      	mov	r4, r2
 8009cba:	461d      	mov	r5, r3
 8009cbc:	b108      	cbz	r0, 8009cc2 <xflow+0xc>
 8009cbe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cc2:	e9cd 2300 	strd	r2, r3, [sp]
 8009cc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cca:	4620      	mov	r0, r4
 8009ccc:	4629      	mov	r1, r5
 8009cce:	f7f6 fc57 	bl	8000580 <__aeabi_dmul>
 8009cd2:	2222      	movs	r2, #34	; 0x22
 8009cd4:	b003      	add	sp, #12
 8009cd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cda:	f7ff bfe2 	b.w	8009ca2 <with_errno>

08009cde <__math_uflow>:
 8009cde:	b508      	push	{r3, lr}
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ce6:	f7ff ffe6 	bl	8009cb6 <xflow>
 8009cea:	ec41 0b10 	vmov	d0, r0, r1
 8009cee:	bd08      	pop	{r3, pc}

08009cf0 <__math_oflow>:
 8009cf0:	b508      	push	{r3, lr}
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009cf8:	f7ff ffdd 	bl	8009cb6 <xflow>
 8009cfc:	ec41 0b10 	vmov	d0, r0, r1
 8009d00:	bd08      	pop	{r3, pc}

08009d02 <with_errnof>:
 8009d02:	b513      	push	{r0, r1, r4, lr}
 8009d04:	4604      	mov	r4, r0
 8009d06:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009d0a:	f7ff f815 	bl	8008d38 <__errno>
 8009d0e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009d12:	6004      	str	r4, [r0, #0]
 8009d14:	b002      	add	sp, #8
 8009d16:	bd10      	pop	{r4, pc}

08009d18 <xflowf>:
 8009d18:	b130      	cbz	r0, 8009d28 <xflowf+0x10>
 8009d1a:	eef1 7a40 	vneg.f32	s15, s0
 8009d1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009d22:	2022      	movs	r0, #34	; 0x22
 8009d24:	f7ff bfed 	b.w	8009d02 <with_errnof>
 8009d28:	eef0 7a40 	vmov.f32	s15, s0
 8009d2c:	e7f7      	b.n	8009d1e <xflowf+0x6>
	...

08009d30 <__math_uflowf>:
 8009d30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d38 <__math_uflowf+0x8>
 8009d34:	f7ff bff0 	b.w	8009d18 <xflowf>
 8009d38:	10000000 	.word	0x10000000

08009d3c <__math_oflowf>:
 8009d3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d44 <__math_oflowf+0x8>
 8009d40:	f7ff bfea 	b.w	8009d18 <xflowf>
 8009d44:	70000000 	.word	0x70000000

08009d48 <fabs>:
 8009d48:	ec51 0b10 	vmov	r0, r1, d0
 8009d4c:	ee10 2a10 	vmov	r2, s0
 8009d50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009d54:	ec43 2b10 	vmov	d0, r2, r3
 8009d58:	4770      	bx	lr

08009d5a <finite>:
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	ed8d 0b00 	vstr	d0, [sp]
 8009d60:	9801      	ldr	r0, [sp, #4]
 8009d62:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009d66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009d6a:	0fc0      	lsrs	r0, r0, #31
 8009d6c:	b002      	add	sp, #8
 8009d6e:	4770      	bx	lr

08009d70 <scalbn>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	ec55 4b10 	vmov	r4, r5, d0
 8009d76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	462b      	mov	r3, r5
 8009d7e:	b99a      	cbnz	r2, 8009da8 <scalbn+0x38>
 8009d80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d84:	4323      	orrs	r3, r4
 8009d86:	d036      	beq.n	8009df6 <scalbn+0x86>
 8009d88:	4b39      	ldr	r3, [pc, #228]	; (8009e70 <scalbn+0x100>)
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	ee10 0a10 	vmov	r0, s0
 8009d90:	2200      	movs	r2, #0
 8009d92:	f7f6 fbf5 	bl	8000580 <__aeabi_dmul>
 8009d96:	4b37      	ldr	r3, [pc, #220]	; (8009e74 <scalbn+0x104>)
 8009d98:	429e      	cmp	r6, r3
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	da10      	bge.n	8009dc2 <scalbn+0x52>
 8009da0:	a32b      	add	r3, pc, #172	; (adr r3, 8009e50 <scalbn+0xe0>)
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	e03a      	b.n	8009e1e <scalbn+0xae>
 8009da8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009dac:	428a      	cmp	r2, r1
 8009dae:	d10c      	bne.n	8009dca <scalbn+0x5a>
 8009db0:	ee10 2a10 	vmov	r2, s0
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fa2c 	bl	8000214 <__adddf3>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	e019      	b.n	8009df6 <scalbn+0x86>
 8009dc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	3a36      	subs	r2, #54	; 0x36
 8009dca:	4432      	add	r2, r6
 8009dcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009dd0:	428a      	cmp	r2, r1
 8009dd2:	dd08      	ble.n	8009de6 <scalbn+0x76>
 8009dd4:	2d00      	cmp	r5, #0
 8009dd6:	a120      	add	r1, pc, #128	; (adr r1, 8009e58 <scalbn+0xe8>)
 8009dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ddc:	da1c      	bge.n	8009e18 <scalbn+0xa8>
 8009dde:	a120      	add	r1, pc, #128	; (adr r1, 8009e60 <scalbn+0xf0>)
 8009de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009de4:	e018      	b.n	8009e18 <scalbn+0xa8>
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	dd08      	ble.n	8009dfc <scalbn+0x8c>
 8009dea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009df2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009df6:	ec45 4b10 	vmov	d0, r4, r5
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009e00:	da19      	bge.n	8009e36 <scalbn+0xc6>
 8009e02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e06:	429e      	cmp	r6, r3
 8009e08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009e0c:	dd0a      	ble.n	8009e24 <scalbn+0xb4>
 8009e0e:	a112      	add	r1, pc, #72	; (adr r1, 8009e58 <scalbn+0xe8>)
 8009e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e2      	bne.n	8009dde <scalbn+0x6e>
 8009e18:	a30f      	add	r3, pc, #60	; (adr r3, 8009e58 <scalbn+0xe8>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fbaf 	bl	8000580 <__aeabi_dmul>
 8009e22:	e7cb      	b.n	8009dbc <scalbn+0x4c>
 8009e24:	a10a      	add	r1, pc, #40	; (adr r1, 8009e50 <scalbn+0xe0>)
 8009e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0b8      	beq.n	8009da0 <scalbn+0x30>
 8009e2e:	a10e      	add	r1, pc, #56	; (adr r1, 8009e68 <scalbn+0xf8>)
 8009e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e34:	e7b4      	b.n	8009da0 <scalbn+0x30>
 8009e36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e3a:	3236      	adds	r2, #54	; 0x36
 8009e3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009e44:	4620      	mov	r0, r4
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <scalbn+0x108>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	e7e8      	b.n	8009e1e <scalbn+0xae>
 8009e4c:	f3af 8000 	nop.w
 8009e50:	c2f8f359 	.word	0xc2f8f359
 8009e54:	01a56e1f 	.word	0x01a56e1f
 8009e58:	8800759c 	.word	0x8800759c
 8009e5c:	7e37e43c 	.word	0x7e37e43c
 8009e60:	8800759c 	.word	0x8800759c
 8009e64:	fe37e43c 	.word	0xfe37e43c
 8009e68:	c2f8f359 	.word	0xc2f8f359
 8009e6c:	81a56e1f 	.word	0x81a56e1f
 8009e70:	43500000 	.word	0x43500000
 8009e74:	ffff3cb0 	.word	0xffff3cb0
 8009e78:	3c900000 	.word	0x3c900000

08009e7c <finitef>:
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009e82:	9801      	ldr	r0, [sp, #4]
 8009e84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009e88:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009e8c:	bfac      	ite	ge
 8009e8e:	2000      	movge	r0, #0
 8009e90:	2001      	movlt	r0, #1
 8009e92:	b002      	add	sp, #8
 8009e94:	4770      	bx	lr
	...

08009e98 <_init>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr

08009ea4 <_fini>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr
