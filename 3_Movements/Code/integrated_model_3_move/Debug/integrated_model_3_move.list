
integrated_model_3_move.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009938  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  08009b00  08009b00  00019b00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c0  0800a4c0  000205b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4c0  0800a4c0  0001a4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4c8  0800a4c8  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4c8  0800a4c8  0001a4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  0800a4d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200005c0  0800aa88  000205c0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  200009d8  0800aa88  000209d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e47  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003626  00000000  00000000  0003642f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00039a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  0003ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d1b  00000000  00000000  0003ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191cd  00000000  00000000  00062773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea6f8  00000000  00000000  0007b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab0  00000000  00000000  00166088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000014d  00000000  00000000  0016ab38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200005c0 	.word	0x200005c0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009ae8 	.word	0x08009ae8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200005c4 	.word	0x200005c4
 8000204:	08009ae8 	.word	0x08009ae8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <FEAT_EXT_u32_SlopeSignChange>:

#include "FEAT_EXT.h"


uint32_t FEAT_EXT_u32_SlopeSignChange(uint32_t *Copy_int32Data ,uint32_t Copy_int32_Size)
{
 8000e84:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000e88:	b087      	sub	sp, #28
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	466b      	mov	r3, sp
 8000e92:	4618      	mov	r0, r3
	uint32_t Local_int32_NumberOfChanges = 0,
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
			Local_int32_Slope[Copy_int32_Size],
 8000e98:	6839      	ldr	r1, [r7, #0]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4688      	mov	r8, r1
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000eb2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000eb6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000eba:	2300      	movs	r3, #0
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	461d      	mov	r5, r3
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	016b      	lsls	r3, r5, #5
 8000eca:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ece:	0162      	lsls	r2, r4, #5
 8000ed0:	008b      	lsls	r3, r1, #2
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	ebad 0d03 	sub.w	sp, sp, r3
 8000edc:	466b      	mov	r3, sp
 8000ede:	3303      	adds	r3, #3
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	60bb      	str	r3, [r7, #8]
			Local_int32_Counter;

	/*Compute Slope*/
	Local_int32_Slope[0] = 0;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

	for(Local_int32_Counter = 1 ; Local_int32_Counter < Copy_int32_Size ; Local_int32_Counter++)
 8000eec:	2301      	movs	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e045      	b.n	8000f7e <FEAT_EXT_u32_SlopeSignChange+0xfa>
	{

		if(Copy_int32Data[Local_int32_Counter]  > Copy_int32Data[Local_int32_Counter-1])
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f02:	3b01      	subs	r3, #1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	440b      	add	r3, r1
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d905      	bls.n	8000f1c <FEAT_EXT_u32_SlopeSignChange+0x98>
			Local_int32_Slope[Local_int32_Counter] = 1;
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	2101      	movs	r1, #1
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f1a:	e02d      	b.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>

		else if(Copy_int32Data[Local_int32_Counter]  < Copy_int32Data[Local_int32_Counter-1])
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	440b      	add	r3, r1
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d206      	bcs.n	8000f48 <FEAT_EXT_u32_SlopeSignChange+0xc4>

			Local_int32_Slope[Local_int32_Counter] = -1;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f46:	e017      	b.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>

		else if(Copy_int32Data[Local_int32_Counter] == Copy_int32Data[Local_int32_Counter-1])
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	440b      	add	r3, r1
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d108      	bne.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>
			Local_int32_Slope[Local_int32_Counter] = Local_int32_Slope[Local_int32_Counter-1];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 1 ; Local_int32_Counter < Copy_int32_Size ; Local_int32_Counter++)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3b5      	bcc.n	8000ef2 <FEAT_EXT_u32_SlopeSignChange+0x6e>

	}

	/*Compute Changes In Sign*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_int32_Size-1 ; Local_int32_Counter++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e010      	b.n	8000fae <FEAT_EXT_u32_SlopeSignChange+0x12a>
	{
		if((Local_int32_Slope[Local_int32_Counter] != Local_int32_Slope[Local_int32_Counter+1]))
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	1c59      	adds	r1, r3, #1
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d002      	beq.n	8000fa8 <FEAT_EXT_u32_SlopeSignChange+0x124>
		{
			Local_int32_NumberOfChanges++;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_int32_Size-1 ; Local_int32_Counter++)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3e9      	bcc.n	8000f8c <FEAT_EXT_u32_SlopeSignChange+0x108>
		}
	}

	return Local_int32_NumberOfChanges;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4685      	mov	sp, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000fc6:	4770      	bx	lr

08000fc8 <FEAT_EXT_u32_ZeroCrossing>:

uint32_t FEAT_EXT_u32_ZeroCrossing(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 8000fc8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000fcc:	b087      	sub	sp, #28
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
 8000fd4:	466b      	mov	r3, sp
 8000fd6:	4618      	mov	r0, r3
	uint32_t Local_int32_Sign[Copy_u32_Size],
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ff2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ff6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	461d      	mov	r5, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	016b      	lsls	r3, r5, #5
 800100a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800100e:	0162      	lsls	r2, r4, #5
 8001010:	008b      	lsls	r3, r1, #2
 8001012:	3307      	adds	r3, #7
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	ebad 0d03 	sub.w	sp, sp, r3
 800101c:	466b      	mov	r3, sp
 800101e:	3303      	adds	r3, #3
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
	Local_int32_Counter,
	Local_int32_ZeroCounter;

	/*Compute data sign*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	e01c      	b.n	8001066 <FEAT_EXT_u32_ZeroCrossing+0x9e>
	{
		if(Copy_u32Data[Local_int32_Counter] > 0)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FEAT_EXT_u32_ZeroCrossing+0x7e>
		{
			Local_int32_Sign[Local_int32_Counter] = 1;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	2101      	movs	r1, #1
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001044:	e00c      	b.n	8001060 <FEAT_EXT_u32_ZeroCrossing+0x98>
		}
		else if (Copy_u32Data[Local_int32_Counter] <= 0)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <FEAT_EXT_u32_ZeroCrossing+0x98>
		{
			Local_int32_Sign[Local_int32_Counter] = -1;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	3301      	adds	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3de      	bcc.n	800102c <FEAT_EXT_u32_ZeroCrossing+0x64>
		}
	}

	/*Compute zero crossing*/
	Local_int32_ZeroCounter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e010      	b.n	800109a <FEAT_EXT_u32_ZeroCrossing+0xd2>
	{
		if(Local_int32_Sign[Local_int32_Counter] != Local_int32_Sign[Local_int32_Counter+1])
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1c59      	adds	r1, r3, #1
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108a:	429a      	cmp	r2, r3
 800108c:	d002      	beq.n	8001094 <FEAT_EXT_u32_ZeroCrossing+0xcc>
		{
			Local_int32_ZeroCounter++;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3e9      	bcc.n	8001078 <FEAT_EXT_u32_ZeroCrossing+0xb0>
		}
	}


	return Local_int32_ZeroCounter;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4685      	mov	sp, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80010b2:	4770      	bx	lr

080010b4 <FEAT_EXT_u32_WaveformLength>:

uint32_t FEAT_EXT_u32_WaveformLength(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80010b4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80010b8:	b087      	sub	sp, #28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
 80010c0:	466b      	mov	r3, sp
 80010c2:	4618      	mov	r0, r3
	uint32_t Local_int32_AbsDiff[Copy_u32_Size-1],
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	1e59      	subs	r1, r3, #1
 80010c8:	460b      	mov	r3, r1
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	2300      	movs	r3, #0
 80010d0:	4688      	mov	r8, r1
 80010d2:	4699      	mov	r9, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010e0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010e4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010e8:	2300      	movs	r3, #0
 80010ea:	460c      	mov	r4, r1
 80010ec:	461d      	mov	r5, r3
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	016b      	lsls	r3, r5, #5
 80010f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010fc:	0162      	lsls	r2, r4, #5
 80010fe:	008b      	lsls	r3, r1, #2
 8001100:	3307      	adds	r3, #7
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	ebad 0d03 	sub.w	sp, sp, r3
 800110a:	466b      	mov	r3, sp
 800110c:	3303      	adds	r3, #3
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
	Local_int32_Counter,
	Local_int32_WaveLength;

	/*Calculate absolute difference of data*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e030      	b.n	800117c <FEAT_EXT_u32_WaveformLength+0xc8>
	{
		if(Copy_u32Data[Local_int32_Counter] > Copy_u32Data[Local_int32_Counter+1])
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	3301      	adds	r3, #1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	440b      	add	r3, r1
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d910      	bls.n	8001156 <FEAT_EXT_u32_WaveformLength+0xa2>
		{
			Local_int32_AbsDiff[Local_int32_Counter] = Copy_u32Data[Local_int32_Counter] -  Copy_u32Data[Local_int32_Counter+1];
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	440b      	add	r3, r1
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad1      	subs	r1, r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001154:	e00f      	b.n	8001176 <FEAT_EXT_u32_WaveformLength+0xc2>
		}
		else
		{
			Local_int32_AbsDiff[Local_int32_Counter] = Copy_u32Data[Local_int32_Counter+1] -  Copy_u32Data[Local_int32_Counter];
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3301      	adds	r3, #1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	440b      	add	r3, r1
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1ad1      	subs	r1, r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	3301      	adds	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3c9      	bcc.n	800111a <FEAT_EXT_u32_WaveformLength+0x66>
		}
	}

	/*Compute wave length*/
	Local_int32_WaveLength = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	e009      	b.n	80011a4 <FEAT_EXT_u32_WaveformLength+0xf0>
	{
		Local_int32_WaveLength += Local_int32_AbsDiff[Local_int32_Counter];
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4413      	add	r3, r2
 800119c:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3f0      	bcc.n	8001190 <FEAT_EXT_u32_WaveformLength+0xdc>
	}


	return Local_int32_WaveLength;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4685      	mov	sp, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80011bc:	4770      	bx	lr

080011be <FEAT_EXT_f32_RMS>:


//float FEAT_EXT_float_RMS(int32_t *Copy_int32Data ,int32_t Copy_int32_Size)
float FEAT_EXT_f32_RMS(float Copy_f32_Variance)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	ed87 0a01 	vstr	s0, [r7, #4]
	float Local_f32_RMS;
	Local_f32_RMS = sqrtf(Copy_f32_Variance);
 80011c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80011cc:	f007 fcc2 	bl	8008b54 <sqrtf>
 80011d0:	ed87 0a03 	vstr	s0, [r7, #12]

	return Local_f32_RMS;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	ee07 3a90 	vmov	s15, r3

}
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <FEAT_EXT_f32_Variance>:

float FEAT_EXT_f32_Variance(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]

	uint32_t Local_int32_Counter;

	float 	Local_float_Mean = 0,
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
			Local_float_Var  = 0;
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]

	/*Compute Mean*/
	Local_float_Mean = FEAT_EXT_f32_Mean(Copy_u32Data, Copy_u32_Size);
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f851 	bl	80012a8 <FEAT_EXT_f32_Mean>
 8001206:	ed87 0a03 	vstr	s0, [r7, #12]

	/*Compute Variance*/
	for (Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e02e      	b.n	800126e <FEAT_EXT_f32_Variance+0x86>
	{
		Local_float_Var += pow(Copy_u32Data[Local_int32_Counter] - Local_float_Mean,2);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001222:	edd7 7a03 	vldr	s15, [r7, #12]
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	ee17 0a90 	vmov	r0, s15
 800122e:	f7ff f94f 	bl	80004d0 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80012a0 <FEAT_EXT_f32_Variance+0xb8>
 800123a:	ec43 2b10 	vmov	d0, r2, r3
 800123e:	f007 fbe3 	bl	8008a08 <pow>
 8001242:	ec55 4b10 	vmov	r4, r5, d0
 8001246:	6938      	ldr	r0, [r7, #16]
 8001248:	f7ff f942 	bl	80004d0 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7fe ffde 	bl	8000214 <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc3e 	bl	8000ae0 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	613b      	str	r3, [r7, #16]
	for (Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d3cc      	bcc.n	8001210 <FEAT_EXT_f32_Variance+0x28>
	}
	Local_float_Var /= (Copy_u32_Size-1);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001282:	edd7 6a04 	vldr	s13, [r7, #16]
 8001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128a:	edc7 7a04 	vstr	s15, [r7, #16]

	return Local_float_Var;
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	ee07 3a90 	vmov	s15, r3
}
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40000000 	.word	0x40000000

080012a8 <FEAT_EXT_f32_Mean>:

float FEAT_EXT_f32_Mean(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	float Local_float_Mean = 0;
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	uint32_t Local_int32_Counter;

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	e011      	b.n	80012e2 <FEAT_EXT_f32_Mean+0x3a>
	{
		Local_float_Mean += Copy_u32Data[Local_int32_Counter];
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	edc7 7a03 	vstr	s15, [r7, #12]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3e9      	bcc.n	80012be <FEAT_EXT_f32_Mean+0x16>
	}

	Local_float_Mean /= (float)Copy_u32_Size;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	edc7 7a03 	vstr	s15, [r7, #12]

	return Local_float_Mean;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	ee07 3a90 	vmov	s15, r3

}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <FEAT_EXT_f32_MeanAbsolute>:
float FEAT_EXT_f32_MeanAbsolute(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	uint32_t Local_int32_Counter;
	float Local_float_Mean = 0;
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e014      	b.n	8001354 <FEAT_EXT_f32_MeanAbsolute+0x40>
	{
		Local_float_Mean += abs(Copy_u32Data[Local_int32_Counter]);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	bfb8      	it	lt
 8001338:	425b      	neglt	r3, r3
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed97 7a02 	vldr	s14, [r7, #8]
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	edc7 7a02 	vstr	s15, [r7, #8]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3301      	adds	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3e6      	bcc.n	800132a <FEAT_EXT_f32_MeanAbsolute+0x16>
	}

	Local_float_Mean /= Copy_u32_Size;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001366:	edd7 6a02 	vldr	s13, [r7, #8]
 800136a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136e:	edc7 7a02 	vstr	s15, [r7, #8]

	return Local_float_Mean;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	ee07 3a90 	vmov	s15, r3

}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <Mapping>:

#include <stdint.h>
#include "MAPPING.h"

int32_t Mapping(int32_t Copy_int32_InputMin,int32_t Copy_int32_InputMax,int32_t Copy_int32_OutputMin,int32_t Copy_int32_OutputMax,int32_t Copy_int32BiasValue,int32_t Copy_int32_InputValue)
{
 8001386:	b480      	push	{r7}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	603b      	str	r3, [r7, #0]
	int32_t Local_int32_MappedValue;
	Local_int32_MappedValue = (((Copy_int32_InputValue - Copy_int32_InputMin)*(Copy_int32_OutputMax - Copy_int32_OutputMin))/(Copy_int32_InputMax - Copy_int32_InputMin)) + Copy_int32_InputMin + Copy_int32BiasValue;
 8001394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	1a8a      	subs	r2, r1, r2
 80013a0:	fb03 f202 	mul.w	r2, r3, r2
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1acb      	subs	r3, r1, r3
 80013aa:	fb92 f2f3 	sdiv	r2, r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	6a3a      	ldr	r2, [r7, #32]
 80013b4:	4413      	add	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]

	return Local_int32_MappedValue;
 80013b8:	697b      	ldr	r3, [r7, #20]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <NORM_f32_SlopeSignChange>:
#include "NORM_interface.h"
#include "NORM_private.h"


float NORM_f32_SlopeSignChange(uint8_t Copy_u8SensorNum , uint32_t Copy_u32SSC)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormSSC;

	switch(Copy_u8SensorNum)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d03a      	beq.n	8001450 <NORM_f32_SlopeSignChange+0x88>
 80013da:	2b02      	cmp	r3, #2
 80013dc:	dc52      	bgt.n	8001484 <NORM_f32_SlopeSignChange+0xbc>
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <NORM_f32_SlopeSignChange+0x20>
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d01a      	beq.n	800141c <NORM_f32_SlopeSignChange+0x54>
 80013e6:	e04d      	b.n	8001484 <NORM_f32_SlopeSignChange+0xbc>
	{
	case SNS1 : Local_f32_NormSSC = (Copy_u32SSC - SNS1_SSC_MEAN) / SNS1_SSC_SD; break;
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f7ff f84f 	bl	800048c <__aeabi_ui2d>
 80013ee:	a32a      	add	r3, pc, #168	; (adr r3, 8001498 <NORM_f32_SlopeSignChange+0xd0>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7fe ff0c 	bl	8000210 <__aeabi_dsub>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	a327      	add	r3, pc, #156	; (adr r3, 80014a0 <NORM_f32_SlopeSignChange+0xd8>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f9e5 	bl	80007d4 <__aeabi_ddiv>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb65 	bl	8000ae0 <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e033      	b.n	8001484 <NORM_f32_SlopeSignChange+0xbc>
	case SNS2 : Local_f32_NormSSC = (Copy_u32SSC - SNS2_SSC_MEAN) / SNS2_SSC_SD; break;
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f7ff f835 	bl	800048c <__aeabi_ui2d>
 8001422:	a321      	add	r3, pc, #132	; (adr r3, 80014a8 <NORM_f32_SlopeSignChange+0xe0>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7fe fef2 	bl	8000210 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	a31e      	add	r3, pc, #120	; (adr r3, 80014b0 <NORM_f32_SlopeSignChange+0xe8>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f9cb 	bl	80007d4 <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fb4b 	bl	8000ae0 <__aeabi_d2f>
 800144a:	4603      	mov	r3, r0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e019      	b.n	8001484 <NORM_f32_SlopeSignChange+0xbc>
	case SNS3 : Local_f32_NormSSC = (Copy_u32SSC - SNS3_SSC_MEAN) / SNS3_SSC_SD; break;
 8001450:	6838      	ldr	r0, [r7, #0]
 8001452:	f7ff f81b 	bl	800048c <__aeabi_ui2d>
 8001456:	a314      	add	r3, pc, #80	; (adr r3, 80014a8 <NORM_f32_SlopeSignChange+0xe0>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7fe fed8 	bl	8000210 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	a311      	add	r3, pc, #68	; (adr r3, 80014b0 <NORM_f32_SlopeSignChange+0xe8>)
 800146a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146e:	f7ff f9b1 	bl	80007d4 <__aeabi_ddiv>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb31 	bl	8000ae0 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	bf00      	nop
	}

	return Local_f32_NormSSC;;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	ee07 3a90 	vmov	s15, r3

}
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	70a3d70a 	.word	0x70a3d70a
 800149c:	40644a3d 	.word	0x40644a3d
 80014a0:	1eb851ec 	.word	0x1eb851ec
 80014a4:	405d7b85 	.word	0x405d7b85
 80014a8:	851eb852 	.word	0x851eb852
 80014ac:	405f11eb 	.word	0x405f11eb
 80014b0:	9999999a 	.word	0x9999999a
 80014b4:	40229999 	.word	0x40229999

080014b8 <NORM_f32_ZeroCrossing>:

float NORM_f32_ZeroCrossing(uint8_t Copy_u8SensorNum , uint32_t Copy_u32zeroCross)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormZC;;

	switch(Copy_u8SensorNum)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d02c      	beq.n	8001524 <NORM_f32_ZeroCrossing+0x6c>
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	dc44      	bgt.n	8001558 <NORM_f32_ZeroCrossing+0xa0>
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <NORM_f32_ZeroCrossing+0x20>
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d00c      	beq.n	80014f0 <NORM_f32_ZeroCrossing+0x38>
 80014d6:	e03f      	b.n	8001558 <NORM_f32_ZeroCrossing+0xa0>
	{
	case SNS1 : Local_f32_NormZC = (Copy_u32zeroCross - SNS1_ZC_MEAN) / SNS1_ZC_SD; break;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	4a27      	ldr	r2, [pc, #156]	; (8001578 <NORM_f32_ZeroCrossing+0xc0>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	0c9b      	lsrs	r3, r3, #18
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ea:	edc7 7a03 	vstr	s15, [r7, #12]
 80014ee:	e033      	b.n	8001558 <NORM_f32_ZeroCrossing+0xa0>
	case SNS2 : Local_f32_NormZC = (Copy_u32zeroCross - SNS2_ZC_MEAN) / SNS2_ZC_SD; break;
 80014f0:	6838      	ldr	r0, [r7, #0]
 80014f2:	f7fe ffcb 	bl	800048c <__aeabi_ui2d>
 80014f6:	a31c      	add	r3, pc, #112	; (adr r3, 8001568 <NORM_f32_ZeroCrossing+0xb0>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7fe fe88 	bl	8000210 <__aeabi_dsub>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	a319      	add	r3, pc, #100	; (adr r3, 8001570 <NORM_f32_ZeroCrossing+0xb8>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f961 	bl	80007d4 <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fae1 	bl	8000ae0 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e019      	b.n	8001558 <NORM_f32_ZeroCrossing+0xa0>
	case SNS3 : Local_f32_NormZC = (Copy_u32zeroCross - SNS3_ZC_MEAN) / SNS3_ZC_SD; break;
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f7fe ffb1 	bl	800048c <__aeabi_ui2d>
 800152a:	a30f      	add	r3, pc, #60	; (adr r3, 8001568 <NORM_f32_ZeroCrossing+0xb0>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7fe fe6e 	bl	8000210 <__aeabi_dsub>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	a30c      	add	r3, pc, #48	; (adr r3, 8001570 <NORM_f32_ZeroCrossing+0xb8>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7ff f947 	bl	80007d4 <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fac7 	bl	8000ae0 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	bf00      	nop
	}

	return Local_f32_NormZC;;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	ee07 3a90 	vmov	s15, r3
}
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	eb851eb8 	.word	0xeb851eb8
 800156c:	40549851 	.word	0x40549851
 8001570:	147ae148 	.word	0x147ae148
 8001574:	401f47ae 	.word	0x401f47ae
 8001578:	431bde83 	.word	0x431bde83
 800157c:	00000000 	.word	0x00000000

08001580 <NORM_f32_WaveformLength>:

float NORM_f32_WaveformLength(uint8_t Copy_u8SensorNum , uint32_t Copy_u3WaveLength)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormWVL;

	switch(Copy_u8SensorNum)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d03a      	beq.n	8001608 <NORM_f32_WaveformLength+0x88>
 8001592:	2b02      	cmp	r3, #2
 8001594:	dc52      	bgt.n	800163c <NORM_f32_WaveformLength+0xbc>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <NORM_f32_WaveformLength+0x20>
 800159a:	2b01      	cmp	r3, #1
 800159c:	d01a      	beq.n	80015d4 <NORM_f32_WaveformLength+0x54>
 800159e:	e04d      	b.n	800163c <NORM_f32_WaveformLength+0xbc>
	{
	case SNS1 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS1_WVL_MEAN) / SNS1_WVL_SD; break;
 80015a0:	6838      	ldr	r0, [r7, #0]
 80015a2:	f7fe ff73 	bl	800048c <__aeabi_ui2d>
 80015a6:	a32a      	add	r3, pc, #168	; (adr r3, 8001650 <NORM_f32_WaveformLength+0xd0>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe fe30 	bl	8000210 <__aeabi_dsub>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	a327      	add	r3, pc, #156	; (adr r3, 8001658 <NORM_f32_WaveformLength+0xd8>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f909 	bl	80007d4 <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fa89 	bl	8000ae0 <__aeabi_d2f>
 80015ce:	4603      	mov	r3, r0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	e033      	b.n	800163c <NORM_f32_WaveformLength+0xbc>
	case SNS2 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS2_WVL_MEAN) / SNS2_WVL_SD; break;
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7fe ff59 	bl	800048c <__aeabi_ui2d>
 80015da:	a321      	add	r3, pc, #132	; (adr r3, 8001660 <NORM_f32_WaveformLength+0xe0>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fe16 	bl	8000210 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	a31e      	add	r3, pc, #120	; (adr r3, 8001668 <NORM_f32_WaveformLength+0xe8>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f8ef 	bl	80007d4 <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff fa6f 	bl	8000ae0 <__aeabi_d2f>
 8001602:	4603      	mov	r3, r0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e019      	b.n	800163c <NORM_f32_WaveformLength+0xbc>
	case SNS3 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS3_WVL_MEAN) / SNS3_WVL_SD; break;
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f7fe ff3f 	bl	800048c <__aeabi_ui2d>
 800160e:	a314      	add	r3, pc, #80	; (adr r3, 8001660 <NORM_f32_WaveformLength+0xe0>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe fdfc 	bl	8000210 <__aeabi_dsub>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	a311      	add	r3, pc, #68	; (adr r3, 8001668 <NORM_f32_WaveformLength+0xe8>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7ff f8d5 	bl	80007d4 <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fa55 	bl	8000ae0 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	bf00      	nop
	}

	return Local_f32_NormWVL;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	f3af 8000 	nop.w
 8001650:	a3d70a3d 	.word	0xa3d70a3d
 8001654:	40f951a8 	.word	0x40f951a8
 8001658:	00000000 	.word	0x00000000
 800165c:	40f99068 	.word	0x40f99068
 8001660:	ae147ae1 	.word	0xae147ae1
 8001664:	40d4fc57 	.word	0x40d4fc57
 8001668:	d70a3d71 	.word	0xd70a3d71
 800166c:	40b13aa3 	.word	0x40b13aa3

08001670 <NORM_f32_RMS>:
float NORM_f32_RMS(uint8_t Copy_u8SensorNum , float Copy_f32RMS)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	ed87 0a00 	vstr	s0, [r7]
 800167c:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormRMS;

	switch(Copy_u8SensorNum)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d03a      	beq.n	80016fa <NORM_f32_RMS+0x8a>
 8001684:	2b02      	cmp	r3, #2
 8001686:	dc52      	bgt.n	800172e <NORM_f32_RMS+0xbe>
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <NORM_f32_RMS+0x22>
 800168c:	2b01      	cmp	r3, #1
 800168e:	d01a      	beq.n	80016c6 <NORM_f32_RMS+0x56>
 8001690:	e04d      	b.n	800172e <NORM_f32_RMS+0xbe>
	{
	case SNS1 : Local_f32_NormRMS = (Copy_f32RMS - SNS1_RMS_MEAN) / SNS1_RMS_SD; break;
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f7fe ff1c 	bl	80004d0 <__aeabi_f2d>
 8001698:	a329      	add	r3, pc, #164	; (adr r3, 8001740 <NORM_f32_RMS+0xd0>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe fdb7 	bl	8000210 <__aeabi_dsub>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	a327      	add	r3, pc, #156	; (adr r3, 8001748 <NORM_f32_RMS+0xd8>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7ff f890 	bl	80007d4 <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fa10 	bl	8000ae0 <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e033      	b.n	800172e <NORM_f32_RMS+0xbe>
	case SNS2 : Local_f32_NormRMS = (Copy_f32RMS - SNS2_RMS_MEAN) / SNS2_RMS_SD; break;
 80016c6:	6838      	ldr	r0, [r7, #0]
 80016c8:	f7fe ff02 	bl	80004d0 <__aeabi_f2d>
 80016cc:	a320      	add	r3, pc, #128	; (adr r3, 8001750 <NORM_f32_RMS+0xe0>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe fd9d 	bl	8000210 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	a31e      	add	r3, pc, #120	; (adr r3, 8001758 <NORM_f32_RMS+0xe8>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7ff f876 	bl	80007d4 <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff f9f6 	bl	8000ae0 <__aeabi_d2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e019      	b.n	800172e <NORM_f32_RMS+0xbe>
	case SNS3 : Local_f32_NormRMS = (Copy_f32RMS - SNS3_RMS_MEAN) / SNS3_RMS_SD; break;
 80016fa:	6838      	ldr	r0, [r7, #0]
 80016fc:	f7fe fee8 	bl	80004d0 <__aeabi_f2d>
 8001700:	a317      	add	r3, pc, #92	; (adr r3, 8001760 <NORM_f32_RMS+0xf0>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe fd83 	bl	8000210 <__aeabi_dsub>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	a311      	add	r3, pc, #68	; (adr r3, 8001758 <NORM_f32_RMS+0xe8>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7ff f85c 	bl	80007d4 <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff f9dc 	bl	8000ae0 <__aeabi_d2f>
 8001728:	4603      	mov	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	bf00      	nop
	}

	return Local_f32_NormRMS;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	ee07 3a90 	vmov	s15, r3
}
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	5c28f5c3 	.word	0x5c28f5c3
 8001744:	407a928f 	.word	0x407a928f
 8001748:	d70a3d71 	.word	0xd70a3d71
 800174c:	407aa8a3 	.word	0x407aa8a3
 8001750:	cccccccd 	.word	0xcccccccd
 8001754:	4063e4cc 	.word	0x4063e4cc
 8001758:	70a3d70a 	.word	0x70a3d70a
 800175c:	40390a3d 	.word	0x40390a3d
 8001760:	cccccccd 	.word	0xcccccccd
 8001764:	406864cc 	.word	0x406864cc

08001768 <NORM_f32_Variance>:

float NORM_f32_Variance(uint8_t Copy_u8SensorNum , float Copy_f32Variance)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	ed87 0a00 	vstr	s0, [r7]
 8001774:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormVar;

	switch(Copy_u8SensorNum)
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d03a      	beq.n	80017f2 <NORM_f32_Variance+0x8a>
 800177c:	2b02      	cmp	r3, #2
 800177e:	dc52      	bgt.n	8001826 <NORM_f32_Variance+0xbe>
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <NORM_f32_Variance+0x22>
 8001784:	2b01      	cmp	r3, #1
 8001786:	d01a      	beq.n	80017be <NORM_f32_Variance+0x56>
 8001788:	e04d      	b.n	8001826 <NORM_f32_Variance+0xbe>
	{
	case SNS1 : Local_f32_NormVar = (Copy_f32Variance - SNS1_VAR_MEAN) / SNS1_VAR_SD; break;
 800178a:	6838      	ldr	r0, [r7, #0]
 800178c:	f7fe fea0 	bl	80004d0 <__aeabi_f2d>
 8001790:	a329      	add	r3, pc, #164	; (adr r3, 8001838 <NORM_f32_Variance+0xd0>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fd3b 	bl	8000210 <__aeabi_dsub>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	a327      	add	r3, pc, #156	; (adr r3, 8001840 <NORM_f32_Variance+0xd8>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f814 	bl	80007d4 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f994 	bl	8000ae0 <__aeabi_d2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e033      	b.n	8001826 <NORM_f32_Variance+0xbe>
	case SNS2 : Local_f32_NormVar = (Copy_f32Variance - SNS2_VAR_MEAN) / SNS2_VAR_SD; break;
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f7fe fe86 	bl	80004d0 <__aeabi_f2d>
 80017c4:	a320      	add	r3, pc, #128	; (adr r3, 8001848 <NORM_f32_Variance+0xe0>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe fd21 	bl	8000210 <__aeabi_dsub>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	a31e      	add	r3, pc, #120	; (adr r3, 8001850 <NORM_f32_Variance+0xe8>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe fffa 	bl	80007d4 <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff f97a 	bl	8000ae0 <__aeabi_d2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e019      	b.n	8001826 <NORM_f32_Variance+0xbe>
	case SNS3 : Local_f32_NormVar = (Copy_f32Variance - SNS3_VAR_MEAN) / SNS3_VAR_SD; break;
 80017f2:	6838      	ldr	r0, [r7, #0]
 80017f4:	f7fe fe6c 	bl	80004d0 <__aeabi_f2d>
 80017f8:	a313      	add	r3, pc, #76	; (adr r3, 8001848 <NORM_f32_Variance+0xe0>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fd07 	bl	8000210 <__aeabi_dsub>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	a311      	add	r3, pc, #68	; (adr r3, 8001850 <NORM_f32_Variance+0xe8>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe ffe0 	bl	80007d4 <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f960 	bl	8000ae0 <__aeabi_d2f>
 8001820:	4603      	mov	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	bf00      	nop
	}

	return Local_f32_NormVar;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	ee07 3a90 	vmov	s15, r3
}
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	51eb851f 	.word	0x51eb851f
 800183c:	41162330 	.word	0x41162330
 8001840:	00000000 	.word	0x00000000
 8001844:	411a8ccc 	.word	0x411a8ccc
 8001848:	28f5c28f 	.word	0x28f5c28f
 800184c:	40d9594c 	.word	0x40d9594c
 8001850:	cccccccd 	.word	0xcccccccd
 8001854:	40beeecc 	.word	0x40beeecc

08001858 <NORM_f32_Mean>:

float NORM_f32_Mean(uint8_t Copy_u8SensorNum , float Copy_f32Mean)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	ed87 0a00 	vstr	s0, [r7]
 8001864:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormMean;

	switch(Copy_u8SensorNum)
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d03a      	beq.n	80018e2 <NORM_f32_Mean+0x8a>
 800186c:	2b02      	cmp	r3, #2
 800186e:	dc52      	bgt.n	8001916 <NORM_f32_Mean+0xbe>
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <NORM_f32_Mean+0x22>
 8001874:	2b01      	cmp	r3, #1
 8001876:	d01a      	beq.n	80018ae <NORM_f32_Mean+0x56>
 8001878:	e04d      	b.n	8001916 <NORM_f32_Mean+0xbe>
	{
	case SNS1 : Local_f32_NormMean= (Copy_f32Mean - SNS1_MEAN_MEAN) / SNS1_MEAN_SD; break;
 800187a:	6838      	ldr	r0, [r7, #0]
 800187c:	f7fe fe28 	bl	80004d0 <__aeabi_f2d>
 8001880:	a329      	add	r3, pc, #164	; (adr r3, 8001928 <NORM_f32_Mean+0xd0>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe fcc3 	bl	8000210 <__aeabi_dsub>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	a327      	add	r3, pc, #156	; (adr r3, 8001930 <NORM_f32_Mean+0xd8>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe ff9c 	bl	80007d4 <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f91c 	bl	8000ae0 <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e033      	b.n	8001916 <NORM_f32_Mean+0xbe>
	case SNS2 : Local_f32_NormMean= (Copy_f32Mean - SNS2_MEAN_MEAN) / SNS2_MEAN_SD; break;
 80018ae:	6838      	ldr	r0, [r7, #0]
 80018b0:	f7fe fe0e 	bl	80004d0 <__aeabi_f2d>
 80018b4:	a320      	add	r3, pc, #128	; (adr r3, 8001938 <NORM_f32_Mean+0xe0>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fca9 	bl	8000210 <__aeabi_dsub>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	a31e      	add	r3, pc, #120	; (adr r3, 8001940 <NORM_f32_Mean+0xe8>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe ff82 	bl	80007d4 <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f902 	bl	8000ae0 <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e019      	b.n	8001916 <NORM_f32_Mean+0xbe>
	case SNS3 : Local_f32_NormMean= (Copy_f32Mean - SNS3_MEAN_MEAN) / SNS3_MEAN_SD; break;
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f7fe fdf4 	bl	80004d0 <__aeabi_f2d>
 80018e8:	a313      	add	r3, pc, #76	; (adr r3, 8001938 <NORM_f32_Mean+0xe0>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7fe fc8f 	bl	8000210 <__aeabi_dsub>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	a311      	add	r3, pc, #68	; (adr r3, 8001940 <NORM_f32_Mean+0xe8>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe ff68 	bl	80007d4 <__aeabi_ddiv>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f8e8 	bl	8000ae0 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	bf00      	nop
	}

	return Local_f32_NormMean;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	ee07 3a90 	vmov	s15, r3
}
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	ae147ae1 	.word	0xae147ae1
 800192c:	407ab547 	.word	0x407ab547
 8001930:	b851eb85 	.word	0xb851eb85
 8001934:	407ab51e 	.word	0x407ab51e
 8001938:	0a3d70a4 	.word	0x0a3d70a4
 800193c:	404b83d7 	.word	0x404b83d7
 8001940:	d70a3d71 	.word	0xd70a3d71
 8001944:	402570a3 	.word	0x402570a3

08001948 <PWM_int32SetPWMValue>:
#include <stdint.h>
#include "PWM.h"


int8_t PWM_int32SetPWMValue(TIM_TypeDef *htim,int32_t Copy_int32Channel,int32_t Copy_int32Value)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	int8_t Local_int8ErrorState = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	75fb      	strb	r3, [r7, #23]

	if (htim == TIM2)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195e:	d124      	bne.n	80019aa <PWM_int32SetPWMValue+0x62>
	{
		switch(Copy_int32Channel)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d81e      	bhi.n	80019a4 <PWM_int32SetPWMValue+0x5c>
 8001966:	a201      	add	r2, pc, #4	; (adr r2, 800196c <PWM_int32SetPWMValue+0x24>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	0800197d 	.word	0x0800197d
 8001970:	08001987 	.word	0x08001987
 8001974:	08001991 	.word	0x08001991
 8001978:	0800199b 	.word	0x0800199b
		{
		case PWM_Channel1 : TIM2->CCR1 = Copy_int32Value; break;
 800197c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6353      	str	r3, [r2, #52]	; 0x34
 8001984:	e028      	b.n	80019d8 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel2 : TIM2->CCR2 = Copy_int32Value; break;
 8001986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6393      	str	r3, [r2, #56]	; 0x38
 800198e:	e023      	b.n	80019d8 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel3 : TIM2->CCR3 = Copy_int32Value; break;
 8001990:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001998:	e01e      	b.n	80019d8 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel4 : TIM2->CCR4 = Copy_int32Value; break;
 800199a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	e019      	b.n	80019d8 <PWM_int32SetPWMValue+0x90>
		default : Local_int8ErrorState = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	75fb      	strb	r3, [r7, #23]
 80019a8:	e016      	b.n	80019d8 <PWM_int32SetPWMValue+0x90>
		}
	}

	else if (htim == TIM12)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4a0e      	ldr	r2, [pc, #56]	; (80019e8 <PWM_int32SetPWMValue+0xa0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d111      	bne.n	80019d6 <PWM_int32SetPWMValue+0x8e>
	{
		switch(Copy_int32Channel)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <PWM_int32SetPWMValue+0x78>
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d004      	beq.n	80019c8 <PWM_int32SetPWMValue+0x80>
 80019be:	e007      	b.n	80019d0 <PWM_int32SetPWMValue+0x88>
		{
		case PWM_Channel1 : TIM12->CCR1 = Copy_int32Value; break;
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <PWM_int32SetPWMValue+0xa0>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6353      	str	r3, [r2, #52]	; 0x34
 80019c6:	e007      	b.n	80019d8 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel2 : TIM12->CCR2 = Copy_int32Value; break;
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <PWM_int32SetPWMValue+0xa0>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6393      	str	r3, [r2, #56]	; 0x38
 80019ce:	e003      	b.n	80019d8 <PWM_int32SetPWMValue+0x90>
		default : Local_int8ErrorState = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	75fb      	strb	r3, [r7, #23]
 80019d4:	e000      	b.n	80019d8 <PWM_int32SetPWMValue+0x90>
		}
	}
 80019d6:	bf00      	nop

	return Local_int8ErrorState;
 80019d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40001800 	.word	0x40001800

080019ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a00:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <MX_ADC1_Init+0x9c>)
 8001a02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <MX_ADC1_Init+0xa0>)
 8001a30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a4e:	f001 fdab 	bl	80035a8 <HAL_ADC_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a58:	f001 f854 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_ADC1_Init+0x98>)
 8001a6e:	f002 f877 	bl	8003b60 <HAL_ADC_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a78:	f001 f844 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200005dc 	.word	0x200005dc
 8001a88:	40012000 	.word	0x40012000
 8001a8c:	0f000001 	.word	0x0f000001

08001a90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a96:	463b      	mov	r3, r7
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001aa4:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <MX_ADC2_Init+0x9c>)
 8001aa6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001aaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <MX_ADC2_Init+0xa0>)
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001af2:	f001 fd59 	bl	80035a8 <HAL_ADC_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001afc:	f001 f802 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_ADC2_Init+0x98>)
 8001b12:	f002 f825 	bl	8003b60 <HAL_ADC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001b1c:	f000 fff2 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000624 	.word	0x20000624
 8001b2c:	40012100 	.word	0x40012100
 8001b30:	0f000001 	.word	0x0f000001

08001b34 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b48:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <MX_ADC3_Init+0x9c>)
 8001b4a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b52:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <MX_ADC3_Init+0xa0>)
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001b96:	f001 fd07 	bl	80035a8 <HAL_ADC_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001ba0:	f000 ffb0 	bl	8002b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001ba4:	230a      	movs	r3, #10
 8001ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_ADC3_Init+0x98>)
 8001bb6:	f001 ffd3 	bl	8003b60 <HAL_ADC_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001bc0:	f000 ffa0 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	2000066c 	.word	0x2000066c
 8001bd0:	40012200 	.word	0x40012200
 8001bd4:	0f000001 	.word	0x0f000001

08001bd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_ADC_MspInit+0x164>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d130      	bne.n	8001c5c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
 8001bfe:	4b50      	ldr	r3, [pc, #320]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	4b49      	ldr	r3, [pc, #292]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a48      	ldr	r2, [pc, #288]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c32:	2301      	movs	r3, #1
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c36:	2303      	movs	r3, #3
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c42:	4619      	mov	r1, r3
 8001c44:	483f      	ldr	r0, [pc, #252]	; (8001d44 <HAL_ADC_MspInit+0x16c>)
 8001c46:	f002 fafd 	bl	8004244 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2012      	movs	r0, #18
 8001c50:	f002 faa5 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c54:	2012      	movs	r0, #18
 8001c56:	f002 fabe 	bl	80041d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001c5a:	e06a      	b.n	8001d32 <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a39      	ldr	r2, [pc, #228]	; (8001d48 <HAL_ADC_MspInit+0x170>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d130      	bne.n	8001cc8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4824      	ldr	r0, [pc, #144]	; (8001d44 <HAL_ADC_MspInit+0x16c>)
 8001cb2:	f002 fac7 	bl	8004244 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2012      	movs	r0, #18
 8001cbc:	f002 fa6f 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001cc0:	2012      	movs	r0, #18
 8001cc2:	f002 fa88 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 8001cc6:	e034      	b.n	8001d32 <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_ADC_MspInit+0x174>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d12f      	bne.n	8001d32 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_ADC_MspInit+0x168>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <HAL_ADC_MspInit+0x178>)
 8001d1e:	f002 fa91 	bl	8004244 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2012      	movs	r0, #18
 8001d28:	f002 fa39 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d2c:	2012      	movs	r0, #18
 8001d2e:	f002 fa52 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3738      	adds	r7, #56	; 0x38
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40012000 	.word	0x40012000
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40012100 	.word	0x40012100
 8001d4c:	40012200 	.word	0x40012200
 8001d50:	40020800 	.word	0x40020800

08001d54 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_CRC_Init+0x20>)
 8001d5a:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <MX_CRC_Init+0x24>)
 8001d5c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_CRC_Init+0x20>)
 8001d60:	f002 fa53 	bl	800420a <HAL_CRC_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001d6a:	f000 fecb 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200006b4 	.word	0x200006b4
 8001d78:	40023000 	.word	0x40023000

08001d7c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_CRC_MspInit+0x3c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10d      	bne.n	8001daa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_CRC_MspInit+0x40>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_CRC_MspInit+0x40>)
 8001d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_CRC_MspInit+0x40>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023000 	.word	0x40023000
 8001dbc:	40023800 	.word	0x40023800

08001dc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <MX_GPIO_Init+0xd0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2120      	movs	r1, #32
 8001e4a:	4812      	ldr	r0, [pc, #72]	; (8001e94 <MX_GPIO_Init+0xd4>)
 8001e4c:	f002 fb8e 	bl	800456c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	480c      	ldr	r0, [pc, #48]	; (8001e98 <MX_GPIO_Init+0xd8>)
 8001e68:	f002 f9ec 	bl	8004244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <MX_GPIO_Init+0xd4>)
 8001e84:	f002 f9de 	bl	8004244 <HAL_GPIO_Init>

}
 8001e88:	bf00      	nop
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020800 	.word	0x40020800

08001e9c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d104      	bne.n	8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001eae:	2120      	movs	r1, #32
 8001eb0:	4813      	ldr	r0, [pc, #76]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001eb2:	f002 fb74 	bl	800459e <HAL_GPIO_TogglePin>
	}
	else if (htim->Instance == TIM14)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
}
 8001eb6:	e01c      	b.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM11)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d104      	bne.n	8001ecc <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	480e      	ldr	r0, [pc, #56]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ec6:	f002 fb6a 	bl	800459e <HAL_GPIO_TogglePin>
}
 8001eca:	e012      	b.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM13)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d104      	bne.n	8001ee0 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	4809      	ldr	r0, [pc, #36]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001eda:	f002 fb60 	bl	800459e <HAL_GPIO_TogglePin>
}
 8001ede:	e008      	b.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM14)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d103      	bne.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001eea:	2120      	movs	r1, #32
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001eee:	f002 fb56 	bl	800459e <HAL_GPIO_TogglePin>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40014800 	.word	0x40014800
 8001f08:	40001c00 	.word	0x40001c00
 8001f0c:	40002000 	.word	0x40002000

08001f10 <Model_Init>:

static ai_buffer *ai_input;
static ai_buffer *ai_output;

int Model_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
	ai_error err;
	const ai_handle acts[] = { activations };
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <Model_Init+0x48>)
 8001f18:	603b      	str	r3, [r7, #0]
	err = ai_network_create_and_init(&network, acts, NULL);
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480e      	ldr	r0, [pc, #56]	; (8001f5c <Model_Init+0x4c>)
 8001f22:	f004 fd13 	bl	800694c <ai_network_create_and_init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	607b      	str	r3, [r7, #4]

	ai_input = ai_network_inputs_get(network, NULL);
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <Model_Init+0x4c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fd7f 	bl	8006a34 <ai_network_inputs_get>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <Model_Init+0x50>)
 8001f3a:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <Model_Init+0x4c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 fd90 	bl	8006a68 <ai_network_outputs_get>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <Model_Init+0x54>)
 8001f4c:	6013      	str	r3, [r2, #0]

	return 0;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200006e0 	.word	0x200006e0
 8001f5c:	200006d0 	.word	0x200006d0
 8001f60:	2000074c 	.word	0x2000074c
 8001f64:	20000750 	.word	0x20000750

08001f68 <Model_Run>:

int Model_Run(const void *in_data, void *out_data)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	ai_i32 n_batch;
	ai_error err;

	/* 1 - Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <Model_Run+0x4c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <Model_Run+0x50>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	605a      	str	r2, [r3, #4]

	/* 2 - Perform the inference */
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <Model_Run+0x54>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <Model_Run+0x4c>)
 8001f88:	6811      	ldr	r1, [r2, #0]
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <Model_Run+0x50>)
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 fdc0 	bl	8006b14 <ai_network_run>
 8001f94:	60f8      	str	r0, [r7, #12]
	if (n_batch != 1) {
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d006      	beq.n	8001faa <Model_Run+0x42>
		err = ai_network_get_error(network);
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <Model_Run+0x54>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 fcb1 	bl	8006908 <ai_network_get_error>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	60bb      	str	r3, [r7, #8]
	};

	return 0;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000074c 	.word	0x2000074c
 8001fb8:	20000750 	.word	0x20000750
 8001fbc:	200006d0 	.word	0x200006d0

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc2:	f5ad 5d8e 	sub.w	sp, sp, #4544	; 0x11c0
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
	uint32_t Local_u32Counter,Local_u32_RealData[250],Local_u32AvgCounter;

	uint8_t Local_u8Avg = 5;
 8001fca:	2305      	movs	r3, #5
 8001fcc:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001fd0:	f102 020f 	add.w	r2, r2, #15
 8001fd4:	7013      	strb	r3, [r2, #0]
	uint8_t Local_u8Max,Local_u8ModeArr[Local_u8Avg],Local_u8Sum=0;
 8001fd6:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001fda:	f103 030f 	add.w	r3, r3, #15
 8001fde:	781e      	ldrb	r6, [r3, #0]
 8001fe0:	4633      	mov	r3, r6
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001fe8:	f102 0208 	add.w	r2, r2, #8
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	b2f3      	uxtb	r3, r6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	461c      	mov	r4, r3
 8001ff4:	4615      	mov	r5, r2
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	00eb      	lsls	r3, r5, #3
 8002000:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002004:	00e2      	lsls	r2, r4, #3
 8002006:	b2f3      	uxtb	r3, r6
 8002008:	2200      	movs	r2, #0
 800200a:	4618      	mov	r0, r3
 800200c:	4611      	mov	r1, r2
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	00cb      	lsls	r3, r1, #3
 8002018:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800201c:	00c2      	lsls	r2, r0, #3
 800201e:	4633      	mov	r3, r6
 8002020:	3307      	adds	r3, #7
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	ebad 0d03 	sub.w	sp, sp, r3
 800202a:	ab12      	add	r3, sp, #72	; 0x48
 800202c:	3300      	adds	r3, #0
 800202e:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002032:	f102 0204 	add.w	r2, r2, #4
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	2300      	movs	r3, #0
 800203a:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800203e:	f102 0203 	add.w	r2, r2, #3
 8002042:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002044:	f001 fa1a 	bl	800347c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002048:	f000 fcf0 	bl	8002a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800204c:	f7ff feb8 	bl	8001dc0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002050:	f001 f978 	bl	8003344 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002054:	f7ff fcca 	bl	80019ec <MX_ADC1_Init>
  MX_ADC2_Init();
 8002058:	f7ff fd1a 	bl	8001a90 <MX_ADC2_Init>
  MX_ADC3_Init();
 800205c:	f7ff fd6a 	bl	8001b34 <MX_ADC3_Init>
  MX_CRC_Init();
 8002060:	f7ff fe78 	bl	8001d54 <MX_CRC_Init>
  MX_TIM2_Init();
 8002064:	f000 fea6 	bl	8002db4 <MX_TIM2_Init>
  MX_TIM10_Init();
 8002068:	f000 ff3c 	bl	8002ee4 <MX_TIM10_Init>
  MX_TIM11_Init();
 800206c:	f000 ff5e 	bl	8002f2c <MX_TIM11_Init>
  MX_TIM12_Init();
 8002070:	f000 ff80 	bl	8002f74 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002074:	f000 ffe2 	bl	800303c <MX_TIM13_Init>
  MX_TIM14_Init();
 8002078:	f001 f804 	bl	8003084 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	Model_Init();
 800207c:	f7ff ff48 	bl	8001f10 <Model_Init>

	/* Start GPs Timers */
	HAL_TIM_Base_Start_IT(&htim10);
 8002080:	48d6      	ldr	r0, [pc, #856]	; (80023dc <main+0x41c>)
 8002082:	f003 f8df 	bl	8005244 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8002086:	48d6      	ldr	r0, [pc, #856]	; (80023e0 <main+0x420>)
 8002088:	f003 f8dc 	bl	8005244 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 800208c:	48d5      	ldr	r0, [pc, #852]	; (80023e4 <main+0x424>)
 800208e:	f003 f8d9 	bl	8005244 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8002092:	48d5      	ldr	r0, [pc, #852]	; (80023e8 <main+0x428>)
 8002094:	f003 f8d6 	bl	8005244 <HAL_TIM_Base_Start_IT>


	/* Initialize PWM Timers*/
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002098:	2100      	movs	r1, #0
 800209a:	48d4      	ldr	r0, [pc, #848]	; (80023ec <main+0x42c>)
 800209c:	f003 f99c 	bl	80053d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80020a0:	2104      	movs	r1, #4
 80020a2:	48d2      	ldr	r0, [pc, #840]	; (80023ec <main+0x42c>)
 80020a4:	f003 f998 	bl	80053d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80020a8:	2108      	movs	r1, #8
 80020aa:	48d0      	ldr	r0, [pc, #832]	; (80023ec <main+0x42c>)
 80020ac:	f003 f994 	bl	80053d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80020b0:	210c      	movs	r1, #12
 80020b2:	48ce      	ldr	r0, [pc, #824]	; (80023ec <main+0x42c>)
 80020b4:	f003 f990 	bl	80053d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80020b8:	2100      	movs	r1, #0
 80020ba:	48cd      	ldr	r0, [pc, #820]	; (80023f0 <main+0x430>)
 80020bc:	f003 f98c 	bl	80053d8 <HAL_TIM_PWM_Start>

	SERVO_t Servo1,Servo2,Servo3,Servo4,Servo5;
	Servo1.Pin = Servo_PA15;
 80020c0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80020c4:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
	Servo2.Pin = Servo_PB10;
 80020cc:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80020d0:	f5a3 6395 	sub.w	r3, r3, #1192	; 0x4a8
 80020d4:	2203      	movs	r2, #3
 80020d6:	601a      	str	r2, [r3, #0]
	Servo3.Pin = Servo_PB14;
 80020d8:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80020dc:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 80020e0:	2204      	movs	r2, #4
 80020e2:	601a      	str	r2, [r3, #0]
	Servo4.Pin = Servo_PB2;
 80020e4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80020e8:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
	Servo5.Pin = Servo_PB9;
 80020f0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80020f4:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 80020f8:	2202      	movs	r2, #2
 80020fa:	601a      	str	r2, [r3, #0]

	/*********	Testing	*********/
	uint32_t Move2[250] = {0};
 80020fc:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002100:	f5a3 6318 	sub.w	r3, r3, #2432	; 0x980
 8002104:	4618      	mov	r0, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210a:	461a      	mov	r2, r3
 800210c:	2100      	movs	r1, #0
 800210e:	f006 fc73 	bl	80089f8 <memset>
	uint32_t Move1[250] = {
 8002112:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002116:	f6a3 5368 	subw	r3, r3, #3432	; 0xd68
 800211a:	4ab6      	ldr	r2, [pc, #728]	; (80023f4 <main+0x434>)
 800211c:	4618      	mov	r0, r3
 800211e:	4611      	mov	r1, r2
 8002120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002124:	461a      	mov	r2, r3
 8002126:	f006 fc59 	bl	80089dc <memcpy>
			276,   79,    5,  217,   95,   29,    8,  104,   20,  156,  189,
			146,   93,  125,   96,    5,  160,   51, 1495, 1831,   71,  599,
			181,  250,  219,  246,   47,  213,   23,  225
	};

	uint32_t Move0[250] = {
 800212a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800212e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002132:	4ab1      	ldr	r2, [pc, #708]	; (80023f8 <main+0x438>)
 8002134:	4618      	mov	r0, r3
 8002136:	4611      	mov	r1, r2
 8002138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213c:	461a      	mov	r2, r3
 800213e:	f006 fc4d 	bl	80089dc <memcpy>
			1653, 1915, 1364,  662,  554,  248,  919,   71
	};
	float Feat_Arr[6],Norm_Arr[6];

	/*Feature Extraction*/
	Feat_Arr[VAR_IDX]	= FEAT_EXT_f32_Variance(Move2,250);
 8002142:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8002146:	21fa      	movs	r1, #250	; 0xfa
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f84d 	bl	80011e8 <FEAT_EXT_f32_Variance>
 800214e:	eef0 7a40 	vmov.f32	s15, s0
 8002152:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002156:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800215a:	edc3 7a01 	vstr	s15, [r3, #4]
	Feat_Arr[RMS_IDX]   = FEAT_EXT_f32_RMS(Feat_Arr[VAR_IDX]);
 800215e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002162:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002166:	edd3 7a01 	vldr	s15, [r3, #4]
 800216a:	eeb0 0a67 	vmov.f32	s0, s15
 800216e:	f7ff f826 	bl	80011be <FEAT_EXT_f32_RMS>
 8002172:	eef0 7a40 	vmov.f32	s15, s0
 8002176:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800217a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800217e:	edc3 7a00 	vstr	s15, [r3]
	Feat_Arr[MEAN_IDX]  = FEAT_EXT_f32_MeanAbsolute(Move2,250);
 8002182:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8002186:	21fa      	movs	r1, #250	; 0xfa
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff f8c3 	bl	8001314 <FEAT_EXT_f32_MeanAbsolute>
 800218e:	eef0 7a40 	vmov.f32	s15, s0
 8002192:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002196:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800219a:	edc3 7a02 	vstr	s15, [r3, #8]
	Feat_Arr[SSC_INDX]  = FEAT_EXT_u32_SlopeSignChange(Move2,250);
 800219e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80021a2:	21fa      	movs	r1, #250	; 0xfa
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fe6d 	bl	8000e84 <FEAT_EXT_u32_SlopeSignChange>
 80021aa:	ee07 0a90 	vmov	s15, r0
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80021b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021ba:	edc3 7a03 	vstr	s15, [r3, #12]
	Feat_Arr[ZC_IDX]    = FEAT_EXT_u32_ZeroCrossing(Move2,250);
 80021be:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80021c2:	21fa      	movs	r1, #250	; 0xfa
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe feff 	bl	8000fc8 <FEAT_EXT_u32_ZeroCrossing>
 80021ca:	ee07 0a90 	vmov	s15, r0
 80021ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80021d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021da:	edc3 7a04 	vstr	s15, [r3, #16]
	Feat_Arr[WVL_IDX]   = FEAT_EXT_u32_WaveformLength(Move2,250);
 80021de:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80021e2:	21fa      	movs	r1, #250	; 0xfa
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe ff65 	bl	80010b4 <FEAT_EXT_u32_WaveformLength>
 80021ea:	ee07 0a90 	vmov	s15, r0
 80021ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80021f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80021fa:	edc3 7a05 	vstr	s15, [r3, #20]

	/*Normalization*/
	Norm_Arr[VAR_IDX]  = NORM_f32_Variance(SNS1, Feat_Arr[VAR_IDX]);
 80021fe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002202:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002206:	edd3 7a01 	vldr	s15, [r3, #4]
 800220a:	eeb0 0a67 	vmov.f32	s0, s15
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff faaa 	bl	8001768 <NORM_f32_Variance>
 8002214:	eef0 7a40 	vmov.f32	s15, s0
 8002218:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800221c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002220:	edc3 7a01 	vstr	s15, [r3, #4]
	Norm_Arr[RMS_IDX]  = NORM_f32_RMS(SNS1, Feat_Arr[RMS_IDX]);
 8002224:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002228:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb0 0a67 	vmov.f32	s0, s15
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff fa1b 	bl	8001670 <NORM_f32_RMS>
 800223a:	eef0 7a40 	vmov.f32	s15, s0
 800223e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002242:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002246:	edc3 7a00 	vstr	s15, [r3]
	Norm_Arr[MEAN_IDX] = NORM_f32_Mean(SNS1, Feat_Arr[MEAN_IDX]);
 800224a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800224e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002252:	edd3 7a02 	vldr	s15, [r3, #8]
 8002256:	eeb0 0a67 	vmov.f32	s0, s15
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff fafc 	bl	8001858 <NORM_f32_Mean>
 8002260:	eef0 7a40 	vmov.f32	s15, s0
 8002264:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002268:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800226c:	edc3 7a02 	vstr	s15, [r3, #8]
	Norm_Arr[SSC_INDX] = NORM_f32_SlopeSignChange(SNS1,Feat_Arr[SSC_INDX]);
 8002270:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002274:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002278:	edd3 7a03 	vldr	s15, [r3, #12]
 800227c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002280:	ee17 1a90 	vmov	r1, s15
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff f89f 	bl	80013c8 <NORM_f32_SlopeSignChange>
 800228a:	eef0 7a40 	vmov.f32	s15, s0
 800228e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002292:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002296:	edc3 7a03 	vstr	s15, [r3, #12]
	Norm_Arr[ZC_IDX]   = NORM_f32_ZeroCrossing(SNS1,Feat_Arr[ZC_IDX]);
 800229a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800229e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80022a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022aa:	ee17 1a90 	vmov	r1, s15
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff f902 	bl	80014b8 <NORM_f32_ZeroCrossing>
 80022b4:	eef0 7a40 	vmov.f32	s15, s0
 80022b8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80022bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022c0:	edc3 7a04 	vstr	s15, [r3, #16]
	Norm_Arr[WVL_IDX]  = NORM_f32_WaveformLength(SNS1, Feat_Arr[WVL_IDX]);
 80022c4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80022c8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80022d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022d4:	ee17 1a90 	vmov	r1, s15
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff f951 	bl	8001580 <NORM_f32_WaveformLength>
 80022de:	eef0 7a40 	vmov.f32	s15, s0
 80022e2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80022e6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022ea:	edc3 7a05 	vstr	s15, [r3, #20]

	/*Model Running*/

	/*Movement 1 Data*/
	in_data[RMS_IDX]  = Norm_Arr[RMS_IDX];
 80022ee:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80022f2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a40      	ldr	r2, [pc, #256]	; (80023fc <main+0x43c>)
 80022fa:	6013      	str	r3, [r2, #0]
	in_data[VAR_IDX]  = Norm_Arr[VAR_IDX];
 80022fc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002300:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <main+0x43c>)
 8002308:	6053      	str	r3, [r2, #4]
	in_data[MEAN_IDX] = Norm_Arr[MEAN_IDX];
 800230a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800230e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a39      	ldr	r2, [pc, #228]	; (80023fc <main+0x43c>)
 8002316:	6093      	str	r3, [r2, #8]
	in_data[SSC_INDX] = Norm_Arr[SSC_INDX];
 8002318:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800231c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	4a36      	ldr	r2, [pc, #216]	; (80023fc <main+0x43c>)
 8002324:	60d3      	str	r3, [r2, #12]
	in_data[ZC_IDX]   = Norm_Arr[ZC_IDX];
 8002326:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800232a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	4a32      	ldr	r2, [pc, #200]	; (80023fc <main+0x43c>)
 8002332:	6113      	str	r3, [r2, #16]
	in_data[WVL_IDX]  = Norm_Arr[WVL_IDX];
 8002334:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002338:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	4a2f      	ldr	r2, [pc, #188]	; (80023fc <main+0x43c>)
 8002340:	6153      	str	r3, [r2, #20]

	Model_Run(in_data, out_data);
 8002342:	492f      	ldr	r1, [pc, #188]	; (8002400 <main+0x440>)
 8002344:	482d      	ldr	r0, [pc, #180]	; (80023fc <main+0x43c>)
 8002346:	f7ff fe0f 	bl	8001f68 <Model_Run>

	Local_u8Max = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002350:	f102 021f 	add.w	r2, r2, #31
 8002354:	7013      	strb	r3, [r2, #0]
	for(int i = 0 ;i < 3; i++)
 8002356:	2300      	movs	r3, #0
 8002358:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800235c:	f102 0214 	add.w	r2, r2, #20
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e02d      	b.n	80023c0 <main+0x400>
	{
		if(out_data[i] > out_data[Local_u8Max])
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <main+0x440>)
 8002366:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800236a:	f103 0314 	add.w	r3, r3, #20
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	ed93 7a00 	vldr	s14, [r3]
 8002378:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800237c:	f103 031f 	add.w	r3, r3, #31
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <main+0x440>)
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	dd09      	ble.n	80023aa <main+0x3ea>
		{
			Local_u8Max = i;
 8002396:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800239a:	f103 0314 	add.w	r3, r3, #20
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80023a4:	f102 021f 	add.w	r2, r2, #31
 80023a8:	7013      	strb	r3, [r2, #0]
	for(int i = 0 ;i < 3; i++)
 80023aa:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80023ae:	f103 0314 	add.w	r3, r3, #20
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80023ba:	f102 0214 	add.w	r2, r2, #20
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80023c4:	f103 0314 	add.w	r3, r3, #20
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	ddca      	ble.n	8002364 <main+0x3a4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//		for(Local_u32AvgCounter = 0 ; Local_u32AvgCounter < Local_u8Avg ; Local_u32AvgCounter++)
		//		{
		for(Local_u32Counter = 0 ;Local_u32Counter < 250;)
 80023ce:	2300      	movs	r3, #0
 80023d0:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80023d4:	f102 0218 	add.w	r2, r2, #24
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e02f      	b.n	800243c <main+0x47c>
 80023dc:	200007a0 	.word	0x200007a0
 80023e0:	200007e8 	.word	0x200007e8
 80023e4:	20000878 	.word	0x20000878
 80023e8:	200008c0 	.word	0x200008c0
 80023ec:	20000758 	.word	0x20000758
 80023f0:	20000830 	.word	0x20000830
 80023f4:	08009b00 	.word	0x08009b00
 80023f8:	08009ee8 	.word	0x08009ee8
 80023fc:	20000720 	.word	0x20000720
 8002400:	20000740 	.word	0x20000740
		{
			//			if(sensor != 0)
			//			{
			sensor = analogRead(&hadc1);
 8002404:	4899      	ldr	r0, [pc, #612]	; (800266c <main+0x6ac>)
 8002406:	f000 fb83 	bl	8002b10 <analogRead>
 800240a:	4603      	mov	r3, r0
 800240c:	4a98      	ldr	r2, [pc, #608]	; (8002670 <main+0x6b0>)
 800240e:	6013      	str	r3, [r2, #0]
			Local_u32_RealData[Local_u32Counter++]= sensor;
 8002410:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002414:	f103 0318 	add.w	r3, r3, #24
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 8002420:	f101 0118 	add.w	r1, r1, #24
 8002424:	600a      	str	r2, [r1, #0]
 8002426:	4a92      	ldr	r2, [pc, #584]	; (8002670 <main+0x6b0>)
 8002428:	6811      	ldr	r1, [r2, #0]
 800242a:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800242e:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8002432:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			HAL_Delay(2);
 8002436:	2002      	movs	r0, #2
 8002438:	f001 f892 	bl	8003560 <HAL_Delay>
		for(Local_u32Counter = 0 ;Local_u32Counter < 250;)
 800243c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002440:	f103 0318 	add.w	r3, r3, #24
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2bf9      	cmp	r3, #249	; 0xf9
 8002448:	d9dc      	bls.n	8002404 <main+0x444>
			//			}
		}

		/*Feature Extraction*/
		Feat_Arr[VAR_IDX]	= FEAT_EXT_f32_Variance(Local_u32_RealData,250);
 800244a:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 800244e:	21fa      	movs	r1, #250	; 0xfa
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fec9 	bl	80011e8 <FEAT_EXT_f32_Variance>
 8002456:	eef0 7a40 	vmov.f32	s15, s0
 800245a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800245e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002462:	edc3 7a01 	vstr	s15, [r3, #4]
		Feat_Arr[RMS_IDX]   = FEAT_EXT_f32_RMS(Feat_Arr[VAR_IDX]);
 8002466:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800246a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800246e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002472:	eeb0 0a67 	vmov.f32	s0, s15
 8002476:	f7fe fea2 	bl	80011be <FEAT_EXT_f32_RMS>
 800247a:	eef0 7a40 	vmov.f32	s15, s0
 800247e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002482:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002486:	edc3 7a00 	vstr	s15, [r3]
		Feat_Arr[MEAN_IDX]  = FEAT_EXT_f32_MeanAbsolute(Local_u32_RealData,250);
 800248a:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 800248e:	21fa      	movs	r1, #250	; 0xfa
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe ff3f 	bl	8001314 <FEAT_EXT_f32_MeanAbsolute>
 8002496:	eef0 7a40 	vmov.f32	s15, s0
 800249a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800249e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024a2:	edc3 7a02 	vstr	s15, [r3, #8]
		Feat_Arr[SSC_INDX]  = FEAT_EXT_u32_SlopeSignChange(Local_u32_RealData,250);
 80024a6:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 80024aa:	21fa      	movs	r1, #250	; 0xfa
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fce9 	bl	8000e84 <FEAT_EXT_u32_SlopeSignChange>
 80024b2:	ee07 0a90 	vmov	s15, r0
 80024b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ba:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80024be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024c2:	edc3 7a03 	vstr	s15, [r3, #12]
		Feat_Arr[ZC_IDX]    = FEAT_EXT_u32_ZeroCrossing(Local_u32_RealData,250);
 80024c6:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 80024ca:	21fa      	movs	r1, #250	; 0xfa
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fd7b 	bl	8000fc8 <FEAT_EXT_u32_ZeroCrossing>
 80024d2:	ee07 0a90 	vmov	s15, r0
 80024d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024da:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80024de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80024e2:	edc3 7a04 	vstr	s15, [r3, #16]
		Feat_Arr[WVL_IDX]   = FEAT_EXT_u32_WaveformLength(Local_u32_RealData,250);
 80024e6:	f607 5378 	addw	r3, r7, #3448	; 0xd78
 80024ea:	21fa      	movs	r1, #250	; 0xfa
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fde1 	bl	80010b4 <FEAT_EXT_u32_WaveformLength>
 80024f2:	ee07 0a90 	vmov	s15, r0
 80024f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fa:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80024fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002502:	edc3 7a05 	vstr	s15, [r3, #20]

		/*Normalization*/
		Norm_Arr[VAR_IDX]  = NORM_f32_Variance(SNS1, Feat_Arr[VAR_IDX]);
 8002506:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800250a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800250e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002512:	eeb0 0a67 	vmov.f32	s0, s15
 8002516:	2000      	movs	r0, #0
 8002518:	f7ff f926 	bl	8001768 <NORM_f32_Variance>
 800251c:	eef0 7a40 	vmov.f32	s15, s0
 8002520:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002524:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002528:	edc3 7a01 	vstr	s15, [r3, #4]
		Norm_Arr[RMS_IDX]  = NORM_f32_RMS(SNS1, Feat_Arr[RMS_IDX]);
 800252c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002530:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	eeb0 0a67 	vmov.f32	s0, s15
 800253c:	2000      	movs	r0, #0
 800253e:	f7ff f897 	bl	8001670 <NORM_f32_RMS>
 8002542:	eef0 7a40 	vmov.f32	s15, s0
 8002546:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800254a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800254e:	edc3 7a00 	vstr	s15, [r3]
		Norm_Arr[MEAN_IDX] = NORM_f32_Mean(SNS1, Feat_Arr[MEAN_IDX]);
 8002552:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002556:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800255a:	edd3 7a02 	vldr	s15, [r3, #8]
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff f978 	bl	8001858 <NORM_f32_Mean>
 8002568:	eef0 7a40 	vmov.f32	s15, s0
 800256c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002570:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002574:	edc3 7a02 	vstr	s15, [r3, #8]
		Norm_Arr[SSC_INDX] = NORM_f32_SlopeSignChange(SNS1,Feat_Arr[SSC_INDX]);
 8002578:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800257c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002580:	edd3 7a03 	vldr	s15, [r3, #12]
 8002584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002588:	ee17 1a90 	vmov	r1, s15
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe ff1b 	bl	80013c8 <NORM_f32_SlopeSignChange>
 8002592:	eef0 7a40 	vmov.f32	s15, s0
 8002596:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800259a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800259e:	edc3 7a03 	vstr	s15, [r3, #12]
		Norm_Arr[ZC_IDX]   = NORM_f32_ZeroCrossing(SNS1,Feat_Arr[ZC_IDX]);
 80025a2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80025a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80025ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b2:	ee17 1a90 	vmov	r1, s15
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe ff7e 	bl	80014b8 <NORM_f32_ZeroCrossing>
 80025bc:	eef0 7a40 	vmov.f32	s15, s0
 80025c0:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80025c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025c8:	edc3 7a04 	vstr	s15, [r3, #16]
		Norm_Arr[WVL_IDX]  = NORM_f32_WaveformLength(SNS1, Feat_Arr[WVL_IDX]);
 80025cc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80025d0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80025d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80025d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025dc:	ee17 1a90 	vmov	r1, s15
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe ffcd 	bl	8001580 <NORM_f32_WaveformLength>
 80025e6:	eef0 7a40 	vmov.f32	s15, s0
 80025ea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80025ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025f2:	edc3 7a05 	vstr	s15, [r3, #20]

		/*Model Running*/

		/*Movement 1 Data*/
		in_data[RMS_IDX]  = Norm_Arr[RMS_IDX];
 80025f6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80025fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <main+0x6b4>)
 8002602:	6013      	str	r3, [r2, #0]
		in_data[VAR_IDX]  = Norm_Arr[VAR_IDX];
 8002604:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002608:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a19      	ldr	r2, [pc, #100]	; (8002674 <main+0x6b4>)
 8002610:	6053      	str	r3, [r2, #4]
		in_data[MEAN_IDX] = Norm_Arr[MEAN_IDX];
 8002612:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002616:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a15      	ldr	r2, [pc, #84]	; (8002674 <main+0x6b4>)
 800261e:	6093      	str	r3, [r2, #8]
		in_data[SSC_INDX] = Norm_Arr[SSC_INDX];
 8002620:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002624:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <main+0x6b4>)
 800262c:	60d3      	str	r3, [r2, #12]
		in_data[ZC_IDX]   = Norm_Arr[ZC_IDX];
 800262e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002632:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4a0e      	ldr	r2, [pc, #56]	; (8002674 <main+0x6b4>)
 800263a:	6113      	str	r3, [r2, #16]
		in_data[WVL_IDX]  = Norm_Arr[WVL_IDX];
 800263c:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8002640:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <main+0x6b4>)
 8002648:	6153      	str	r3, [r2, #20]

		Model_Run(in_data, out_data);
 800264a:	490b      	ldr	r1, [pc, #44]	; (8002678 <main+0x6b8>)
 800264c:	4809      	ldr	r0, [pc, #36]	; (8002674 <main+0x6b4>)
 800264e:	f7ff fc8b 	bl	8001f68 <Model_Run>
		Local_u8Max = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002658:	f102 021f 	add.w	r2, r2, #31
 800265c:	7013      	strb	r3, [r2, #0]
		for(int i = 0 ;i < 3; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002664:	f102 0210 	add.w	r2, r2, #16
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e035      	b.n	80026d8 <main+0x718>
 800266c:	200005dc 	.word	0x200005dc
 8002670:	200006bc 	.word	0x200006bc
 8002674:	20000720 	.word	0x20000720
 8002678:	20000740 	.word	0x20000740
		{
			if(out_data[i] > out_data[Local_u8Max])
 800267c:	4a9e      	ldr	r2, [pc, #632]	; (80028f8 <main+0x938>)
 800267e:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002682:	f103 0310 	add.w	r3, r3, #16
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002694:	f103 031f 	add.w	r3, r3, #31
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4a97      	ldr	r2, [pc, #604]	; (80028f8 <main+0x938>)
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	dd09      	ble.n	80026c2 <main+0x702>
			{
				Local_u8Max = i;
 80026ae:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80026b2:	f103 0310 	add.w	r3, r3, #16
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80026bc:	f102 021f 	add.w	r2, r2, #31
 80026c0:	7013      	strb	r3, [r2, #0]
		for(int i = 0 ;i < 3; i++)
 80026c2:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80026c6:	f103 0310 	add.w	r3, r3, #16
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80026d2:	f102 0210 	add.w	r2, r2, #16
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80026dc:	f103 0310 	add.w	r3, r3, #16
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	ddca      	ble.n	800267c <main+0x6bc>
			}
		}
		if(Local_u8Max == 0)
 80026e6:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80026ea:	f103 031f 	add.w	r3, r3, #31
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d17c      	bne.n	80027ee <main+0x82e>
		{
			Servo_void_SetAngle(Servo1,100);
 80026f4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80026f8:	f5a3 668b 	sub.w	r6, r3, #1112	; 0x458
 80026fc:	2364      	movs	r3, #100	; 0x64
 80026fe:	9310      	str	r3, [sp, #64]	; 0x40
 8002700:	466d      	mov	r5, sp
 8002702:	f106 0410 	add.w	r4, r6, #16
 8002706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800270a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800270c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800270e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002712:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002716:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800271a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800271e:	f000 fa27 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo2,120);
 8002722:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002726:	f5a3 6695 	sub.w	r6, r3, #1192	; 0x4a8
 800272a:	2378      	movs	r3, #120	; 0x78
 800272c:	9310      	str	r3, [sp, #64]	; 0x40
 800272e:	466d      	mov	r5, sp
 8002730:	f106 0410 	add.w	r4, r6, #16
 8002734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002744:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002748:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800274c:	f000 fa10 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo3,170);
 8002750:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002754:	f5a3 669f 	sub.w	r6, r3, #1272	; 0x4f8
 8002758:	23aa      	movs	r3, #170	; 0xaa
 800275a:	9310      	str	r3, [sp, #64]	; 0x40
 800275c:	466d      	mov	r5, sp
 800275e:	f106 0410 	add.w	r4, r6, #16
 8002762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800276e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002772:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002776:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800277a:	f000 f9f9 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo4,20);
 800277e:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002782:	f5a3 66a9 	sub.w	r6, r3, #1352	; 0x548
 8002786:	2314      	movs	r3, #20
 8002788:	9310      	str	r3, [sp, #64]	; 0x40
 800278a:	466d      	mov	r5, sp
 800278c:	f106 0410 	add.w	r4, r6, #16
 8002790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800279c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027a4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80027a8:	f000 f9e2 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo5,120);
 80027ac:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80027b0:	f5a3 66b3 	sub.w	r6, r3, #1432	; 0x598
 80027b4:	2378      	movs	r3, #120	; 0x78
 80027b6:	9310      	str	r3, [sp, #64]	; 0x40
 80027b8:	466d      	mov	r5, sp
 80027ba:	f106 0410 	add.w	r4, r6, #16
 80027be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80027d6:	f000 f9cb 	bl	8002b70 <Servo_void_SetAngle>

			Fest = 100;
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <main+0x93c>)
 80027dc:	2264      	movs	r2, #100	; 0x64
 80027de:	601a      	str	r2, [r3, #0]
			Gun = 0;
 80027e0:	4b47      	ldr	r3, [pc, #284]	; (8002900 <main+0x940>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
			Rest = 0;
 80027e6:	4b47      	ldr	r3, [pc, #284]	; (8002904 <main+0x944>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e108      	b.n	8002a00 <main+0xa40>
		}
		else if(Local_u8Max == 1)
 80027ee:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80027f2:	f103 031f 	add.w	r3, r3, #31
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	f040 8085 	bne.w	8002908 <main+0x948>
		{
			Servo_void_SetAngle(Servo1,170);
 80027fe:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002802:	f5a3 668b 	sub.w	r6, r3, #1112	; 0x458
 8002806:	23aa      	movs	r3, #170	; 0xaa
 8002808:	9310      	str	r3, [sp, #64]	; 0x40
 800280a:	466d      	mov	r5, sp
 800280c:	f106 0410 	add.w	r4, r6, #16
 8002810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002820:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002824:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002828:	f000 f9a2 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo2,40);
 800282c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002830:	f5a3 6695 	sub.w	r6, r3, #1192	; 0x4a8
 8002834:	2328      	movs	r3, #40	; 0x28
 8002836:	9310      	str	r3, [sp, #64]	; 0x40
 8002838:	466d      	mov	r5, sp
 800283a:	f106 0410 	add.w	r4, r6, #16
 800283e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800284a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800284e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002852:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002856:	f000 f98b 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo3,190);
 800285a:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800285e:	f5a3 669f 	sub.w	r6, r3, #1272	; 0x4f8
 8002862:	23be      	movs	r3, #190	; 0xbe
 8002864:	9310      	str	r3, [sp, #64]	; 0x40
 8002866:	466d      	mov	r5, sp
 8002868:	f106 0410 	add.w	r4, r6, #16
 800286c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002878:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800287c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002880:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002884:	f000 f974 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo4,10);
 8002888:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800288c:	f5a3 66a9 	sub.w	r6, r3, #1352	; 0x548
 8002890:	230a      	movs	r3, #10
 8002892:	9310      	str	r3, [sp, #64]	; 0x40
 8002894:	466d      	mov	r5, sp
 8002896:	f106 0410 	add.w	r4, r6, #16
 800289a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80028ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80028b2:	f000 f95d 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo5,140);
 80028b6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80028ba:	f5a3 66b3 	sub.w	r6, r3, #1432	; 0x598
 80028be:	238c      	movs	r3, #140	; 0x8c
 80028c0:	9310      	str	r3, [sp, #64]	; 0x40
 80028c2:	466d      	mov	r5, sp
 80028c4:	f106 0410 	add.w	r4, r6, #16
 80028c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80028dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80028e0:	f000 f946 	bl	8002b70 <Servo_void_SetAngle>

			Fest = 0;
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <main+0x93c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
			Gun = 100;
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <main+0x940>)
 80028ec:	2264      	movs	r2, #100	; 0x64
 80028ee:	601a      	str	r2, [r3, #0]
			Rest = 0;
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <main+0x944>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	e083      	b.n	8002a00 <main+0xa40>
 80028f8:	20000740 	.word	0x20000740
 80028fc:	200006c0 	.word	0x200006c0
 8002900:	200006c4 	.word	0x200006c4
 8002904:	200006c8 	.word	0x200006c8
		}
		else
		{
			Servo_void_SetAngle(Servo1,150);
 8002908:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800290c:	f5a3 668b 	sub.w	r6, r3, #1112	; 0x458
 8002910:	2396      	movs	r3, #150	; 0x96
 8002912:	9310      	str	r3, [sp, #64]	; 0x40
 8002914:	466d      	mov	r5, sp
 8002916:	f106 0410 	add.w	r4, r6, #16
 800291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002926:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800292a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800292e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002932:	f000 f91d 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo2,60);
 8002936:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800293a:	f5a3 6695 	sub.w	r6, r3, #1192	; 0x4a8
 800293e:	233c      	movs	r3, #60	; 0x3c
 8002940:	9310      	str	r3, [sp, #64]	; 0x40
 8002942:	466d      	mov	r5, sp
 8002944:	f106 0410 	add.w	r4, r6, #16
 8002948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002954:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002958:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800295c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002960:	f000 f906 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo3,80);
 8002964:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002968:	f5a3 669f 	sub.w	r6, r3, #1272	; 0x4f8
 800296c:	2350      	movs	r3, #80	; 0x50
 800296e:	9310      	str	r3, [sp, #64]	; 0x40
 8002970:	466d      	mov	r5, sp
 8002972:	f106 0410 	add.w	r4, r6, #16
 8002976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002982:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002986:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800298a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800298e:	f000 f8ef 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo4,80);
 8002992:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8002996:	f5a3 66a9 	sub.w	r6, r3, #1352	; 0x548
 800299a:	2350      	movs	r3, #80	; 0x50
 800299c:	9310      	str	r3, [sp, #64]	; 0x40
 800299e:	466d      	mov	r5, sp
 80029a0:	f106 0410 	add.w	r4, r6, #16
 80029a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029bc:	f000 f8d8 	bl	8002b70 <Servo_void_SetAngle>
			Servo_void_SetAngle(Servo5,70);
 80029c0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80029c4:	f5a3 66b3 	sub.w	r6, r3, #1432	; 0x598
 80029c8:	2346      	movs	r3, #70	; 0x46
 80029ca:	9310      	str	r3, [sp, #64]	; 0x40
 80029cc:	466d      	mov	r5, sp
 80029ce:	f106 0410 	add.w	r4, r6, #16
 80029d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80029e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80029e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80029ea:	f000 f8c1 	bl	8002b70 <Servo_void_SetAngle>
			Fest = 0;
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <main+0xa5c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
			Gun = 0;
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <main+0xa60>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
			Rest = 100;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <main+0xa64>)
 80029fc:	2264      	movs	r2, #100	; 0x64
 80029fe:	601a      	str	r2, [r3, #0]
		//		{
		//			Fest = 0;
		//			Gun = 0;
		//			Rest = 100;
		//		}
		HAL_Delay(500);
 8002a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a04:	f000 fdac 	bl	8003560 <HAL_Delay>
		Mode = 0;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <main+0xa68>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
		Local_u8Sum = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002a14:	f102 0203 	add.w	r2, r2, #3
 8002a18:	7013      	strb	r3, [r2, #0]
		for(Local_u32Counter = 0 ;Local_u32Counter < 250;)
 8002a1a:	e4d8      	b.n	80023ce <main+0x40e>
 8002a1c:	200006c0 	.word	0x200006c0
 8002a20:	200006c4 	.word	0x200006c4
 8002a24:	200006c8 	.word	0x200006c8
 8002a28:	200006cc 	.word	0x200006cc

08002a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b094      	sub	sp, #80	; 0x50
 8002a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a32:	f107 031c 	add.w	r3, r7, #28
 8002a36:	2234      	movs	r2, #52	; 0x34
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f005 ffdc 	bl	80089f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	2300      	movs	r3, #0
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <SystemClock_Config+0xd0>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <SystemClock_Config+0xd0>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a60:	4b26      	ldr	r3, [pc, #152]	; (8002afc <SystemClock_Config+0xd0>)
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <SystemClock_Config+0xd4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a78:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <SystemClock_Config+0xd4>)
 8002a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <SystemClock_Config+0xd4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a90:	2301      	movs	r3, #1
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a94:	2310      	movs	r3, #16
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002aa4:	235a      	movs	r3, #90	; 0x5a
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002aac:	2302      	movs	r3, #2
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 f8d5 	bl	8004c68 <HAL_RCC_OscConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002ac4:	f000 f81e 	bl	8002b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac8:	230f      	movs	r3, #15
 8002aca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002acc:	2302      	movs	r3, #2
 8002ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ad4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ad8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ade:	f107 0308 	add.w	r3, r7, #8
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 fd75 	bl	80045d4 <HAL_RCC_ClockConfig>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002af0:	f000 f808 	bl	8002b04 <Error_Handler>
  }
}
 8002af4:	bf00      	nop
 8002af6:	3750      	adds	r7, #80	; 0x50
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40007000 	.word	0x40007000

08002b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b08:	b672      	cpsid	i
}
 8002b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002b0c:	e7fe      	b.n	8002b0c <Error_Handler+0x8>
	...

08002b10 <analogRead>:
 */

#include "sensor_readings.h"
ADC_HandleTypeDef* hadc_g; // hold the address from the argument of the function
uint32_t analogRead(ADC_HandleTypeDef* hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	// Get ADC value
	hadc_g = hadc;
 8002b18:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <analogRead+0x5c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6013      	str	r3, [r2, #0]
	uint32_t raw;

	if(HAL_ADC_Start(hadc_g) != HAL_OK)
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <analogRead+0x5c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fd84 	bl	8003630 <HAL_ADC_Start>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <analogRead+0x22>
		Error_Handler();
 8002b2e:	f7ff ffe9 	bl	8002b04 <Error_Handler>

	HAL_ADC_PollForConversion(hadc_g, HAL_MAX_DELAY);
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <analogRead+0x5c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f04f 31ff 	mov.w	r1, #4294967295
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fe4a 	bl	80037d4 <HAL_ADC_PollForConversion>

	if((HAL_ADC_GetState(hadc_g) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 8002b40:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <analogRead+0x5c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f001 f93d 	bl	8003dc4 <HAL_ADC_GetState>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	d105      	bne.n	8002b62 <analogRead+0x52>
		raw = HAL_ADC_GetValue(hadc_g);
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <analogRead+0x5c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 ffd5 	bl	8003b0a <HAL_ADC_GetValue>
 8002b60:	60f8      	str	r0, [r7, #12]

	return raw;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000754 	.word	0x20000754

08002b70 <Servo_void_SetAngle>:
#include "servo.h"
#include "MAPPING.h"


void Servo_void_SetAngle(SERVO_t Copy_ServoMotor,uint32_t Copy_int32_Angle)
{
 8002b70:	b084      	sub	sp, #16
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af02      	add	r7, sp, #8
 8002b78:	f107 0c10 	add.w	ip, r7, #16
 8002b7c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t Local_int32_MappedValue;

	Local_int32_MappedValue = Mapping(SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_INPUT, SERVO_MAX_INPUT, SERVO_MIN_INPUT,Copy_int32_Angle);
 8002b80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	2319      	movs	r3, #25
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	237d      	movs	r3, #125	; 0x7d
 8002b8a:	2219      	movs	r2, #25
 8002b8c:	21b4      	movs	r1, #180	; 0xb4
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fe fbf9 	bl	8001386 <Mapping>
 8002b94:	4603      	mov	r3, r0
 8002b96:	607b      	str	r3, [r7, #4]

	switch(Copy_ServoMotor.Pin)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d843      	bhi.n	8002c26 <Servo_void_SetAngle+0xb6>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <Servo_void_SetAngle+0x34>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bb9 	.word	0x08002bb9
 8002ba8:	08002bcf 	.word	0x08002bcf
 8002bac:	08002be5 	.word	0x08002be5
 8002bb0:	08002bfb 	.word	0x08002bfb
 8002bb4:	08002c11 	.word	0x08002c11
	{
	case Servo_PA15 : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel1;break;
 8002bb8:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <Servo_void_SetAngle+0xd4>)
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	2248      	movs	r2, #72	; 0x48
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f005 ff0a 	bl	80089dc <memcpy>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bcc:	e02b      	b.n	8002c26 <Servo_void_SetAngle+0xb6>
	case Servo_PB2  : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel4;break;
 8002bce:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <Servo_void_SetAngle+0xd4>)
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	2248      	movs	r2, #72	; 0x48
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f005 feff 	bl	80089dc <memcpy>
 8002bde:	2303      	movs	r3, #3
 8002be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002be2:	e020      	b.n	8002c26 <Servo_void_SetAngle+0xb6>
	case Servo_PB9  : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel2;break;
 8002be4:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <Servo_void_SetAngle+0xd4>)
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4611      	mov	r1, r2
 8002bec:	2248      	movs	r2, #72	; 0x48
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f005 fef4 	bl	80089dc <memcpy>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bf8:	e015      	b.n	8002c26 <Servo_void_SetAngle+0xb6>
	case Servo_PB10 : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel3;break;
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <Servo_void_SetAngle+0xd4>)
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4611      	mov	r1, r2
 8002c02:	2248      	movs	r2, #72	; 0x48
 8002c04:	4618      	mov	r0, r3
 8002c06:	f005 fee9 	bl	80089dc <memcpy>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c0e:	e00a      	b.n	8002c26 <Servo_void_SetAngle+0xb6>
	case Servo_PB14 : Copy_ServoMotor.htim = htim12; Copy_ServoMotor.Channel = PWM_Channel1;break;
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <Servo_void_SetAngle+0xd8>)
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4611      	mov	r1, r2
 8002c18:	2248      	movs	r2, #72	; 0x48
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f005 fede 	bl	80089dc <memcpy>
 8002c20:	2300      	movs	r3, #0
 8002c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c24:	bf00      	nop

	}
	PWM_int32SetPWMValue(Copy_ServoMotor.htim.Instance, Copy_ServoMotor.Channel, Local_int32_MappedValue);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fe8a 	bl	8001948 <PWM_int32SetPWMValue>

}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c3e:	b004      	add	sp, #16
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000758 	.word	0x20000758
 8002c48:	20000830 	.word	0x20000830

08002c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_MspInit+0x4c>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f001 fa7c 	bl	8004188 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800

08002c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <NMI_Handler+0x4>

08002ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca6:	e7fe      	b.n	8002ca6 <HardFault_Handler+0x4>

08002ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cac:	e7fe      	b.n	8002cac <MemManage_Handler+0x4>

08002cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb2:	e7fe      	b.n	8002cb2 <BusFault_Handler+0x4>

08002cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <UsageFault_Handler+0x4>

08002cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce8:	f000 fc1a 	bl	8003520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cf4:	4805      	ldr	r0, [pc, #20]	; (8002d0c <ADC_IRQHandler+0x1c>)
 8002cf6:	f000 fdf8 	bl	80038ea <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002cfa:	4805      	ldr	r0, [pc, #20]	; (8002d10 <ADC_IRQHandler+0x20>)
 8002cfc:	f000 fdf5 	bl	80038ea <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002d00:	4804      	ldr	r0, [pc, #16]	; (8002d14 <ADC_IRQHandler+0x24>)
 8002d02:	f000 fdf2 	bl	80038ea <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200005dc 	.word	0x200005dc
 8002d10:	20000624 	.word	0x20000624
 8002d14:	2000066c 	.word	0x2000066c

08002d18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d1e:	f002 fc23 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200007a0 	.word	0x200007a0

08002d2c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002d32:	f002 fc19 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200007e8 	.word	0x200007e8

08002d40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d44:	4802      	ldr	r0, [pc, #8]	; (8002d50 <TIM2_IRQHandler+0x10>)
 8002d46:	f002 fc0f 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000758 	.word	0x20000758

08002d54 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002d58:	4802      	ldr	r0, [pc, #8]	; (8002d64 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002d5a:	f002 fc05 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000830 	.word	0x20000830

08002d68 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002d6e:	f002 fbfb 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000878 	.word	0x20000878

08002d7c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002d82:	f002 fbf1 	bl	8005568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200008c0 	.word	0x200008c0

08002d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <SystemInit+0x20>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <SystemInit+0x20>)
 8002d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08e      	sub	sp, #56	; 0x38
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc8:	f107 0320 	add.w	r3, r7, #32
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
 8002de0:	615a      	str	r2, [r3, #20]
 8002de2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002de4:	4b3e      	ldr	r3, [pc, #248]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002de6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8002dec:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002dee:	f240 3283 	movw	r2, #899	; 0x383
 8002df2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df4:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002dfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e02:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e0e:	4834      	ldr	r0, [pc, #208]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002e10:	f002 f9c8 	bl	80051a4 <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e1a:	f7ff fe73 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e28:	4619      	mov	r1, r3
 8002e2a:	482d      	ldr	r0, [pc, #180]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002e2c:	f002 fd66 	bl	80058fc <HAL_TIM_ConfigClockSource>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002e36:	f7ff fe65 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e3a:	4829      	ldr	r0, [pc, #164]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002e3c:	f002 fa72 	bl	8005324 <HAL_TIM_PWM_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002e46:	f7ff fe5d 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e52:	f107 0320 	add.w	r3, r7, #32
 8002e56:	4619      	mov	r1, r3
 8002e58:	4821      	ldr	r0, [pc, #132]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002e5a:	f003 f94f 	bl	80060fc <HAL_TIMEx_MasterConfigSynchronization>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002e64:	f7ff fe4e 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e68:	2360      	movs	r3, #96	; 0x60
 8002e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4818      	ldr	r0, [pc, #96]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002e80:	f002 fc7a 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002e8a:	f7ff fe3b 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	2204      	movs	r2, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002e96:	f002 fc6f 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002ea0:	f7ff fe30 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002eac:	f002 fc64 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002eb6:	f7ff fe25 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	220c      	movs	r2, #12
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002ec2:	f002 fc59 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002ecc:	f7ff fe1a 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ed0:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <MX_TIM2_Init+0x12c>)
 8002ed2:	f000 f9b7 	bl	8003244 <HAL_TIM_MspPostInit>

}
 8002ed6:	bf00      	nop
 8002ed8:	3738      	adds	r7, #56	; 0x38
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000758 	.word	0x20000758

08002ee4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ee8:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_TIM10_Init+0x40>)
 8002eea:	4a0f      	ldr	r2, [pc, #60]	; (8002f28 <MX_TIM10_Init+0x44>)
 8002eec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <MX_TIM10_Init+0x40>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_TIM10_Init+0x40>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <MX_TIM10_Init+0x40>)
 8002efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f00:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_TIM10_Init+0x40>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_TIM10_Init+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_TIM10_Init+0x40>)
 8002f10:	f002 f948 	bl	80051a4 <HAL_TIM_Base_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002f1a:	f7ff fdf3 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200007a0 	.word	0x200007a0
 8002f28:	40014400 	.word	0x40014400

08002f2c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <MX_TIM11_Init+0x40>)
 8002f32:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <MX_TIM11_Init+0x44>)
 8002f34:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <MX_TIM11_Init+0x40>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <MX_TIM11_Init+0x40>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <MX_TIM11_Init+0x40>)
 8002f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f48:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <MX_TIM11_Init+0x40>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <MX_TIM11_Init+0x40>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002f56:	4805      	ldr	r0, [pc, #20]	; (8002f6c <MX_TIM11_Init+0x40>)
 8002f58:	f002 f924 	bl	80051a4 <HAL_TIM_Base_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002f62:	f7ff fdcf 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200007e8 	.word	0x200007e8
 8002f70:	40014800 	.word	0x40014800

08002f74 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08c      	sub	sp, #48	; 0x30
 8002f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f7a:	f107 0320 	add.w	r3, r7, #32
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	609a      	str	r2, [r3, #8]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	611a      	str	r2, [r3, #16]
 8002f96:	615a      	str	r2, [r3, #20]
 8002f98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002f9c:	4a26      	ldr	r2, [pc, #152]	; (8003038 <MX_TIM12_Init+0xc4>)
 8002f9e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 900-1;
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002fa2:	f240 3283 	movw	r2, #899	; 0x383
 8002fa6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa8:	4b22      	ldr	r3, [pc, #136]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8002fae:	4b21      	ldr	r3, [pc, #132]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002fb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fb4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002fc2:	481c      	ldr	r0, [pc, #112]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002fc4:	f002 f8ee 	bl	80051a4 <HAL_TIM_Base_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8002fce:	f7ff fd99 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002fd8:	f107 0320 	add.w	r3, r7, #32
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4815      	ldr	r0, [pc, #84]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002fe0:	f002 fc8c 	bl	80058fc <HAL_TIM_ConfigClockSource>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8002fea:	f7ff fd8b 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002fee:	4811      	ldr	r0, [pc, #68]	; (8003034 <MX_TIM12_Init+0xc0>)
 8002ff0:	f002 f998 	bl	8005324 <HAL_TIM_PWM_Init>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002ffa:	f7ff fd83 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ffe:	2360      	movs	r3, #96	; 0x60
 8003000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	2200      	movs	r2, #0
 8003012:	4619      	mov	r1, r3
 8003014:	4807      	ldr	r0, [pc, #28]	; (8003034 <MX_TIM12_Init+0xc0>)
 8003016:	f002 fbaf 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8003020:	f7ff fd70 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8003024:	4803      	ldr	r0, [pc, #12]	; (8003034 <MX_TIM12_Init+0xc0>)
 8003026:	f000 f90d 	bl	8003244 <HAL_TIM_MspPostInit>

}
 800302a:	bf00      	nop
 800302c:	3730      	adds	r7, #48	; 0x30
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000830 	.word	0x20000830
 8003038:	40001800 	.word	0x40001800

0800303c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <MX_TIM13_Init+0x40>)
 8003042:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <MX_TIM13_Init+0x44>)
 8003044:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <MX_TIM13_Init+0x40>)
 8003048:	2200      	movs	r2, #0
 800304a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <MX_TIM13_Init+0x40>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <MX_TIM13_Init+0x40>)
 8003054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003058:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <MX_TIM13_Init+0x40>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <MX_TIM13_Init+0x40>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <MX_TIM13_Init+0x40>)
 8003068:	f002 f89c 	bl	80051a4 <HAL_TIM_Base_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8003072:	f7ff fd47 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000878 	.word	0x20000878
 8003080:	40001c00 	.word	0x40001c00

08003084 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <MX_TIM14_Init+0x40>)
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <MX_TIM14_Init+0x44>)
 800308c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800308e:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <MX_TIM14_Init+0x40>)
 8003090:	2200      	movs	r2, #0
 8003092:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <MX_TIM14_Init+0x40>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <MX_TIM14_Init+0x40>)
 800309c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030a0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <MX_TIM14_Init+0x40>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <MX_TIM14_Init+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80030ae:	4805      	ldr	r0, [pc, #20]	; (80030c4 <MX_TIM14_Init+0x40>)
 80030b0:	f002 f878 	bl	80051a4 <HAL_TIM_Base_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80030ba:	f7ff fd23 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200008c0 	.word	0x200008c0
 80030c8:	40002000 	.word	0x40002000

080030cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d116      	bne.n	800310c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	4b52      	ldr	r3, [pc, #328]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	4a51      	ldr	r2, [pc, #324]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6413      	str	r3, [r2, #64]	; 0x40
 80030ee:	4b4f      	ldr	r3, [pc, #316]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	61fb      	str	r3, [r7, #28]
 80030f8:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	201c      	movs	r0, #28
 8003100:	f001 f84d 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003104:	201c      	movs	r0, #28
 8003106:	f001 f866 	bl	80041d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800310a:	e08a      	b.n	8003222 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM10)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a47      	ldr	r2, [pc, #284]	; (8003230 <HAL_TIM_Base_MspInit+0x164>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d116      	bne.n	8003144 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4a43      	ldr	r2, [pc, #268]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003124:	6453      	str	r3, [r2, #68]	; 0x44
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2100      	movs	r1, #0
 8003136:	2019      	movs	r0, #25
 8003138:	f001 f831 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800313c:	2019      	movs	r0, #25
 800313e:	f001 f84a 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 8003142:	e06e      	b.n	8003222 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3a      	ldr	r2, [pc, #232]	; (8003234 <HAL_TIM_Base_MspInit+0x168>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d116      	bne.n	800317c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a35      	ldr	r2, [pc, #212]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	201a      	movs	r0, #26
 8003170:	f001 f815 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003174:	201a      	movs	r0, #26
 8003176:	f001 f82e 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 800317a:	e052      	b.n	8003222 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM12)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_TIM_Base_MspInit+0x16c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d116      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a27      	ldr	r2, [pc, #156]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	202b      	movs	r0, #43	; 0x2b
 80031a8:	f000 fff9 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80031ac:	202b      	movs	r0, #43	; 0x2b
 80031ae:	f001 f812 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 80031b2:	e036      	b.n	8003222 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM13)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a20      	ldr	r2, [pc, #128]	; (800323c <HAL_TIM_Base_MspInit+0x170>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d116      	bne.n	80031ec <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a19      	ldr	r2, [pc, #100]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80031da:	2200      	movs	r2, #0
 80031dc:	2100      	movs	r1, #0
 80031de:	202c      	movs	r0, #44	; 0x2c
 80031e0:	f000 ffdd 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80031e4:	202c      	movs	r0, #44	; 0x2c
 80031e6:	f000 fff6 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 80031ea:	e01a      	b.n	8003222 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM14)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a13      	ldr	r2, [pc, #76]	; (8003240 <HAL_TIM_Base_MspInit+0x174>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d115      	bne.n	8003222 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a0b      	ldr	r2, [pc, #44]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_TIM_Base_MspInit+0x160>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003212:	2200      	movs	r2, #0
 8003214:	2100      	movs	r1, #0
 8003216:	202d      	movs	r0, #45	; 0x2d
 8003218:	f000 ffc1 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800321c:	202d      	movs	r0, #45	; 0x2d
 800321e:	f000 ffda 	bl	80041d6 <HAL_NVIC_EnableIRQ>
}
 8003222:	bf00      	nop
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800
 8003238:	40001800 	.word	0x40001800
 800323c:	40001c00 	.word	0x40001c00
 8003240:	40002000 	.word	0x40002000

08003244 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d13e      	bne.n	80032e4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a31      	ldr	r2, [pc, #196]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	4a2a      	ldr	r2, [pc, #168]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_9;
 800329e:	f240 6304 	movw	r3, #1540	; 0x604
 80032a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032b0:	2301      	movs	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4619      	mov	r1, r3
 80032ba:	481f      	ldr	r0, [pc, #124]	; (8003338 <HAL_TIM_MspPostInit+0xf4>)
 80032bc:	f000 ffc2 	bl	8004244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032d2:	2301      	movs	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4619      	mov	r1, r3
 80032dc:	4817      	ldr	r0, [pc, #92]	; (800333c <HAL_TIM_MspPostInit+0xf8>)
 80032de:	f000 ffb1 	bl	8004244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80032e2:	e023      	b.n	800332c <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM12)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_TIM_MspPostInit+0xfc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d11e      	bne.n	800332c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <HAL_TIM_MspPostInit+0xf0>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800330a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800330e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800331c:	2309      	movs	r3, #9
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4619      	mov	r1, r3
 8003326:	4804      	ldr	r0, [pc, #16]	; (8003338 <HAL_TIM_MspPostInit+0xf4>)
 8003328:	f000 ff8c 	bl	8004244 <HAL_GPIO_Init>
}
 800332c:	bf00      	nop
 800332e:	3728      	adds	r7, #40	; 0x28
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	40020400 	.word	0x40020400
 800333c:	40020000 	.word	0x40020000
 8003340:	40001800 	.word	0x40001800

08003344 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 800334a:	4a12      	ldr	r2, [pc, #72]	; (8003394 <MX_USART2_UART_Init+0x50>)
 800334c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 8003350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 800335e:	2200      	movs	r2, #0
 8003360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 800336a:	220c      	movs	r2, #12
 800336c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800337a:	4805      	ldr	r0, [pc, #20]	; (8003390 <MX_USART2_UART_Init+0x4c>)
 800337c:	f002 ff4e 	bl	800621c <HAL_UART_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003386:	f7ff fbbd 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000908 	.word	0x20000908
 8003394:	40004400 	.word	0x40004400

08003398 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	f107 0314 	add.w	r3, r7, #20
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_UART_MspInit+0x84>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d12b      	bne.n	8003412 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_UART_MspInit+0x88>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a17      	ldr	r2, [pc, #92]	; (8003420 <HAL_UART_MspInit+0x88>)
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_UART_MspInit+0x88>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_UART_MspInit+0x88>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a10      	ldr	r2, [pc, #64]	; (8003420 <HAL_UART_MspInit+0x88>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_UART_MspInit+0x88>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033f2:	230c      	movs	r3, #12
 80033f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003402:	2307      	movs	r3, #7
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	4805      	ldr	r0, [pc, #20]	; (8003424 <HAL_UART_MspInit+0x8c>)
 800340e:	f000 ff19 	bl	8004244 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003412:	bf00      	nop
 8003414:	3728      	adds	r7, #40	; 0x28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40004400 	.word	0x40004400
 8003420:	40023800 	.word	0x40023800
 8003424:	40020000 	.word	0x40020000

08003428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800342c:	480d      	ldr	r0, [pc, #52]	; (8003464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800342e:	490e      	ldr	r1, [pc, #56]	; (8003468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003430:	4a0e      	ldr	r2, [pc, #56]	; (800346c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003434:	e002      	b.n	800343c <LoopCopyDataInit>

08003436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343a:	3304      	adds	r3, #4

0800343c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800343c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003440:	d3f9      	bcc.n	8003436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003444:	4c0b      	ldr	r4, [pc, #44]	; (8003474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003448:	e001      	b.n	800344e <LoopFillZerobss>

0800344a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800344c:	3204      	adds	r2, #4

0800344e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003450:	d3fb      	bcc.n	800344a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003452:	f7ff fc9d 	bl	8002d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003456:	f005 fa9d 	bl	8008994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800345a:	f7fe fdb1 	bl	8001fc0 <main>
  bx  lr    
 800345e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003468:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 800346c:	0800a4d0 	.word	0x0800a4d0
  ldr r2, =_sbss
 8003470:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 8003474:	200009d8 	.word	0x200009d8

08003478 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003478:	e7fe      	b.n	8003478 <CAN1_RX0_IRQHandler>
	...

0800347c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <HAL_Init+0x40>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0d      	ldr	r2, [pc, #52]	; (80034bc <HAL_Init+0x40>)
 8003486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800348a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_Init+0x40>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_Init+0x40>)
 8003492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_Init+0x40>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a07      	ldr	r2, [pc, #28]	; (80034bc <HAL_Init+0x40>)
 800349e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a4:	2003      	movs	r0, #3
 80034a6:	f000 fe6f 	bl	8004188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f000 f808 	bl	80034c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b0:	f7ff fbcc 	bl	8002c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40023c00 	.word	0x40023c00

080034c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <HAL_InitTick+0x54>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_InitTick+0x58>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fe87 	bl	80041f2 <HAL_SYSTICK_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00e      	b.n	800350c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d80a      	bhi.n	800350a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f4:	2200      	movs	r2, #0
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295
 80034fc:	f000 fe4f 	bl	800419e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003500:	4a06      	ldr	r2, [pc, #24]	; (800351c <HAL_InitTick+0x5c>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000000 	.word	0x20000000
 8003518:	20000008 	.word	0x20000008
 800351c:	20000004 	.word	0x20000004

08003520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_IncTick+0x20>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_IncTick+0x24>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4413      	add	r3, r2
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_IncTick+0x24>)
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000008 	.word	0x20000008
 8003544:	2000094c 	.word	0x2000094c

08003548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return uwTick;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_GetTick+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	2000094c 	.word	0x2000094c

08003560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff ffee 	bl	8003548 <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d005      	beq.n	8003586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_Delay+0x44>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003586:	bf00      	nop
 8003588:	f7ff ffde 	bl	8003548 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	429a      	cmp	r2, r3
 8003596:	d8f7      	bhi.n	8003588 <HAL_Delay+0x28>
  {
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000008 	.word	0x20000008

080035a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e033      	b.n	8003626 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fb06 	bl	8001bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035ee:	f023 0302 	bic.w	r3, r3, #2
 80035f2:	f043 0202 	orr.w	r2, r3, #2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fbee 	bl	8003ddc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
 8003616:	e001      	b.n	800361c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_ADC_Start+0x1a>
 8003646:	2302      	movs	r3, #2
 8003648:	e0b2      	b.n	80037b0 <HAL_ADC_Start+0x180>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b01      	cmp	r3, #1
 800365e:	d018      	beq.n	8003692 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003670:	4b52      	ldr	r3, [pc, #328]	; (80037bc <HAL_ADC_Start+0x18c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a52      	ldr	r2, [pc, #328]	; (80037c0 <HAL_ADC_Start+0x190>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	0c9a      	lsrs	r2, r3, #18
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003684:	e002      	b.n	800368c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	3b01      	subs	r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f9      	bne.n	8003686 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d17a      	bne.n	8003796 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d106      	bne.n	80036ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	f023 0206 	bic.w	r2, r3, #6
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	645a      	str	r2, [r3, #68]	; 0x44
 80036ec:	e002      	b.n	80036f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036fc:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <HAL_ADC_Start+0x194>)
 80036fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003708:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2b00      	cmp	r3, #0
 8003714:	d12a      	bne.n	800376c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <HAL_ADC_Start+0x198>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d015      	beq.n	800374c <HAL_ADC_Start+0x11c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a29      	ldr	r2, [pc, #164]	; (80037cc <HAL_ADC_Start+0x19c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d105      	bne.n	8003736 <HAL_ADC_Start+0x106>
 800372a:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <HAL_ADC_Start+0x194>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a25      	ldr	r2, [pc, #148]	; (80037d0 <HAL_ADC_Start+0x1a0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d136      	bne.n	80037ae <HAL_ADC_Start+0x17e>
 8003740:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_ADC_Start+0x194>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d130      	bne.n	80037ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d129      	bne.n	80037ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	e020      	b.n	80037ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <HAL_ADC_Start+0x198>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d11b      	bne.n	80037ae <HAL_ADC_Start+0x17e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d114      	bne.n	80037ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	e00b      	b.n	80037ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0210 	orr.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20000000 	.word	0x20000000
 80037c0:	431bde83 	.word	0x431bde83
 80037c4:	40012300 	.word	0x40012300
 80037c8:	40012000 	.word	0x40012000
 80037cc:	40012100 	.word	0x40012100
 80037d0:	40012200 	.word	0x40012200

080037d4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f0:	d113      	bne.n	800381a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80037fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003800:	d10b      	bne.n	800381a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e063      	b.n	80038e2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800381a:	f7ff fe95 	bl	8003548 <HAL_GetTick>
 800381e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003820:	e021      	b.n	8003866 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d01d      	beq.n	8003866 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_ADC_PollForConversion+0x6c>
 8003830:	f7ff fe8a 	bl	8003548 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d212      	bcs.n	8003866 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b02      	cmp	r3, #2
 800384c:	d00b      	beq.n	8003866 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f043 0204 	orr.w	r2, r3, #4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e03d      	b.n	80038e2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d1d6      	bne.n	8003822 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0212 	mvn.w	r2, #18
 800387c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d123      	bne.n	80038e0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11f      	bne.n	80038e0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d049      	beq.n	80039b4 <HAL_ADC_IRQHandler+0xca>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d046      	beq.n	80039b4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d12b      	bne.n	80039a4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003950:	2b00      	cmp	r3, #0
 8003952:	d127      	bne.n	80039a4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800396c:	2b00      	cmp	r3, #0
 800396e:	d119      	bne.n	80039a4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0220 	bic.w	r2, r2, #32
 800397e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8bd 	bl	8003b24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f06f 0212 	mvn.w	r2, #18
 80039b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d057      	beq.n	8003a7a <HAL_ADC_IRQHandler+0x190>
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d054      	beq.n	8003a7a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d139      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d12b      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d124      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11d      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d119      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fab2 	bl	8003fd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 020c 	mvn.w	r2, #12
 8003a78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d017      	beq.n	8003ac0 <HAL_ADC_IRQHandler+0x1d6>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f841 	bl	8003b38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f06f 0201 	mvn.w	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ace:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d015      	beq.n	8003b02 <HAL_ADC_IRQHandler+0x218>
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d012      	beq.n	8003b02 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	f043 0202 	orr.w	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0220 	mvn.w	r2, #32
 8003af0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f82a 	bl	8003b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0220 	mvn.w	r2, #32
 8003b00:	601a      	str	r2, [r3, #0]
  }
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x1c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e113      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x244>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b09      	cmp	r3, #9
 8003b8a:	d925      	bls.n	8003bd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68d9      	ldr	r1, [r3, #12]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3b1e      	subs	r3, #30
 8003ba2:	2207      	movs	r2, #7
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	400a      	ands	r2, r1
 8003bb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68d9      	ldr	r1, [r3, #12]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4403      	add	r3, r0
 8003bca:	3b1e      	subs	r3, #30
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	e022      	b.n	8003c1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6919      	ldr	r1, [r3, #16]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	2207      	movs	r2, #7
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6919      	ldr	r1, [r3, #16]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4403      	add	r3, r0
 8003c14:	409a      	lsls	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d824      	bhi.n	8003c70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	3b05      	subs	r3, #5
 8003c38:	221f      	movs	r2, #31
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	400a      	ands	r2, r1
 8003c46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4618      	mov	r0, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	3b05      	subs	r3, #5
 8003c62:	fa00 f203 	lsl.w	r2, r0, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c6e:	e04c      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d824      	bhi.n	8003cc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	3b23      	subs	r3, #35	; 0x23
 8003c8a:	221f      	movs	r2, #31
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43da      	mvns	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	400a      	ands	r2, r1
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3b23      	subs	r3, #35	; 0x23
 8003cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003cc0:	e023      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3b41      	subs	r3, #65	; 0x41
 8003cd4:	221f      	movs	r2, #31
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3b41      	subs	r3, #65	; 0x41
 8003cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d0a:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <HAL_ADC_ConfigChannel+0x250>)
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <HAL_ADC_ConfigChannel+0x254>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d10f      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x1d8>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b12      	cmp	r3, #18
 8003d1e:	d10b      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_ADC_ConfigChannel+0x254>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d12b      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x23a>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <HAL_ADC_ConfigChannel+0x258>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <HAL_ADC_ConfigChannel+0x1f4>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b11      	cmp	r3, #17
 8003d52:	d122      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a11      	ldr	r2, [pc, #68]	; (8003db8 <HAL_ADC_ConfigChannel+0x258>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d111      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_ADC_ConfigChannel+0x25c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <HAL_ADC_ConfigChannel+0x260>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	0c9a      	lsrs	r2, r3, #18
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d8c:	e002      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f9      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	40012300 	.word	0x40012300
 8003db4:	40012000 	.word	0x40012000
 8003db8:	10000012 	.word	0x10000012
 8003dbc:	20000000 	.word	0x20000000
 8003dc0:	431bde83 	.word	0x431bde83

08003dc4 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003de4:	4b79      	ldr	r3, [pc, #484]	; (8003fcc <ADC_Init+0x1f0>)
 8003de6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6859      	ldr	r1, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	021a      	lsls	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6899      	ldr	r1, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	4a58      	ldr	r2, [pc, #352]	; (8003fd0 <ADC_Init+0x1f4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6899      	ldr	r1, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6899      	ldr	r1, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	e00f      	b.n	8003eda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0202 	bic.w	r2, r2, #2
 8003ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6899      	ldr	r1, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	7e1b      	ldrb	r3, [r3, #24]
 8003ef4:	005a      	lsls	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01b      	beq.n	8003f40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6859      	ldr	r1, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	3b01      	subs	r3, #1
 8003f34:	035a      	lsls	r2, r3, #13
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	e007      	b.n	8003f50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	051a      	lsls	r2, r3, #20
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6899      	ldr	r1, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f92:	025a      	lsls	r2, r3, #9
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	029a      	lsls	r2, r3, #10
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40012300 	.word	0x40012300
 8003fd0:	0f000001 	.word	0x0f000001

08003fd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004004:	4013      	ands	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60d3      	str	r3, [r2, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <__NVIC_GetPriorityGrouping+0x18>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	f003 0307 	and.w	r3, r3, #7
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	db0b      	blt.n	8004076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	4907      	ldr	r1, [pc, #28]	; (8004084 <__NVIC_EnableIRQ+0x38>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2001      	movs	r0, #1
 800406e:	fa00 f202 	lsl.w	r2, r0, r2
 8004072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	e000e100 	.word	0xe000e100

08004088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db0a      	blt.n	80040b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	490c      	ldr	r1, [pc, #48]	; (80040d4 <__NVIC_SetPriority+0x4c>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b0:	e00a      	b.n	80040c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4908      	ldr	r1, [pc, #32]	; (80040d8 <__NVIC_SetPriority+0x50>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3b04      	subs	r3, #4
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	761a      	strb	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000e100 	.word	0xe000e100
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf28      	it	cs
 80040fa:	2304      	movcs	r3, #4
 80040fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3304      	adds	r3, #4
 8004102:	2b06      	cmp	r3, #6
 8004104:	d902      	bls.n	800410c <NVIC_EncodePriority+0x30>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b03      	subs	r3, #3
 800410a:	e000      	b.n	800410e <NVIC_EncodePriority+0x32>
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	401a      	ands	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43d9      	mvns	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	4313      	orrs	r3, r2
         );
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3b01      	subs	r3, #1
 8004150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004154:	d301      	bcc.n	800415a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004156:	2301      	movs	r3, #1
 8004158:	e00f      	b.n	800417a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <SysTick_Config+0x40>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3b01      	subs	r3, #1
 8004160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004162:	210f      	movs	r1, #15
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	f7ff ff8e 	bl	8004088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <SysTick_Config+0x40>)
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <SysTick_Config+0x40>)
 8004174:	2207      	movs	r2, #7
 8004176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	e000e010 	.word	0xe000e010

08004188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff29 	bl	8003fe8 <__NVIC_SetPriorityGrouping>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041b0:	f7ff ff3e 	bl	8004030 <__NVIC_GetPriorityGrouping>
 80041b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f7ff ff8e 	bl	80040dc <NVIC_EncodePriority>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c6:	4611      	mov	r1, r2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff5d 	bl	8004088 <__NVIC_SetPriority>
}
 80041ce:	bf00      	nop
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	4603      	mov	r3, r0
 80041de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff31 	bl	800404c <__NVIC_EnableIRQ>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ffa2 	bl	8004144 <SysTick_Config>
 8004200:	4603      	mov	r3, r0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e00e      	b.n	800423a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	795b      	ldrb	r3, [r3, #5]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fd fda5 	bl	8001d7c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004244:	b480      	push	{r7}
 8004246:	b089      	sub	sp, #36	; 0x24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e165      	b.n	800452c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004260:	2201      	movs	r2, #1
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	f040 8154 	bne.w	8004526 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d005      	beq.n	8004296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004292:	2b02      	cmp	r3, #2
 8004294:	d130      	bne.n	80042f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	2203      	movs	r2, #3
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042cc:	2201      	movs	r2, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 0201 	and.w	r2, r3, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b03      	cmp	r3, #3
 8004302:	d017      	beq.n	8004334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2203      	movs	r2, #3
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d123      	bne.n	8004388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	08da      	lsrs	r2, r3, #3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3208      	adds	r2, #8
 8004348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	220f      	movs	r2, #15
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	08da      	lsrs	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3208      	adds	r2, #8
 8004382:	69b9      	ldr	r1, [r7, #24]
 8004384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	2203      	movs	r2, #3
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0203 	and.w	r2, r3, #3
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80ae 	beq.w	8004526 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b5d      	ldr	r3, [pc, #372]	; (8004544 <HAL_GPIO_Init+0x300>)
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	4a5c      	ldr	r2, [pc, #368]	; (8004544 <HAL_GPIO_Init+0x300>)
 80043d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d8:	6453      	str	r3, [r2, #68]	; 0x44
 80043da:	4b5a      	ldr	r3, [pc, #360]	; (8004544 <HAL_GPIO_Init+0x300>)
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043e6:	4a58      	ldr	r2, [pc, #352]	; (8004548 <HAL_GPIO_Init+0x304>)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	089b      	lsrs	r3, r3, #2
 80043ec:	3302      	adds	r3, #2
 80043ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	220f      	movs	r2, #15
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a4f      	ldr	r2, [pc, #316]	; (800454c <HAL_GPIO_Init+0x308>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d025      	beq.n	800445e <HAL_GPIO_Init+0x21a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a4e      	ldr	r2, [pc, #312]	; (8004550 <HAL_GPIO_Init+0x30c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <HAL_GPIO_Init+0x216>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a4d      	ldr	r2, [pc, #308]	; (8004554 <HAL_GPIO_Init+0x310>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d019      	beq.n	8004456 <HAL_GPIO_Init+0x212>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a4c      	ldr	r2, [pc, #304]	; (8004558 <HAL_GPIO_Init+0x314>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_Init+0x20e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a4b      	ldr	r2, [pc, #300]	; (800455c <HAL_GPIO_Init+0x318>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_GPIO_Init+0x20a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a4a      	ldr	r2, [pc, #296]	; (8004560 <HAL_GPIO_Init+0x31c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_Init+0x206>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a49      	ldr	r2, [pc, #292]	; (8004564 <HAL_GPIO_Init+0x320>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_GPIO_Init+0x202>
 8004442:	2306      	movs	r3, #6
 8004444:	e00c      	b.n	8004460 <HAL_GPIO_Init+0x21c>
 8004446:	2307      	movs	r3, #7
 8004448:	e00a      	b.n	8004460 <HAL_GPIO_Init+0x21c>
 800444a:	2305      	movs	r3, #5
 800444c:	e008      	b.n	8004460 <HAL_GPIO_Init+0x21c>
 800444e:	2304      	movs	r3, #4
 8004450:	e006      	b.n	8004460 <HAL_GPIO_Init+0x21c>
 8004452:	2303      	movs	r3, #3
 8004454:	e004      	b.n	8004460 <HAL_GPIO_Init+0x21c>
 8004456:	2302      	movs	r3, #2
 8004458:	e002      	b.n	8004460 <HAL_GPIO_Init+0x21c>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <HAL_GPIO_Init+0x21c>
 800445e:	2300      	movs	r3, #0
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	f002 0203 	and.w	r2, r2, #3
 8004466:	0092      	lsls	r2, r2, #2
 8004468:	4093      	lsls	r3, r2
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004470:	4935      	ldr	r1, [pc, #212]	; (8004548 <HAL_GPIO_Init+0x304>)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	3302      	adds	r3, #2
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800447e:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <HAL_GPIO_Init+0x324>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044a2:	4a31      	ldr	r2, [pc, #196]	; (8004568 <HAL_GPIO_Init+0x324>)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044a8:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <HAL_GPIO_Init+0x324>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <HAL_GPIO_Init+0x324>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044d2:	4b25      	ldr	r3, [pc, #148]	; (8004568 <HAL_GPIO_Init+0x324>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044f6:	4a1c      	ldr	r2, [pc, #112]	; (8004568 <HAL_GPIO_Init+0x324>)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044fc:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <HAL_GPIO_Init+0x324>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004520:	4a11      	ldr	r2, [pc, #68]	; (8004568 <HAL_GPIO_Init+0x324>)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3301      	adds	r3, #1
 800452a:	61fb      	str	r3, [r7, #28]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b0f      	cmp	r3, #15
 8004530:	f67f ae96 	bls.w	8004260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	3724      	adds	r7, #36	; 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
 8004548:	40013800 	.word	0x40013800
 800454c:	40020000 	.word	0x40020000
 8004550:	40020400 	.word	0x40020400
 8004554:	40020800 	.word	0x40020800
 8004558:	40020c00 	.word	0x40020c00
 800455c:	40021000 	.word	0x40021000
 8004560:	40021400 	.word	0x40021400
 8004564:	40021800 	.word	0x40021800
 8004568:	40013c00 	.word	0x40013c00

0800456c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	460b      	mov	r3, r1
 8004576:	807b      	strh	r3, [r7, #2]
 8004578:	4613      	mov	r3, r2
 800457a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800457c:	787b      	ldrb	r3, [r7, #1]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004582:	887a      	ldrh	r2, [r7, #2]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004588:	e003      	b.n	8004592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800458a:	887b      	ldrh	r3, [r7, #2]
 800458c:	041a      	lsls	r2, r3, #16
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	619a      	str	r2, [r3, #24]
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045b0:	887a      	ldrh	r2, [r7, #2]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4013      	ands	r3, r2
 80045b6:	041a      	lsls	r2, r3, #16
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	43d9      	mvns	r1, r3
 80045bc:	887b      	ldrh	r3, [r7, #2]
 80045be:	400b      	ands	r3, r1
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	619a      	str	r2, [r3, #24]
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0cc      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b68      	ldr	r3, [pc, #416]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d90c      	bls.n	8004610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b65      	ldr	r3, [pc, #404]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b63      	ldr	r3, [pc, #396]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0b8      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a58      	ldr	r2, [pc, #352]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004632:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d005      	beq.n	800464c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004640:	4b53      	ldr	r3, [pc, #332]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	4a52      	ldr	r2, [pc, #328]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800464a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	494d      	ldr	r1, [pc, #308]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d044      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d119      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e07f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d003      	beq.n	8004692 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800468e:	2b03      	cmp	r3, #3
 8004690:	d107      	bne.n	80046a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e06f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a2:	4b3b      	ldr	r3, [pc, #236]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e067      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046b2:	4b37      	ldr	r3, [pc, #220]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4934      	ldr	r1, [pc, #208]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046c4:	f7fe ff40 	bl	8003548 <HAL_GetTick>
 80046c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f7fe ff3c 	bl	8003548 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e04f      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 020c 	and.w	r2, r3, #12
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d1eb      	bne.n	80046cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046f4:	4b25      	ldr	r3, [pc, #148]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d20c      	bcs.n	800471c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b22      	ldr	r3, [pc, #136]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <HAL_RCC_ClockConfig+0x1b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e032      	b.n	8004782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004728:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4916      	ldr	r1, [pc, #88]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	490e      	ldr	r1, [pc, #56]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800475a:	f000 f855 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 800475e:	4602      	mov	r2, r0
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	490a      	ldr	r1, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	5ccb      	ldrb	r3, [r1, r3]
 800476e:	fa22 f303 	lsr.w	r3, r2, r3
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCC_ClockConfig+0x1c8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fea0 	bl	80034c0 <HAL_InitTick>

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023c00 	.word	0x40023c00
 8004790:	40023800 	.word	0x40023800
 8004794:	0800a300 	.word	0x0800a300
 8004798:	20000000 	.word	0x20000000
 800479c:	20000004 	.word	0x20000004

080047a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000000 	.word	0x20000000

080047b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047bc:	f7ff fff0 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	0a9b      	lsrs	r3, r3, #10
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4903      	ldr	r1, [pc, #12]	; (80047dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40023800 	.word	0x40023800
 80047dc:	0800a310 	.word	0x0800a310

080047e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047e4:	f7ff ffdc 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0b5b      	lsrs	r3, r3, #13
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4903      	ldr	r1, [pc, #12]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800
 8004804:	0800a310 	.word	0x0800a310

08004808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800480c:	b0ae      	sub	sp, #184	; 0xb8
 800480e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800482e:	4bcb      	ldr	r3, [pc, #812]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b0c      	cmp	r3, #12
 8004838:	f200 8206 	bhi.w	8004c48 <HAL_RCC_GetSysClockFreq+0x440>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <HAL_RCC_GetSysClockFreq+0x3c>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004879 	.word	0x08004879
 8004848:	08004c49 	.word	0x08004c49
 800484c:	08004c49 	.word	0x08004c49
 8004850:	08004c49 	.word	0x08004c49
 8004854:	08004881 	.word	0x08004881
 8004858:	08004c49 	.word	0x08004c49
 800485c:	08004c49 	.word	0x08004c49
 8004860:	08004c49 	.word	0x08004c49
 8004864:	08004889 	.word	0x08004889
 8004868:	08004c49 	.word	0x08004c49
 800486c:	08004c49 	.word	0x08004c49
 8004870:	08004c49 	.word	0x08004c49
 8004874:	08004a79 	.word	0x08004a79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4bb9      	ldr	r3, [pc, #740]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x358>)
 800487a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800487e:	e1e7      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004880:	4bb8      	ldr	r3, [pc, #736]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004886:	e1e3      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004888:	4bb4      	ldr	r3, [pc, #720]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004890:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004894:	4bb1      	ldr	r3, [pc, #708]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d071      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a0:	4bae      	ldr	r3, [pc, #696]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80048b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048bc:	2300      	movs	r3, #0
 80048be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048c6:	4622      	mov	r2, r4
 80048c8:	462b      	mov	r3, r5
 80048ca:	f04f 0000 	mov.w	r0, #0
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	0159      	lsls	r1, r3, #5
 80048d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d8:	0150      	lsls	r0, r2, #5
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4621      	mov	r1, r4
 80048e0:	1a51      	subs	r1, r2, r1
 80048e2:	6439      	str	r1, [r7, #64]	; 0x40
 80048e4:	4629      	mov	r1, r5
 80048e6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ea:	647b      	str	r3, [r7, #68]	; 0x44
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80048f8:	4649      	mov	r1, r9
 80048fa:	018b      	lsls	r3, r1, #6
 80048fc:	4641      	mov	r1, r8
 80048fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004902:	4641      	mov	r1, r8
 8004904:	018a      	lsls	r2, r1, #6
 8004906:	4641      	mov	r1, r8
 8004908:	1a51      	subs	r1, r2, r1
 800490a:	63b9      	str	r1, [r7, #56]	; 0x38
 800490c:	4649      	mov	r1, r9
 800490e:	eb63 0301 	sbc.w	r3, r3, r1
 8004912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004920:	4649      	mov	r1, r9
 8004922:	00cb      	lsls	r3, r1, #3
 8004924:	4641      	mov	r1, r8
 8004926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492a:	4641      	mov	r1, r8
 800492c:	00ca      	lsls	r2, r1, #3
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	4603      	mov	r3, r0
 8004934:	4622      	mov	r2, r4
 8004936:	189b      	adds	r3, r3, r2
 8004938:	633b      	str	r3, [r7, #48]	; 0x30
 800493a:	462b      	mov	r3, r5
 800493c:	460a      	mov	r2, r1
 800493e:	eb42 0303 	adc.w	r3, r2, r3
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004950:	4629      	mov	r1, r5
 8004952:	024b      	lsls	r3, r1, #9
 8004954:	4621      	mov	r1, r4
 8004956:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800495a:	4621      	mov	r1, r4
 800495c:	024a      	lsls	r2, r1, #9
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800496c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004970:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004974:	f7fc f904 	bl	8000b80 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004982:	e067      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004984:	4b75      	ldr	r3, [pc, #468]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004990:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004994:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499c:	67bb      	str	r3, [r7, #120]	; 0x78
 800499e:	2300      	movs	r3, #0
 80049a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80049a6:	4622      	mov	r2, r4
 80049a8:	462b      	mov	r3, r5
 80049aa:	f04f 0000 	mov.w	r0, #0
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	0159      	lsls	r1, r3, #5
 80049b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049b8:	0150      	lsls	r0, r2, #5
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4621      	mov	r1, r4
 80049c0:	1a51      	subs	r1, r2, r1
 80049c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80049c4:	4629      	mov	r1, r5
 80049c6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80049d8:	4649      	mov	r1, r9
 80049da:	018b      	lsls	r3, r1, #6
 80049dc:	4641      	mov	r1, r8
 80049de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e2:	4641      	mov	r1, r8
 80049e4:	018a      	lsls	r2, r1, #6
 80049e6:	4641      	mov	r1, r8
 80049e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ec:	4649      	mov	r1, r9
 80049ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80049f2:	f04f 0200 	mov.w	r2, #0
 80049f6:	f04f 0300 	mov.w	r3, #0
 80049fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a06:	4692      	mov	sl, r2
 8004a08:	469b      	mov	fp, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	eb1a 0303 	adds.w	r3, sl, r3
 8004a10:	623b      	str	r3, [r7, #32]
 8004a12:	462b      	mov	r3, r5
 8004a14:	eb4b 0303 	adc.w	r3, fp, r3
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a26:	4629      	mov	r1, r5
 8004a28:	028b      	lsls	r3, r1, #10
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a30:	4621      	mov	r1, r4
 8004a32:	028a      	lsls	r2, r1, #10
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a40:	677a      	str	r2, [r7, #116]	; 0x74
 8004a42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004a46:	f7fc f89b 	bl	8000b80 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4613      	mov	r3, r2
 8004a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a54:	4b41      	ldr	r3, [pc, #260]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a76:	e0eb      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b38      	ldr	r3, [pc, #224]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d06b      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a90:	4b32      	ldr	r3, [pc, #200]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	2200      	movs	r2, #0
 8004a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	667b      	str	r3, [r7, #100]	; 0x64
 8004aa8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004aac:	4622      	mov	r2, r4
 8004aae:	462b      	mov	r3, r5
 8004ab0:	f04f 0000 	mov.w	r0, #0
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	0159      	lsls	r1, r3, #5
 8004aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004abe:	0150      	lsls	r0, r2, #5
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	1a51      	subs	r1, r2, r1
 8004ac8:	61b9      	str	r1, [r7, #24]
 8004aca:	4629      	mov	r1, r5
 8004acc:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004ade:	4659      	mov	r1, fp
 8004ae0:	018b      	lsls	r3, r1, #6
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ae8:	4651      	mov	r1, sl
 8004aea:	018a      	lsls	r2, r1, #6
 8004aec:	4651      	mov	r1, sl
 8004aee:	ebb2 0801 	subs.w	r8, r2, r1
 8004af2:	4659      	mov	r1, fp
 8004af4:	eb63 0901 	sbc.w	r9, r3, r1
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0c:	4690      	mov	r8, r2
 8004b0e:	4699      	mov	r9, r3
 8004b10:	4623      	mov	r3, r4
 8004b12:	eb18 0303 	adds.w	r3, r8, r3
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	462b      	mov	r3, r5
 8004b1a:	eb49 0303 	adc.w	r3, r9, r3
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	024b      	lsls	r3, r1, #9
 8004b30:	4621      	mov	r1, r4
 8004b32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b36:	4621      	mov	r1, r4
 8004b38:	024a      	lsls	r2, r1, #9
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b42:	2200      	movs	r2, #0
 8004b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004b48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b4c:	f7fc f818 	bl	8000b80 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b5a:	e065      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x420>
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	00f42400 	.word	0x00f42400
 8004b64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b68:	4b3d      	ldr	r3, [pc, #244]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	099b      	lsrs	r3, r3, #6
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	4611      	mov	r1, r2
 8004b74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b78:	653b      	str	r3, [r7, #80]	; 0x50
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004b82:	4642      	mov	r2, r8
 8004b84:	464b      	mov	r3, r9
 8004b86:	f04f 0000 	mov.w	r0, #0
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	0159      	lsls	r1, r3, #5
 8004b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b94:	0150      	lsls	r0, r2, #5
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	1a51      	subs	r1, r2, r1
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004bb4:	4659      	mov	r1, fp
 8004bb6:	018b      	lsls	r3, r1, #6
 8004bb8:	4651      	mov	r1, sl
 8004bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bbe:	4651      	mov	r1, sl
 8004bc0:	018a      	lsls	r2, r1, #6
 8004bc2:	4651      	mov	r1, sl
 8004bc4:	1a54      	subs	r4, r2, r1
 8004bc6:	4659      	mov	r1, fp
 8004bc8:	eb63 0501 	sbc.w	r5, r3, r1
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	00eb      	lsls	r3, r5, #3
 8004bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bda:	00e2      	lsls	r2, r4, #3
 8004bdc:	4614      	mov	r4, r2
 8004bde:	461d      	mov	r5, r3
 8004be0:	4643      	mov	r3, r8
 8004be2:	18e3      	adds	r3, r4, r3
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	464b      	mov	r3, r9
 8004be8:	eb45 0303 	adc.w	r3, r5, r3
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	028b      	lsls	r3, r1, #10
 8004bfe:	4621      	mov	r1, r4
 8004c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c04:	4621      	mov	r1, r4
 8004c06:	028a      	lsls	r2, r1, #10
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c10:	2200      	movs	r2, #0
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c1a:	f7fb ffb1 	bl	8000b80 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4613      	mov	r3, r2
 8004c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	0f1b      	lsrs	r3, r3, #28
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c46:	e003      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	37b8      	adds	r7, #184	; 0xb8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop
 8004c60:	40023800 	.word	0x40023800
 8004c64:	00f42400 	.word	0x00f42400

08004c68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e28d      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8083 	beq.w	8004d8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c88:	4b94      	ldr	r3, [pc, #592]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d019      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c94:	4b91      	ldr	r3, [pc, #580]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d106      	bne.n	8004cae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ca0:	4b8e      	ldr	r3, [pc, #568]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cac:	d00c      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cae:	4b8b      	ldr	r3, [pc, #556]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cb6:	2b0c      	cmp	r3, #12
 8004cb8:	d112      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cba:	4b88      	ldr	r3, [pc, #544]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc8:	4b84      	ldr	r3, [pc, #528]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d05b      	beq.n	8004d8c <HAL_RCC_OscConfig+0x124>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d157      	bne.n	8004d8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e25a      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce8:	d106      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x90>
 8004cea:	4b7c      	ldr	r3, [pc, #496]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a7b      	ldr	r2, [pc, #492]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e01d      	b.n	8004d34 <HAL_RCC_OscConfig+0xcc>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0xb4>
 8004d02:	4b76      	ldr	r3, [pc, #472]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a75      	ldr	r2, [pc, #468]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b73      	ldr	r3, [pc, #460]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a72      	ldr	r2, [pc, #456]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0xcc>
 8004d1c:	4b6f      	ldr	r3, [pc, #444]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a6e      	ldr	r2, [pc, #440]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	4b6c      	ldr	r3, [pc, #432]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a6b      	ldr	r2, [pc, #428]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fe fc04 	bl	8003548 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fe fc00 	bl	8003548 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e21f      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b61      	ldr	r3, [pc, #388]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0xdc>
 8004d62:	e014      	b.n	8004d8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fe fbf0 	bl	8003548 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fe fbec 	bl	8003548 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	; 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e20b      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7e:	4b57      	ldr	r3, [pc, #348]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x104>
 8004d8a:	e000      	b.n	8004d8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d06f      	beq.n	8004e7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d9a:	4b50      	ldr	r3, [pc, #320]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d017      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004da6:	4b4d      	ldr	r3, [pc, #308]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d105      	bne.n	8004dbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004db2:	4b4a      	ldr	r3, [pc, #296]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dbe:	4b47      	ldr	r3, [pc, #284]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d11c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dca:	4b44      	ldr	r3, [pc, #272]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d116      	bne.n	8004e04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd6:	4b41      	ldr	r3, [pc, #260]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_RCC_OscConfig+0x186>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d001      	beq.n	8004dee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e1d3      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dee:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4937      	ldr	r1, [pc, #220]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e02:	e03a      	b.n	8004e7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b34      	ldr	r3, [pc, #208]	; (8004ee0 <HAL_RCC_OscConfig+0x278>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fe fb99 	bl	8003548 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1a:	f7fe fb95 	bl	8003548 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e1b4      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2c:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b28      	ldr	r3, [pc, #160]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4925      	ldr	r1, [pc, #148]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4e:	4b24      	ldr	r3, [pc, #144]	; (8004ee0 <HAL_RCC_OscConfig+0x278>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fe fb78 	bl	8003548 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e5c:	f7fe fb74 	bl	8003548 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e193      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d036      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d016      	beq.n	8004ebc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8e:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <HAL_RCC_OscConfig+0x27c>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fe fb58 	bl	8003548 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fe fb54 	bl	8003548 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e173      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eae:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_RCC_OscConfig+0x274>)
 8004eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x234>
 8004eba:	e01b      	b.n	8004ef4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCC_OscConfig+0x27c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec2:	f7fe fb41 	bl	8003548 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec8:	e00e      	b.n	8004ee8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eca:	f7fe fb3d 	bl	8003548 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d907      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e15c      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	42470000 	.word	0x42470000
 8004ee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee8:	4b8a      	ldr	r3, [pc, #552]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ea      	bne.n	8004eca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8097 	beq.w	8005030 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f06:	4b83      	ldr	r3, [pc, #524]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	4b7f      	ldr	r3, [pc, #508]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	4a7e      	ldr	r2, [pc, #504]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f20:	6413      	str	r3, [r2, #64]	; 0x40
 8004f22:	4b7c      	ldr	r3, [pc, #496]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f32:	4b79      	ldr	r3, [pc, #484]	; (8005118 <HAL_RCC_OscConfig+0x4b0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d118      	bne.n	8004f70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f3e:	4b76      	ldr	r3, [pc, #472]	; (8005118 <HAL_RCC_OscConfig+0x4b0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a75      	ldr	r2, [pc, #468]	; (8005118 <HAL_RCC_OscConfig+0x4b0>)
 8004f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4a:	f7fe fafd 	bl	8003548 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f52:	f7fe faf9 	bl	8003548 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e118      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f64:	4b6c      	ldr	r3, [pc, #432]	; (8005118 <HAL_RCC_OscConfig+0x4b0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d106      	bne.n	8004f86 <HAL_RCC_OscConfig+0x31e>
 8004f78:	4b66      	ldr	r3, [pc, #408]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	4a65      	ldr	r2, [pc, #404]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6713      	str	r3, [r2, #112]	; 0x70
 8004f84:	e01c      	b.n	8004fc0 <HAL_RCC_OscConfig+0x358>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x340>
 8004f8e:	4b61      	ldr	r3, [pc, #388]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a60      	ldr	r2, [pc, #384]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	4b5e      	ldr	r3, [pc, #376]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9e:	4a5d      	ldr	r2, [pc, #372]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCC_OscConfig+0x358>
 8004fa8:	4b5a      	ldr	r3, [pc, #360]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	4a59      	ldr	r2, [pc, #356]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb4:	4b57      	ldr	r3, [pc, #348]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb8:	4a56      	ldr	r2, [pc, #344]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	f023 0304 	bic.w	r3, r3, #4
 8004fbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc8:	f7fe fabe 	bl	8003548 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd0:	f7fe faba 	bl	8003548 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0d7      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe6:	4b4b      	ldr	r3, [pc, #300]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ee      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x368>
 8004ff2:	e014      	b.n	800501e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fe faa8 	bl	8003548 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ffc:	f7fe faa4 	bl	8003548 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	; 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e0c1      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005012:	4b40      	ldr	r3, [pc, #256]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1ee      	bne.n	8004ffc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005024:	4b3b      	ldr	r3, [pc, #236]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	4a3a      	ldr	r2, [pc, #232]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 800502a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800502e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80ad 	beq.w	8005194 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800503a:	4b36      	ldr	r3, [pc, #216]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b08      	cmp	r3, #8
 8005044:	d060      	beq.n	8005108 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d145      	bne.n	80050da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	4b33      	ldr	r3, [pc, #204]	; (800511c <HAL_RCC_OscConfig+0x4b4>)
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fe fa78 	bl	8003548 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800505c:	f7fe fa74 	bl	8003548 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e093      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	019b      	lsls	r3, r3, #6
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	3b01      	subs	r3, #1
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	071b      	lsls	r3, r3, #28
 80050a6:	491b      	ldr	r1, [pc, #108]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_RCC_OscConfig+0x4b4>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b2:	f7fe fa49 	bl	8003548 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ba:	f7fe fa45 	bl	8003548 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e064      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x452>
 80050d8:	e05c      	b.n	8005194 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b10      	ldr	r3, [pc, #64]	; (800511c <HAL_RCC_OscConfig+0x4b4>)
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e0:	f7fe fa32 	bl	8003548 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e8:	f7fe fa2e 	bl	8003548 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e04d      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCC_OscConfig+0x4ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0x480>
 8005106:	e045      	b.n	8005194 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e040      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
 8005114:	40023800 	.word	0x40023800
 8005118:	40007000 	.word	0x40007000
 800511c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005120:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <HAL_RCC_OscConfig+0x538>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d030      	beq.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d129      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d122      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005158:	4293      	cmp	r3, r2
 800515a:	d119      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	3b01      	subs	r3, #1
 800516a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d10f      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d107      	bne.n	8005190 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d001      	beq.n	8005194 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e000      	b.n	8005196 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40023800 	.word	0x40023800

080051a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e041      	b.n	800523a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fd ff7e 	bl	80030cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f000 fc7a 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
	...

08005244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d001      	beq.n	800525c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e04e      	b.n	80052fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a23      	ldr	r2, [pc, #140]	; (8005308 <HAL_TIM_Base_Start_IT+0xc4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d01d      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1f      	ldr	r2, [pc, #124]	; (800530c <HAL_TIM_Base_Start_IT+0xc8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1e      	ldr	r2, [pc, #120]	; (8005310 <HAL_TIM_Base_Start_IT+0xcc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1c      	ldr	r2, [pc, #112]	; (8005314 <HAL_TIM_Base_Start_IT+0xd0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <HAL_TIM_Base_Start_IT+0xd4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <HAL_TIM_Base_Start_IT+0xd8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a18      	ldr	r2, [pc, #96]	; (8005320 <HAL_TIM_Base_Start_IT+0xdc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d111      	bne.n	80052e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d010      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e6:	e007      	b.n	80052f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40010400 	.word	0x40010400
 800531c:	40014000 	.word	0x40014000
 8005320:	40001800 	.word	0x40001800

08005324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e041      	b.n	80053ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f839 	bl	80053c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f000 fbba 	bl	8005adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <HAL_TIM_PWM_Start+0x24>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	bf14      	ite	ne
 80053f4:	2301      	movne	r3, #1
 80053f6:	2300      	moveq	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e022      	b.n	8005442 <HAL_TIM_PWM_Start+0x6a>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d109      	bne.n	8005416 <HAL_TIM_PWM_Start+0x3e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b01      	cmp	r3, #1
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e015      	b.n	8005442 <HAL_TIM_PWM_Start+0x6a>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d109      	bne.n	8005430 <HAL_TIM_PWM_Start+0x58>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e008      	b.n	8005442 <HAL_TIM_PWM_Start+0x6a>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	bf14      	ite	ne
 800543c:	2301      	movne	r3, #1
 800543e:	2300      	moveq	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e07c      	b.n	8005544 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0x82>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005458:	e013      	b.n	8005482 <HAL_TIM_PWM_Start+0xaa>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d104      	bne.n	800546a <HAL_TIM_PWM_Start+0x92>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005468:	e00b      	b.n	8005482 <HAL_TIM_PWM_Start+0xaa>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d104      	bne.n	800547a <HAL_TIM_PWM_Start+0xa2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	e003      	b.n	8005482 <HAL_TIM_PWM_Start+0xaa>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2201      	movs	r2, #1
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fe10 	bl	80060b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2d      	ldr	r2, [pc, #180]	; (800554c <HAL_TIM_PWM_Start+0x174>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_TIM_PWM_Start+0xcc>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <HAL_TIM_PWM_Start+0x178>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d101      	bne.n	80054a8 <HAL_TIM_PWM_Start+0xd0>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HAL_TIM_PWM_Start+0xd2>
 80054a8:	2300      	movs	r3, #0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a22      	ldr	r2, [pc, #136]	; (800554c <HAL_TIM_PWM_Start+0x174>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d022      	beq.n	800550e <HAL_TIM_PWM_Start+0x136>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d01d      	beq.n	800550e <HAL_TIM_PWM_Start+0x136>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <HAL_TIM_PWM_Start+0x17c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d018      	beq.n	800550e <HAL_TIM_PWM_Start+0x136>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <HAL_TIM_PWM_Start+0x180>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <HAL_TIM_PWM_Start+0x136>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <HAL_TIM_PWM_Start+0x184>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_TIM_PWM_Start+0x136>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a16      	ldr	r2, [pc, #88]	; (8005550 <HAL_TIM_PWM_Start+0x178>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <HAL_TIM_PWM_Start+0x136>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a18      	ldr	r2, [pc, #96]	; (8005560 <HAL_TIM_PWM_Start+0x188>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_TIM_PWM_Start+0x136>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a16      	ldr	r2, [pc, #88]	; (8005564 <HAL_TIM_PWM_Start+0x18c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b06      	cmp	r3, #6
 800551e:	d010      	beq.n	8005542 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	e007      	b.n	8005542 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40010000 	.word	0x40010000
 8005550:	40010400 	.word	0x40010400
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40014000 	.word	0x40014000
 8005564:	40001800 	.word	0x40001800

08005568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b02      	cmp	r3, #2
 800557c:	d122      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	d11b      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0202 	mvn.w	r2, #2
 8005594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa77 	bl	8005a9e <HAL_TIM_IC_CaptureCallback>
 80055b0:	e005      	b.n	80055be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fa69 	bl	8005a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fa7a 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d122      	bne.n	8005618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d11b      	bne.n	8005618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0204 	mvn.w	r2, #4
 80055e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa4d 	bl	8005a9e <HAL_TIM_IC_CaptureCallback>
 8005604:	e005      	b.n	8005612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa3f 	bl	8005a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fa50 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b08      	cmp	r3, #8
 8005624:	d122      	bne.n	800566c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b08      	cmp	r3, #8
 8005632:	d11b      	bne.n	800566c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0208 	mvn.w	r2, #8
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2204      	movs	r2, #4
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa23 	bl	8005a9e <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fa15 	bl	8005a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fa26 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b10      	cmp	r3, #16
 8005678:	d122      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b10      	cmp	r3, #16
 8005686:	d11b      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0210 	mvn.w	r2, #16
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2208      	movs	r2, #8
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f9f9 	bl	8005a9e <HAL_TIM_IC_CaptureCallback>
 80056ac:	e005      	b.n	80056ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f9eb 	bl	8005a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f9fc 	bl	8005ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0201 	mvn.w	r2, #1
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc fbd8 	bl	8001e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b80      	cmp	r3, #128	; 0x80
 80056f8:	d10e      	bne.n	8005718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	d107      	bne.n	8005718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fd78 	bl	8006208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d10e      	bne.n	8005744 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d107      	bne.n	8005744 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f9c1 	bl	8005ac6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b20      	cmp	r3, #32
 8005750:	d10e      	bne.n	8005770 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b20      	cmp	r3, #32
 800575e:	d107      	bne.n	8005770 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0220 	mvn.w	r2, #32
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fd42 	bl	80061f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005792:	2302      	movs	r3, #2
 8005794:	e0ae      	b.n	80058f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	f200 809f 	bhi.w	80058e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057e1 	.word	0x080057e1
 80057b0:	080058e5 	.word	0x080058e5
 80057b4:	080058e5 	.word	0x080058e5
 80057b8:	080058e5 	.word	0x080058e5
 80057bc:	08005821 	.word	0x08005821
 80057c0:	080058e5 	.word	0x080058e5
 80057c4:	080058e5 	.word	0x080058e5
 80057c8:	080058e5 	.word	0x080058e5
 80057cc:	08005863 	.word	0x08005863
 80057d0:	080058e5 	.word	0x080058e5
 80057d4:	080058e5 	.word	0x080058e5
 80057d8:	080058e5 	.word	0x080058e5
 80057dc:	080058a3 	.word	0x080058a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fa18 	bl	8005c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0208 	orr.w	r2, r2, #8
 80057fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0204 	bic.w	r2, r2, #4
 800580a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	619a      	str	r2, [r3, #24]
      break;
 800581e:	e064      	b.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fa68 	bl	8005cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699a      	ldr	r2, [r3, #24]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800583a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6999      	ldr	r1, [r3, #24]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	021a      	lsls	r2, r3, #8
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	619a      	str	r2, [r3, #24]
      break;
 8005860:	e043      	b.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fabd 	bl	8005de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0208 	orr.w	r2, r2, #8
 800587c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0204 	bic.w	r2, r2, #4
 800588c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69d9      	ldr	r1, [r3, #28]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	61da      	str	r2, [r3, #28]
      break;
 80058a0:	e023      	b.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fb11 	bl	8005ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69da      	ldr	r2, [r3, #28]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69d9      	ldr	r1, [r3, #28]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	021a      	lsls	r2, r3, #8
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	61da      	str	r2, [r3, #28]
      break;
 80058e2:	e002      	b.n	80058ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	75fb      	strb	r3, [r7, #23]
      break;
 80058e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_TIM_ConfigClockSource+0x1c>
 8005914:	2302      	movs	r3, #2
 8005916:	e0b4      	b.n	8005a82 <HAL_TIM_ConfigClockSource+0x186>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800593e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005950:	d03e      	beq.n	80059d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005956:	f200 8087 	bhi.w	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595e:	f000 8086 	beq.w	8005a6e <HAL_TIM_ConfigClockSource+0x172>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d87f      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005968:	2b70      	cmp	r3, #112	; 0x70
 800596a:	d01a      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0xa6>
 800596c:	2b70      	cmp	r3, #112	; 0x70
 800596e:	d87b      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005970:	2b60      	cmp	r3, #96	; 0x60
 8005972:	d050      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x11a>
 8005974:	2b60      	cmp	r3, #96	; 0x60
 8005976:	d877      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005978:	2b50      	cmp	r3, #80	; 0x50
 800597a:	d03c      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0xfa>
 800597c:	2b50      	cmp	r3, #80	; 0x50
 800597e:	d873      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005980:	2b40      	cmp	r3, #64	; 0x40
 8005982:	d058      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x13a>
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d86f      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005988:	2b30      	cmp	r3, #48	; 0x30
 800598a:	d064      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x15a>
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d86b      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005990:	2b20      	cmp	r3, #32
 8005992:	d060      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x15a>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d867      	bhi.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05c      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x15a>
 800599c:	2b10      	cmp	r3, #16
 800599e:	d05a      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x15a>
 80059a0:	e062      	b.n	8005a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6899      	ldr	r1, [r3, #8]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f000 fb5d 	bl	8006070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	609a      	str	r2, [r3, #8]
      break;
 80059ce:	e04f      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	6899      	ldr	r1, [r3, #8]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f000 fb46 	bl	8006070 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f2:	609a      	str	r2, [r3, #8]
      break;
 80059f4:	e03c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 faba 	bl	8005f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2150      	movs	r1, #80	; 0x50
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fb13 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005a14:	e02c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 fad9 	bl	8005fda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2160      	movs	r1, #96	; 0x60
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fb03 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005a34:	e01c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 fa9a 	bl	8005f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2140      	movs	r1, #64	; 0x40
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 faf3 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005a54:	e00c      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f000 faea 	bl	800603a <TIM_ITRx_SetConfig>
      break;
 8005a66:	e003      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa6:	bf00      	nop
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a40      	ldr	r2, [pc, #256]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d013      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afa:	d00f      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a3d      	ldr	r2, [pc, #244]	; (8005bf4 <TIM_Base_SetConfig+0x118>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a3c      	ldr	r2, [pc, #240]	; (8005bf8 <TIM_Base_SetConfig+0x11c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d007      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a3b      	ldr	r2, [pc, #236]	; (8005bfc <TIM_Base_SetConfig+0x120>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a3a      	ldr	r2, [pc, #232]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d108      	bne.n	8005b2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2f      	ldr	r2, [pc, #188]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d02b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d027      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	; (8005bf4 <TIM_Base_SetConfig+0x118>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d023      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <TIM_Base_SetConfig+0x11c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01f      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <TIM_Base_SetConfig+0x120>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d017      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a28      	ldr	r2, [pc, #160]	; (8005c04 <TIM_Base_SetConfig+0x128>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d013      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a27      	ldr	r2, [pc, #156]	; (8005c08 <TIM_Base_SetConfig+0x12c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00f      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a26      	ldr	r2, [pc, #152]	; (8005c0c <TIM_Base_SetConfig+0x130>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00b      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a25      	ldr	r2, [pc, #148]	; (8005c10 <TIM_Base_SetConfig+0x134>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a24      	ldr	r2, [pc, #144]	; (8005c14 <TIM_Base_SetConfig+0x138>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a23      	ldr	r2, [pc, #140]	; (8005c18 <TIM_Base_SetConfig+0x13c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d108      	bne.n	8005ba0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <TIM_Base_SetConfig+0x114>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0xf8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d103      	bne.n	8005bdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	615a      	str	r2, [r3, #20]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40000c00 	.word	0x40000c00
 8005c00:	40010400 	.word	0x40010400
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800
 8005c10:	40001800 	.word	0x40001800
 8005c14:	40001c00 	.word	0x40001c00
 8005c18:	40002000 	.word	0x40002000

08005c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0201 	bic.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0303 	bic.w	r3, r3, #3
 8005c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f023 0302 	bic.w	r3, r3, #2
 8005c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a20      	ldr	r2, [pc, #128]	; (8005cf4 <TIM_OC1_SetConfig+0xd8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC1_SetConfig+0x64>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <TIM_OC1_SetConfig+0xdc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d10c      	bne.n	8005c9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0308 	bic.w	r3, r3, #8
 8005c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f023 0304 	bic.w	r3, r3, #4
 8005c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <TIM_OC1_SetConfig+0xd8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d003      	beq.n	8005caa <TIM_OC1_SetConfig+0x8e>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a14      	ldr	r2, [pc, #80]	; (8005cf8 <TIM_OC1_SetConfig+0xdc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d111      	bne.n	8005cce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	bf00      	nop
 8005cea:	371c      	adds	r7, #28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0210 	bic.w	r2, r3, #16
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0320 	bic.w	r3, r3, #32
 8005d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <TIM_OC2_SetConfig+0xe4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d003      	beq.n	8005d64 <TIM_OC2_SetConfig+0x68>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <TIM_OC2_SetConfig+0xe8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10d      	bne.n	8005d80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	011b      	lsls	r3, r3, #4
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a17      	ldr	r2, [pc, #92]	; (8005de0 <TIM_OC2_SetConfig+0xe4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC2_SetConfig+0x94>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a16      	ldr	r2, [pc, #88]	; (8005de4 <TIM_OC2_SetConfig+0xe8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400

08005de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0303 	bic.w	r3, r3, #3
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a21      	ldr	r2, [pc, #132]	; (8005ec8 <TIM_OC3_SetConfig+0xe0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d003      	beq.n	8005e4e <TIM_OC3_SetConfig+0x66>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a20      	ldr	r2, [pc, #128]	; (8005ecc <TIM_OC3_SetConfig+0xe4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d10d      	bne.n	8005e6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a16      	ldr	r2, [pc, #88]	; (8005ec8 <TIM_OC3_SetConfig+0xe0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_OC3_SetConfig+0x92>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <TIM_OC3_SetConfig+0xe4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d113      	bne.n	8005ea2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	031b      	lsls	r3, r3, #12
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <TIM_OC4_SetConfig+0xa4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC4_SetConfig+0x68>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a11      	ldr	r2, [pc, #68]	; (8005f78 <TIM_OC4_SetConfig+0xa8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d109      	bne.n	8005f4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40010400 	.word	0x40010400

08005f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f023 030a 	bic.w	r3, r3, #10
 8005fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b087      	sub	sp, #28
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	60f8      	str	r0, [r7, #12]
 8005fe2:	60b9      	str	r1, [r7, #8]
 8005fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0210 	bic.w	r2, r3, #16
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	031b      	lsls	r3, r3, #12
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	f043 0307 	orr.w	r3, r3, #7
 800605c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800608a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	021a      	lsls	r2, r3, #8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	431a      	orrs	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2201      	movs	r2, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	401a      	ands	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1a      	ldr	r2, [r3, #32]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	fa01 f303 	lsl.w	r3, r1, r3
 80060e8:	431a      	orrs	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	621a      	str	r2, [r3, #32]
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006110:	2302      	movs	r3, #2
 8006112:	e05a      	b.n	80061ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a21      	ldr	r2, [pc, #132]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d022      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006160:	d01d      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d018      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00e      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d009      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a17      	ldr	r2, [pc, #92]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d10c      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3714      	adds	r7, #20
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40000400 	.word	0x40000400
 80061e0:	40000800 	.word	0x40000800
 80061e4:	40000c00 	.word	0x40000c00
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40001800 	.word	0x40001800

080061f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e03f      	b.n	80062ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fd f8a8 	bl	8003398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2224      	movs	r2, #36	; 0x24
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800625e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f829 	bl	80062b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062bc:	b0c0      	sub	sp, #256	; 0x100
 80062be:	af00      	add	r7, sp, #0
 80062c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	68d9      	ldr	r1, [r3, #12]
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	ea40 0301 	orr.w	r3, r0, r1
 80062e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006310:	f021 010c 	bic.w	r1, r1, #12
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800631e:	430b      	orrs	r3, r1
 8006320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006332:	6999      	ldr	r1, [r3, #24]
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	ea40 0301 	orr.w	r3, r0, r1
 800633e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b8f      	ldr	r3, [pc, #572]	; (8006584 <UART_SetConfig+0x2cc>)
 8006348:	429a      	cmp	r2, r3
 800634a:	d005      	beq.n	8006358 <UART_SetConfig+0xa0>
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	4b8d      	ldr	r3, [pc, #564]	; (8006588 <UART_SetConfig+0x2d0>)
 8006354:	429a      	cmp	r2, r3
 8006356:	d104      	bne.n	8006362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006358:	f7fe fa42 	bl	80047e0 <HAL_RCC_GetPCLK2Freq>
 800635c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006360:	e003      	b.n	800636a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006362:	f7fe fa29 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8006366:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006374:	f040 810c 	bne.w	8006590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800637c:	2200      	movs	r2, #0
 800637e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006382:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800638a:	4622      	mov	r2, r4
 800638c:	462b      	mov	r3, r5
 800638e:	1891      	adds	r1, r2, r2
 8006390:	65b9      	str	r1, [r7, #88]	; 0x58
 8006392:	415b      	adcs	r3, r3
 8006394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800639a:	4621      	mov	r1, r4
 800639c:	eb12 0801 	adds.w	r8, r2, r1
 80063a0:	4629      	mov	r1, r5
 80063a2:	eb43 0901 	adc.w	r9, r3, r1
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ba:	4690      	mov	r8, r2
 80063bc:	4699      	mov	r9, r3
 80063be:	4623      	mov	r3, r4
 80063c0:	eb18 0303 	adds.w	r3, r8, r3
 80063c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063c8:	462b      	mov	r3, r5
 80063ca:	eb49 0303 	adc.w	r3, r9, r3
 80063ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063e6:	460b      	mov	r3, r1
 80063e8:	18db      	adds	r3, r3, r3
 80063ea:	653b      	str	r3, [r7, #80]	; 0x50
 80063ec:	4613      	mov	r3, r2
 80063ee:	eb42 0303 	adc.w	r3, r2, r3
 80063f2:	657b      	str	r3, [r7, #84]	; 0x54
 80063f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063fc:	f7fa fbc0 	bl	8000b80 <__aeabi_uldivmod>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4b61      	ldr	r3, [pc, #388]	; (800658c <UART_SetConfig+0x2d4>)
 8006406:	fba3 2302 	umull	r2, r3, r3, r2
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	011c      	lsls	r4, r3, #4
 800640e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006412:	2200      	movs	r2, #0
 8006414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006418:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800641c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	1891      	adds	r1, r2, r2
 8006426:	64b9      	str	r1, [r7, #72]	; 0x48
 8006428:	415b      	adcs	r3, r3
 800642a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800642c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006430:	4641      	mov	r1, r8
 8006432:	eb12 0a01 	adds.w	sl, r2, r1
 8006436:	4649      	mov	r1, r9
 8006438:	eb43 0b01 	adc.w	fp, r3, r1
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800644c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006450:	4692      	mov	sl, r2
 8006452:	469b      	mov	fp, r3
 8006454:	4643      	mov	r3, r8
 8006456:	eb1a 0303 	adds.w	r3, sl, r3
 800645a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800645e:	464b      	mov	r3, r9
 8006460:	eb4b 0303 	adc.w	r3, fp, r3
 8006464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006474:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800647c:	460b      	mov	r3, r1
 800647e:	18db      	adds	r3, r3, r3
 8006480:	643b      	str	r3, [r7, #64]	; 0x40
 8006482:	4613      	mov	r3, r2
 8006484:	eb42 0303 	adc.w	r3, r2, r3
 8006488:	647b      	str	r3, [r7, #68]	; 0x44
 800648a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800648e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006492:	f7fa fb75 	bl	8000b80 <__aeabi_uldivmod>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4611      	mov	r1, r2
 800649c:	4b3b      	ldr	r3, [pc, #236]	; (800658c <UART_SetConfig+0x2d4>)
 800649e:	fba3 2301 	umull	r2, r3, r3, r1
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2264      	movs	r2, #100	; 0x64
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	1acb      	subs	r3, r1, r3
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064b2:	4b36      	ldr	r3, [pc, #216]	; (800658c <UART_SetConfig+0x2d4>)
 80064b4:	fba3 2302 	umull	r2, r3, r3, r2
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064c0:	441c      	add	r4, r3
 80064c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064d4:	4642      	mov	r2, r8
 80064d6:	464b      	mov	r3, r9
 80064d8:	1891      	adds	r1, r2, r2
 80064da:	63b9      	str	r1, [r7, #56]	; 0x38
 80064dc:	415b      	adcs	r3, r3
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064e4:	4641      	mov	r1, r8
 80064e6:	1851      	adds	r1, r2, r1
 80064e8:	6339      	str	r1, [r7, #48]	; 0x30
 80064ea:	4649      	mov	r1, r9
 80064ec:	414b      	adcs	r3, r1
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064fc:	4659      	mov	r1, fp
 80064fe:	00cb      	lsls	r3, r1, #3
 8006500:	4651      	mov	r1, sl
 8006502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006506:	4651      	mov	r1, sl
 8006508:	00ca      	lsls	r2, r1, #3
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	4603      	mov	r3, r0
 8006510:	4642      	mov	r2, r8
 8006512:	189b      	adds	r3, r3, r2
 8006514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006518:	464b      	mov	r3, r9
 800651a:	460a      	mov	r2, r1
 800651c:	eb42 0303 	adc.w	r3, r2, r3
 8006520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006530:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006538:	460b      	mov	r3, r1
 800653a:	18db      	adds	r3, r3, r3
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
 800653e:	4613      	mov	r3, r2
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800654a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800654e:	f7fa fb17 	bl	8000b80 <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4b0d      	ldr	r3, [pc, #52]	; (800658c <UART_SetConfig+0x2d4>)
 8006558:	fba3 1302 	umull	r1, r3, r3, r2
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	2164      	movs	r1, #100	; 0x64
 8006560:	fb01 f303 	mul.w	r3, r1, r3
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	3332      	adds	r3, #50	; 0x32
 800656a:	4a08      	ldr	r2, [pc, #32]	; (800658c <UART_SetConfig+0x2d4>)
 800656c:	fba2 2303 	umull	r2, r3, r2, r3
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f003 0207 	and.w	r2, r3, #7
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4422      	add	r2, r4
 800657e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006580:	e105      	b.n	800678e <UART_SetConfig+0x4d6>
 8006582:	bf00      	nop
 8006584:	40011000 	.word	0x40011000
 8006588:	40011400 	.word	0x40011400
 800658c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800659a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800659e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065a2:	4642      	mov	r2, r8
 80065a4:	464b      	mov	r3, r9
 80065a6:	1891      	adds	r1, r2, r2
 80065a8:	6239      	str	r1, [r7, #32]
 80065aa:	415b      	adcs	r3, r3
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
 80065ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065b2:	4641      	mov	r1, r8
 80065b4:	1854      	adds	r4, r2, r1
 80065b6:	4649      	mov	r1, r9
 80065b8:	eb43 0501 	adc.w	r5, r3, r1
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	00eb      	lsls	r3, r5, #3
 80065c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ca:	00e2      	lsls	r2, r4, #3
 80065cc:	4614      	mov	r4, r2
 80065ce:	461d      	mov	r5, r3
 80065d0:	4643      	mov	r3, r8
 80065d2:	18e3      	adds	r3, r4, r3
 80065d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065d8:	464b      	mov	r3, r9
 80065da:	eb45 0303 	adc.w	r3, r5, r3
 80065de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065f2:	f04f 0200 	mov.w	r2, #0
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065fe:	4629      	mov	r1, r5
 8006600:	008b      	lsls	r3, r1, #2
 8006602:	4621      	mov	r1, r4
 8006604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006608:	4621      	mov	r1, r4
 800660a:	008a      	lsls	r2, r1, #2
 800660c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006610:	f7fa fab6 	bl	8000b80 <__aeabi_uldivmod>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4b60      	ldr	r3, [pc, #384]	; (800679c <UART_SetConfig+0x4e4>)
 800661a:	fba3 2302 	umull	r2, r3, r3, r2
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	011c      	lsls	r4, r3, #4
 8006622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006626:	2200      	movs	r2, #0
 8006628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800662c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	1891      	adds	r1, r2, r2
 800663a:	61b9      	str	r1, [r7, #24]
 800663c:	415b      	adcs	r3, r3
 800663e:	61fb      	str	r3, [r7, #28]
 8006640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006644:	4641      	mov	r1, r8
 8006646:	1851      	adds	r1, r2, r1
 8006648:	6139      	str	r1, [r7, #16]
 800664a:	4649      	mov	r1, r9
 800664c:	414b      	adcs	r3, r1
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800665c:	4659      	mov	r1, fp
 800665e:	00cb      	lsls	r3, r1, #3
 8006660:	4651      	mov	r1, sl
 8006662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006666:	4651      	mov	r1, sl
 8006668:	00ca      	lsls	r2, r1, #3
 800666a:	4610      	mov	r0, r2
 800666c:	4619      	mov	r1, r3
 800666e:	4603      	mov	r3, r0
 8006670:	4642      	mov	r2, r8
 8006672:	189b      	adds	r3, r3, r2
 8006674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006678:	464b      	mov	r3, r9
 800667a:	460a      	mov	r2, r1
 800667c:	eb42 0303 	adc.w	r3, r2, r3
 8006680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	67bb      	str	r3, [r7, #120]	; 0x78
 800668e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800669c:	4649      	mov	r1, r9
 800669e:	008b      	lsls	r3, r1, #2
 80066a0:	4641      	mov	r1, r8
 80066a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a6:	4641      	mov	r1, r8
 80066a8:	008a      	lsls	r2, r1, #2
 80066aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066ae:	f7fa fa67 	bl	8000b80 <__aeabi_uldivmod>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4b39      	ldr	r3, [pc, #228]	; (800679c <UART_SetConfig+0x4e4>)
 80066b8:	fba3 1302 	umull	r1, r3, r3, r2
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	2164      	movs	r1, #100	; 0x64
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	3332      	adds	r3, #50	; 0x32
 80066ca:	4a34      	ldr	r2, [pc, #208]	; (800679c <UART_SetConfig+0x4e4>)
 80066cc:	fba2 2303 	umull	r2, r3, r2, r3
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066d6:	441c      	add	r4, r3
 80066d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066dc:	2200      	movs	r2, #0
 80066de:	673b      	str	r3, [r7, #112]	; 0x70
 80066e0:	677a      	str	r2, [r7, #116]	; 0x74
 80066e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066e6:	4642      	mov	r2, r8
 80066e8:	464b      	mov	r3, r9
 80066ea:	1891      	adds	r1, r2, r2
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	415b      	adcs	r3, r3
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066f6:	4641      	mov	r1, r8
 80066f8:	1851      	adds	r1, r2, r1
 80066fa:	6039      	str	r1, [r7, #0]
 80066fc:	4649      	mov	r1, r9
 80066fe:	414b      	adcs	r3, r1
 8006700:	607b      	str	r3, [r7, #4]
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800670e:	4659      	mov	r1, fp
 8006710:	00cb      	lsls	r3, r1, #3
 8006712:	4651      	mov	r1, sl
 8006714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006718:	4651      	mov	r1, sl
 800671a:	00ca      	lsls	r2, r1, #3
 800671c:	4610      	mov	r0, r2
 800671e:	4619      	mov	r1, r3
 8006720:	4603      	mov	r3, r0
 8006722:	4642      	mov	r2, r8
 8006724:	189b      	adds	r3, r3, r2
 8006726:	66bb      	str	r3, [r7, #104]	; 0x68
 8006728:	464b      	mov	r3, r9
 800672a:	460a      	mov	r2, r1
 800672c:	eb42 0303 	adc.w	r3, r2, r3
 8006730:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	663b      	str	r3, [r7, #96]	; 0x60
 800673c:	667a      	str	r2, [r7, #100]	; 0x64
 800673e:	f04f 0200 	mov.w	r2, #0
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800674a:	4649      	mov	r1, r9
 800674c:	008b      	lsls	r3, r1, #2
 800674e:	4641      	mov	r1, r8
 8006750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006754:	4641      	mov	r1, r8
 8006756:	008a      	lsls	r2, r1, #2
 8006758:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800675c:	f7fa fa10 	bl	8000b80 <__aeabi_uldivmod>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4b0d      	ldr	r3, [pc, #52]	; (800679c <UART_SetConfig+0x4e4>)
 8006766:	fba3 1302 	umull	r1, r3, r3, r2
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	2164      	movs	r1, #100	; 0x64
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	3332      	adds	r3, #50	; 0x32
 8006778:	4a08      	ldr	r2, [pc, #32]	; (800679c <UART_SetConfig+0x4e4>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	f003 020f 	and.w	r2, r3, #15
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4422      	add	r2, r4
 800678c:	609a      	str	r2, [r3, #8]
}
 800678e:	bf00      	nop
 8006790:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006794:	46bd      	mov	sp, r7
 8006796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800679a:	bf00      	nop
 800679c:	51eb851f 	.word	0x51eb851f

080067a0 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	2101      	movs	r1, #1
 80067ae:	481f      	ldr	r0, [pc, #124]	; (800682c <network_configure_activations+0x8c>)
 80067b0:	f000 fa8e 	bl	8006cd0 <ai_platform_get_activations_map>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d02d      	beq.n	8006816 <network_configure_activations+0x76>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80067ba:	4b1c      	ldr	r3, [pc, #112]	; (800682c <network_configure_activations+0x8c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <network_configure_activations+0x90>)
 80067c0:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80067c2:	4b1a      	ldr	r3, [pc, #104]	; (800682c <network_configure_activations+0x8c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <network_configure_activations+0x90>)
 80067c8:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <network_configure_activations+0x8c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3318      	adds	r3, #24
 80067d0:	4a18      	ldr	r2, [pc, #96]	; (8006834 <network_configure_activations+0x94>)
 80067d2:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <network_configure_activations+0x8c>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3318      	adds	r3, #24
 80067da:	4a16      	ldr	r2, [pc, #88]	; (8006834 <network_configure_activations+0x94>)
 80067dc:	60d3      	str	r3, [r2, #12]
    
    dense_6_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80067de:	4b13      	ldr	r3, [pc, #76]	; (800682c <network_configure_activations+0x8c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <network_configure_activations+0x98>)
 80067e4:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80067e6:	4b11      	ldr	r3, [pc, #68]	; (800682c <network_configure_activations+0x8c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <network_configure_activations+0x98>)
 80067ec:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 80067ee:	4b0f      	ldr	r3, [pc, #60]	; (800682c <network_configure_activations+0x8c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3314      	adds	r3, #20
 80067f4:	4a11      	ldr	r2, [pc, #68]	; (800683c <network_configure_activations+0x9c>)
 80067f6:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <network_configure_activations+0x8c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	4a0f      	ldr	r2, [pc, #60]	; (800683c <network_configure_activations+0x9c>)
 8006800:	60d3      	str	r3, [r2, #12]
    
    dense_7_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006802:	4b0a      	ldr	r3, [pc, #40]	; (800682c <network_configure_activations+0x8c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a0e      	ldr	r2, [pc, #56]	; (8006840 <network_configure_activations+0xa0>)
 8006808:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <network_configure_activations+0x8c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a0c      	ldr	r2, [pc, #48]	; (8006840 <network_configure_activations+0xa0>)
 8006810:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006812:	2301      	movs	r3, #1
 8006814:	e005      	b.n	8006822 <network_configure_activations+0x82>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006816:	2213      	movs	r2, #19
 8006818:	2130      	movs	r1, #48	; 0x30
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fb3c 	bl	8006e98 <ai_platform_network_set_error>
  return false;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000950 	.word	0x20000950
 8006830:	2000008c 	.word	0x2000008c
 8006834:	2000000c 	.word	0x2000000c
 8006838:	2000001c 	.word	0x2000001c
 800683c:	2000002c 	.word	0x2000002c
 8006840:	2000003c 	.word	0x2000003c

08006844 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	2101      	movs	r1, #1
 8006852:	4828      	ldr	r0, [pc, #160]	; (80068f4 <network_configure_weights+0xb0>)
 8006854:	f000 f9e8 	bl	8006c28 <ai_platform_get_weights_map>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d03f      	beq.n	80068de <network_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800685e:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <network_configure_weights+0xb4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006866:	4a24      	ldr	r2, [pc, #144]	; (80068f8 <network_configure_weights+0xb4>)
 8006868:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800686a:	4b22      	ldr	r3, [pc, #136]	; (80068f4 <network_configure_weights+0xb0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <network_configure_weights+0xb4>)
 8006870:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8006872:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <network_configure_weights+0xb0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a20      	ldr	r2, [pc, #128]	; (80068f8 <network_configure_weights+0xb4>)
 8006878:	60d3      	str	r3, [r2, #12]
    
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800687a:	4b20      	ldr	r3, [pc, #128]	; (80068fc <network_configure_weights+0xb8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006882:	4a1e      	ldr	r2, [pc, #120]	; (80068fc <network_configure_weights+0xb8>)
 8006884:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 120);
 8006886:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <network_configure_weights+0xb0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3378      	adds	r3, #120	; 0x78
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <network_configure_weights+0xb8>)
 800688e:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 120);
 8006890:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <network_configure_weights+0xb0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3378      	adds	r3, #120	; 0x78
 8006896:	4a19      	ldr	r2, [pc, #100]	; (80068fc <network_configure_weights+0xb8>)
 8006898:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800689a:	4b19      	ldr	r3, [pc, #100]	; (8006900 <network_configure_weights+0xbc>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068a2:	4a17      	ldr	r2, [pc, #92]	; (8006900 <network_configure_weights+0xbc>)
 80068a4:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 140);
 80068a6:	4b13      	ldr	r3, [pc, #76]	; (80068f4 <network_configure_weights+0xb0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	338c      	adds	r3, #140	; 0x8c
 80068ac:	4a14      	ldr	r2, [pc, #80]	; (8006900 <network_configure_weights+0xbc>)
 80068ae:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 140);
 80068b0:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <network_configure_weights+0xb0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	338c      	adds	r3, #140	; 0x8c
 80068b6:	4a12      	ldr	r2, [pc, #72]	; (8006900 <network_configure_weights+0xbc>)
 80068b8:	60d3      	str	r3, [r2, #12]
    
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <network_configure_weights+0xc0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068c2:	4a10      	ldr	r2, [pc, #64]	; (8006904 <network_configure_weights+0xc0>)
 80068c4:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 200);
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <network_configure_weights+0xb0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	33c8      	adds	r3, #200	; 0xc8
 80068cc:	4a0d      	ldr	r2, [pc, #52]	; (8006904 <network_configure_weights+0xc0>)
 80068ce:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 200);
 80068d0:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <network_configure_weights+0xb0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	33c8      	adds	r3, #200	; 0xc8
 80068d6:	4a0b      	ldr	r2, [pc, #44]	; (8006904 <network_configure_weights+0xc0>)
 80068d8:	60d3      	str	r3, [r2, #12]
    
    return true;
 80068da:	2301      	movs	r3, #1
 80068dc:	e005      	b.n	80068ea <network_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80068de:	2212      	movs	r2, #18
 80068e0:	2130      	movs	r1, #48	; 0x30
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fad8 	bl	8006e98 <ai_platform_network_set_error>
  return false;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000954 	.word	0x20000954
 80068f8:	2000004c 	.word	0x2000004c
 80068fc:	2000005c 	.word	0x2000005c
 8006900:	2000006c 	.word	0x2000006c
 8006904:	2000007c 	.word	0x2000007c

08006908 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fa53 	bl	8006dbc <ai_platform_network_get_error>
 8006916:	4603      	mov	r3, r0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800692a:	2300      	movs	r3, #0
 800692c:	9301      	str	r3, [sp, #4]
 800692e:	2305      	movs	r3, #5
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	2301      	movs	r3, #1
 8006934:	4a04      	ldr	r2, [pc, #16]	; (8006948 <ai_network_create+0x28>)
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fc59 	bl	80071f0 <ai_platform_network_create>
 800693e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	200004b0 	.word	0x200004b0

0800694c <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b096      	sub	sp, #88	; 0x58
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006958:	2100      	movs	r1, #0
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff ffe0 	bl	8006920 <ai_network_create>
 8006960:	4603      	mov	r3, r0
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8006964:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <ai_network_create_and_init+0x24>
        return err;
 800696c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696e:	e05d      	b.n	8006a2c <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8006970:	f107 0314 	add.w	r3, r7, #20
 8006974:	4618      	mov	r0, r3
 8006976:	f000 f8dd 	bl	8006b34 <ai_network_data_params_get>
 800697a:	4603      	mov	r3, r0
 800697c:	f083 0301 	eor.w	r3, r3, #1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff ffbc 	bl	8006908 <ai_network_get_error>
 8006990:	4603      	mov	r3, r0
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8006994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006996:	e049      	b.n	8006a2c <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800699e:	2300      	movs	r3, #0
 80069a0:	657b      	str	r3, [r7, #84]	; 0x54
 80069a2:	e00e      	b.n	80069c2 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80069a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	4413      	add	r3, r2
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	330c      	adds	r3, #12
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f922 	bl	8006c00 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80069bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069be:	3301      	adds	r3, #1
 80069c0:	657b      	str	r3, [r7, #84]	; 0x54
 80069c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069c4:	461a      	mov	r2, r3
 80069c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c8:	4293      	cmp	r3, r2
 80069ca:	dbeb      	blt.n	80069a4 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d016      	beq.n	8006a00 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80069d2:	2300      	movs	r3, #0
 80069d4:	653b      	str	r3, [r7, #80]	; 0x50
 80069d6:	e00e      	b.n	80069f6 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80069d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	4413      	add	r3, r2
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	f107 0314 	add.w	r3, r7, #20
 80069e8:	3304      	adds	r3, #4
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 f908 	bl	8006c00 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80069f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f2:	3301      	adds	r3, #1
 80069f4:	653b      	str	r3, [r7, #80]	; 0x50
 80069f6:	8b7b      	ldrh	r3, [r7, #26]
 80069f8:	461a      	mov	r2, r3
 80069fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fc:	4293      	cmp	r3, r2
 80069fe:	dbeb      	blt.n	80069d8 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f107 0214 	add.w	r2, r7, #20
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f846 	bl	8006a9c <ai_network_init>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f083 0301 	eor.w	r3, r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d006      	beq.n	8006a2a <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7ff ff71 	bl	8006908 <ai_network_get_error>
 8006a26:	4603      	mov	r3, r0
 8006a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8006a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3758      	adds	r7, #88	; 0x58
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <ai_network_inputs_get+0x2c>)
 8006a46:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a06      	ldr	r2, [pc, #24]	; (8006a64 <ai_network_inputs_get+0x30>)
 8006a4c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa27 	bl	8006ea4 <ai_platform_inputs_get>
 8006a56:	4603      	mov	r3, r0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	200004b0 	.word	0x200004b0
 8006a64:	a1c00100 	.word	0xa1c00100

08006a68 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <ai_network_outputs_get+0x2c>)
 8006a7a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a06      	ldr	r2, [pc, #24]	; (8006a98 <ai_network_outputs_get+0x30>)
 8006a80:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fae3 	bl	8007050 <ai_platform_outputs_get>
 8006a8a:	4603      	mov	r3, r0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	200004b0 	.word	0x200004b0
 8006a98:	a1c00100 	.word	0xa1c00100

08006a9c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fc77 	bl	800739c <ai_platform_network_init>
 8006aae:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <ai_network_init+0x1e>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e028      	b.n	8006b0c <ai_network_init+0x70>

  ai_bool ok = true;
 8006aba:	2301      	movs	r3, #1
 8006abc:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7ff febf 	bl	8006844 <network_configure_weights>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	4013      	ands	r3, r2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bf14      	ite	ne
 8006ad2:	2301      	movne	r3, #1
 8006ad4:	2300      	moveq	r3, #0
 8006ad6:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fe60 	bl	80067a0 <network_configure_activations>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fd40 	bl	8007578 <ai_platform_network_post_init>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	bf14      	ite	ne
 8006b04:	2301      	movne	r3, #1
 8006b06:	2300      	moveq	r3, #0
 8006b08:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fdaf 	bl	8007688 <ai_platform_network_process>
 8006b2a:	4603      	mov	r3, r0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <ai_network_data_params_get+0x12>
 8006b42:	2300      	movs	r3, #0
 8006b44:	e016      	b.n	8006b74 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006b46:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <ai_network_data_params_get+0x48>)
 8006b48:	f107 0310 	add.w	r3, r7, #16
 8006b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b50:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006b54:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <ai_network_data_params_get+0x4c>)
 8006b56:	f107 0308 	add.w	r3, r7, #8
 8006b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b5e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8006b62:	f107 0210 	add.w	r2, r7, #16
 8006b66:	f107 0308 	add.w	r3, r7, #8
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f903 	bl	8006d78 <ai_platform_bind_network_params>
 8006b72:	4603      	mov	r3, r0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	0800a2f0 	.word	0x0800a2f0
 8006b80:	0800a2f8 	.word	0x0800a2f8

08006b84 <ai_buffer_get_size>:
 8006b84:	b378      	cbz	r0, 8006be6 <ai_buffer_get_size+0x62>
 8006b86:	b410      	push	{r4}
 8006b88:	6803      	ldr	r3, [r0, #0]
 8006b8a:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <ai_buffer_get_size+0x64>)
 8006b8c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006b90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d01e      	beq.n	8006bd6 <ai_buffer_get_size+0x52>
 8006b98:	6984      	ldr	r4, [r0, #24]
 8006b9a:	6862      	ldr	r2, [r4, #4]
 8006b9c:	7d03      	ldrb	r3, [r0, #20]
 8006b9e:	6941      	ldr	r1, [r0, #20]
 8006ba0:	f1a3 0301 	sub.w	r3, r3, #1
 8006ba4:	fab3 f383 	clz	r3, r3
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006bae:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006bb2:	da0b      	bge.n	8006bcc <ai_buffer_get_size+0x48>
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d102      	bne.n	8006bbe <ai_buffer_get_size+0x3a>
 8006bb8:	2802      	cmp	r0, #2
 8006bba:	d007      	beq.n	8006bcc <ai_buffer_get_size+0x48>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	4298      	cmp	r0, r3
 8006bc6:	fb01 f202 	mul.w	r2, r1, r2
 8006bca:	d1f3      	bne.n	8006bb4 <ai_buffer_get_size+0x30>
 8006bcc:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	2900      	cmp	r1, #0
 8006bd8:	d0de      	beq.n	8006b98 <ai_buffer_get_size+0x14>
 8006bda:	6984      	ldr	r4, [r0, #24]
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	331f      	adds	r3, #31
 8006be0:	f023 021f 	bic.w	r2, r3, #31
 8006be4:	e7da      	b.n	8006b9c <ai_buffer_get_size+0x18>
 8006be6:	4770      	bx	lr
 8006be8:	000400c0 	.word	0x000400c0

08006bec <ai_buffer_array_sane>:
 8006bec:	b138      	cbz	r0, 8006bfe <ai_buffer_array_sane+0x12>
 8006bee:	6843      	ldr	r3, [r0, #4]
 8006bf0:	b123      	cbz	r3, 8006bfc <ai_buffer_array_sane+0x10>
 8006bf2:	8840      	ldrh	r0, [r0, #2]
 8006bf4:	3800      	subs	r0, #0
 8006bf6:	bf18      	it	ne
 8006bf8:	2001      	movne	r0, #1
 8006bfa:	4770      	bx	lr
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	4770      	bx	lr

08006c00 <ai_buffer_array_item_set_address>:
 8006c00:	b150      	cbz	r0, 8006c18 <ai_buffer_array_item_set_address+0x18>
 8006c02:	6843      	ldr	r3, [r0, #4]
 8006c04:	b14b      	cbz	r3, 8006c1a <ai_buffer_array_item_set_address+0x1a>
 8006c06:	8840      	ldrh	r0, [r0, #2]
 8006c08:	b900      	cbnz	r0, 8006c0c <ai_buffer_array_item_set_address+0xc>
 8006c0a:	4770      	bx	lr
 8006c0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006c10:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006c14:	2001      	movs	r0, #1
 8006c16:	604a      	str	r2, [r1, #4]
 8006c18:	4770      	bx	lr
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop

08006c20 <_ai_platform_acquire_crc>:
 8006c20:	2001      	movs	r0, #1
 8006c22:	4770      	bx	lr

08006c24 <_ai_platform_release_crc>:
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <ai_platform_get_weights_map>:
 8006c28:	2a00      	cmp	r2, #0
 8006c2a:	d037      	beq.n	8006c9c <ai_platform_get_weights_map+0x74>
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	4604      	mov	r4, r0
 8006c30:	b1a0      	cbz	r0, 8006c5c <ai_platform_get_weights_map+0x34>
 8006c32:	460f      	mov	r7, r1
 8006c34:	b191      	cbz	r1, 8006c5c <ai_platform_get_weights_map+0x34>
 8006c36:	4b25      	ldr	r3, [pc, #148]	; (8006ccc <ai_platform_get_weights_map+0xa4>)
 8006c38:	6810      	ldr	r0, [r2, #0]
 8006c3a:	4298      	cmp	r0, r3
 8006c3c:	4615      	mov	r5, r2
 8006c3e:	d00f      	beq.n	8006c60 <ai_platform_get_weights_map+0x38>
 8006c40:	6855      	ldr	r5, [r2, #4]
 8006c42:	b15d      	cbz	r5, 8006c5c <ai_platform_get_weights_map+0x34>
 8006c44:	682e      	ldr	r6, [r5, #0]
 8006c46:	429e      	cmp	r6, r3
 8006c48:	d02a      	beq.n	8006ca0 <ai_platform_get_weights_map+0x78>
 8006c4a:	f1a1 0001 	sub.w	r0, r1, #1
 8006c4e:	6025      	str	r5, [r4, #0]
 8006c50:	fab0 f080 	clz	r0, r0
 8006c54:	0940      	lsrs	r0, r0, #5
 8006c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c58:	42a7      	cmp	r7, r4
 8006c5a:	d034      	beq.n	8006cc6 <ai_platform_get_weights_map+0x9e>
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c60:	1d10      	adds	r0, r2, #4
 8006c62:	f7ff ffc3 	bl	8006bec <ai_buffer_array_sane>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d0f8      	beq.n	8006c5c <ai_platform_get_weights_map+0x34>
 8006c6a:	88eb      	ldrh	r3, [r5, #6]
 8006c6c:	429f      	cmp	r7, r3
 8006c6e:	d1f5      	bne.n	8006c5c <ai_platform_get_weights_map+0x34>
 8006c70:	f04f 0e00 	mov.w	lr, #0
 8006c74:	1f23      	subs	r3, r4, #4
 8006c76:	4670      	mov	r0, lr
 8006c78:	68aa      	ldr	r2, [r5, #8]
 8006c7a:	eb02 0c0e 	add.w	ip, r2, lr
 8006c7e:	f10e 0e1c 	add.w	lr, lr, #28
 8006c82:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006c86:	b124      	cbz	r4, 8006c92 <ai_platform_get_weights_map+0x6a>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	4287      	cmp	r7, r0
 8006c8c:	f843 4f04 	str.w	r4, [r3, #4]!
 8006c90:	d1f2      	bne.n	8006c78 <ai_platform_get_weights_map+0x50>
 8006c92:	1a38      	subs	r0, r7, r0
 8006c94:	fab0 f080 	clz	r0, r0
 8006c98:	0940      	lsrs	r0, r0, #5
 8006c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	4770      	bx	lr
 8006ca0:	1f23      	subs	r3, r4, #4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	2400      	movs	r4, #0
 8006ca6:	e000      	b.n	8006caa <ai_platform_get_weights_map+0x82>
 8006ca8:	4614      	mov	r4, r2
 8006caa:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006cae:	42b2      	cmp	r2, r6
 8006cb0:	d0d2      	beq.n	8006c58 <ai_platform_get_weights_map+0x30>
 8006cb2:	f843 2f04 	str.w	r2, [r3, #4]!
 8006cb6:	1c62      	adds	r2, r4, #1
 8006cb8:	4297      	cmp	r7, r2
 8006cba:	d1f5      	bne.n	8006ca8 <ai_platform_get_weights_map+0x80>
 8006cbc:	3402      	adds	r4, #2
 8006cbe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006cc2:	42b3      	cmp	r3, r6
 8006cc4:	d1ca      	bne.n	8006c5c <ai_platform_get_weights_map+0x34>
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	a1facade 	.word	0xa1facade

08006cd0 <ai_platform_get_activations_map>:
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d038      	beq.n	8006d46 <ai_platform_get_activations_map+0x76>
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	b1a0      	cbz	r0, 8006d04 <ai_platform_get_activations_map+0x34>
 8006cda:	460f      	mov	r7, r1
 8006cdc:	b191      	cbz	r1, 8006d04 <ai_platform_get_activations_map+0x34>
 8006cde:	4b25      	ldr	r3, [pc, #148]	; (8006d74 <ai_platform_get_activations_map+0xa4>)
 8006ce0:	6810      	ldr	r0, [r2, #0]
 8006ce2:	4298      	cmp	r0, r3
 8006ce4:	4615      	mov	r5, r2
 8006ce6:	d00f      	beq.n	8006d08 <ai_platform_get_activations_map+0x38>
 8006ce8:	6a15      	ldr	r5, [r2, #32]
 8006cea:	b15d      	cbz	r5, 8006d04 <ai_platform_get_activations_map+0x34>
 8006cec:	682e      	ldr	r6, [r5, #0]
 8006cee:	429e      	cmp	r6, r3
 8006cf0:	d02b      	beq.n	8006d4a <ai_platform_get_activations_map+0x7a>
 8006cf2:	f1a1 0001 	sub.w	r0, r1, #1
 8006cf6:	6025      	str	r5, [r4, #0]
 8006cf8:	fab0 f080 	clz	r0, r0
 8006cfc:	0940      	lsrs	r0, r0, #5
 8006cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d00:	42a7      	cmp	r7, r4
 8006d02:	d035      	beq.n	8006d70 <ai_platform_get_activations_map+0xa0>
 8006d04:	2000      	movs	r0, #0
 8006d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d08:	f102 000c 	add.w	r0, r2, #12
 8006d0c:	f7ff ff6e 	bl	8006bec <ai_buffer_array_sane>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	d0f7      	beq.n	8006d04 <ai_platform_get_activations_map+0x34>
 8006d14:	89eb      	ldrh	r3, [r5, #14]
 8006d16:	429f      	cmp	r7, r3
 8006d18:	d1f4      	bne.n	8006d04 <ai_platform_get_activations_map+0x34>
 8006d1a:	f04f 0e00 	mov.w	lr, #0
 8006d1e:	1f23      	subs	r3, r4, #4
 8006d20:	4670      	mov	r0, lr
 8006d22:	692a      	ldr	r2, [r5, #16]
 8006d24:	eb02 0c0e 	add.w	ip, r2, lr
 8006d28:	f10e 0e1c 	add.w	lr, lr, #28
 8006d2c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006d30:	b124      	cbz	r4, 8006d3c <ai_platform_get_activations_map+0x6c>
 8006d32:	3001      	adds	r0, #1
 8006d34:	4287      	cmp	r7, r0
 8006d36:	f843 4f04 	str.w	r4, [r3, #4]!
 8006d3a:	d1f2      	bne.n	8006d22 <ai_platform_get_activations_map+0x52>
 8006d3c:	1a38      	subs	r0, r7, r0
 8006d3e:	fab0 f080 	clz	r0, r0
 8006d42:	0940      	lsrs	r0, r0, #5
 8006d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d46:	2000      	movs	r0, #0
 8006d48:	4770      	bx	lr
 8006d4a:	1f23      	subs	r3, r4, #4
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	2400      	movs	r4, #0
 8006d50:	e000      	b.n	8006d54 <ai_platform_get_activations_map+0x84>
 8006d52:	4614      	mov	r4, r2
 8006d54:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006d58:	42b2      	cmp	r2, r6
 8006d5a:	d0d1      	beq.n	8006d00 <ai_platform_get_activations_map+0x30>
 8006d5c:	f843 2f04 	str.w	r2, [r3, #4]!
 8006d60:	1c62      	adds	r2, r4, #1
 8006d62:	4297      	cmp	r7, r2
 8006d64:	d1f5      	bne.n	8006d52 <ai_platform_get_activations_map+0x82>
 8006d66:	3402      	adds	r4, #2
 8006d68:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006d6c:	42b3      	cmp	r3, r6
 8006d6e:	d1c9      	bne.n	8006d04 <ai_platform_get_activations_map+0x34>
 8006d70:	2001      	movs	r0, #1
 8006d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d74:	a1facade 	.word	0xa1facade

08006d78 <ai_platform_bind_network_params>:
 8006d78:	b1a0      	cbz	r0, 8006da4 <ai_platform_bind_network_params+0x2c>
 8006d7a:	b1b1      	cbz	r1, 8006daa <ai_platform_bind_network_params+0x32>
 8006d7c:	b1c2      	cbz	r2, 8006db0 <ai_platform_bind_network_params+0x38>
 8006d7e:	b410      	push	{r4}
 8006d80:	4603      	mov	r3, r0
 8006d82:	4c0d      	ldr	r4, [pc, #52]	; (8006db8 <ai_platform_bind_network_params+0x40>)
 8006d84:	f843 4b04 	str.w	r4, [r3], #4
 8006d88:	f100 0c0c 	add.w	ip, r0, #12
 8006d8c:	c903      	ldmia	r1, {r0, r1}
 8006d8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8006d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d96:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	4603      	mov	r3, r0
 8006da6:	4618      	mov	r0, r3
 8006da8:	4770      	bx	lr
 8006daa:	460b      	mov	r3, r1
 8006dac:	4618      	mov	r0, r3
 8006dae:	4770      	bx	lr
 8006db0:	4613      	mov	r3, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	a1facade 	.word	0xa1facade

08006dbc <ai_platform_network_get_error>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	b1f0      	cbz	r0, 8006dfe <ai_platform_network_get_error+0x42>
 8006dc0:	4b2f      	ldr	r3, [pc, #188]	; (8006e80 <ai_platform_network_get_error+0xc4>)
 8006dc2:	6802      	ldr	r2, [r0, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	d119      	bne.n	8006dfe <ai_platform_network_get_error+0x42>
 8006dca:	f7ff ff29 	bl	8006c20 <_ai_platform_acquire_crc>
 8006dce:	4b2d      	ldr	r3, [pc, #180]	; (8006e84 <ai_platform_network_get_error+0xc8>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dda:	d03c      	beq.n	8006e56 <ai_platform_network_get_error+0x9a>
 8006ddc:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <ai_platform_network_get_error+0xcc>)
 8006dde:	2301      	movs	r3, #1
 8006de0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006de4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1fb      	bne.n	8006de4 <ai_platform_network_get_error+0x28>
 8006dec:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <ai_platform_network_get_error+0xd0>)
 8006dee:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006df2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006df6:	4b26      	ldr	r3, [pc, #152]	; (8006e90 <ai_platform_network_get_error+0xd4>)
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d038      	beq.n	8006e6e <ai_platform_network_get_error+0xb2>
 8006dfc:	e7fe      	b.n	8006dfc <ai_platform_network_get_error+0x40>
 8006dfe:	f7ff ff0f 	bl	8006c20 <_ai_platform_acquire_crc>
 8006e02:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <ai_platform_network_get_error+0xc8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0e:	d010      	beq.n	8006e32 <ai_platform_network_get_error+0x76>
 8006e10:	4a1d      	ldr	r2, [pc, #116]	; (8006e88 <ai_platform_network_get_error+0xcc>)
 8006e12:	2301      	movs	r3, #1
 8006e14:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006e18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1fb      	bne.n	8006e18 <ai_platform_network_get_error+0x5c>
 8006e20:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <ai_platform_network_get_error+0xd0>)
 8006e22:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006e26:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006e2a:	4b19      	ldr	r3, [pc, #100]	; (8006e90 <ai_platform_network_get_error+0xd4>)
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d00d      	beq.n	8006e4c <ai_platform_network_get_error+0x90>
 8006e30:	e7fe      	b.n	8006e30 <ai_platform_network_get_error+0x74>
 8006e32:	4a18      	ldr	r2, [pc, #96]	; (8006e94 <ai_platform_network_get_error+0xd8>)
 8006e34:	2301      	movs	r3, #1
 8006e36:	6093      	str	r3, [r2, #8]
 8006e38:	6893      	ldr	r3, [r2, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1fc      	bne.n	8006e38 <ai_platform_network_get_error+0x7c>
 8006e3e:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <ai_platform_network_get_error+0xd0>)
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	6812      	ldr	r2, [r2, #0]
 8006e44:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <ai_platform_network_get_error+0xd4>)
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d000      	beq.n	8006e4c <ai_platform_network_get_error+0x90>
 8006e4a:	e7fe      	b.n	8006e4a <ai_platform_network_get_error+0x8e>
 8006e4c:	f7ff feea 	bl	8006c24 <_ai_platform_release_crc>
 8006e50:	f241 0010 	movw	r0, #4112	; 0x1010
 8006e54:	bd10      	pop	{r4, pc}
 8006e56:	4a0f      	ldr	r2, [pc, #60]	; (8006e94 <ai_platform_network_get_error+0xd8>)
 8006e58:	2301      	movs	r3, #1
 8006e5a:	6093      	str	r3, [r2, #8]
 8006e5c:	6893      	ldr	r3, [r2, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1fc      	bne.n	8006e5c <ai_platform_network_get_error+0xa0>
 8006e62:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <ai_platform_network_get_error+0xd0>)
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <ai_platform_network_get_error+0xd4>)
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d107      	bne.n	8006e7e <ai_platform_network_get_error+0xc2>
 8006e6e:	f7ff fed9 	bl	8006c24 <_ai_platform_release_crc>
 8006e72:	f104 0010 	add.w	r0, r4, #16
 8006e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e7a:	f000 be8d 	b.w	8007b98 <core_get_error>
 8006e7e:	e7fe      	b.n	8006e7e <ai_platform_network_get_error+0xc2>
 8006e80:	a1c00100 	.word	0xa1c00100
 8006e84:	e0042000 	.word	0xe0042000
 8006e88:	58024000 	.word	0x58024000
 8006e8c:	f407a5c2 	.word	0xf407a5c2
 8006e90:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e94:	40023000 	.word	0x40023000

08006e98 <ai_platform_network_set_error>:
 8006e98:	b110      	cbz	r0, 8006ea0 <ai_platform_network_set_error+0x8>
 8006e9a:	3010      	adds	r0, #16
 8006e9c:	f000 be82 	b.w	8007ba4 <core_set_error>
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop

08006ea4 <ai_platform_inputs_get>:
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	9102      	str	r1, [sp, #8]
 8006eac:	b1f0      	cbz	r0, 8006eec <ai_platform_inputs_get+0x48>
 8006eae:	4b62      	ldr	r3, [pc, #392]	; (8007038 <ai_platform_inputs_get+0x194>)
 8006eb0:	6802      	ldr	r2, [r0, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	d119      	bne.n	8006eec <ai_platform_inputs_get+0x48>
 8006eb8:	f7ff feb2 	bl	8006c20 <_ai_platform_acquire_crc>
 8006ebc:	4b5f      	ldr	r3, [pc, #380]	; (800703c <ai_platform_inputs_get+0x198>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec8:	d03d      	beq.n	8006f46 <ai_platform_inputs_get+0xa2>
 8006eca:	4a5d      	ldr	r2, [pc, #372]	; (8007040 <ai_platform_inputs_get+0x19c>)
 8006ecc:	2301      	movs	r3, #1
 8006ece:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006ed2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1fb      	bne.n	8006ed2 <ai_platform_inputs_get+0x2e>
 8006eda:	4b5a      	ldr	r3, [pc, #360]	; (8007044 <ai_platform_inputs_get+0x1a0>)
 8006edc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006ee0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ee4:	4b58      	ldr	r3, [pc, #352]	; (8007048 <ai_platform_inputs_get+0x1a4>)
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d039      	beq.n	8006f5e <ai_platform_inputs_get+0xba>
 8006eea:	e7fe      	b.n	8006eea <ai_platform_inputs_get+0x46>
 8006eec:	f7ff fe98 	bl	8006c20 <_ai_platform_acquire_crc>
 8006ef0:	4b52      	ldr	r3, [pc, #328]	; (800703c <ai_platform_inputs_get+0x198>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efc:	d010      	beq.n	8006f20 <ai_platform_inputs_get+0x7c>
 8006efe:	4a50      	ldr	r2, [pc, #320]	; (8007040 <ai_platform_inputs_get+0x19c>)
 8006f00:	2301      	movs	r3, #1
 8006f02:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006f06:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1fb      	bne.n	8006f06 <ai_platform_inputs_get+0x62>
 8006f0e:	4b4d      	ldr	r3, [pc, #308]	; (8007044 <ai_platform_inputs_get+0x1a0>)
 8006f10:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006f14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006f18:	4b4b      	ldr	r3, [pc, #300]	; (8007048 <ai_platform_inputs_get+0x1a4>)
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d00d      	beq.n	8006f3a <ai_platform_inputs_get+0x96>
 8006f1e:	e7fe      	b.n	8006f1e <ai_platform_inputs_get+0x7a>
 8006f20:	4a4a      	ldr	r2, [pc, #296]	; (800704c <ai_platform_inputs_get+0x1a8>)
 8006f22:	2301      	movs	r3, #1
 8006f24:	6093      	str	r3, [r2, #8]
 8006f26:	6893      	ldr	r3, [r2, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1fc      	bne.n	8006f26 <ai_platform_inputs_get+0x82>
 8006f2c:	4b45      	ldr	r3, [pc, #276]	; (8007044 <ai_platform_inputs_get+0x1a0>)
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	4b45      	ldr	r3, [pc, #276]	; (8007048 <ai_platform_inputs_get+0x1a4>)
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d000      	beq.n	8006f3a <ai_platform_inputs_get+0x96>
 8006f38:	e7fe      	b.n	8006f38 <ai_platform_inputs_get+0x94>
 8006f3a:	f7ff fe73 	bl	8006c24 <_ai_platform_release_crc>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	b005      	add	sp, #20
 8006f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f46:	4a41      	ldr	r2, [pc, #260]	; (800704c <ai_platform_inputs_get+0x1a8>)
 8006f48:	2301      	movs	r3, #1
 8006f4a:	6093      	str	r3, [r2, #8]
 8006f4c:	6893      	ldr	r3, [r2, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1fc      	bne.n	8006f4c <ai_platform_inputs_get+0xa8>
 8006f52:	4b3c      	ldr	r3, [pc, #240]	; (8007044 <ai_platform_inputs_get+0x1a0>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	6812      	ldr	r2, [r2, #0]
 8006f58:	4b3b      	ldr	r3, [pc, #236]	; (8007048 <ai_platform_inputs_get+0x1a4>)
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d155      	bne.n	800700a <ai_platform_inputs_get+0x166>
 8006f5e:	f7ff fe61 	bl	8006c24 <_ai_platform_release_crc>
 8006f62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d051      	beq.n	800700c <ai_platform_inputs_get+0x168>
 8006f68:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8006f6c:	f1ba 0f00 	cmp.w	sl, #0
 8006f70:	d04c      	beq.n	800700c <ai_platform_inputs_get+0x168>
 8006f72:	f04f 0b00 	mov.w	fp, #0
 8006f76:	465d      	mov	r5, fp
 8006f78:	9703      	str	r7, [sp, #12]
 8006f7a:	e016      	b.n	8006faa <ai_platform_inputs_get+0x106>
 8006f7c:	9901      	ldr	r1, [sp, #4]
 8006f7e:	2301      	movs	r3, #1
 8006f80:	507b      	str	r3, [r7, r1]
 8006f82:	69b1      	ldr	r1, [r6, #24]
 8006f84:	6849      	ldr	r1, [r1, #4]
 8006f86:	6121      	str	r1, [r4, #16]
 8006f88:	f04f 0301 	mov.w	r3, #1
 8006f8c:	7523      	strb	r3, [r4, #20]
 8006f8e:	e9c4 c200 	strd	ip, r2, [r4]
 8006f92:	6962      	ldr	r2, [r4, #20]
 8006f94:	60a0      	str	r0, [r4, #8]
 8006f96:	2300      	movs	r3, #0
 8006f98:	f369 221f 	bfi	r2, r9, #8, #24
 8006f9c:	f8c4 8018 	str.w	r8, [r4, #24]
 8006fa0:	60e3      	str	r3, [r4, #12]
 8006fa2:	3501      	adds	r5, #1
 8006fa4:	f10b 0b1c 	add.w	fp, fp, #28
 8006fa8:	6162      	str	r2, [r4, #20]
 8006faa:	f8ba 3000 	ldrh.w	r3, [sl]
 8006fae:	42ab      	cmp	r3, r5
 8006fb0:	b2aa      	uxth	r2, r5
 8006fb2:	d93a      	bls.n	800702a <ai_platform_inputs_get+0x186>
 8006fb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006fb8:	00e9      	lsls	r1, r5, #3
 8006fba:	9101      	str	r1, [sp, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d034      	beq.n	800702a <ai_platform_inputs_get+0x186>
 8006fc0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006fc4:	2e00      	cmp	r6, #0
 8006fc6:	d030      	beq.n	800702a <ai_platform_inputs_get+0x186>
 8006fc8:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006fcc:	69b2      	ldr	r2, [r6, #24]
 8006fce:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8006fd2:	6810      	ldr	r0, [r2, #0]
 8006fd4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006fd8:	68b3      	ldr	r3, [r6, #8]
 8006fda:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8006fde:	f001 fc2d 	bl	800883c <ai_array_to_buffer_fmt>
 8006fe2:	69b1      	ldr	r1, [r6, #24]
 8006fe4:	4684      	mov	ip, r0
 8006fe6:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8006fea:	688a      	ldr	r2, [r1, #8]
 8006fec:	445c      	add	r4, fp
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d0c8      	beq.n	8006f84 <ai_platform_inputs_get+0xe0>
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006ff8:	6831      	ldr	r1, [r6, #0]
 8006ffa:	6041      	str	r1, [r0, #4]
 8006ffc:	b111      	cbz	r1, 8007004 <ai_platform_inputs_get+0x160>
 8006ffe:	8849      	ldrh	r1, [r1, #2]
 8007000:	2900      	cmp	r1, #0
 8007002:	d1bb      	bne.n	8006f7c <ai_platform_inputs_get+0xd8>
 8007004:	69b1      	ldr	r1, [r6, #24]
 8007006:	2000      	movs	r0, #0
 8007008:	e7bc      	b.n	8006f84 <ai_platform_inputs_get+0xe0>
 800700a:	e7fe      	b.n	800700a <ai_platform_inputs_get+0x166>
 800700c:	2218      	movs	r2, #24
 800700e:	2111      	movs	r1, #17
 8007010:	f107 0010 	add.w	r0, r7, #16
 8007014:	f000 fdc6 	bl	8007ba4 <core_set_error>
 8007018:	2200      	movs	r2, #0
 800701a:	4610      	mov	r0, r2
 800701c:	9b02      	ldr	r3, [sp, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d08e      	beq.n	8006f40 <ai_platform_inputs_get+0x9c>
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	b005      	add	sp, #20
 8007026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702a:	9f03      	ldr	r7, [sp, #12]
 800702c:	2a00      	cmp	r2, #0
 800702e:	d0ed      	beq.n	800700c <ai_platform_inputs_get+0x168>
 8007030:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007034:	6858      	ldr	r0, [r3, #4]
 8007036:	e7f1      	b.n	800701c <ai_platform_inputs_get+0x178>
 8007038:	a1c00100 	.word	0xa1c00100
 800703c:	e0042000 	.word	0xe0042000
 8007040:	58024000 	.word	0x58024000
 8007044:	f407a5c2 	.word	0xf407a5c2
 8007048:	b5e8b5cd 	.word	0xb5e8b5cd
 800704c:	40023000 	.word	0x40023000

08007050 <ai_platform_outputs_get>:
 8007050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	b085      	sub	sp, #20
 8007056:	9102      	str	r1, [sp, #8]
 8007058:	b1f0      	cbz	r0, 8007098 <ai_platform_outputs_get+0x48>
 800705a:	4b5f      	ldr	r3, [pc, #380]	; (80071d8 <ai_platform_outputs_get+0x188>)
 800705c:	6802      	ldr	r2, [r0, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	4607      	mov	r7, r0
 8007062:	d119      	bne.n	8007098 <ai_platform_outputs_get+0x48>
 8007064:	f7ff fddc 	bl	8006c20 <_ai_platform_acquire_crc>
 8007068:	4b5c      	ldr	r3, [pc, #368]	; (80071dc <ai_platform_outputs_get+0x18c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007074:	d03d      	beq.n	80070f2 <ai_platform_outputs_get+0xa2>
 8007076:	4a5a      	ldr	r2, [pc, #360]	; (80071e0 <ai_platform_outputs_get+0x190>)
 8007078:	2301      	movs	r3, #1
 800707a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800707e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1fb      	bne.n	800707e <ai_platform_outputs_get+0x2e>
 8007086:	4b57      	ldr	r3, [pc, #348]	; (80071e4 <ai_platform_outputs_get+0x194>)
 8007088:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800708c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007090:	4b55      	ldr	r3, [pc, #340]	; (80071e8 <ai_platform_outputs_get+0x198>)
 8007092:	429a      	cmp	r2, r3
 8007094:	d039      	beq.n	800710a <ai_platform_outputs_get+0xba>
 8007096:	e7fe      	b.n	8007096 <ai_platform_outputs_get+0x46>
 8007098:	f7ff fdc2 	bl	8006c20 <_ai_platform_acquire_crc>
 800709c:	4b4f      	ldr	r3, [pc, #316]	; (80071dc <ai_platform_outputs_get+0x18c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a8:	d010      	beq.n	80070cc <ai_platform_outputs_get+0x7c>
 80070aa:	4a4d      	ldr	r2, [pc, #308]	; (80071e0 <ai_platform_outputs_get+0x190>)
 80070ac:	2301      	movs	r3, #1
 80070ae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80070b2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1fb      	bne.n	80070b2 <ai_platform_outputs_get+0x62>
 80070ba:	4b4a      	ldr	r3, [pc, #296]	; (80071e4 <ai_platform_outputs_get+0x194>)
 80070bc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80070c0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80070c4:	4b48      	ldr	r3, [pc, #288]	; (80071e8 <ai_platform_outputs_get+0x198>)
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d00d      	beq.n	80070e6 <ai_platform_outputs_get+0x96>
 80070ca:	e7fe      	b.n	80070ca <ai_platform_outputs_get+0x7a>
 80070cc:	4a47      	ldr	r2, [pc, #284]	; (80071ec <ai_platform_outputs_get+0x19c>)
 80070ce:	2301      	movs	r3, #1
 80070d0:	6093      	str	r3, [r2, #8]
 80070d2:	6893      	ldr	r3, [r2, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1fc      	bne.n	80070d2 <ai_platform_outputs_get+0x82>
 80070d8:	4b42      	ldr	r3, [pc, #264]	; (80071e4 <ai_platform_outputs_get+0x194>)
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	6812      	ldr	r2, [r2, #0]
 80070de:	4b42      	ldr	r3, [pc, #264]	; (80071e8 <ai_platform_outputs_get+0x198>)
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d000      	beq.n	80070e6 <ai_platform_outputs_get+0x96>
 80070e4:	e7fe      	b.n	80070e4 <ai_platform_outputs_get+0x94>
 80070e6:	f7ff fd9d 	bl	8006c24 <_ai_platform_release_crc>
 80070ea:	2000      	movs	r0, #0
 80070ec:	b005      	add	sp, #20
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	4a3e      	ldr	r2, [pc, #248]	; (80071ec <ai_platform_outputs_get+0x19c>)
 80070f4:	2301      	movs	r3, #1
 80070f6:	6093      	str	r3, [r2, #8]
 80070f8:	6893      	ldr	r3, [r2, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1fc      	bne.n	80070f8 <ai_platform_outputs_get+0xa8>
 80070fe:	4b39      	ldr	r3, [pc, #228]	; (80071e4 <ai_platform_outputs_get+0x194>)
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	4b38      	ldr	r3, [pc, #224]	; (80071e8 <ai_platform_outputs_get+0x198>)
 8007106:	429a      	cmp	r2, r3
 8007108:	d150      	bne.n	80071ac <ai_platform_outputs_get+0x15c>
 800710a:	f7ff fd8b 	bl	8006c24 <_ai_platform_release_crc>
 800710e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d958      	bls.n	80071c6 <ai_platform_outputs_get+0x176>
 8007114:	f04f 0b00 	mov.w	fp, #0
 8007118:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800711c:	9703      	str	r7, [sp, #12]
 800711e:	465d      	mov	r5, fp
 8007120:	e016      	b.n	8007150 <ai_platform_outputs_get+0x100>
 8007122:	9901      	ldr	r1, [sp, #4]
 8007124:	2301      	movs	r3, #1
 8007126:	507b      	str	r3, [r7, r1]
 8007128:	69b1      	ldr	r1, [r6, #24]
 800712a:	6849      	ldr	r1, [r1, #4]
 800712c:	6121      	str	r1, [r4, #16]
 800712e:	f04f 0301 	mov.w	r3, #1
 8007132:	7523      	strb	r3, [r4, #20]
 8007134:	e9c4 c200 	strd	ip, r2, [r4]
 8007138:	6962      	ldr	r2, [r4, #20]
 800713a:	60a0      	str	r0, [r4, #8]
 800713c:	2300      	movs	r3, #0
 800713e:	f369 221f 	bfi	r2, r9, #8, #24
 8007142:	f8c4 8018 	str.w	r8, [r4, #24]
 8007146:	60e3      	str	r3, [r4, #12]
 8007148:	3501      	adds	r5, #1
 800714a:	f10b 0b1c 	add.w	fp, fp, #28
 800714e:	6162      	str	r2, [r4, #20]
 8007150:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007154:	42ab      	cmp	r3, r5
 8007156:	b2aa      	uxth	r2, r5
 8007158:	d929      	bls.n	80071ae <ai_platform_outputs_get+0x15e>
 800715a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800715e:	00e9      	lsls	r1, r5, #3
 8007160:	9101      	str	r1, [sp, #4]
 8007162:	b323      	cbz	r3, 80071ae <ai_platform_outputs_get+0x15e>
 8007164:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007168:	b30e      	cbz	r6, 80071ae <ai_platform_outputs_get+0x15e>
 800716a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800716e:	69b2      	ldr	r2, [r6, #24]
 8007170:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8007174:	6810      	ldr	r0, [r2, #0]
 8007176:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800717a:	68b3      	ldr	r3, [r6, #8]
 800717c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007180:	f001 fb5c 	bl	800883c <ai_array_to_buffer_fmt>
 8007184:	69b1      	ldr	r1, [r6, #24]
 8007186:	4684      	mov	ip, r0
 8007188:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800718c:	688a      	ldr	r2, [r1, #8]
 800718e:	445c      	add	r4, fp
 8007190:	2800      	cmp	r0, #0
 8007192:	d0ca      	beq.n	800712a <ai_platform_outputs_get+0xda>
 8007194:	2100      	movs	r1, #0
 8007196:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800719a:	6831      	ldr	r1, [r6, #0]
 800719c:	6041      	str	r1, [r0, #4]
 800719e:	b111      	cbz	r1, 80071a6 <ai_platform_outputs_get+0x156>
 80071a0:	8849      	ldrh	r1, [r1, #2]
 80071a2:	2900      	cmp	r1, #0
 80071a4:	d1bd      	bne.n	8007122 <ai_platform_outputs_get+0xd2>
 80071a6:	69b1      	ldr	r1, [r6, #24]
 80071a8:	2000      	movs	r0, #0
 80071aa:	e7be      	b.n	800712a <ai_platform_outputs_get+0xda>
 80071ac:	e7fe      	b.n	80071ac <ai_platform_outputs_get+0x15c>
 80071ae:	9f03      	ldr	r7, [sp, #12]
 80071b0:	b14a      	cbz	r2, 80071c6 <ai_platform_outputs_get+0x176>
 80071b2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80071b6:	6858      	ldr	r0, [r3, #4]
 80071b8:	9b02      	ldr	r3, [sp, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d096      	beq.n	80070ec <ai_platform_outputs_get+0x9c>
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	b005      	add	sp, #20
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	2218      	movs	r2, #24
 80071c8:	2111      	movs	r1, #17
 80071ca:	f107 0010 	add.w	r0, r7, #16
 80071ce:	f000 fce9 	bl	8007ba4 <core_set_error>
 80071d2:	2200      	movs	r2, #0
 80071d4:	4610      	mov	r0, r2
 80071d6:	e7ef      	b.n	80071b8 <ai_platform_outputs_get+0x168>
 80071d8:	a1c00100 	.word	0xa1c00100
 80071dc:	e0042000 	.word	0xe0042000
 80071e0:	58024000 	.word	0x58024000
 80071e4:	f407a5c2 	.word	0xf407a5c2
 80071e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80071ec:	40023000 	.word	0x40023000

080071f0 <ai_platform_network_create>:
 80071f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071f4:	b083      	sub	sp, #12
 80071f6:	4606      	mov	r6, r0
 80071f8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80071fc:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8007200:	4615      	mov	r5, r2
 8007202:	461f      	mov	r7, r3
 8007204:	f7ff fd0c 	bl	8006c20 <_ai_platform_acquire_crc>
 8007208:	b188      	cbz	r0, 800722e <ai_platform_network_create+0x3e>
 800720a:	4a5d      	ldr	r2, [pc, #372]	; (8007380 <ai_platform_network_create+0x190>)
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007212:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007216:	4603      	mov	r3, r0
 8007218:	d00e      	beq.n	8007238 <ai_platform_network_create+0x48>
 800721a:	4a5a      	ldr	r2, [pc, #360]	; (8007384 <ai_platform_network_create+0x194>)
 800721c:	2118      	movs	r1, #24
 800721e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8007222:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8007226:	2918      	cmp	r1, #24
 8007228:	d018      	beq.n	800725c <ai_platform_network_create+0x6c>
 800722a:	f7ff fcfb 	bl	8006c24 <_ai_platform_release_crc>
 800722e:	f244 1033 	movw	r0, #16691	; 0x4133
 8007232:	b003      	add	sp, #12
 8007234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007238:	4a53      	ldr	r2, [pc, #332]	; (8007388 <ai_platform_network_create+0x198>)
 800723a:	2101      	movs	r1, #1
 800723c:	6091      	str	r1, [r2, #8]
 800723e:	2114      	movs	r1, #20
 8007240:	e001      	b.n	8007246 <ai_platform_network_create+0x56>
 8007242:	3901      	subs	r1, #1
 8007244:	d002      	beq.n	800724c <ai_platform_network_create+0x5c>
 8007246:	6894      	ldr	r4, [r2, #8]
 8007248:	2c00      	cmp	r4, #0
 800724a:	d1fa      	bne.n	8007242 <ai_platform_network_create+0x52>
 800724c:	4a4e      	ldr	r2, [pc, #312]	; (8007388 <ai_platform_network_create+0x198>)
 800724e:	6891      	ldr	r1, [r2, #8]
 8007250:	b911      	cbnz	r1, 8007258 <ai_platform_network_create+0x68>
 8007252:	6812      	ldr	r2, [r2, #0]
 8007254:	3201      	adds	r2, #1
 8007256:	d008      	beq.n	800726a <ai_platform_network_create+0x7a>
 8007258:	4618      	mov	r0, r3
 800725a:	e7e6      	b.n	800722a <ai_platform_network_create+0x3a>
 800725c:	2101      	movs	r1, #1
 800725e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8007262:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8007266:	2900      	cmp	r1, #0
 8007268:	d1fb      	bne.n	8007262 <ai_platform_network_create+0x72>
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fcda 	bl	8006c24 <_ai_platform_release_crc>
 8007270:	f7ff fcd6 	bl	8006c20 <_ai_platform_acquire_crc>
 8007274:	4b42      	ldr	r3, [pc, #264]	; (8007380 <ai_platform_network_create+0x190>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007280:	d010      	beq.n	80072a4 <ai_platform_network_create+0xb4>
 8007282:	4b40      	ldr	r3, [pc, #256]	; (8007384 <ai_platform_network_create+0x194>)
 8007284:	2201      	movs	r2, #1
 8007286:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800728a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800728e:	2900      	cmp	r1, #0
 8007290:	d1fb      	bne.n	800728a <ai_platform_network_create+0x9a>
 8007292:	4a3e      	ldr	r2, [pc, #248]	; (800738c <ai_platform_network_create+0x19c>)
 8007294:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8007298:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800729c:	4b3c      	ldr	r3, [pc, #240]	; (8007390 <ai_platform_network_create+0x1a0>)
 800729e:	429a      	cmp	r2, r3
 80072a0:	d00c      	beq.n	80072bc <ai_platform_network_create+0xcc>
 80072a2:	e7fe      	b.n	80072a2 <ai_platform_network_create+0xb2>
 80072a4:	4a38      	ldr	r2, [pc, #224]	; (8007388 <ai_platform_network_create+0x198>)
 80072a6:	2301      	movs	r3, #1
 80072a8:	6093      	str	r3, [r2, #8]
 80072aa:	6893      	ldr	r3, [r2, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1fc      	bne.n	80072aa <ai_platform_network_create+0xba>
 80072b0:	4b36      	ldr	r3, [pc, #216]	; (800738c <ai_platform_network_create+0x19c>)
 80072b2:	6013      	str	r3, [r2, #0]
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	4b36      	ldr	r3, [pc, #216]	; (8007390 <ai_platform_network_create+0x1a0>)
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d122      	bne.n	8007302 <ai_platform_network_create+0x112>
 80072bc:	f7ff fcb2 	bl	8006c24 <_ai_platform_release_crc>
 80072c0:	b38e      	cbz	r6, 8007326 <ai_platform_network_create+0x136>
 80072c2:	4b34      	ldr	r3, [pc, #208]	; (8007394 <ai_platform_network_create+0x1a4>)
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	6035      	str	r5, [r6, #0]
 80072c8:	f000 fc64 	bl	8007b94 <core_init>
 80072cc:	b1d0      	cbz	r0, 8007304 <ai_platform_network_create+0x114>
 80072ce:	f7ff fca7 	bl	8006c20 <_ai_platform_acquire_crc>
 80072d2:	4b2b      	ldr	r3, [pc, #172]	; (8007380 <ai_platform_network_create+0x190>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072de:	d025      	beq.n	800732c <ai_platform_network_create+0x13c>
 80072e0:	4a28      	ldr	r2, [pc, #160]	; (8007384 <ai_platform_network_create+0x194>)
 80072e2:	2301      	movs	r3, #1
 80072e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80072e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1fb      	bne.n	80072e8 <ai_platform_network_create+0xf8>
 80072f0:	4b26      	ldr	r3, [pc, #152]	; (800738c <ai_platform_network_create+0x19c>)
 80072f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80072f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072fa:	4b25      	ldr	r3, [pc, #148]	; (8007390 <ai_platform_network_create+0x1a0>)
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d022      	beq.n	8007346 <ai_platform_network_create+0x156>
 8007300:	e7fe      	b.n	8007300 <ai_platform_network_create+0x110>
 8007302:	e7fe      	b.n	8007302 <ai_platform_network_create+0x112>
 8007304:	2430      	movs	r4, #48	; 0x30
 8007306:	2300      	movs	r3, #0
 8007308:	6033      	str	r3, [r6, #0]
 800730a:	2610      	movs	r6, #16
 800730c:	464a      	mov	r2, r9
 800730e:	4641      	mov	r1, r8
 8007310:	4638      	mov	r0, r7
 8007312:	f001 fa75 	bl	8008800 <ai_version_get>
 8007316:	4603      	mov	r3, r0
 8007318:	2000      	movs	r0, #0
 800731a:	f364 0007 	bfi	r0, r4, #0, #8
 800731e:	64ab      	str	r3, [r5, #72]	; 0x48
 8007320:	f366 201f 	bfi	r0, r6, #8, #24
 8007324:	e785      	b.n	8007232 <ai_platform_network_create+0x42>
 8007326:	f241 0010 	movw	r0, #4112	; 0x1010
 800732a:	e782      	b.n	8007232 <ai_platform_network_create+0x42>
 800732c:	4a16      	ldr	r2, [pc, #88]	; (8007388 <ai_platform_network_create+0x198>)
 800732e:	2301      	movs	r3, #1
 8007330:	6093      	str	r3, [r2, #8]
 8007332:	6893      	ldr	r3, [r2, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1fc      	bne.n	8007332 <ai_platform_network_create+0x142>
 8007338:	4b14      	ldr	r3, [pc, #80]	; (800738c <ai_platform_network_create+0x19c>)
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	4b14      	ldr	r3, [pc, #80]	; (8007390 <ai_platform_network_create+0x1a0>)
 8007340:	429a      	cmp	r2, r3
 8007342:	d000      	beq.n	8007346 <ai_platform_network_create+0x156>
 8007344:	e7fe      	b.n	8007344 <ai_platform_network_create+0x154>
 8007346:	f7ff fc6d 	bl	8006c24 <_ai_platform_release_crc>
 800734a:	2200      	movs	r2, #0
 800734c:	4641      	mov	r1, r8
 800734e:	4638      	mov	r0, r7
 8007350:	f001 fa56 	bl	8008800 <ai_version_get>
 8007354:	2200      	movs	r2, #0
 8007356:	4604      	mov	r4, r0
 8007358:	2105      	movs	r1, #5
 800735a:	2001      	movs	r0, #1
 800735c:	f001 fa50 	bl	8008800 <ai_version_get>
 8007360:	4284      	cmp	r4, r0
 8007362:	d001      	beq.n	8007368 <ai_platform_network_create+0x178>
 8007364:	2401      	movs	r4, #1
 8007366:	e7ce      	b.n	8007306 <ai_platform_network_create+0x116>
 8007368:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <ai_platform_network_create+0x1a8>)
 800736a:	9301      	str	r3, [sp, #4]
 800736c:	a801      	add	r0, sp, #4
 800736e:	f001 f88d 	bl	800848c <ai_check_custom_types>
 8007372:	b110      	cbz	r0, 800737a <ai_platform_network_create+0x18a>
 8007374:	2600      	movs	r6, #0
 8007376:	4634      	mov	r4, r6
 8007378:	e7c8      	b.n	800730c <ai_platform_network_create+0x11c>
 800737a:	2402      	movs	r4, #2
 800737c:	e7c3      	b.n	8007306 <ai_platform_network_create+0x116>
 800737e:	bf00      	nop
 8007380:	e0042000 	.word	0xe0042000
 8007384:	58024000 	.word	0x58024000
 8007388:	40023000 	.word	0x40023000
 800738c:	f407a5c2 	.word	0xf407a5c2
 8007390:	b5e8b5cd 	.word	0xb5e8b5cd
 8007394:	a1c00100 	.word	0xa1c00100
 8007398:	84048403 	.word	0x84048403

0800739c <ai_platform_network_init>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	b1f8      	cbz	r0, 80073e2 <ai_platform_network_init+0x46>
 80073a2:	4b6e      	ldr	r3, [pc, #440]	; (800755c <ai_platform_network_init+0x1c0>)
 80073a4:	6802      	ldr	r2, [r0, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	4604      	mov	r4, r0
 80073aa:	d11a      	bne.n	80073e2 <ai_platform_network_init+0x46>
 80073ac:	460e      	mov	r6, r1
 80073ae:	f7ff fc37 	bl	8006c20 <_ai_platform_acquire_crc>
 80073b2:	4b6b      	ldr	r3, [pc, #428]	; (8007560 <ai_platform_network_init+0x1c4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073be:	d03d      	beq.n	800743c <ai_platform_network_init+0xa0>
 80073c0:	4a68      	ldr	r2, [pc, #416]	; (8007564 <ai_platform_network_init+0x1c8>)
 80073c2:	2301      	movs	r3, #1
 80073c4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80073c8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1fb      	bne.n	80073c8 <ai_platform_network_init+0x2c>
 80073d0:	4b65      	ldr	r3, [pc, #404]	; (8007568 <ai_platform_network_init+0x1cc>)
 80073d2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80073d6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80073da:	4b64      	ldr	r3, [pc, #400]	; (800756c <ai_platform_network_init+0x1d0>)
 80073dc:	429a      	cmp	r2, r3
 80073de:	d039      	beq.n	8007454 <ai_platform_network_init+0xb8>
 80073e0:	e7fe      	b.n	80073e0 <ai_platform_network_init+0x44>
 80073e2:	f7ff fc1d 	bl	8006c20 <_ai_platform_acquire_crc>
 80073e6:	4b5e      	ldr	r3, [pc, #376]	; (8007560 <ai_platform_network_init+0x1c4>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f2:	d010      	beq.n	8007416 <ai_platform_network_init+0x7a>
 80073f4:	4a5b      	ldr	r2, [pc, #364]	; (8007564 <ai_platform_network_init+0x1c8>)
 80073f6:	2301      	movs	r3, #1
 80073f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80073fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1fb      	bne.n	80073fc <ai_platform_network_init+0x60>
 8007404:	4b58      	ldr	r3, [pc, #352]	; (8007568 <ai_platform_network_init+0x1cc>)
 8007406:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800740a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800740e:	4b57      	ldr	r3, [pc, #348]	; (800756c <ai_platform_network_init+0x1d0>)
 8007410:	429a      	cmp	r2, r3
 8007412:	d00d      	beq.n	8007430 <ai_platform_network_init+0x94>
 8007414:	e7fe      	b.n	8007414 <ai_platform_network_init+0x78>
 8007416:	4a56      	ldr	r2, [pc, #344]	; (8007570 <ai_platform_network_init+0x1d4>)
 8007418:	2301      	movs	r3, #1
 800741a:	6093      	str	r3, [r2, #8]
 800741c:	6893      	ldr	r3, [r2, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1fc      	bne.n	800741c <ai_platform_network_init+0x80>
 8007422:	4b51      	ldr	r3, [pc, #324]	; (8007568 <ai_platform_network_init+0x1cc>)
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	6812      	ldr	r2, [r2, #0]
 8007428:	4b50      	ldr	r3, [pc, #320]	; (800756c <ai_platform_network_init+0x1d0>)
 800742a:	429a      	cmp	r2, r3
 800742c:	d000      	beq.n	8007430 <ai_platform_network_init+0x94>
 800742e:	e7fe      	b.n	800742e <ai_platform_network_init+0x92>
 8007430:	f7ff fbf8 	bl	8006c24 <_ai_platform_release_crc>
 8007434:	2600      	movs	r6, #0
 8007436:	4630      	mov	r0, r6
 8007438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743c:	4a4c      	ldr	r2, [pc, #304]	; (8007570 <ai_platform_network_init+0x1d4>)
 800743e:	2301      	movs	r3, #1
 8007440:	6093      	str	r3, [r2, #8]
 8007442:	6893      	ldr	r3, [r2, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1fc      	bne.n	8007442 <ai_platform_network_init+0xa6>
 8007448:	4b47      	ldr	r3, [pc, #284]	; (8007568 <ai_platform_network_init+0x1cc>)
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	4b47      	ldr	r3, [pc, #284]	; (800756c <ai_platform_network_init+0x1d0>)
 8007450:	429a      	cmp	r2, r3
 8007452:	d11c      	bne.n	800748e <ai_platform_network_init+0xf2>
 8007454:	f7ff fbe6 	bl	8006c24 <_ai_platform_release_crc>
 8007458:	2e00      	cmp	r6, #0
 800745a:	d06f      	beq.n	800753c <ai_platform_network_init+0x1a0>
 800745c:	4b45      	ldr	r3, [pc, #276]	; (8007574 <ai_platform_network_init+0x1d8>)
 800745e:	6832      	ldr	r2, [r6, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d115      	bne.n	8007490 <ai_platform_network_init+0xf4>
 8007464:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8007468:	6933      	ldr	r3, [r6, #16]
 800746a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800746e:	89f7      	ldrh	r7, [r6, #14]
 8007470:	62a3      	str	r3, [r4, #40]	; 0x28
 8007472:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007476:	2303      	movs	r3, #3
 8007478:	84e7      	strh	r7, [r4, #38]	; 0x26
 800747a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800747e:	60e3      	str	r3, [r4, #12]
 8007480:	4620      	mov	r0, r4
 8007482:	4626      	mov	r6, r4
 8007484:	f001 f82c 	bl	80084e0 <ai_layers_init_all>
 8007488:	4630      	mov	r0, r6
 800748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748e:	e7fe      	b.n	800748e <ai_platform_network_init+0xf2>
 8007490:	2101      	movs	r1, #1
 8007492:	4630      	mov	r0, r6
 8007494:	4635      	mov	r5, r6
 8007496:	6876      	ldr	r6, [r6, #4]
 8007498:	f7ff fb74 	bl	8006b84 <ai_buffer_get_size>
 800749c:	f105 081c 	add.w	r8, r5, #28
 80074a0:	4681      	mov	r9, r0
 80074a2:	2101      	movs	r1, #1
 80074a4:	4640      	mov	r0, r8
 80074a6:	6a2f      	ldr	r7, [r5, #32]
 80074a8:	f7ff fb6c 	bl	8006b84 <ai_buffer_get_size>
 80074ac:	f1b9 0f00 	cmp.w	r9, #0
 80074b0:	d025      	beq.n	80074fe <ai_platform_network_init+0x162>
 80074b2:	2201      	movs	r2, #1
 80074b4:	4696      	mov	lr, r2
 80074b6:	bb30      	cbnz	r0, 8007506 <ai_platform_network_init+0x16a>
 80074b8:	4680      	mov	r8, r0
 80074ba:	4607      	mov	r7, r0
 80074bc:	b376      	cbz	r6, 800751c <ai_platform_network_init+0x180>
 80074be:	8be3      	ldrh	r3, [r4, #30]
 80074c0:	4573      	cmp	r3, lr
 80074c2:	d323      	bcc.n	800750c <ai_platform_network_init+0x170>
 80074c4:	b142      	cbz	r2, 80074d8 <ai_platform_network_init+0x13c>
 80074c6:	46ac      	mov	ip, r5
 80074c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80074cc:	6a25      	ldr	r5, [r4, #32]
 80074ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074d0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80074d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80074d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80074da:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80074de:	2600      	movs	r6, #0
 80074e0:	42bb      	cmp	r3, r7
 80074e2:	83a6      	strh	r6, [r4, #28]
 80074e4:	d323      	bcc.n	800752e <ai_platform_network_init+0x192>
 80074e6:	b37f      	cbz	r7, 8007548 <ai_platform_network_init+0x1ac>
 80074e8:	46c4      	mov	ip, r8
 80074ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80074ee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80074f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074f2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80074f6:	46b6      	mov	lr, r6
 80074f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80074fc:	e7bb      	b.n	8007476 <ai_platform_network_init+0xda>
 80074fe:	464a      	mov	r2, r9
 8007500:	46ce      	mov	lr, r9
 8007502:	464d      	mov	r5, r9
 8007504:	e7d7      	b.n	80074b6 <ai_platform_network_init+0x11a>
 8007506:	b30f      	cbz	r7, 800754c <ai_platform_network_init+0x1b0>
 8007508:	2701      	movs	r7, #1
 800750a:	e7d7      	b.n	80074bc <ai_platform_network_init+0x120>
 800750c:	2212      	movs	r2, #18
 800750e:	2116      	movs	r1, #22
 8007510:	f104 0010 	add.w	r0, r4, #16
 8007514:	f000 fb46 	bl	8007ba4 <core_set_error>
 8007518:	2600      	movs	r6, #0
 800751a:	e78c      	b.n	8007436 <ai_platform_network_init+0x9a>
 800751c:	f1b9 0f00 	cmp.w	r9, #0
 8007520:	d0cd      	beq.n	80074be <ai_platform_network_init+0x122>
 8007522:	2110      	movs	r1, #16
 8007524:	2212      	movs	r2, #18
 8007526:	1860      	adds	r0, r4, r1
 8007528:	f000 fb3c 	bl	8007ba4 <core_set_error>
 800752c:	e783      	b.n	8007436 <ai_platform_network_init+0x9a>
 800752e:	2213      	movs	r2, #19
 8007530:	2116      	movs	r1, #22
 8007532:	f104 0010 	add.w	r0, r4, #16
 8007536:	f000 fb35 	bl	8007ba4 <core_set_error>
 800753a:	e77c      	b.n	8007436 <ai_platform_network_init+0x9a>
 800753c:	2110      	movs	r1, #16
 800753e:	2211      	movs	r2, #17
 8007540:	1860      	adds	r0, r4, r1
 8007542:	f000 fb2f 	bl	8007ba4 <core_set_error>
 8007546:	e776      	b.n	8007436 <ai_platform_network_init+0x9a>
 8007548:	46be      	mov	lr, r7
 800754a:	e794      	b.n	8007476 <ai_platform_network_init+0xda>
 800754c:	2110      	movs	r1, #16
 800754e:	2213      	movs	r2, #19
 8007550:	1860      	adds	r0, r4, r1
 8007552:	f000 fb27 	bl	8007ba4 <core_set_error>
 8007556:	463e      	mov	r6, r7
 8007558:	e76d      	b.n	8007436 <ai_platform_network_init+0x9a>
 800755a:	bf00      	nop
 800755c:	a1c00100 	.word	0xa1c00100
 8007560:	e0042000 	.word	0xe0042000
 8007564:	58024000 	.word	0x58024000
 8007568:	f407a5c2 	.word	0xf407a5c2
 800756c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007570:	40023000 	.word	0x40023000
 8007574:	a1facade 	.word	0xa1facade

08007578 <ai_platform_network_post_init>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	b1f0      	cbz	r0, 80075ba <ai_platform_network_post_init+0x42>
 800757c:	4b3c      	ldr	r3, [pc, #240]	; (8007670 <ai_platform_network_post_init+0xf8>)
 800757e:	6802      	ldr	r2, [r0, #0]
 8007580:	429a      	cmp	r2, r3
 8007582:	4604      	mov	r4, r0
 8007584:	d119      	bne.n	80075ba <ai_platform_network_post_init+0x42>
 8007586:	f7ff fb4b 	bl	8006c20 <_ai_platform_acquire_crc>
 800758a:	4b3a      	ldr	r3, [pc, #232]	; (8007674 <ai_platform_network_post_init+0xfc>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007596:	d03b      	beq.n	8007610 <ai_platform_network_post_init+0x98>
 8007598:	4a37      	ldr	r2, [pc, #220]	; (8007678 <ai_platform_network_post_init+0x100>)
 800759a:	2301      	movs	r3, #1
 800759c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80075a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1fb      	bne.n	80075a0 <ai_platform_network_post_init+0x28>
 80075a8:	4b34      	ldr	r3, [pc, #208]	; (800767c <ai_platform_network_post_init+0x104>)
 80075aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80075ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80075b2:	4b33      	ldr	r3, [pc, #204]	; (8007680 <ai_platform_network_post_init+0x108>)
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d037      	beq.n	8007628 <ai_platform_network_post_init+0xb0>
 80075b8:	e7fe      	b.n	80075b8 <ai_platform_network_post_init+0x40>
 80075ba:	f7ff fb31 	bl	8006c20 <_ai_platform_acquire_crc>
 80075be:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <ai_platform_network_post_init+0xfc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ca:	d010      	beq.n	80075ee <ai_platform_network_post_init+0x76>
 80075cc:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <ai_platform_network_post_init+0x100>)
 80075ce:	2301      	movs	r3, #1
 80075d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80075d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1fb      	bne.n	80075d4 <ai_platform_network_post_init+0x5c>
 80075dc:	4b27      	ldr	r3, [pc, #156]	; (800767c <ai_platform_network_post_init+0x104>)
 80075de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80075e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80075e6:	4b26      	ldr	r3, [pc, #152]	; (8007680 <ai_platform_network_post_init+0x108>)
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d00d      	beq.n	8007608 <ai_platform_network_post_init+0x90>
 80075ec:	e7fe      	b.n	80075ec <ai_platform_network_post_init+0x74>
 80075ee:	4a25      	ldr	r2, [pc, #148]	; (8007684 <ai_platform_network_post_init+0x10c>)
 80075f0:	2301      	movs	r3, #1
 80075f2:	6093      	str	r3, [r2, #8]
 80075f4:	6893      	ldr	r3, [r2, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1fc      	bne.n	80075f4 <ai_platform_network_post_init+0x7c>
 80075fa:	4b20      	ldr	r3, [pc, #128]	; (800767c <ai_platform_network_post_init+0x104>)
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	6812      	ldr	r2, [r2, #0]
 8007600:	4b1f      	ldr	r3, [pc, #124]	; (8007680 <ai_platform_network_post_init+0x108>)
 8007602:	429a      	cmp	r2, r3
 8007604:	d000      	beq.n	8007608 <ai_platform_network_post_init+0x90>
 8007606:	e7fe      	b.n	8007606 <ai_platform_network_post_init+0x8e>
 8007608:	f7ff fb0c 	bl	8006c24 <_ai_platform_release_crc>
 800760c:	2000      	movs	r0, #0
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <ai_platform_network_post_init+0x10c>)
 8007612:	2301      	movs	r3, #1
 8007614:	6093      	str	r3, [r2, #8]
 8007616:	6893      	ldr	r3, [r2, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1fc      	bne.n	8007616 <ai_platform_network_post_init+0x9e>
 800761c:	4b17      	ldr	r3, [pc, #92]	; (800767c <ai_platform_network_post_init+0x104>)
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	6812      	ldr	r2, [r2, #0]
 8007622:	4b17      	ldr	r3, [pc, #92]	; (8007680 <ai_platform_network_post_init+0x108>)
 8007624:	429a      	cmp	r2, r3
 8007626:	d11a      	bne.n	800765e <ai_platform_network_post_init+0xe6>
 8007628:	f7ff fafc 	bl	8006c24 <_ai_platform_release_crc>
 800762c:	68e3      	ldr	r3, [r4, #12]
 800762e:	f013 0502 	ands.w	r5, r3, #2
 8007632:	d015      	beq.n	8007660 <ai_platform_network_post_init+0xe8>
 8007634:	4620      	mov	r0, r4
 8007636:	f000 ff61 	bl	80084fc <ai_layers_post_init_all>
 800763a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800763c:	b16b      	cbz	r3, 800765a <ai_platform_network_post_init+0xe2>
 800763e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007640:	e007      	b.n	8007652 <ai_platform_network_post_init+0xda>
 8007642:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007646:	4798      	blx	r3
 8007648:	692b      	ldr	r3, [r5, #16]
 800764a:	42ab      	cmp	r3, r5
 800764c:	d005      	beq.n	800765a <ai_platform_network_post_init+0xe2>
 800764e:	b123      	cbz	r3, 800765a <ai_platform_network_post_init+0xe2>
 8007650:	461d      	mov	r5, r3
 8007652:	4629      	mov	r1, r5
 8007654:	2000      	movs	r0, #0
 8007656:	2d00      	cmp	r5, #0
 8007658:	d1f3      	bne.n	8007642 <ai_platform_network_post_init+0xca>
 800765a:	2001      	movs	r0, #1
 800765c:	bd38      	pop	{r3, r4, r5, pc}
 800765e:	e7fe      	b.n	800765e <ai_platform_network_post_init+0xe6>
 8007660:	2210      	movs	r2, #16
 8007662:	2111      	movs	r1, #17
 8007664:	18a0      	adds	r0, r4, r2
 8007666:	f000 fa9d 	bl	8007ba4 <core_set_error>
 800766a:	4628      	mov	r0, r5
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	bf00      	nop
 8007670:	a1c00100 	.word	0xa1c00100
 8007674:	e0042000 	.word	0xe0042000
 8007678:	58024000 	.word	0x58024000
 800767c:	f407a5c2 	.word	0xf407a5c2
 8007680:	b5e8b5cd 	.word	0xb5e8b5cd
 8007684:	40023000 	.word	0x40023000

08007688 <ai_platform_network_process>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	460e      	mov	r6, r1
 800768e:	b085      	sub	sp, #20
 8007690:	4693      	mov	fp, r2
 8007692:	4605      	mov	r5, r0
 8007694:	b120      	cbz	r0, 80076a0 <ai_platform_network_process+0x18>
 8007696:	4bb8      	ldr	r3, [pc, #736]	; (8007978 <ai_platform_network_process+0x2f0>)
 8007698:	6802      	ldr	r2, [r0, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	bf18      	it	ne
 800769e:	2500      	movne	r5, #0
 80076a0:	f7ff fabe 	bl	8006c20 <_ai_platform_acquire_crc>
 80076a4:	4bb5      	ldr	r3, [pc, #724]	; (800797c <ai_platform_network_process+0x2f4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b0:	d010      	beq.n	80076d4 <ai_platform_network_process+0x4c>
 80076b2:	4ab3      	ldr	r2, [pc, #716]	; (8007980 <ai_platform_network_process+0x2f8>)
 80076b4:	2301      	movs	r3, #1
 80076b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80076ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1fb      	bne.n	80076ba <ai_platform_network_process+0x32>
 80076c2:	4bb0      	ldr	r3, [pc, #704]	; (8007984 <ai_platform_network_process+0x2fc>)
 80076c4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80076c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80076cc:	4bae      	ldr	r3, [pc, #696]	; (8007988 <ai_platform_network_process+0x300>)
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d00d      	beq.n	80076ee <ai_platform_network_process+0x66>
 80076d2:	e7fe      	b.n	80076d2 <ai_platform_network_process+0x4a>
 80076d4:	4aad      	ldr	r2, [pc, #692]	; (800798c <ai_platform_network_process+0x304>)
 80076d6:	2301      	movs	r3, #1
 80076d8:	6093      	str	r3, [r2, #8]
 80076da:	6893      	ldr	r3, [r2, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1fc      	bne.n	80076da <ai_platform_network_process+0x52>
 80076e0:	4ba8      	ldr	r3, [pc, #672]	; (8007984 <ai_platform_network_process+0x2fc>)
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	4ba8      	ldr	r3, [pc, #672]	; (8007988 <ai_platform_network_process+0x300>)
 80076e8:	429a      	cmp	r2, r3
 80076ea:	f040 812c 	bne.w	8007946 <ai_platform_network_process+0x2be>
 80076ee:	f7ff fa99 	bl	8006c24 <_ai_platform_release_crc>
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	f000 8154 	beq.w	80079a0 <ai_platform_network_process+0x318>
 80076f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8124 	beq.w	8007948 <ai_platform_network_process+0x2c0>
 8007700:	68eb      	ldr	r3, [r5, #12]
 8007702:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	2700      	movs	r7, #0
 800770c:	2b03      	cmp	r3, #3
 800770e:	616f      	str	r7, [r5, #20]
 8007710:	f040 813e 	bne.w	8007990 <ai_platform_network_process+0x308>
 8007714:	2e00      	cmp	r6, #0
 8007716:	f000 811d 	beq.w	8007954 <ai_platform_network_process+0x2cc>
 800771a:	f1ba 0f00 	cmp.w	sl, #0
 800771e:	f000 8119 	beq.w	8007954 <ai_platform_network_process+0x2cc>
 8007722:	f8ba 3000 	ldrh.w	r3, [sl]
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 8114 	beq.w	8007954 <ai_platform_network_process+0x2cc>
 800772c:	69b3      	ldr	r3, [r6, #24]
 800772e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007738:	f8da 3004 	ldr.w	r3, [sl, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d072      	beq.n	8007826 <ai_platform_network_process+0x19e>
 8007740:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007744:	2c00      	cmp	r4, #0
 8007746:	d06e      	beq.n	8007826 <ai_platform_network_process+0x19e>
 8007748:	f8da 3008 	ldr.w	r3, [sl, #8]
 800774c:	f8d3 9000 	ldr.w	r9, [r3]
 8007750:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007754:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007758:	f000 81e0 	beq.w	8007b1c <ai_platform_network_process+0x494>
 800775c:	69a3      	ldr	r3, [r4, #24]
 800775e:	2101      	movs	r1, #1
 8007760:	4630      	mov	r0, r6
 8007762:	685d      	ldr	r5, [r3, #4]
 8007764:	f7ff fa0e 	bl	8006b84 <ai_buffer_get_size>
 8007768:	4285      	cmp	r5, r0
 800776a:	f0c0 811b 	bcc.w	80079a4 <ai_platform_network_process+0x31c>
 800776e:	68e0      	ldr	r0, [r4, #12]
 8007770:	69b1      	ldr	r1, [r6, #24]
 8007772:	68c2      	ldr	r2, [r0, #12]
 8007774:	68cb      	ldr	r3, [r1, #12]
 8007776:	429a      	cmp	r2, r3
 8007778:	f040 8114 	bne.w	80079a4 <ai_platform_network_process+0x31c>
 800777c:	6882      	ldr	r2, [r0, #8]
 800777e:	688b      	ldr	r3, [r1, #8]
 8007780:	429a      	cmp	r2, r3
 8007782:	f040 810f 	bne.w	80079a4 <ai_platform_network_process+0x31c>
 8007786:	6842      	ldr	r2, [r0, #4]
 8007788:	684b      	ldr	r3, [r1, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	f040 810a 	bne.w	80079a4 <ai_platform_network_process+0x31c>
 8007790:	69a3      	ldr	r3, [r4, #24]
 8007792:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007796:	f001 f8e5 	bl	8008964 <ai_array_get_data_byte_size>
 800779a:	4605      	mov	r5, r0
 800779c:	4620      	mov	r0, r4
 800779e:	f001 f835 	bl	800880c <get_tensor_byte_size>
 80077a2:	4285      	cmp	r5, r0
 80077a4:	f0c0 80fe 	bcc.w	80079a4 <ai_platform_network_process+0x31c>
 80077a8:	69a3      	ldr	r3, [r4, #24]
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	f001 f846 	bl	800883c <ai_array_to_buffer_fmt>
 80077b0:	6833      	ldr	r3, [r6, #0]
 80077b2:	4058      	eors	r0, r3
 80077b4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80077b8:	f040 81bb 	bne.w	8007b32 <ai_platform_network_process+0x4aa>
 80077bc:	6873      	ldr	r3, [r6, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f000 81ae 	beq.w	8007b20 <ai_platform_network_process+0x498>
 80077c4:	69b3      	ldr	r3, [r6, #24]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 819e 	beq.w	8007b0a <ai_platform_network_process+0x482>
 80077ce:	9a01      	ldr	r2, [sp, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	bf38      	it	cc
 80077d4:	461a      	movcc	r2, r3
 80077d6:	4620      	mov	r0, r4
 80077d8:	9201      	str	r2, [sp, #4]
 80077da:	f001 f817 	bl	800880c <get_tensor_byte_size>
 80077de:	f8c8 0008 	str.w	r0, [r8, #8]
 80077e2:	69b3      	ldr	r3, [r6, #24]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	fb00 f303 	mul.w	r3, r0, r3
 80077ea:	f8c8 300c 	str.w	r3, [r8, #12]
 80077ee:	6871      	ldr	r1, [r6, #4]
 80077f0:	f8c8 1004 	str.w	r1, [r8, #4]
 80077f4:	440b      	add	r3, r1
 80077f6:	f849 300b 	str.w	r3, [r9, fp]
 80077fa:	69a0      	ldr	r0, [r4, #24]
 80077fc:	6803      	ldr	r3, [r0, #0]
 80077fe:	009a      	lsls	r2, r3, #2
 8007800:	f107 0701 	add.w	r7, r7, #1
 8007804:	f106 061c 	add.w	r6, r6, #28
 8007808:	f100 80af 	bmi.w	800796a <ai_platform_network_process+0x2e2>
 800780c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	4419      	add	r1, r3
 8007814:	6081      	str	r1, [r0, #8]
 8007816:	69a3      	ldr	r3, [r4, #24]
 8007818:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800781c:	60da      	str	r2, [r3, #12]
 800781e:	f8ba 3000 	ldrh.w	r3, [sl]
 8007822:	42bb      	cmp	r3, r7
 8007824:	d888      	bhi.n	8007738 <ai_platform_network_process+0xb0>
 8007826:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800782a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800782c:	f1bb 0f00 	cmp.w	fp, #0
 8007830:	f000 8188 	beq.w	8007b44 <ai_platform_network_process+0x4bc>
 8007834:	2a01      	cmp	r2, #1
 8007836:	f240 8160 	bls.w	8007afa <ai_platform_network_process+0x472>
 800783a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800783e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 8159 	beq.w	8007afa <ai_platform_network_process+0x472>
 8007848:	465e      	mov	r6, fp
 800784a:	2700      	movs	r7, #0
 800784c:	462c      	mov	r4, r5
 800784e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 80b4 	beq.w	80079c0 <ai_platform_network_process+0x338>
 8007858:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800785c:	2d00      	cmp	r5, #0
 800785e:	f000 80af 	beq.w	80079c0 <ai_platform_network_process+0x338>
 8007862:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007866:	f8d3 8000 	ldr.w	r8, [r3]
 800786a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800786e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007872:	f000 8173 	beq.w	8007b5c <ai_platform_network_process+0x4d4>
 8007876:	69ab      	ldr	r3, [r5, #24]
 8007878:	2101      	movs	r1, #1
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	9302      	str	r3, [sp, #8]
 800787e:	4630      	mov	r0, r6
 8007880:	f7ff f980 	bl	8006b84 <ai_buffer_get_size>
 8007884:	9b02      	ldr	r3, [sp, #8]
 8007886:	4283      	cmp	r3, r0
 8007888:	f0c0 8136 	bcc.w	8007af8 <ai_platform_network_process+0x470>
 800788c:	68e8      	ldr	r0, [r5, #12]
 800788e:	69b1      	ldr	r1, [r6, #24]
 8007890:	68c2      	ldr	r2, [r0, #12]
 8007892:	68cb      	ldr	r3, [r1, #12]
 8007894:	429a      	cmp	r2, r3
 8007896:	f040 812f 	bne.w	8007af8 <ai_platform_network_process+0x470>
 800789a:	6882      	ldr	r2, [r0, #8]
 800789c:	688b      	ldr	r3, [r1, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	f040 812a 	bne.w	8007af8 <ai_platform_network_process+0x470>
 80078a4:	6842      	ldr	r2, [r0, #4]
 80078a6:	684b      	ldr	r3, [r1, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	f040 8125 	bne.w	8007af8 <ai_platform_network_process+0x470>
 80078ae:	69ab      	ldr	r3, [r5, #24]
 80078b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078b4:	f001 f856 	bl	8008964 <ai_array_get_data_byte_size>
 80078b8:	9002      	str	r0, [sp, #8]
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 ffa6 	bl	800880c <get_tensor_byte_size>
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	4283      	cmp	r3, r0
 80078c4:	f0c0 8118 	bcc.w	8007af8 <ai_platform_network_process+0x470>
 80078c8:	69ab      	ldr	r3, [r5, #24]
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	f000 ffb6 	bl	800883c <ai_array_to_buffer_fmt>
 80078d0:	6833      	ldr	r3, [r6, #0]
 80078d2:	4058      	eors	r0, r3
 80078d4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80078d8:	f040 8138 	bne.w	8007b4c <ai_platform_network_process+0x4c4>
 80078dc:	6873      	ldr	r3, [r6, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 814f 	beq.w	8007b82 <ai_platform_network_process+0x4fa>
 80078e4:	69b3      	ldr	r3, [r6, #24]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8141 	beq.w	8007b70 <ai_platform_network_process+0x4e8>
 80078ee:	9a01      	ldr	r2, [sp, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	bf38      	it	cc
 80078f4:	461a      	movcc	r2, r3
 80078f6:	4628      	mov	r0, r5
 80078f8:	9201      	str	r2, [sp, #4]
 80078fa:	f000 ff87 	bl	800880c <get_tensor_byte_size>
 80078fe:	f8ca 0008 	str.w	r0, [sl, #8]
 8007902:	69b3      	ldr	r3, [r6, #24]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	fb00 f303 	mul.w	r3, r0, r3
 800790a:	f8ca 300c 	str.w	r3, [sl, #12]
 800790e:	6871      	ldr	r1, [r6, #4]
 8007910:	f8ca 1004 	str.w	r1, [sl, #4]
 8007914:	440b      	add	r3, r1
 8007916:	f848 300b 	str.w	r3, [r8, fp]
 800791a:	69a8      	ldr	r0, [r5, #24]
 800791c:	6803      	ldr	r3, [r0, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	f107 0701 	add.w	r7, r7, #1
 8007924:	f106 061c 	add.w	r6, r6, #28
 8007928:	d445      	bmi.n	80079b6 <ai_platform_network_process+0x32e>
 800792a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800792e:	1a9b      	subs	r3, r3, r2
 8007930:	4419      	add	r1, r3
 8007932:	6081      	str	r1, [r0, #8]
 8007934:	69ab      	ldr	r3, [r5, #24]
 8007936:	f8da 2004 	ldr.w	r2, [sl, #4]
 800793a:	60da      	str	r2, [r3, #12]
 800793c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007940:	429f      	cmp	r7, r3
 8007942:	d384      	bcc.n	800784e <ai_platform_network_process+0x1c6>
 8007944:	e03c      	b.n	80079c0 <ai_platform_network_process+0x338>
 8007946:	e7fe      	b.n	8007946 <ai_platform_network_process+0x2be>
 8007948:	68ea      	ldr	r2, [r5, #12]
 800794a:	616b      	str	r3, [r5, #20]
 800794c:	f002 0203 	and.w	r2, r2, #3
 8007950:	2a03      	cmp	r2, #3
 8007952:	d11d      	bne.n	8007990 <ai_platform_network_process+0x308>
 8007954:	2217      	movs	r2, #23
 8007956:	2112      	movs	r1, #18
 8007958:	f105 0010 	add.w	r0, r5, #16
 800795c:	f000 f922 	bl	8007ba4 <core_set_error>
 8007960:	2400      	movs	r4, #0
 8007962:	4620      	mov	r0, r4
 8007964:	b005      	add	sp, #20
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	f8ba 3000 	ldrh.w	r3, [sl]
 800796e:	429f      	cmp	r7, r3
 8007970:	f4ff aee2 	bcc.w	8007738 <ai_platform_network_process+0xb0>
 8007974:	e757      	b.n	8007826 <ai_platform_network_process+0x19e>
 8007976:	bf00      	nop
 8007978:	a1c00100 	.word	0xa1c00100
 800797c:	e0042000 	.word	0xe0042000
 8007980:	58024000 	.word	0x58024000
 8007984:	f407a5c2 	.word	0xf407a5c2
 8007988:	b5e8b5cd 	.word	0xb5e8b5cd
 800798c:	40023000 	.word	0x40023000
 8007990:	2230      	movs	r2, #48	; 0x30
 8007992:	2111      	movs	r1, #17
 8007994:	f105 0010 	add.w	r0, r5, #16
 8007998:	f000 f904 	bl	8007ba4 <core_set_error>
 800799c:	2400      	movs	r4, #0
 800799e:	e7e0      	b.n	8007962 <ai_platform_network_process+0x2da>
 80079a0:	462c      	mov	r4, r5
 80079a2:	e7de      	b.n	8007962 <ai_platform_network_process+0x2da>
 80079a4:	9d02      	ldr	r5, [sp, #8]
 80079a6:	2218      	movs	r2, #24
 80079a8:	2112      	movs	r1, #18
 80079aa:	f105 0010 	add.w	r0, r5, #16
 80079ae:	f000 f8f9 	bl	8007ba4 <core_set_error>
 80079b2:	2400      	movs	r4, #0
 80079b4:	e7d5      	b.n	8007962 <ai_platform_network_process+0x2da>
 80079b6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80079ba:	429f      	cmp	r7, r3
 80079bc:	f4ff af47 	bcc.w	800784e <ai_platform_network_process+0x1c6>
 80079c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80079c4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80079c6:	82a3      	strh	r3, [r4, #20]
 80079c8:	4625      	mov	r5, r4
 80079ca:	2a00      	cmp	r2, #0
 80079cc:	f040 808e 	bne.w	8007aec <ai_platform_network_process+0x464>
 80079d0:	4616      	mov	r6, r2
 80079d2:	4617      	mov	r7, r2
 80079d4:	8aec      	ldrh	r4, [r5, #22]
 80079d6:	429c      	cmp	r4, r3
 80079d8:	bf38      	it	cc
 80079da:	46ab      	movcc	fp, r5
 80079dc:	d2c1      	bcs.n	8007962 <ai_platform_network_process+0x2da>
 80079de:	2e00      	cmp	r6, #0
 80079e0:	d030      	beq.n	8007a44 <ai_platform_network_process+0x3bc>
 80079e2:	f04f 0800 	mov.w	r8, #0
 80079e6:	e014      	b.n	8007a12 <ai_platform_network_process+0x38a>
 80079e8:	6882      	ldr	r2, [r0, #8]
 80079ea:	68c5      	ldr	r5, [r0, #12]
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	1b52      	subs	r2, r2, r5
 80079f0:	4413      	add	r3, r2
 80079f2:	6083      	str	r3, [r0, #8]
 80079f4:	698b      	ldr	r3, [r1, #24]
 80079f6:	6862      	ldr	r2, [r4, #4]
 80079f8:	60da      	str	r2, [r3, #12]
 80079fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80079fe:	f859 200a 	ldr.w	r2, [r9, sl]
 8007a02:	440b      	add	r3, r1
 8007a04:	4293      	cmp	r3, r2
 8007a06:	bf24      	itt	cs
 8007a08:	68e3      	ldrcs	r3, [r4, #12]
 8007a0a:	1ad3      	subcs	r3, r2, r3
 8007a0c:	6063      	str	r3, [r4, #4]
 8007a0e:	f108 0801 	add.w	r8, r8, #1
 8007a12:	8833      	ldrh	r3, [r6, #0]
 8007a14:	4543      	cmp	r3, r8
 8007a16:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007a1a:	d913      	bls.n	8007a44 <ai_platform_network_process+0x3bc>
 8007a1c:	6873      	ldr	r3, [r6, #4]
 8007a1e:	b18b      	cbz	r3, 8007a44 <ai_platform_network_process+0x3bc>
 8007a20:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007a24:	b171      	cbz	r1, 8007a44 <ai_platform_network_process+0x3bc>
 8007a26:	6988      	ldr	r0, [r1, #24]
 8007a28:	68b2      	ldr	r2, [r6, #8]
 8007a2a:	6803      	ldr	r3, [r0, #0]
 8007a2c:	f8d2 9000 	ldr.w	r9, [r2]
 8007a30:	009d      	lsls	r5, r3, #2
 8007a32:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007a36:	d5d7      	bpl.n	80079e8 <ai_platform_network_process+0x360>
 8007a38:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007a3c:	6880      	ldr	r0, [r0, #8]
 8007a3e:	f000 ffcd 	bl	80089dc <memcpy>
 8007a42:	e7da      	b.n	80079fa <ai_platform_network_process+0x372>
 8007a44:	4658      	mov	r0, fp
 8007a46:	f000 fd6d 	bl	8008524 <ai_layers_forward_all>
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d03f      	beq.n	8007ace <ai_platform_network_process+0x446>
 8007a4e:	2400      	movs	r4, #0
 8007a50:	e016      	b.n	8007a80 <ai_platform_network_process+0x3f8>
 8007a52:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007a56:	f859 100a 	ldr.w	r1, [r9, sl]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	428b      	cmp	r3, r1
 8007a5e:	bf24      	itt	cs
 8007a60:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007a64:	1acb      	subcs	r3, r1, r3
 8007a66:	f8c8 3004 	str.w	r3, [r8, #4]
 8007a6a:	6981      	ldr	r1, [r0, #24]
 8007a6c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007a70:	1b52      	subs	r2, r2, r5
 8007a72:	4413      	add	r3, r2
 8007a74:	608b      	str	r3, [r1, #8]
 8007a76:	6983      	ldr	r3, [r0, #24]
 8007a78:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007a7c:	60da      	str	r2, [r3, #12]
 8007a7e:	3401      	adds	r4, #1
 8007a80:	883b      	ldrh	r3, [r7, #0]
 8007a82:	42a3      	cmp	r3, r4
 8007a84:	d923      	bls.n	8007ace <ai_platform_network_process+0x446>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	b30b      	cbz	r3, 8007ace <ai_platform_network_process+0x446>
 8007a8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007a8e:	b1f0      	cbz	r0, 8007ace <ai_platform_network_process+0x446>
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	6983      	ldr	r3, [r0, #24]
 8007a94:	f8d2 9000 	ldr.w	r9, [r2]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	0092      	lsls	r2, r2, #2
 8007a9c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007aa0:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007aa4:	d5d5      	bpl.n	8007a52 <ai_platform_network_process+0x3ca>
 8007aa6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007aaa:	6899      	ldr	r1, [r3, #8]
 8007aac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ab0:	f000 ff94 	bl	80089dc <memcpy>
 8007ab4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007ab8:	f859 200a 	ldr.w	r2, [r9, sl]
 8007abc:	440b      	add	r3, r1
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	bf24      	itt	cs
 8007ac2:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007ac6:	1ad3      	subcs	r3, r2, r3
 8007ac8:	f8c8 3004 	str.w	r3, [r8, #4]
 8007acc:	e7d7      	b.n	8007a7e <ai_platform_network_process+0x3f6>
 8007ace:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007ad2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007ad6:	3401      	adds	r4, #1
 8007ad8:	b2a4      	uxth	r4, r4
 8007ada:	42a3      	cmp	r3, r4
 8007adc:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007ae0:	f63f af7d 	bhi.w	80079de <ai_platform_network_process+0x356>
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	b005      	add	sp, #20
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	2a01      	cmp	r2, #1
 8007aee:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007af0:	d03c      	beq.n	8007b6c <ai_platform_network_process+0x4e4>
 8007af2:	f106 070c 	add.w	r7, r6, #12
 8007af6:	e76d      	b.n	80079d4 <ai_platform_network_process+0x34c>
 8007af8:	4625      	mov	r5, r4
 8007afa:	2218      	movs	r2, #24
 8007afc:	2113      	movs	r1, #19
 8007afe:	f105 0010 	add.w	r0, r5, #16
 8007b02:	f000 f84f 	bl	8007ba4 <core_set_error>
 8007b06:	2400      	movs	r4, #0
 8007b08:	e72b      	b.n	8007962 <ai_platform_network_process+0x2da>
 8007b0a:	9d02      	ldr	r5, [sp, #8]
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	2221      	movs	r2, #33	; 0x21
 8007b10:	2112      	movs	r1, #18
 8007b12:	f105 0010 	add.w	r0, r5, #16
 8007b16:	f000 f845 	bl	8007ba4 <core_set_error>
 8007b1a:	e722      	b.n	8007962 <ai_platform_network_process+0x2da>
 8007b1c:	9d02      	ldr	r5, [sp, #8]
 8007b1e:	e719      	b.n	8007954 <ai_platform_network_process+0x2cc>
 8007b20:	9d02      	ldr	r5, [sp, #8]
 8007b22:	4604      	mov	r4, r0
 8007b24:	2217      	movs	r2, #23
 8007b26:	2112      	movs	r1, #18
 8007b28:	f105 0010 	add.w	r0, r5, #16
 8007b2c:	f000 f83a 	bl	8007ba4 <core_set_error>
 8007b30:	e717      	b.n	8007962 <ai_platform_network_process+0x2da>
 8007b32:	9d02      	ldr	r5, [sp, #8]
 8007b34:	2219      	movs	r2, #25
 8007b36:	2112      	movs	r1, #18
 8007b38:	f105 0010 	add.w	r0, r5, #16
 8007b3c:	f000 f832 	bl	8007ba4 <core_set_error>
 8007b40:	2400      	movs	r4, #0
 8007b42:	e70e      	b.n	8007962 <ai_platform_network_process+0x2da>
 8007b44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007b48:	82ab      	strh	r3, [r5, #20]
 8007b4a:	e73e      	b.n	80079ca <ai_platform_network_process+0x342>
 8007b4c:	f104 0010 	add.w	r0, r4, #16
 8007b50:	2219      	movs	r2, #25
 8007b52:	2113      	movs	r1, #19
 8007b54:	f000 f826 	bl	8007ba4 <core_set_error>
 8007b58:	2400      	movs	r4, #0
 8007b5a:	e702      	b.n	8007962 <ai_platform_network_process+0x2da>
 8007b5c:	f104 0010 	add.w	r0, r4, #16
 8007b60:	2217      	movs	r2, #23
 8007b62:	2113      	movs	r1, #19
 8007b64:	f000 f81e 	bl	8007ba4 <core_set_error>
 8007b68:	4654      	mov	r4, sl
 8007b6a:	e6fa      	b.n	8007962 <ai_platform_network_process+0x2da>
 8007b6c:	2700      	movs	r7, #0
 8007b6e:	e731      	b.n	80079d4 <ai_platform_network_process+0x34c>
 8007b70:	4625      	mov	r5, r4
 8007b72:	2221      	movs	r2, #33	; 0x21
 8007b74:	4604      	mov	r4, r0
 8007b76:	2113      	movs	r1, #19
 8007b78:	f105 0010 	add.w	r0, r5, #16
 8007b7c:	f000 f812 	bl	8007ba4 <core_set_error>
 8007b80:	e6ef      	b.n	8007962 <ai_platform_network_process+0x2da>
 8007b82:	4625      	mov	r5, r4
 8007b84:	2217      	movs	r2, #23
 8007b86:	4604      	mov	r4, r0
 8007b88:	2113      	movs	r1, #19
 8007b8a:	f105 0010 	add.w	r0, r5, #16
 8007b8e:	f000 f809 	bl	8007ba4 <core_set_error>
 8007b92:	e6e6      	b.n	8007962 <ai_platform_network_process+0x2da>

08007b94 <core_init>:
 8007b94:	2001      	movs	r0, #1
 8007b96:	4770      	bx	lr

08007b98 <core_get_error>:
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop

08007ba4 <core_set_error>:
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	7800      	ldrb	r0, [r0, #0]
 8007ba8:	b108      	cbz	r0, 8007bae <core_set_error+0xa>
 8007baa:	2000      	movs	r0, #0
 8007bac:	4770      	bx	lr
 8007bae:	7019      	strb	r1, [r3, #0]
 8007bb0:	6819      	ldr	r1, [r3, #0]
 8007bb2:	f362 211f 	bfi	r1, r2, #8, #24
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	6019      	str	r1, [r3, #0]
 8007bba:	4770      	bx	lr

08007bbc <forward_dense>:
 8007bbc:	6983      	ldr	r3, [r0, #24]
 8007bbe:	881a      	ldrh	r2, [r3, #0]
 8007bc0:	2a00      	cmp	r2, #0
 8007bc2:	f000 8181 	beq.w	8007ec8 <forward_dense+0x30c>
 8007bc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	ed2d 8b02 	vpush	{d8}
 8007bce:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8007bd2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007bd6:	b095      	sub	sp, #84	; 0x54
 8007bd8:	b105      	cbz	r5, 8007bdc <forward_dense+0x20>
 8007bda:	682d      	ldr	r5, [r5, #0]
 8007bdc:	2a01      	cmp	r2, #1
 8007bde:	f000 828f 	beq.w	8008100 <forward_dense+0x544>
 8007be2:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8007be6:	b106      	cbz	r6, 8007bea <forward_dense+0x2e>
 8007be8:	6836      	ldr	r6, [r6, #0]
 8007bea:	2a02      	cmp	r2, #2
 8007bec:	f000 816e 	beq.w	8007ecc <forward_dense+0x310>
 8007bf0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8007bf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8274 	beq.w	80080e4 <forward_dense+0x528>
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8007c02:	6809      	ldr	r1, [r1, #0]
 8007c04:	910d      	str	r1, [sp, #52]	; 0x34
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	f240 826e 	bls.w	80080e8 <forward_dense+0x52c>
 8007c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c12:	460b      	mov	r3, r1
 8007c14:	68e8      	ldr	r0, [r5, #12]
 8007c16:	68f7      	ldr	r7, [r6, #12]
 8007c18:	6840      	ldr	r0, [r0, #4]
 8007c1a:	6999      	ldr	r1, [r3, #24]
 8007c1c:	9013      	str	r0, [sp, #76]	; 0x4c
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	680b      	ldr	r3, [r1, #0]
 8007c22:	9012      	str	r0, [sp, #72]	; 0x48
 8007c24:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8007c28:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8007c2c:	fb00 f404 	mul.w	r4, r0, r4
 8007c30:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8007c34:	fa4e f000 	asr.w	r0, lr, r0
 8007c38:	2a03      	cmp	r2, #3
 8007c3a:	9010      	str	r0, [sp, #64]	; 0x40
 8007c3c:	f000 825d 	beq.w	80080fa <forward_dense+0x53e>
 8007c40:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8007c44:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007c48:	2a00      	cmp	r2, #0
 8007c4a:	f000 8246 	beq.w	80080da <forward_dense+0x51e>
 8007c4e:	6812      	ldr	r2, [r2, #0]
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	f000 8242 	beq.w	80080da <forward_dense+0x51e>
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007c5c:	f000 822c 	beq.w	80080b8 <forward_dense+0x4fc>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	f000 8229 	beq.w	80080b8 <forward_dense+0x4fc>
 8007c66:	f04f 0b00 	mov.w	fp, #0
 8007c6a:	69b2      	ldr	r2, [r6, #24]
 8007c6c:	69ab      	ldr	r3, [r5, #24]
 8007c6e:	6891      	ldr	r1, [r2, #8]
 8007c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	6952      	ldr	r2, [r2, #20]
 8007c76:	9106      	str	r1, [sp, #24]
 8007c78:	fb07 f404 	mul.w	r4, r7, r4
 8007c7c:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8007c80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c82:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007c86:	4281      	cmp	r1, r0
 8007c88:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8007c8c:	900e      	str	r0, [sp, #56]	; 0x38
 8007c8e:	940c      	str	r4, [sp, #48]	; 0x30
 8007c90:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8007c94:	f080 8113 	bcs.w	8007ebe <forward_dense+0x302>
 8007c98:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c9a:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8007ee8 <forward_dense+0x32c>
 8007c9e:	f021 0201 	bic.w	r2, r1, #1
 8007ca2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007ca6:	9204      	str	r2, [sp, #16]
 8007ca8:	f001 0201 	and.w	r2, r1, #1
 8007cac:	08c8      	lsrs	r0, r1, #3
 8007cae:	9208      	str	r2, [sp, #32]
 8007cb0:	008a      	lsls	r2, r1, #2
 8007cb2:	f001 0a07 	and.w	sl, r1, #7
 8007cb6:	920f      	str	r2, [sp, #60]	; 0x3c
 8007cb8:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8007cbc:	3320      	adds	r3, #32
 8007cbe:	465c      	mov	r4, fp
 8007cc0:	9007      	str	r0, [sp, #28]
 8007cc2:	46cb      	mov	fp, r9
 8007cc4:	9205      	str	r2, [sp, #20]
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	46c1      	mov	r9, r8
 8007cca:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	9b02      	ldr	r3, [sp, #8]
 8007cd6:	3b20      	subs	r3, #32
 8007cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8007cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cdc:	b10b      	cbz	r3, 8007ce2 <forward_dense+0x126>
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	2c00      	cmp	r4, #0
 8007ce4:	f000 81da 	beq.w	800809c <forward_dense+0x4e0>
 8007ce8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007cea:	2904      	cmp	r1, #4
 8007cec:	9906      	ldr	r1, [sp, #24]
 8007cee:	f000 80fd 	beq.w	8007eec <forward_dense+0x330>
 8007cf2:	4549      	cmp	r1, r9
 8007cf4:	f080 80d2 	bcs.w	8007e9c <forward_dense+0x2e0>
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	9907      	ldr	r1, [sp, #28]
 8007cfc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007d00:	f8dd a014 	ldr.w	sl, [sp, #20]
 8007d04:	1c4e      	adds	r6, r1, #1
 8007d06:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007d0a:	4694      	mov	ip, r2
 8007d0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d0e:	468e      	mov	lr, r1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80de 	beq.w	8007ed2 <forward_dense+0x316>
 8007d16:	ecf3 2a01 	vldmia	r3!, {s5}
 8007d1a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007ee8 <forward_dense+0x32c>
 8007d1e:	f1be 0f00 	cmp.w	lr, #0
 8007d22:	f000 80de 	beq.w	8007ee2 <forward_dense+0x326>
 8007d26:	f10c 0108 	add.w	r1, ip, #8
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007d30:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8007d34:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8007d38:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8007d3c:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8007d40:	ed10 5a04 	vldr	s10, [r0, #-16]
 8007d44:	ed50 5a03 	vldr	s11, [r0, #-12]
 8007d48:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007d4c:	ed50 6a01 	vldr	s13, [r0, #-4]
 8007d50:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d54:	edd5 7a00 	vldr	s15, [r5]
 8007d58:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8007d5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d60:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007d64:	ed95 3a00 	vldr	s6, [r5]
 8007d68:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8007d6c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007d70:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d74:	3108      	adds	r1, #8
 8007d76:	edd5 3a00 	vldr	s7, [r5]
 8007d7a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007d7e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007d82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d86:	3020      	adds	r0, #32
 8007d88:	ed95 4a00 	vldr	s8, [r5]
 8007d8c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007d90:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007d94:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d98:	edd5 4a00 	vldr	s9, [r5]
 8007d9c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007da0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007da4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007da8:	ed95 5a00 	vldr	s10, [r5]
 8007dac:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007db0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007db4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007db8:	edd5 5a00 	vldr	s11, [r5]
 8007dbc:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007dc0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007dc4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007dc8:	428e      	cmp	r6, r1
 8007dca:	ed95 6a00 	vldr	s12, [r5]
 8007dce:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dd6:	d1a9      	bne.n	8007d2c <forward_dense+0x170>
 8007dd8:	f1a6 0108 	sub.w	r1, r6, #8
 8007ddc:	4650      	mov	r0, sl
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	d04a      	beq.n	8007e78 <forward_dense+0x2bc>
 8007de2:	780d      	ldrb	r5, [r1, #0]
 8007de4:	edd0 6a00 	vldr	s13, [r0]
 8007de8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007dec:	edd5 7a00 	vldr	s15, [r5]
 8007df0:	2a01      	cmp	r2, #1
 8007df2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007df6:	d03f      	beq.n	8007e78 <forward_dense+0x2bc>
 8007df8:	784d      	ldrb	r5, [r1, #1]
 8007dfa:	edd0 6a01 	vldr	s13, [r0, #4]
 8007dfe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e02:	edd5 7a00 	vldr	s15, [r5]
 8007e06:	2a02      	cmp	r2, #2
 8007e08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e0c:	d034      	beq.n	8007e78 <forward_dense+0x2bc>
 8007e0e:	788d      	ldrb	r5, [r1, #2]
 8007e10:	edd0 6a02 	vldr	s13, [r0, #8]
 8007e14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e18:	edd5 7a00 	vldr	s15, [r5]
 8007e1c:	2a03      	cmp	r2, #3
 8007e1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e22:	d029      	beq.n	8007e78 <forward_dense+0x2bc>
 8007e24:	78cd      	ldrb	r5, [r1, #3]
 8007e26:	edd0 6a03 	vldr	s13, [r0, #12]
 8007e2a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e2e:	edd5 7a00 	vldr	s15, [r5]
 8007e32:	2a04      	cmp	r2, #4
 8007e34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e38:	d01e      	beq.n	8007e78 <forward_dense+0x2bc>
 8007e3a:	790d      	ldrb	r5, [r1, #4]
 8007e3c:	edd0 6a04 	vldr	s13, [r0, #16]
 8007e40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e44:	edd5 7a00 	vldr	s15, [r5]
 8007e48:	2a05      	cmp	r2, #5
 8007e4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e4e:	d013      	beq.n	8007e78 <forward_dense+0x2bc>
 8007e50:	794d      	ldrb	r5, [r1, #5]
 8007e52:	edd0 6a05 	vldr	s13, [r0, #20]
 8007e56:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e5a:	edd5 7a00 	vldr	s15, [r5]
 8007e5e:	2a06      	cmp	r2, #6
 8007e60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e64:	d008      	beq.n	8007e78 <forward_dense+0x2bc>
 8007e66:	7989      	ldrb	r1, [r1, #6]
 8007e68:	edd0 7a06 	vldr	s15, [r0, #24]
 8007e6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007e70:	edd1 6a00 	vldr	s13, [r1]
 8007e74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e78:	44dc      	add	ip, fp
 8007e7a:	445e      	add	r6, fp
 8007e7c:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007e80:	eca7 7a01 	vstmia	r7!, {s14}
 8007e84:	454f      	cmp	r7, r9
 8007e86:	f4ff af43 	bcc.w	8007d10 <forward_dense+0x154>
 8007e8a:	9a06      	ldr	r2, [sp, #24]
 8007e8c:	eba9 0302 	sub.w	r3, r9, r2
 8007e90:	3b01      	subs	r3, #1
 8007e92:	f023 0303 	bic.w	r3, r3, #3
 8007e96:	3304      	adds	r3, #4
 8007e98:	18d3      	adds	r3, r2, r3
 8007e9a:	9306      	str	r3, [sp, #24]
 8007e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e9e:	9a05      	ldr	r2, [sp, #20]
 8007ea0:	4499      	add	r9, r3
 8007ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ea4:	441a      	add	r2, r3
 8007ea6:	9205      	str	r2, [sp, #20]
 8007ea8:	9a02      	ldr	r2, [sp, #8]
 8007eaa:	441a      	add	r2, r3
 8007eac:	9202      	str	r2, [sp, #8]
 8007eae:	9a04      	ldr	r2, [sp, #16]
 8007eb0:	441a      	add	r2, r3
 8007eb2:	9204      	str	r2, [sp, #16]
 8007eb4:	9b06      	ldr	r3, [sp, #24]
 8007eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	f4ff af08 	bcc.w	8007cce <forward_dense+0x112>
 8007ebe:	b015      	add	sp, #84	; 0x54
 8007ec0:	ecbd 8b02 	vpop	{d8}
 8007ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	6853      	ldr	r3, [r2, #4]
 8007eca:	deff      	udf	#255	; 0xff
 8007ecc:	2300      	movs	r3, #0
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	deff      	udf	#255	; 0xff
 8007ed2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007ee8 <forward_dense+0x32c>
 8007ed6:	eef0 2a48 	vmov.f32	s5, s16
 8007eda:	f1be 0f00 	cmp.w	lr, #0
 8007ede:	f47f af22 	bne.w	8007d26 <forward_dense+0x16a>
 8007ee2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ee4:	4661      	mov	r1, ip
 8007ee6:	e77a      	b.n	8007dde <forward_dense+0x222>
 8007ee8:	00000000 	.word	0x00000000
 8007eec:	4549      	cmp	r1, r9
 8007eee:	d2d5      	bcs.n	8007e9c <forward_dense+0x2e0>
 8007ef0:	9807      	ldr	r0, [sp, #28]
 8007ef2:	9103      	str	r1, [sp, #12]
 8007ef4:	9904      	ldr	r1, [sp, #16]
 8007ef6:	f100 0c01 	add.w	ip, r0, #1
 8007efa:	3901      	subs	r1, #1
 8007efc:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007f00:	9109      	str	r1, [sp, #36]	; 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 80b2 	beq.w	800806c <forward_dense+0x4b0>
 8007f08:	9907      	ldr	r1, [sp, #28]
 8007f0a:	ecf3 2a01 	vldmia	r3!, {s5}
 8007f0e:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8007ee8 <forward_dense+0x32c>
 8007f12:	2900      	cmp	r1, #0
 8007f14:	f000 80b2 	beq.w	800807c <forward_dense+0x4c0>
 8007f18:	9902      	ldr	r1, [sp, #8]
 8007f1a:	1d10      	adds	r0, r2, #4
 8007f1c:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8007f20:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8007f24:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8007f28:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8007f2c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8007f30:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8007f34:	ed11 5a04 	vldr	s10, [r1, #-16]
 8007f38:	ed51 5a03 	vldr	s11, [r1, #-12]
 8007f3c:	ed11 6a02 	vldr	s12, [r1, #-8]
 8007f40:	ed51 6a01 	vldr	s13, [r1, #-4]
 8007f44:	f006 070f 	and.w	r7, r6, #15
 8007f48:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007f4c:	edd7 7a00 	vldr	s15, [r7]
 8007f50:	0936      	lsrs	r6, r6, #4
 8007f52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007f56:	ed96 3a00 	vldr	s6, [r6]
 8007f5a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8007f5e:	092e      	lsrs	r6, r5, #4
 8007f60:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007f64:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007f68:	f005 050f 	and.w	r5, r5, #15
 8007f6c:	edd6 3a00 	vldr	s7, [r6]
 8007f70:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8007f74:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007f78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007f7c:	0937      	lsrs	r7, r6, #4
 8007f7e:	ed95 4a00 	vldr	s8, [r5]
 8007f82:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8007f86:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007f8a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007f8e:	f006 060f 	and.w	r6, r6, #15
 8007f92:	edd7 4a00 	vldr	s9, [r7]
 8007f96:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007f9a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007f9e:	3004      	adds	r0, #4
 8007fa0:	ed96 5a00 	vldr	s10, [r6]
 8007fa4:	092e      	lsrs	r6, r5, #4
 8007fa6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007faa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007fae:	f005 050f 	and.w	r5, r5, #15
 8007fb2:	edd6 5a00 	vldr	s11, [r6]
 8007fb6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007fba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007fbe:	4584      	cmp	ip, r0
 8007fc0:	ed95 6a00 	vldr	s12, [r5]
 8007fc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007fc8:	f101 0120 	add.w	r1, r1, #32
 8007fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fd0:	d1a4      	bne.n	8007f1c <forward_dense+0x360>
 8007fd2:	f8dd e014 	ldr.w	lr, [sp, #20]
 8007fd6:	f1ac 0804 	sub.w	r8, ip, #4
 8007fda:	9904      	ldr	r1, [sp, #16]
 8007fdc:	458e      	cmp	lr, r1
 8007fde:	d22a      	bcs.n	8008036 <forward_dense+0x47a>
 8007fe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fe2:	eba1 070e 	sub.w	r7, r1, lr
 8007fe6:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8007fea:	f10e 0008 	add.w	r0, lr, #8
 8007fee:	f108 36ff 	add.w	r6, r8, #4294967295
 8007ff2:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8007ff6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ffa:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007ffe:	ed50 6a02 	vldr	s13, [r0, #-8]
 8008002:	f001 050f 	and.w	r5, r1, #15
 8008006:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800800a:	edd5 7a00 	vldr	s15, [r5]
 800800e:	0909      	lsrs	r1, r1, #4
 8008010:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008014:	ed91 6a00 	vldr	s12, [r1]
 8008018:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800801c:	42b7      	cmp	r7, r6
 800801e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008022:	f100 0008 	add.w	r0, r0, #8
 8008026:	ee37 7a27 	vadd.f32	s14, s14, s15
 800802a:	d1e4      	bne.n	8007ff6 <forward_dense+0x43a>
 800802c:	f10a 0a01 	add.w	sl, sl, #1
 8008030:	44d0      	add	r8, sl
 8008032:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8008036:	9908      	ldr	r1, [sp, #32]
 8008038:	b321      	cbz	r1, 8008084 <forward_dense+0x4c8>
 800803a:	f898 1000 	ldrb.w	r1, [r8]
 800803e:	edde 7a00 	vldr	s15, [lr]
 8008042:	0909      	lsrs	r1, r1, #4
 8008044:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008048:	edd1 6a00 	vldr	s13, [r1]
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008052:	445a      	add	r2, fp
 8008054:	44dc      	add	ip, fp
 8008056:	ee72 2a87 	vadd.f32	s5, s5, s14
 800805a:	ece1 2a01 	vstmia	r1!, {s5}
 800805e:	4589      	cmp	r9, r1
 8008060:	9103      	str	r1, [sp, #12]
 8008062:	f67f af12 	bls.w	8007e8a <forward_dense+0x2ce>
 8008066:	2b00      	cmp	r3, #0
 8008068:	f47f af4e 	bne.w	8007f08 <forward_dense+0x34c>
 800806c:	9907      	ldr	r1, [sp, #28]
 800806e:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8007ee8 <forward_dense+0x32c>
 8008072:	eef0 2a48 	vmov.f32	s5, s16
 8008076:	2900      	cmp	r1, #0
 8008078:	f47f af4e 	bne.w	8007f18 <forward_dense+0x35c>
 800807c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8008080:	4690      	mov	r8, r2
 8008082:	e7aa      	b.n	8007fda <forward_dense+0x41e>
 8008084:	9903      	ldr	r1, [sp, #12]
 8008086:	ee32 7a87 	vadd.f32	s14, s5, s14
 800808a:	445a      	add	r2, fp
 800808c:	eca1 7a01 	vstmia	r1!, {s14}
 8008090:	4549      	cmp	r1, r9
 8008092:	9103      	str	r1, [sp, #12]
 8008094:	44dc      	add	ip, fp
 8008096:	f4ff af34 	bcc.w	8007f02 <forward_dense+0x346>
 800809a:	e6f6      	b.n	8007e8a <forward_dense+0x2ce>
 800809c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800809e:	9d06      	ldr	r5, [sp, #24]
 80080a0:	9101      	str	r1, [sp, #4]
 80080a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80080a4:	9100      	str	r1, [sp, #0]
 80080a6:	4628      	mov	r0, r5
 80080a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80080aa:	f000 fa85 	bl	80085b8 <lite_dense_if32of32wf32>
 80080ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080b0:	462b      	mov	r3, r5
 80080b2:	4413      	add	r3, r2
 80080b4:	9306      	str	r3, [sp, #24]
 80080b6:	e6f1      	b.n	8007e9c <forward_dense+0x2e0>
 80080b8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80080bc:	f1b9 0f00 	cmp.w	r9, #0
 80080c0:	d016      	beq.n	80080f0 <forward_dense+0x534>
 80080c2:	e9d9 0100 	ldrd	r0, r1, [r9]
 80080c6:	f000 fc25 	bl	8008914 <ai_array_get_byte_size>
 80080ca:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80080ce:	4602      	mov	r2, r0
 80080d0:	4641      	mov	r1, r8
 80080d2:	4658      	mov	r0, fp
 80080d4:	f000 fc82 	bl	80089dc <memcpy>
 80080d8:	e5c7      	b.n	8007c6a <forward_dense+0xae>
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d00a      	beq.n	80080f4 <forward_dense+0x538>
 80080de:	f04f 0900 	mov.w	r9, #0
 80080e2:	e5bd      	b.n	8007c60 <forward_dense+0xa4>
 80080e4:	930d      	str	r3, [sp, #52]	; 0x34
 80080e6:	e595      	b.n	8007c14 <forward_dense+0x58>
 80080e8:	2300      	movs	r3, #0
 80080ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ec:	460b      	mov	r3, r1
 80080ee:	e591      	b.n	8007c14 <forward_dense+0x58>
 80080f0:	46c3      	mov	fp, r8
 80080f2:	e5ba      	b.n	8007c6a <forward_dense+0xae>
 80080f4:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80080f8:	e5b7      	b.n	8007c6a <forward_dense+0xae>
 80080fa:	2300      	movs	r3, #0
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	deff      	udf	#255	; 0xff
 8008100:	2300      	movs	r3, #0
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	deff      	udf	#255	; 0xff
 8008106:	bf00      	nop

08008108 <forward_relu>:
 8008108:	6982      	ldr	r2, [r0, #24]
 800810a:	8813      	ldrh	r3, [r2, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d05b      	beq.n	80081c8 <forward_relu+0xc0>
 8008110:	6851      	ldr	r1, [r2, #4]
 8008112:	684a      	ldr	r2, [r1, #4]
 8008114:	b102      	cbz	r2, 8008118 <forward_relu+0x10>
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	2b01      	cmp	r3, #1
 800811a:	f000 8123 	beq.w	8008364 <forward_relu+0x25c>
 800811e:	b470      	push	{r4, r5, r6}
 8008120:	6909      	ldr	r1, [r1, #16]
 8008122:	b101      	cbz	r1, 8008126 <forward_relu+0x1e>
 8008124:	6809      	ldr	r1, [r1, #0]
 8008126:	69c6      	ldr	r6, [r0, #28]
 8008128:	2e00      	cmp	r6, #0
 800812a:	f000 8097 	beq.w	800825c <forward_relu+0x154>
 800812e:	6873      	ldr	r3, [r6, #4]
 8008130:	6988      	ldr	r0, [r1, #24]
 8008132:	6991      	ldr	r1, [r2, #24]
 8008134:	2b01      	cmp	r3, #1
 8008136:	f000 80c1 	beq.w	80082bc <forward_relu+0x1b4>
 800813a:	6893      	ldr	r3, [r2, #8]
 800813c:	6880      	ldr	r0, [r0, #8]
 800813e:	688c      	ldr	r4, [r1, #8]
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	f000 80f2 	beq.w	800832a <forward_relu+0x222>
 8008146:	68d5      	ldr	r5, [r2, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800814e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008152:	42ab      	cmp	r3, r5
 8008154:	fb01 f202 	mul.w	r2, r1, r2
 8008158:	d1f9      	bne.n	800814e <forward_relu+0x46>
 800815a:	68b3      	ldr	r3, [r6, #8]
 800815c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008160:	edd3 6a00 	vldr	s13, [r3]
 8008164:	ed93 6a01 	vldr	s12, [r3, #4]
 8008168:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800816c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008170:	3a01      	subs	r2, #1
 8008172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008176:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800817a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800817e:	d425      	bmi.n	80081cc <forward_relu+0xc4>
 8008180:	429c      	cmp	r4, r3
 8008182:	d81f      	bhi.n	80081c4 <forward_relu+0xbc>
 8008184:	1d1a      	adds	r2, r3, #4
 8008186:	1d01      	adds	r1, r0, #4
 8008188:	e00d      	b.n	80081a6 <forward_relu+0x9e>
 800818a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800818e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008192:	db03      	blt.n	800819c <forward_relu+0x94>
 8008194:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008198:	ee67 7a86 	vmul.f32	s15, s15, s12
 800819c:	3b08      	subs	r3, #8
 800819e:	429c      	cmp	r4, r3
 80081a0:	ed61 7a01 	vstmdb	r1!, {s15}
 80081a4:	d80e      	bhi.n	80081c4 <forward_relu+0xbc>
 80081a6:	4613      	mov	r3, r2
 80081a8:	ed72 7a01 	vldmdb	r2!, {s15}
 80081ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b4:	d9e9      	bls.n	800818a <forward_relu+0x82>
 80081b6:	3b08      	subs	r3, #8
 80081b8:	eef0 7a47 	vmov.f32	s15, s14
 80081bc:	429c      	cmp	r4, r3
 80081be:	ed61 7a01 	vstmdb	r1!, {s15}
 80081c2:	d9f0      	bls.n	80081a6 <forward_relu+0x9e>
 80081c4:	bc70      	pop	{r4, r5, r6}
 80081c6:	4770      	bx	lr
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	deff      	udf	#255	; 0xff
 80081cc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80081d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d4:	d11f      	bne.n	8008216 <forward_relu+0x10e>
 80081d6:	429c      	cmp	r4, r3
 80081d8:	d8f4      	bhi.n	80081c4 <forward_relu+0xbc>
 80081da:	1b1c      	subs	r4, r3, r4
 80081dc:	f024 0403 	bic.w	r4, r4, #3
 80081e0:	1d1a      	adds	r2, r3, #4
 80081e2:	2500      	movs	r5, #0
 80081e4:	1b1b      	subs	r3, r3, r4
 80081e6:	1d01      	adds	r1, r0, #4
 80081e8:	ed72 7a01 	vldmdb	r2!, {s15}
 80081ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80081f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f4:	dc0a      	bgt.n	800820c <forward_relu+0x104>
 80081f6:	429a      	cmp	r2, r3
 80081f8:	f841 5d04 	str.w	r5, [r1, #-4]!
 80081fc:	d0e2      	beq.n	80081c4 <forward_relu+0xbc>
 80081fe:	ed72 7a01 	vldmdb	r2!, {s15}
 8008202:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820a:	ddf4      	ble.n	80081f6 <forward_relu+0xee>
 800820c:	429a      	cmp	r2, r3
 800820e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008212:	d1e9      	bne.n	80081e8 <forward_relu+0xe0>
 8008214:	e7d6      	b.n	80081c4 <forward_relu+0xbc>
 8008216:	429c      	cmp	r4, r3
 8008218:	d8d4      	bhi.n	80081c4 <forward_relu+0xbc>
 800821a:	1b1c      	subs	r4, r3, r4
 800821c:	f024 0403 	bic.w	r4, r4, #3
 8008220:	1d1a      	adds	r2, r3, #4
 8008222:	1d01      	adds	r1, r0, #4
 8008224:	1b1b      	subs	r3, r3, r4
 8008226:	ed72 7a01 	vldmdb	r2!, {s15}
 800822a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800822e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008232:	db0e      	blt.n	8008252 <forward_relu+0x14a>
 8008234:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008238:	4293      	cmp	r3, r2
 800823a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800823e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008242:	d0bf      	beq.n	80081c4 <forward_relu+0xbc>
 8008244:	ed72 7a01 	vldmdb	r2!, {s15}
 8008248:	eef4 6ae7 	vcmpe.f32	s13, s15
 800824c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008250:	daf0      	bge.n	8008234 <forward_relu+0x12c>
 8008252:	4293      	cmp	r3, r2
 8008254:	ed61 7a01 	vstmdb	r1!, {s15}
 8008258:	d1e5      	bne.n	8008226 <forward_relu+0x11e>
 800825a:	e7b3      	b.n	80081c4 <forward_relu+0xbc>
 800825c:	6893      	ldr	r3, [r2, #8]
 800825e:	6989      	ldr	r1, [r1, #24]
 8008260:	6990      	ldr	r0, [r2, #24]
 8008262:	6889      	ldr	r1, [r1, #8]
 8008264:	6884      	ldr	r4, [r0, #8]
 8008266:	0a1b      	lsrs	r3, r3, #8
 8008268:	d075      	beq.n	8008356 <forward_relu+0x24e>
 800826a:	68d5      	ldr	r5, [r2, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008272:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008276:	429d      	cmp	r5, r3
 8008278:	fb00 f202 	mul.w	r2, r0, r2
 800827c:	d1f9      	bne.n	8008272 <forward_relu+0x16a>
 800827e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8008282:	3b01      	subs	r3, #1
 8008284:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008288:	4294      	cmp	r4, r2
 800828a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800828e:	d899      	bhi.n	80081c4 <forward_relu+0xbc>
 8008290:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800836c <forward_relu+0x264>
 8008294:	3204      	adds	r2, #4
 8008296:	3104      	adds	r1, #4
 8008298:	4613      	mov	r3, r2
 800829a:	ed72 7a01 	vldmdb	r2!, {s15}
 800829e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a6:	f1a3 0308 	sub.w	r3, r3, #8
 80082aa:	bfb8      	it	lt
 80082ac:	eef0 7a47 	vmovlt.f32	s15, s14
 80082b0:	429c      	cmp	r4, r3
 80082b2:	ed61 7a01 	vstmdb	r1!, {s15}
 80082b6:	d9ef      	bls.n	8008298 <forward_relu+0x190>
 80082b8:	bc70      	pop	{r4, r5, r6}
 80082ba:	4770      	bx	lr
 80082bc:	688c      	ldr	r4, [r1, #8]
 80082be:	6891      	ldr	r1, [r2, #8]
 80082c0:	6880      	ldr	r0, [r0, #8]
 80082c2:	0a09      	lsrs	r1, r1, #8
 80082c4:	d049      	beq.n	800835a <forward_relu+0x252>
 80082c6:	68d5      	ldr	r5, [r2, #12]
 80082c8:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80082cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80082d0:	42aa      	cmp	r2, r5
 80082d2:	fb01 f303 	mul.w	r3, r1, r3
 80082d6:	d1f9      	bne.n	80082cc <forward_relu+0x1c4>
 80082d8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80082dc:	3a01      	subs	r2, #1
 80082de:	68b1      	ldr	r1, [r6, #8]
 80082e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082e4:	429c      	cmp	r4, r3
 80082e6:	ed91 7a00 	vldr	s14, [r1]
 80082ea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80082ee:	f63f af69 	bhi.w	80081c4 <forward_relu+0xbc>
 80082f2:	2500      	movs	r5, #0
 80082f4:	3304      	adds	r3, #4
 80082f6:	1d02      	adds	r2, r0, #4
 80082f8:	ed53 7a01 	vldr	s15, [r3, #-4]
 80082fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008304:	f1a3 0104 	sub.w	r1, r3, #4
 8008308:	f1a3 0308 	sub.w	r3, r3, #8
 800830c:	d406      	bmi.n	800831c <forward_relu+0x214>
 800830e:	429c      	cmp	r4, r3
 8008310:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008314:	f63f af56 	bhi.w	80081c4 <forward_relu+0xbc>
 8008318:	460b      	mov	r3, r1
 800831a:	e7ed      	b.n	80082f8 <forward_relu+0x1f0>
 800831c:	429c      	cmp	r4, r3
 800831e:	ed62 7a01 	vstmdb	r2!, {s15}
 8008322:	f63f af4f 	bhi.w	80081c4 <forward_relu+0xbc>
 8008326:	460b      	mov	r3, r1
 8008328:	e7e6      	b.n	80082f8 <forward_relu+0x1f0>
 800832a:	68b3      	ldr	r3, [r6, #8]
 800832c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008330:	edd3 6a00 	vldr	s13, [r3]
 8008334:	ed93 6a01 	vldr	s12, [r3, #4]
 8008338:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800833c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008340:	d401      	bmi.n	8008346 <forward_relu+0x23e>
 8008342:	4623      	mov	r3, r4
 8008344:	e71e      	b.n	8008184 <forward_relu+0x7c>
 8008346:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	4623      	mov	r3, r4
 8008350:	f47f af63 	bne.w	800821a <forward_relu+0x112>
 8008354:	e741      	b.n	80081da <forward_relu+0xd2>
 8008356:	4622      	mov	r2, r4
 8008358:	e79a      	b.n	8008290 <forward_relu+0x188>
 800835a:	68b2      	ldr	r2, [r6, #8]
 800835c:	4623      	mov	r3, r4
 800835e:	ed92 7a00 	vldr	s14, [r2]
 8008362:	e7c6      	b.n	80082f2 <forward_relu+0x1ea>
 8008364:	2300      	movs	r3, #0
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	deff      	udf	#255	; 0xff
 800836a:	bf00      	nop
 800836c:	00000000 	.word	0x00000000

08008370 <forward_sm>:
 8008370:	6982      	ldr	r2, [r0, #24]
 8008372:	8813      	ldrh	r3, [r2, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d07c      	beq.n	8008472 <forward_sm+0x102>
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	ed2d 8b04 	vpush	{d8-d9}
 8008380:	6852      	ldr	r2, [r2, #4]
 8008382:	6854      	ldr	r4, [r2, #4]
 8008384:	b085      	sub	sp, #20
 8008386:	b104      	cbz	r4, 800838a <forward_sm+0x1a>
 8008388:	6824      	ldr	r4, [r4, #0]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d076      	beq.n	800847c <forward_sm+0x10c>
 800838e:	6913      	ldr	r3, [r2, #16]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d076      	beq.n	8008482 <forward_sm+0x112>
 8008394:	681e      	ldr	r6, [r3, #0]
 8008396:	68a3      	ldr	r3, [r4, #8]
 8008398:	68e0      	ldr	r0, [r4, #12]
 800839a:	68f2      	ldr	r2, [r6, #12]
 800839c:	6845      	ldr	r5, [r0, #4]
 800839e:	6857      	ldr	r7, [r2, #4]
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	d068      	beq.n	8008476 <forward_sm+0x106>
 80083a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80083a8:	2201      	movs	r2, #1
 80083aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083ae:	4298      	cmp	r0, r3
 80083b0:	fb01 f202 	mul.w	r2, r1, r2
 80083b4:	d1f9      	bne.n	80083aa <forward_sm+0x3a>
 80083b6:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80083ba:	69a2      	ldr	r2, [r4, #24]
 80083bc:	69b3      	ldr	r3, [r6, #24]
 80083be:	6892      	ldr	r2, [r2, #8]
 80083c0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 80083c4:	eb02 0309 	add.w	r3, r2, r9
 80083c8:	429a      	cmp	r2, r3
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	d24c      	bcs.n	8008468 <forward_sm+0xf8>
 80083ce:	00bb      	lsls	r3, r7, #2
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 80083d6:	00ab      	lsls	r3, r5, #2
 80083d8:	2d01      	cmp	r5, #1
 80083da:	ed92 8a00 	vldr	s16, [r2]
 80083de:	9302      	str	r3, [sp, #8]
 80083e0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80083e4:	463e      	mov	r6, r7
 80083e6:	d93c      	bls.n	8008462 <forward_sm+0xf2>
 80083e8:	1d13      	adds	r3, r2, #4
 80083ea:	ecf3 7a01 	vldmia	r3!, {s15}
 80083ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80083f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f6:	bfb8      	it	lt
 80083f8:	eeb0 8a67 	vmovlt.f32	s16, s15
 80083fc:	429e      	cmp	r6, r3
 80083fe:	d1f4      	bne.n	80083ea <forward_sm+0x7a>
 8008400:	eddf 8a21 	vldr	s17, [pc, #132]	; 8008488 <forward_sm+0x118>
 8008404:	4692      	mov	sl, r2
 8008406:	46c3      	mov	fp, r8
 8008408:	46c1      	mov	r9, r8
 800840a:	2400      	movs	r4, #0
 800840c:	ecba 0a01 	vldmia	sl!, {s0}
 8008410:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008414:	f000 fb68 	bl	8008ae8 <expf>
 8008418:	3401      	adds	r4, #1
 800841a:	42a5      	cmp	r5, r4
 800841c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008420:	eca9 0a01 	vstmia	r9!, {s0}
 8008424:	d8f2      	bhi.n	800840c <forward_sm+0x9c>
 8008426:	eef5 8a40 	vcmp.f32	s17, #0.0
 800842a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800842e:	d00b      	beq.n	8008448 <forward_sm+0xd8>
 8008430:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8008434:	2300      	movs	r3, #0
 8008436:	3301      	adds	r3, #1
 8008438:	429d      	cmp	r5, r3
 800843a:	eddb 7a00 	vldr	s15, [fp]
 800843e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008442:	eceb 7a01 	vstmia	fp!, {s15}
 8008446:	d8f6      	bhi.n	8008436 <forward_sm+0xc6>
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	9901      	ldr	r1, [sp, #4]
 800844c:	4498      	add	r8, r3
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	42b9      	cmp	r1, r7
 8008452:	463a      	mov	r2, r7
 8008454:	441e      	add	r6, r3
 8008456:	d907      	bls.n	8008468 <forward_sm+0xf8>
 8008458:	2d01      	cmp	r5, #1
 800845a:	ed92 8a00 	vldr	s16, [r2]
 800845e:	441f      	add	r7, r3
 8008460:	d8c2      	bhi.n	80083e8 <forward_sm+0x78>
 8008462:	2d00      	cmp	r5, #0
 8008464:	d0f0      	beq.n	8008448 <forward_sm+0xd8>
 8008466:	e7cb      	b.n	8008400 <forward_sm+0x90>
 8008468:	b005      	add	sp, #20
 800846a:	ecbd 8b04 	vpop	{d8-d9}
 800846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	deff      	udf	#255	; 0xff
 8008476:	f04f 0904 	mov.w	r9, #4
 800847a:	e79e      	b.n	80083ba <forward_sm+0x4a>
 800847c:	2300      	movs	r3, #0
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	deff      	udf	#255	; 0xff
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	deff      	udf	#255	; 0xff
 8008486:	bf00      	nop
 8008488:	00000000 	.word	0x00000000

0800848c <ai_check_custom_types>:
 800848c:	b082      	sub	sp, #8
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <ai_check_custom_types+0x50>)
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	b118      	cbz	r0, 800849c <ai_check_custom_types+0x10>
 8008494:	7803      	ldrb	r3, [r0, #0]
 8008496:	2b03      	cmp	r3, #3
 8008498:	d002      	beq.n	80084a0 <ai_check_custom_types+0x14>
 800849a:	2000      	movs	r0, #0
 800849c:	b002      	add	sp, #8
 800849e:	4770      	bx	lr
 80084a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d004      	beq.n	80084b2 <ai_check_custom_types+0x26>
 80084a8:	2001      	movs	r0, #1
 80084aa:	f080 0001 	eor.w	r0, r0, #1
 80084ae:	b002      	add	sp, #8
 80084b0:	4770      	bx	lr
 80084b2:	7842      	ldrb	r2, [r0, #1]
 80084b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	f100 0001 	add.w	r0, r0, #1
 80084be:	d1f3      	bne.n	80084a8 <ai_check_custom_types+0x1c>
 80084c0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80084c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d1ed      	bne.n	80084a8 <ai_check_custom_types+0x1c>
 80084cc:	7842      	ldrb	r2, [r0, #1]
 80084ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d1e8      	bne.n	80084a8 <ai_check_custom_types+0x1c>
 80084d6:	2000      	movs	r0, #0
 80084d8:	e7e7      	b.n	80084aa <ai_check_custom_types+0x1e>
 80084da:	bf00      	nop
 80084dc:	84048403 	.word	0x84048403

080084e0 <ai_layers_init_all>:
 80084e0:	4601      	mov	r1, r0
 80084e2:	2000      	movs	r0, #0
 80084e4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80084e6:	b143      	cbz	r3, 80084fa <ai_layers_init_all+0x1a>
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	60d9      	str	r1, [r3, #12]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	f100 0001 	add.w	r0, r0, #1
 80084f2:	d002      	beq.n	80084fa <ai_layers_init_all+0x1a>
 80084f4:	b10a      	cbz	r2, 80084fa <ai_layers_init_all+0x1a>
 80084f6:	4613      	mov	r3, r2
 80084f8:	e7f5      	b.n	80084e6 <ai_layers_init_all+0x6>
 80084fa:	4770      	bx	lr

080084fc <ai_layers_post_init_all>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008500:	2500      	movs	r5, #0
 8008502:	b16c      	cbz	r4, 8008520 <ai_layers_post_init_all+0x24>
 8008504:	6863      	ldr	r3, [r4, #4]
 8008506:	07db      	lsls	r3, r3, #31
 8008508:	d504      	bpl.n	8008514 <ai_layers_post_init_all+0x18>
 800850a:	6a23      	ldr	r3, [r4, #32]
 800850c:	4620      	mov	r0, r4
 800850e:	b10b      	cbz	r3, 8008514 <ai_layers_post_init_all+0x18>
 8008510:	4798      	blx	r3
 8008512:	3501      	adds	r5, #1
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	42a3      	cmp	r3, r4
 8008518:	d002      	beq.n	8008520 <ai_layers_post_init_all+0x24>
 800851a:	b10b      	cbz	r3, 8008520 <ai_layers_post_init_all+0x24>
 800851c:	461c      	mov	r4, r3
 800851e:	e7f0      	b.n	8008502 <ai_layers_post_init_all+0x6>
 8008520:	4628      	mov	r0, r5
 8008522:	bd38      	pop	{r3, r4, r5, pc}

08008524 <ai_layers_forward_all>:
 8008524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800852c:	4604      	mov	r4, r0
 800852e:	f1b8 0f00 	cmp.w	r8, #0
 8008532:	d02b      	beq.n	800858c <ai_layers_forward_all+0x68>
 8008534:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008536:	6381      	str	r1, [r0, #56]	; 0x38
 8008538:	b321      	cbz	r1, 8008584 <ai_layers_forward_all+0x60>
 800853a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800853c:	2001      	movs	r0, #1
 800853e:	47c0      	blx	r8
 8008540:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008542:	b1fe      	cbz	r6, 8008584 <ai_layers_forward_all+0x60>
 8008544:	2700      	movs	r7, #0
 8008546:	4631      	mov	r1, r6
 8008548:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800854a:	2002      	movs	r0, #2
 800854c:	47c0      	blx	r8
 800854e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008550:	4628      	mov	r0, r5
 8008552:	696b      	ldr	r3, [r5, #20]
 8008554:	4798      	blx	r3
 8008556:	692e      	ldr	r6, [r5, #16]
 8008558:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800855a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800855c:	42b5      	cmp	r5, r6
 800855e:	f04f 0003 	mov.w	r0, #3
 8008562:	d007      	beq.n	8008574 <ai_layers_forward_all+0x50>
 8008564:	47c0      	blx	r8
 8008566:	3701      	adds	r7, #1
 8008568:	63a6      	str	r6, [r4, #56]	; 0x38
 800856a:	2e00      	cmp	r6, #0
 800856c:	d1eb      	bne.n	8008546 <ai_layers_forward_all+0x22>
 800856e:	4638      	mov	r0, r7
 8008570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008574:	2003      	movs	r0, #3
 8008576:	47c0      	blx	r8
 8008578:	2300      	movs	r3, #0
 800857a:	3701      	adds	r7, #1
 800857c:	63a3      	str	r3, [r4, #56]	; 0x38
 800857e:	4638      	mov	r0, r7
 8008580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008584:	2700      	movs	r7, #0
 8008586:	4638      	mov	r0, r7
 8008588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800858e:	6385      	str	r5, [r0, #56]	; 0x38
 8008590:	2d00      	cmp	r5, #0
 8008592:	d0f7      	beq.n	8008584 <ai_layers_forward_all+0x60>
 8008594:	4647      	mov	r7, r8
 8008596:	696b      	ldr	r3, [r5, #20]
 8008598:	4628      	mov	r0, r5
 800859a:	4798      	blx	r3
 800859c:	462b      	mov	r3, r5
 800859e:	692d      	ldr	r5, [r5, #16]
 80085a0:	429d      	cmp	r5, r3
 80085a2:	d004      	beq.n	80085ae <ai_layers_forward_all+0x8a>
 80085a4:	63a5      	str	r5, [r4, #56]	; 0x38
 80085a6:	3701      	adds	r7, #1
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	d1f4      	bne.n	8008596 <ai_layers_forward_all+0x72>
 80085ac:	e7df      	b.n	800856e <ai_layers_forward_all+0x4a>
 80085ae:	2300      	movs	r3, #0
 80085b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80085b2:	3701      	adds	r7, #1
 80085b4:	e7db      	b.n	800856e <ai_layers_forward_all+0x4a>
 80085b6:	bf00      	nop

080085b8 <lite_dense_if32of32wf32>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 80085c0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80085c4:	4287      	cmp	r7, r0
 80085c6:	f240 8106 	bls.w	80087d6 <lite_dense_if32of32wf32+0x21e>
 80085ca:	f1a6 0810 	sub.w	r8, r6, #16
 80085ce:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80085d2:	f108 0801 	add.w	r8, r8, #1
 80085d6:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80085da:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80085de:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80085e2:	4605      	mov	r5, r0
 80085e4:	f006 0a0f 	and.w	sl, r6, #15
 80085e8:	2e0f      	cmp	r6, #15
 80085ea:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80087fc <lite_dense_if32of32wf32+0x244>
 80085ee:	f240 8101 	bls.w	80087f4 <lite_dense_if32of32wf32+0x23c>
 80085f2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80085f6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80085fa:	46b6      	mov	lr, r6
 80085fc:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8008600:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008604:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8008608:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800860c:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8008610:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8008614:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8008618:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 800861c:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8008620:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8008624:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008628:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800862c:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008630:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008634:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008638:	eee6 7a26 	vfma.f32	s15, s12, s13
 800863c:	f1ae 0e10 	sub.w	lr, lr, #16
 8008640:	f1be 0f0f 	cmp.w	lr, #15
 8008644:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8008648:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800864c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008650:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008654:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008658:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800865c:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8008660:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008664:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8008668:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800866c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008670:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8008674:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8008678:	eee6 7a26 	vfma.f32	s15, s12, s13
 800867c:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8008680:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8008684:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008688:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800868c:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8008690:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008694:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008698:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800869c:	eee5 7a25 	vfma.f32	s15, s10, s11
 80086a0:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80086a4:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80086a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80086ac:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80086b0:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80086b4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80086b8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80086bc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80086c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80086c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80086c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80086cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086d0:	d894      	bhi.n	80085fc <lite_dense_if32of32wf32+0x44>
 80086d2:	eb02 0e0b 	add.w	lr, r2, fp
 80086d6:	4654      	mov	r4, sl
 80086d8:	46c4      	mov	ip, r8
 80086da:	2c00      	cmp	r4, #0
 80086dc:	d075      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 80086de:	eddc 6a00 	vldr	s13, [ip]
 80086e2:	edde 7a00 	vldr	s15, [lr]
 80086e6:	2c01      	cmp	r4, #1
 80086e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086ec:	d06d      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 80086ee:	eddc 6a01 	vldr	s13, [ip, #4]
 80086f2:	edde 7a01 	vldr	s15, [lr, #4]
 80086f6:	2c02      	cmp	r4, #2
 80086f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086fc:	d065      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 80086fe:	eddc 6a02 	vldr	s13, [ip, #8]
 8008702:	edde 7a02 	vldr	s15, [lr, #8]
 8008706:	2c03      	cmp	r4, #3
 8008708:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800870c:	d05d      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800870e:	eddc 6a03 	vldr	s13, [ip, #12]
 8008712:	edde 7a03 	vldr	s15, [lr, #12]
 8008716:	2c04      	cmp	r4, #4
 8008718:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800871c:	d055      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800871e:	eddc 6a04 	vldr	s13, [ip, #16]
 8008722:	edde 7a04 	vldr	s15, [lr, #16]
 8008726:	2c05      	cmp	r4, #5
 8008728:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800872c:	d04d      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800872e:	eddc 6a05 	vldr	s13, [ip, #20]
 8008732:	edde 7a05 	vldr	s15, [lr, #20]
 8008736:	2c06      	cmp	r4, #6
 8008738:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800873c:	d045      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800873e:	eddc 6a06 	vldr	s13, [ip, #24]
 8008742:	edde 7a06 	vldr	s15, [lr, #24]
 8008746:	2c07      	cmp	r4, #7
 8008748:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800874c:	d03d      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800874e:	eddc 6a07 	vldr	s13, [ip, #28]
 8008752:	edde 7a07 	vldr	s15, [lr, #28]
 8008756:	2c08      	cmp	r4, #8
 8008758:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800875c:	d035      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800875e:	eddc 6a08 	vldr	s13, [ip, #32]
 8008762:	edde 7a08 	vldr	s15, [lr, #32]
 8008766:	2c09      	cmp	r4, #9
 8008768:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800876c:	d02d      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800876e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8008772:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8008776:	2c0a      	cmp	r4, #10
 8008778:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800877c:	d025      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800877e:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8008782:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8008786:	2c0b      	cmp	r4, #11
 8008788:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800878c:	d01d      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800878e:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8008792:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8008796:	2c0c      	cmp	r4, #12
 8008798:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800879c:	d015      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 800879e:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80087a2:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80087a6:	3c0d      	subs	r4, #13
 80087a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087ac:	d00d      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 80087ae:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80087b2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80087b6:	2c01      	cmp	r4, #1
 80087b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087bc:	d005      	beq.n	80087ca <lite_dense_if32of32wf32+0x212>
 80087be:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80087c2:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80087c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087ca:	444a      	add	r2, r9
 80087cc:	eca5 7a01 	vstmia	r5!, {s14}
 80087d0:	42af      	cmp	r7, r5
 80087d2:	f63f af09 	bhi.w	80085e8 <lite_dense_if32of32wf32+0x30>
 80087d6:	b15b      	cbz	r3, 80087f0 <lite_dense_if32of32wf32+0x238>
 80087d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087da:	b14a      	cbz	r2, 80087f0 <lite_dense_if32of32wf32+0x238>
 80087dc:	edd0 7a00 	vldr	s15, [r0]
 80087e0:	ecb3 7a01 	vldmia	r3!, {s14}
 80087e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087e8:	ece0 7a01 	vstmia	r0!, {s15}
 80087ec:	4287      	cmp	r7, r0
 80087ee:	d1f5      	bne.n	80087dc <lite_dense_if32of32wf32+0x224>
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	4634      	mov	r4, r6
 80087f6:	4696      	mov	lr, r2
 80087f8:	468c      	mov	ip, r1
 80087fa:	e76e      	b.n	80086da <lite_dense_if32of32wf32+0x122>
 80087fc:	00000000 	.word	0x00000000

08008800 <ai_version_get>:
 8008800:	0212      	lsls	r2, r2, #8
 8008802:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008806:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800880a:	4770      	bx	lr

0800880c <get_tensor_byte_size>:
 800880c:	b410      	push	{r4}
 800880e:	6983      	ldr	r3, [r0, #24]
 8008810:	68c4      	ldr	r4, [r0, #12]
 8008812:	6941      	ldr	r1, [r0, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68e0      	ldr	r0, [r4, #12]
 8008818:	4a07      	ldr	r2, [pc, #28]	; (8008838 <get_tensor_byte_size+0x2c>)
 800881a:	68c9      	ldr	r1, [r1, #12]
 800881c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008820:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008824:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008828:	fb01 f000 	mul.w	r0, r1, r0
 800882c:	4293      	cmp	r3, r2
 800882e:	bf04      	itt	eq
 8008830:	3007      	addeq	r0, #7
 8008832:	08c0      	lsreq	r0, r0, #3
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	000400c0 	.word	0x000400c0

0800883c <ai_array_to_buffer_fmt>:
 800883c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008840:	2b02      	cmp	r3, #2
 8008842:	d050      	beq.n	80088e6 <ai_array_to_buffer_fmt+0xaa>
 8008844:	4b2a      	ldr	r3, [pc, #168]	; (80088f0 <ai_array_to_buffer_fmt+0xb4>)
 8008846:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800884a:	429a      	cmp	r2, r3
 800884c:	d00b      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 800884e:	dc1c      	bgt.n	800888a <ai_array_to_buffer_fmt+0x4e>
 8008850:	4b28      	ldr	r3, [pc, #160]	; (80088f4 <ai_array_to_buffer_fmt+0xb8>)
 8008852:	429a      	cmp	r2, r3
 8008854:	d007      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 8008856:	dd0b      	ble.n	8008870 <ai_array_to_buffer_fmt+0x34>
 8008858:	4b27      	ldr	r3, [pc, #156]	; (80088f8 <ai_array_to_buffer_fmt+0xbc>)
 800885a:	429a      	cmp	r2, r3
 800885c:	d003      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 800885e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8008862:	429a      	cmp	r2, r3
 8008864:	d131      	bne.n	80088ca <ai_array_to_buffer_fmt+0x8e>
 8008866:	4613      	mov	r3, r2
 8008868:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800886c:	4318      	orrs	r0, r3
 800886e:	4770      	bx	lr
 8008870:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008874:	429a      	cmp	r2, r3
 8008876:	d0f6      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 8008878:	dd2c      	ble.n	80088d4 <ai_array_to_buffer_fmt+0x98>
 800887a:	4b20      	ldr	r3, [pc, #128]	; (80088fc <ai_array_to_buffer_fmt+0xc0>)
 800887c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008880:	429a      	cmp	r2, r3
 8008882:	bf18      	it	ne
 8008884:	2340      	movne	r3, #64	; 0x40
 8008886:	4318      	orrs	r0, r3
 8008888:	4770      	bx	lr
 800888a:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <ai_array_to_buffer_fmt+0xc4>)
 800888c:	429a      	cmp	r2, r3
 800888e:	d0ea      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 8008890:	dd0e      	ble.n	80088b0 <ai_array_to_buffer_fmt+0x74>
 8008892:	4b1c      	ldr	r3, [pc, #112]	; (8008904 <ai_array_to_buffer_fmt+0xc8>)
 8008894:	429a      	cmp	r2, r3
 8008896:	d0e6      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 8008898:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800889c:	429a      	cmp	r2, r3
 800889e:	d0e2      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 80088a0:	4b19      	ldr	r3, [pc, #100]	; (8008908 <ai_array_to_buffer_fmt+0xcc>)
 80088a2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80088a6:	429a      	cmp	r2, r3
 80088a8:	bf18      	it	ne
 80088aa:	2340      	movne	r3, #64	; 0x40
 80088ac:	4318      	orrs	r0, r3
 80088ae:	4770      	bx	lr
 80088b0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d0d6      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 80088b8:	3307      	adds	r3, #7
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d0d3      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 80088be:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80088c2:	429a      	cmp	r2, r3
 80088c4:	bf18      	it	ne
 80088c6:	2340      	movne	r3, #64	; 0x40
 80088c8:	e7ce      	b.n	8008868 <ai_array_to_buffer_fmt+0x2c>
 80088ca:	4b10      	ldr	r3, [pc, #64]	; (800890c <ai_array_to_buffer_fmt+0xd0>)
 80088cc:	429a      	cmp	r2, r3
 80088ce:	bf18      	it	ne
 80088d0:	2340      	movne	r3, #64	; 0x40
 80088d2:	e7c9      	b.n	8008868 <ai_array_to_buffer_fmt+0x2c>
 80088d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80088d8:	429a      	cmp	r2, r3
 80088da:	d0c4      	beq.n	8008866 <ai_array_to_buffer_fmt+0x2a>
 80088dc:	3380      	adds	r3, #128	; 0x80
 80088de:	429a      	cmp	r2, r3
 80088e0:	bf18      	it	ne
 80088e2:	2340      	movne	r3, #64	; 0x40
 80088e4:	e7c0      	b.n	8008868 <ai_array_to_buffer_fmt+0x2c>
 80088e6:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <ai_array_to_buffer_fmt+0xd4>)
 80088e8:	4003      	ands	r3, r0
 80088ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088ee:	e7bb      	b.n	8008868 <ai_array_to_buffer_fmt+0x2c>
 80088f0:	00840040 	.word	0x00840040
 80088f4:	00040840 	.word	0x00040840
 80088f8:	00041040 	.word	0x00041040
 80088fc:	00040447 	.word	0x00040447
 8008900:	00840840 	.word	0x00840840
 8008904:	00841040 	.word	0x00841040
 8008908:	0084084f 	.word	0x0084084f
 800890c:	0004084f 	.word	0x0004084f
 8008910:	00803fff 	.word	0x00803fff

08008914 <ai_array_get_byte_size>:
 8008914:	b319      	cbz	r1, 800895e <ai_array_get_byte_size+0x4a>
 8008916:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800891a:	fb03 f101 	mul.w	r1, r3, r1
 800891e:	3107      	adds	r1, #7
 8008920:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008924:	f021 0307 	bic.w	r3, r1, #7
 8008928:	2a04      	cmp	r2, #4
 800892a:	f3c0 5141 	ubfx	r1, r0, #21, #2
 800892e:	fa23 f101 	lsr.w	r1, r3, r1
 8008932:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8008936:	d00b      	beq.n	8008950 <ai_array_get_byte_size+0x3c>
 8008938:	2a08      	cmp	r2, #8
 800893a:	d002      	beq.n	8008942 <ai_array_get_byte_size+0x2e>
 800893c:	3107      	adds	r1, #7
 800893e:	08c8      	lsrs	r0, r1, #3
 8008940:	4770      	bx	lr
 8008942:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008946:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800894a:	3107      	adds	r1, #7
 800894c:	08c8      	lsrs	r0, r1, #3
 800894e:	4770      	bx	lr
 8008950:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008954:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008958:	3107      	adds	r1, #7
 800895a:	08c8      	lsrs	r0, r1, #3
 800895c:	4770      	bx	lr
 800895e:	4608      	mov	r0, r1
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop

08008964 <ai_array_get_data_byte_size>:
 8008964:	b169      	cbz	r1, 8008982 <ai_array_get_data_byte_size+0x1e>
 8008966:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800896a:	fb02 f101 	mul.w	r1, r2, r1
 800896e:	1dcb      	adds	r3, r1, #7
 8008970:	f023 0307 	bic.w	r3, r3, #7
 8008974:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008978:	fa23 f000 	lsr.w	r0, r3, r0
 800897c:	3007      	adds	r0, #7
 800897e:	08c0      	lsrs	r0, r0, #3
 8008980:	4770      	bx	lr
 8008982:	4608      	mov	r0, r1
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop

08008988 <__errno>:
 8008988:	4b01      	ldr	r3, [pc, #4]	; (8008990 <__errno+0x8>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	20000554 	.word	0x20000554

08008994 <__libc_init_array>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	4d0d      	ldr	r5, [pc, #52]	; (80089cc <__libc_init_array+0x38>)
 8008998:	4c0d      	ldr	r4, [pc, #52]	; (80089d0 <__libc_init_array+0x3c>)
 800899a:	1b64      	subs	r4, r4, r5
 800899c:	10a4      	asrs	r4, r4, #2
 800899e:	2600      	movs	r6, #0
 80089a0:	42a6      	cmp	r6, r4
 80089a2:	d109      	bne.n	80089b8 <__libc_init_array+0x24>
 80089a4:	4d0b      	ldr	r5, [pc, #44]	; (80089d4 <__libc_init_array+0x40>)
 80089a6:	4c0c      	ldr	r4, [pc, #48]	; (80089d8 <__libc_init_array+0x44>)
 80089a8:	f001 f89e 	bl	8009ae8 <_init>
 80089ac:	1b64      	subs	r4, r4, r5
 80089ae:	10a4      	asrs	r4, r4, #2
 80089b0:	2600      	movs	r6, #0
 80089b2:	42a6      	cmp	r6, r4
 80089b4:	d105      	bne.n	80089c2 <__libc_init_array+0x2e>
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089bc:	4798      	blx	r3
 80089be:	3601      	adds	r6, #1
 80089c0:	e7ee      	b.n	80089a0 <__libc_init_array+0xc>
 80089c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089c6:	4798      	blx	r3
 80089c8:	3601      	adds	r6, #1
 80089ca:	e7f2      	b.n	80089b2 <__libc_init_array+0x1e>
 80089cc:	0800a4c8 	.word	0x0800a4c8
 80089d0:	0800a4c8 	.word	0x0800a4c8
 80089d4:	0800a4c8 	.word	0x0800a4c8
 80089d8:	0800a4cc 	.word	0x0800a4cc

080089dc <memcpy>:
 80089dc:	440a      	add	r2, r1
 80089de:	4291      	cmp	r1, r2
 80089e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089e4:	d100      	bne.n	80089e8 <memcpy+0xc>
 80089e6:	4770      	bx	lr
 80089e8:	b510      	push	{r4, lr}
 80089ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089f2:	4291      	cmp	r1, r2
 80089f4:	d1f9      	bne.n	80089ea <memcpy+0xe>
 80089f6:	bd10      	pop	{r4, pc}

080089f8 <memset>:
 80089f8:	4402      	add	r2, r0
 80089fa:	4603      	mov	r3, r0
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d100      	bne.n	8008a02 <memset+0xa>
 8008a00:	4770      	bx	lr
 8008a02:	f803 1b01 	strb.w	r1, [r3], #1
 8008a06:	e7f9      	b.n	80089fc <memset+0x4>

08008a08 <pow>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	ed2d 8b02 	vpush	{d8}
 8008a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8008a12:	eef0 8a60 	vmov.f32	s17, s1
 8008a16:	ec55 4b11 	vmov	r4, r5, d1
 8008a1a:	f000 f8b9 	bl	8008b90 <__ieee754_pow>
 8008a1e:	4622      	mov	r2, r4
 8008a20:	462b      	mov	r3, r5
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	ec57 6b10 	vmov	r6, r7, d0
 8008a2a:	f7f8 f843 	bl	8000ab4 <__aeabi_dcmpun>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d13b      	bne.n	8008aaa <pow+0xa2>
 8008a32:	ec51 0b18 	vmov	r0, r1, d8
 8008a36:	2200      	movs	r2, #0
 8008a38:	2300      	movs	r3, #0
 8008a3a:	f7f8 f809 	bl	8000a50 <__aeabi_dcmpeq>
 8008a3e:	b1b8      	cbz	r0, 8008a70 <pow+0x68>
 8008a40:	2200      	movs	r2, #0
 8008a42:	2300      	movs	r3, #0
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f8 f802 	bl	8000a50 <__aeabi_dcmpeq>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d146      	bne.n	8008ade <pow+0xd6>
 8008a50:	ec45 4b10 	vmov	d0, r4, r5
 8008a54:	f000 ffa9 	bl	80099aa <finite>
 8008a58:	b338      	cbz	r0, 8008aaa <pow+0xa2>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4620      	mov	r0, r4
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7f7 ffff 	bl	8000a64 <__aeabi_dcmplt>
 8008a66:	b300      	cbz	r0, 8008aaa <pow+0xa2>
 8008a68:	f7ff ff8e 	bl	8008988 <__errno>
 8008a6c:	2322      	movs	r3, #34	; 0x22
 8008a6e:	e01b      	b.n	8008aa8 <pow+0xa0>
 8008a70:	ec47 6b10 	vmov	d0, r6, r7
 8008a74:	f000 ff99 	bl	80099aa <finite>
 8008a78:	b9e0      	cbnz	r0, 8008ab4 <pow+0xac>
 8008a7a:	eeb0 0a48 	vmov.f32	s0, s16
 8008a7e:	eef0 0a68 	vmov.f32	s1, s17
 8008a82:	f000 ff92 	bl	80099aa <finite>
 8008a86:	b1a8      	cbz	r0, 8008ab4 <pow+0xac>
 8008a88:	ec45 4b10 	vmov	d0, r4, r5
 8008a8c:	f000 ff8d 	bl	80099aa <finite>
 8008a90:	b180      	cbz	r0, 8008ab4 <pow+0xac>
 8008a92:	4632      	mov	r2, r6
 8008a94:	463b      	mov	r3, r7
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f8 f80b 	bl	8000ab4 <__aeabi_dcmpun>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0e2      	beq.n	8008a68 <pow+0x60>
 8008aa2:	f7ff ff71 	bl	8008988 <__errno>
 8008aa6:	2321      	movs	r3, #33	; 0x21
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	ecbd 8b02 	vpop	{d8}
 8008aae:	ec47 6b10 	vmov	d0, r6, r7
 8008ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	4630      	mov	r0, r6
 8008aba:	4639      	mov	r1, r7
 8008abc:	f7f7 ffc8 	bl	8000a50 <__aeabi_dcmpeq>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d0f2      	beq.n	8008aaa <pow+0xa2>
 8008ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ac8:	eef0 0a68 	vmov.f32	s1, s17
 8008acc:	f000 ff6d 	bl	80099aa <finite>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d0ea      	beq.n	8008aaa <pow+0xa2>
 8008ad4:	ec45 4b10 	vmov	d0, r4, r5
 8008ad8:	f000 ff67 	bl	80099aa <finite>
 8008adc:	e7c3      	b.n	8008a66 <pow+0x5e>
 8008ade:	4f01      	ldr	r7, [pc, #4]	; (8008ae4 <pow+0xdc>)
 8008ae0:	2600      	movs	r6, #0
 8008ae2:	e7e2      	b.n	8008aaa <pow+0xa2>
 8008ae4:	3ff00000 	.word	0x3ff00000

08008ae8 <expf>:
 8008ae8:	b508      	push	{r3, lr}
 8008aea:	ed2d 8b02 	vpush	{d8}
 8008aee:	eef0 8a40 	vmov.f32	s17, s0
 8008af2:	f000 fe2d 	bl	8009750 <__ieee754_expf>
 8008af6:	eeb0 8a40 	vmov.f32	s16, s0
 8008afa:	eeb0 0a68 	vmov.f32	s0, s17
 8008afe:	f000 ffe5 	bl	8009acc <finitef>
 8008b02:	b160      	cbz	r0, 8008b1e <expf+0x36>
 8008b04:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008b44 <expf+0x5c>
 8008b08:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b10:	dd0a      	ble.n	8008b28 <expf+0x40>
 8008b12:	f7ff ff39 	bl	8008988 <__errno>
 8008b16:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008b48 <expf+0x60>
 8008b1a:	2322      	movs	r3, #34	; 0x22
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	eeb0 0a48 	vmov.f32	s0, s16
 8008b22:	ecbd 8b02 	vpop	{d8}
 8008b26:	bd08      	pop	{r3, pc}
 8008b28:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008b4c <expf+0x64>
 8008b2c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b34:	d5f3      	bpl.n	8008b1e <expf+0x36>
 8008b36:	f7ff ff27 	bl	8008988 <__errno>
 8008b3a:	2322      	movs	r3, #34	; 0x22
 8008b3c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8008b50 <expf+0x68>
 8008b40:	6003      	str	r3, [r0, #0]
 8008b42:	e7ec      	b.n	8008b1e <expf+0x36>
 8008b44:	42b17180 	.word	0x42b17180
 8008b48:	7f800000 	.word	0x7f800000
 8008b4c:	c2cff1b5 	.word	0xc2cff1b5
 8008b50:	00000000 	.word	0x00000000

08008b54 <sqrtf>:
 8008b54:	b508      	push	{r3, lr}
 8008b56:	ed2d 8b02 	vpush	{d8}
 8008b5a:	eeb0 8a40 	vmov.f32	s16, s0
 8008b5e:	f000 fec5 	bl	80098ec <__ieee754_sqrtf>
 8008b62:	eeb4 8a48 	vcmp.f32	s16, s16
 8008b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b6a:	d60c      	bvs.n	8008b86 <sqrtf+0x32>
 8008b6c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008b8c <sqrtf+0x38>
 8008b70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b78:	d505      	bpl.n	8008b86 <sqrtf+0x32>
 8008b7a:	f7ff ff05 	bl	8008988 <__errno>
 8008b7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008b82:	2321      	movs	r3, #33	; 0x21
 8008b84:	6003      	str	r3, [r0, #0]
 8008b86:	ecbd 8b02 	vpop	{d8}
 8008b8a:	bd08      	pop	{r3, pc}
 8008b8c:	00000000 	.word	0x00000000

08008b90 <__ieee754_pow>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	ed2d 8b06 	vpush	{d8-d10}
 8008b98:	b089      	sub	sp, #36	; 0x24
 8008b9a:	ed8d 1b00 	vstr	d1, [sp]
 8008b9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008ba2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008ba6:	ea58 0102 	orrs.w	r1, r8, r2
 8008baa:	ec57 6b10 	vmov	r6, r7, d0
 8008bae:	d115      	bne.n	8008bdc <__ieee754_pow+0x4c>
 8008bb0:	19b3      	adds	r3, r6, r6
 8008bb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008bb6:	4152      	adcs	r2, r2
 8008bb8:	4299      	cmp	r1, r3
 8008bba:	4b89      	ldr	r3, [pc, #548]	; (8008de0 <__ieee754_pow+0x250>)
 8008bbc:	4193      	sbcs	r3, r2
 8008bbe:	f080 84d2 	bcs.w	8009566 <__ieee754_pow+0x9d6>
 8008bc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	4639      	mov	r1, r7
 8008bca:	f7f7 fb23 	bl	8000214 <__adddf3>
 8008bce:	ec41 0b10 	vmov	d0, r0, r1
 8008bd2:	b009      	add	sp, #36	; 0x24
 8008bd4:	ecbd 8b06 	vpop	{d8-d10}
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bdc:	4b81      	ldr	r3, [pc, #516]	; (8008de4 <__ieee754_pow+0x254>)
 8008bde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008be2:	429c      	cmp	r4, r3
 8008be4:	ee10 aa10 	vmov	sl, s0
 8008be8:	463d      	mov	r5, r7
 8008bea:	dc06      	bgt.n	8008bfa <__ieee754_pow+0x6a>
 8008bec:	d101      	bne.n	8008bf2 <__ieee754_pow+0x62>
 8008bee:	2e00      	cmp	r6, #0
 8008bf0:	d1e7      	bne.n	8008bc2 <__ieee754_pow+0x32>
 8008bf2:	4598      	cmp	r8, r3
 8008bf4:	dc01      	bgt.n	8008bfa <__ieee754_pow+0x6a>
 8008bf6:	d10f      	bne.n	8008c18 <__ieee754_pow+0x88>
 8008bf8:	b172      	cbz	r2, 8008c18 <__ieee754_pow+0x88>
 8008bfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008bfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008c02:	ea55 050a 	orrs.w	r5, r5, sl
 8008c06:	d1dc      	bne.n	8008bc2 <__ieee754_pow+0x32>
 8008c08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c0c:	18db      	adds	r3, r3, r3
 8008c0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008c12:	4152      	adcs	r2, r2
 8008c14:	429d      	cmp	r5, r3
 8008c16:	e7d0      	b.n	8008bba <__ieee754_pow+0x2a>
 8008c18:	2d00      	cmp	r5, #0
 8008c1a:	da3b      	bge.n	8008c94 <__ieee754_pow+0x104>
 8008c1c:	4b72      	ldr	r3, [pc, #456]	; (8008de8 <__ieee754_pow+0x258>)
 8008c1e:	4598      	cmp	r8, r3
 8008c20:	dc51      	bgt.n	8008cc6 <__ieee754_pow+0x136>
 8008c22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008c26:	4598      	cmp	r8, r3
 8008c28:	f340 84ac 	ble.w	8009584 <__ieee754_pow+0x9f4>
 8008c2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c34:	2b14      	cmp	r3, #20
 8008c36:	dd0f      	ble.n	8008c58 <__ieee754_pow+0xc8>
 8008c38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008c3c:	fa22 f103 	lsr.w	r1, r2, r3
 8008c40:	fa01 f303 	lsl.w	r3, r1, r3
 8008c44:	4293      	cmp	r3, r2
 8008c46:	f040 849d 	bne.w	8009584 <__ieee754_pow+0x9f4>
 8008c4a:	f001 0101 	and.w	r1, r1, #1
 8008c4e:	f1c1 0302 	rsb	r3, r1, #2
 8008c52:	9304      	str	r3, [sp, #16]
 8008c54:	b182      	cbz	r2, 8008c78 <__ieee754_pow+0xe8>
 8008c56:	e05f      	b.n	8008d18 <__ieee754_pow+0x188>
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	d15b      	bne.n	8008d14 <__ieee754_pow+0x184>
 8008c5c:	f1c3 0314 	rsb	r3, r3, #20
 8008c60:	fa48 f103 	asr.w	r1, r8, r3
 8008c64:	fa01 f303 	lsl.w	r3, r1, r3
 8008c68:	4543      	cmp	r3, r8
 8008c6a:	f040 8488 	bne.w	800957e <__ieee754_pow+0x9ee>
 8008c6e:	f001 0101 	and.w	r1, r1, #1
 8008c72:	f1c1 0302 	rsb	r3, r1, #2
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	4b5c      	ldr	r3, [pc, #368]	; (8008dec <__ieee754_pow+0x25c>)
 8008c7a:	4598      	cmp	r8, r3
 8008c7c:	d132      	bne.n	8008ce4 <__ieee754_pow+0x154>
 8008c7e:	f1b9 0f00 	cmp.w	r9, #0
 8008c82:	f280 8478 	bge.w	8009576 <__ieee754_pow+0x9e6>
 8008c86:	4959      	ldr	r1, [pc, #356]	; (8008dec <__ieee754_pow+0x25c>)
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f7f7 fda1 	bl	80007d4 <__aeabi_ddiv>
 8008c92:	e79c      	b.n	8008bce <__ieee754_pow+0x3e>
 8008c94:	2300      	movs	r3, #0
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d13d      	bne.n	8008d18 <__ieee754_pow+0x188>
 8008c9c:	4b51      	ldr	r3, [pc, #324]	; (8008de4 <__ieee754_pow+0x254>)
 8008c9e:	4598      	cmp	r8, r3
 8008ca0:	d1ea      	bne.n	8008c78 <__ieee754_pow+0xe8>
 8008ca2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008ca6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008caa:	ea53 030a 	orrs.w	r3, r3, sl
 8008cae:	f000 845a 	beq.w	8009566 <__ieee754_pow+0x9d6>
 8008cb2:	4b4f      	ldr	r3, [pc, #316]	; (8008df0 <__ieee754_pow+0x260>)
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	dd08      	ble.n	8008cca <__ieee754_pow+0x13a>
 8008cb8:	f1b9 0f00 	cmp.w	r9, #0
 8008cbc:	f2c0 8457 	blt.w	800956e <__ieee754_pow+0x9de>
 8008cc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cc4:	e783      	b.n	8008bce <__ieee754_pow+0x3e>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e7e5      	b.n	8008c96 <__ieee754_pow+0x106>
 8008cca:	f1b9 0f00 	cmp.w	r9, #0
 8008cce:	f04f 0000 	mov.w	r0, #0
 8008cd2:	f04f 0100 	mov.w	r1, #0
 8008cd6:	f6bf af7a 	bge.w	8008bce <__ieee754_pow+0x3e>
 8008cda:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008cde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ce2:	e774      	b.n	8008bce <__ieee754_pow+0x3e>
 8008ce4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008ce8:	d106      	bne.n	8008cf8 <__ieee754_pow+0x168>
 8008cea:	4632      	mov	r2, r6
 8008cec:	463b      	mov	r3, r7
 8008cee:	4630      	mov	r0, r6
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	f7f7 fc45 	bl	8000580 <__aeabi_dmul>
 8008cf6:	e76a      	b.n	8008bce <__ieee754_pow+0x3e>
 8008cf8:	4b3e      	ldr	r3, [pc, #248]	; (8008df4 <__ieee754_pow+0x264>)
 8008cfa:	4599      	cmp	r9, r3
 8008cfc:	d10c      	bne.n	8008d18 <__ieee754_pow+0x188>
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	db0a      	blt.n	8008d18 <__ieee754_pow+0x188>
 8008d02:	ec47 6b10 	vmov	d0, r6, r7
 8008d06:	b009      	add	sp, #36	; 0x24
 8008d08:	ecbd 8b06 	vpop	{d8-d10}
 8008d0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	f000 bc6c 	b.w	80095ec <__ieee754_sqrt>
 8008d14:	2300      	movs	r3, #0
 8008d16:	9304      	str	r3, [sp, #16]
 8008d18:	ec47 6b10 	vmov	d0, r6, r7
 8008d1c:	f000 fe3c 	bl	8009998 <fabs>
 8008d20:	ec51 0b10 	vmov	r0, r1, d0
 8008d24:	f1ba 0f00 	cmp.w	sl, #0
 8008d28:	d129      	bne.n	8008d7e <__ieee754_pow+0x1ee>
 8008d2a:	b124      	cbz	r4, 8008d36 <__ieee754_pow+0x1a6>
 8008d2c:	4b2f      	ldr	r3, [pc, #188]	; (8008dec <__ieee754_pow+0x25c>)
 8008d2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d123      	bne.n	8008d7e <__ieee754_pow+0x1ee>
 8008d36:	f1b9 0f00 	cmp.w	r9, #0
 8008d3a:	da05      	bge.n	8008d48 <__ieee754_pow+0x1b8>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	2000      	movs	r0, #0
 8008d42:	492a      	ldr	r1, [pc, #168]	; (8008dec <__ieee754_pow+0x25c>)
 8008d44:	f7f7 fd46 	bl	80007d4 <__aeabi_ddiv>
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	f6bf af40 	bge.w	8008bce <__ieee754_pow+0x3e>
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d58:	4323      	orrs	r3, r4
 8008d5a:	d108      	bne.n	8008d6e <__ieee754_pow+0x1de>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4610      	mov	r0, r2
 8008d62:	4619      	mov	r1, r3
 8008d64:	f7f7 fa54 	bl	8000210 <__aeabi_dsub>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	e78f      	b.n	8008c8e <__ieee754_pow+0xfe>
 8008d6e:	9b04      	ldr	r3, [sp, #16]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	f47f af2c 	bne.w	8008bce <__ieee754_pow+0x3e>
 8008d76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	e727      	b.n	8008bce <__ieee754_pow+0x3e>
 8008d7e:	0feb      	lsrs	r3, r5, #31
 8008d80:	3b01      	subs	r3, #1
 8008d82:	9306      	str	r3, [sp, #24]
 8008d84:	9a06      	ldr	r2, [sp, #24]
 8008d86:	9b04      	ldr	r3, [sp, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	d102      	bne.n	8008d92 <__ieee754_pow+0x202>
 8008d8c:	4632      	mov	r2, r6
 8008d8e:	463b      	mov	r3, r7
 8008d90:	e7e6      	b.n	8008d60 <__ieee754_pow+0x1d0>
 8008d92:	4b19      	ldr	r3, [pc, #100]	; (8008df8 <__ieee754_pow+0x268>)
 8008d94:	4598      	cmp	r8, r3
 8008d96:	f340 80fb 	ble.w	8008f90 <__ieee754_pow+0x400>
 8008d9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008d9e:	4598      	cmp	r8, r3
 8008da0:	4b13      	ldr	r3, [pc, #76]	; (8008df0 <__ieee754_pow+0x260>)
 8008da2:	dd0c      	ble.n	8008dbe <__ieee754_pow+0x22e>
 8008da4:	429c      	cmp	r4, r3
 8008da6:	dc0f      	bgt.n	8008dc8 <__ieee754_pow+0x238>
 8008da8:	f1b9 0f00 	cmp.w	r9, #0
 8008dac:	da0f      	bge.n	8008dce <__ieee754_pow+0x23e>
 8008dae:	2000      	movs	r0, #0
 8008db0:	b009      	add	sp, #36	; 0x24
 8008db2:	ecbd 8b06 	vpop	{d8-d10}
 8008db6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dba:	f000 bdc1 	b.w	8009940 <__math_oflow>
 8008dbe:	429c      	cmp	r4, r3
 8008dc0:	dbf2      	blt.n	8008da8 <__ieee754_pow+0x218>
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <__ieee754_pow+0x25c>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	dd19      	ble.n	8008dfc <__ieee754_pow+0x26c>
 8008dc8:	f1b9 0f00 	cmp.w	r9, #0
 8008dcc:	dcef      	bgt.n	8008dae <__ieee754_pow+0x21e>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	b009      	add	sp, #36	; 0x24
 8008dd2:	ecbd 8b06 	vpop	{d8-d10}
 8008dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dda:	f000 bda8 	b.w	800992e <__math_uflow>
 8008dde:	bf00      	nop
 8008de0:	fff00000 	.word	0xfff00000
 8008de4:	7ff00000 	.word	0x7ff00000
 8008de8:	433fffff 	.word	0x433fffff
 8008dec:	3ff00000 	.word	0x3ff00000
 8008df0:	3fefffff 	.word	0x3fefffff
 8008df4:	3fe00000 	.word	0x3fe00000
 8008df8:	41e00000 	.word	0x41e00000
 8008dfc:	4b60      	ldr	r3, [pc, #384]	; (8008f80 <__ieee754_pow+0x3f0>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f7f7 fa06 	bl	8000210 <__aeabi_dsub>
 8008e04:	a354      	add	r3, pc, #336	; (adr r3, 8008f58 <__ieee754_pow+0x3c8>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	f7f7 fbb7 	bl	8000580 <__aeabi_dmul>
 8008e12:	a353      	add	r3, pc, #332	; (adr r3, 8008f60 <__ieee754_pow+0x3d0>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	4606      	mov	r6, r0
 8008e1a:	460f      	mov	r7, r1
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	4629      	mov	r1, r5
 8008e20:	f7f7 fbae 	bl	8000580 <__aeabi_dmul>
 8008e24:	4b57      	ldr	r3, [pc, #348]	; (8008f84 <__ieee754_pow+0x3f4>)
 8008e26:	4682      	mov	sl, r0
 8008e28:	468b      	mov	fp, r1
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 fba6 	bl	8000580 <__aeabi_dmul>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	a14b      	add	r1, pc, #300	; (adr r1, 8008f68 <__ieee754_pow+0x3d8>)
 8008e3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e3e:	f7f7 f9e7 	bl	8000210 <__aeabi_dsub>
 8008e42:	4622      	mov	r2, r4
 8008e44:	462b      	mov	r3, r5
 8008e46:	f7f7 fb9b 	bl	8000580 <__aeabi_dmul>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	2000      	movs	r0, #0
 8008e50:	494d      	ldr	r1, [pc, #308]	; (8008f88 <__ieee754_pow+0x3f8>)
 8008e52:	f7f7 f9dd 	bl	8000210 <__aeabi_dsub>
 8008e56:	4622      	mov	r2, r4
 8008e58:	4680      	mov	r8, r0
 8008e5a:	4689      	mov	r9, r1
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	4620      	mov	r0, r4
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7f7 fb8d 	bl	8000580 <__aeabi_dmul>
 8008e66:	4602      	mov	r2, r0
 8008e68:	460b      	mov	r3, r1
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	f7f7 fb87 	bl	8000580 <__aeabi_dmul>
 8008e72:	a33f      	add	r3, pc, #252	; (adr r3, 8008f70 <__ieee754_pow+0x3e0>)
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	f7f7 fb82 	bl	8000580 <__aeabi_dmul>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4650      	mov	r0, sl
 8008e82:	4659      	mov	r1, fp
 8008e84:	f7f7 f9c4 	bl	8000210 <__aeabi_dsub>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	4689      	mov	r9, r1
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 f9be 	bl	8000214 <__adddf3>
 8008e98:	2000      	movs	r0, #0
 8008e9a:	4632      	mov	r2, r6
 8008e9c:	463b      	mov	r3, r7
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	f7f7 f9b5 	bl	8000210 <__aeabi_dsub>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f7f7 f9af 	bl	8000210 <__aeabi_dsub>
 8008eb2:	9b04      	ldr	r3, [sp, #16]
 8008eb4:	9a06      	ldr	r2, [sp, #24]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	4682      	mov	sl, r0
 8008ebc:	468b      	mov	fp, r1
 8008ebe:	f040 81e7 	bne.w	8009290 <__ieee754_pow+0x700>
 8008ec2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008f78 <__ieee754_pow+0x3e8>
 8008ec6:	eeb0 8a47 	vmov.f32	s16, s14
 8008eca:	eef0 8a67 	vmov.f32	s17, s15
 8008ece:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	463b      	mov	r3, r7
 8008ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008edc:	f7f7 f998 	bl	8000210 <__aeabi_dsub>
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	f7f7 fb4c 	bl	8000580 <__aeabi_dmul>
 8008ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eec:	4680      	mov	r8, r0
 8008eee:	4689      	mov	r9, r1
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	4659      	mov	r1, fp
 8008ef4:	f7f7 fb44 	bl	8000580 <__aeabi_dmul>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4640      	mov	r0, r8
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 f988 	bl	8000214 <__adddf3>
 8008f04:	4632      	mov	r2, r6
 8008f06:	463b      	mov	r3, r7
 8008f08:	4680      	mov	r8, r0
 8008f0a:	4689      	mov	r9, r1
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f7f7 fb36 	bl	8000580 <__aeabi_dmul>
 8008f14:	460b      	mov	r3, r1
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4640      	mov	r0, r8
 8008f20:	f7f7 f978 	bl	8000214 <__adddf3>
 8008f24:	4b19      	ldr	r3, [pc, #100]	; (8008f8c <__ieee754_pow+0x3fc>)
 8008f26:	4299      	cmp	r1, r3
 8008f28:	ec45 4b19 	vmov	d9, r4, r5
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	460f      	mov	r7, r1
 8008f30:	468b      	mov	fp, r1
 8008f32:	f340 82f1 	ble.w	8009518 <__ieee754_pow+0x988>
 8008f36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008f3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008f3e:	4303      	orrs	r3, r0
 8008f40:	f000 81e4 	beq.w	800930c <__ieee754_pow+0x77c>
 8008f44:	ec51 0b18 	vmov	r0, r1, d8
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f7f7 fd8a 	bl	8000a64 <__aeabi_dcmplt>
 8008f50:	3800      	subs	r0, #0
 8008f52:	bf18      	it	ne
 8008f54:	2001      	movne	r0, #1
 8008f56:	e72b      	b.n	8008db0 <__ieee754_pow+0x220>
 8008f58:	60000000 	.word	0x60000000
 8008f5c:	3ff71547 	.word	0x3ff71547
 8008f60:	f85ddf44 	.word	0xf85ddf44
 8008f64:	3e54ae0b 	.word	0x3e54ae0b
 8008f68:	55555555 	.word	0x55555555
 8008f6c:	3fd55555 	.word	0x3fd55555
 8008f70:	652b82fe 	.word	0x652b82fe
 8008f74:	3ff71547 	.word	0x3ff71547
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	bff00000 	.word	0xbff00000
 8008f80:	3ff00000 	.word	0x3ff00000
 8008f84:	3fd00000 	.word	0x3fd00000
 8008f88:	3fe00000 	.word	0x3fe00000
 8008f8c:	408fffff 	.word	0x408fffff
 8008f90:	4bd5      	ldr	r3, [pc, #852]	; (80092e8 <__ieee754_pow+0x758>)
 8008f92:	402b      	ands	r3, r5
 8008f94:	2200      	movs	r2, #0
 8008f96:	b92b      	cbnz	r3, 8008fa4 <__ieee754_pow+0x414>
 8008f98:	4bd4      	ldr	r3, [pc, #848]	; (80092ec <__ieee754_pow+0x75c>)
 8008f9a:	f7f7 faf1 	bl	8000580 <__aeabi_dmul>
 8008f9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	1523      	asrs	r3, r4, #20
 8008fa6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008faa:	4413      	add	r3, r2
 8008fac:	9305      	str	r3, [sp, #20]
 8008fae:	4bd0      	ldr	r3, [pc, #832]	; (80092f0 <__ieee754_pow+0x760>)
 8008fb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008fb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008fbe:	dd08      	ble.n	8008fd2 <__ieee754_pow+0x442>
 8008fc0:	4bcc      	ldr	r3, [pc, #816]	; (80092f4 <__ieee754_pow+0x764>)
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	f340 8162 	ble.w	800928c <__ieee754_pow+0x6fc>
 8008fc8:	9b05      	ldr	r3, [sp, #20]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	9305      	str	r3, [sp, #20]
 8008fce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008fd2:	2400      	movs	r4, #0
 8008fd4:	00e3      	lsls	r3, r4, #3
 8008fd6:	9307      	str	r3, [sp, #28]
 8008fd8:	4bc7      	ldr	r3, [pc, #796]	; (80092f8 <__ieee754_pow+0x768>)
 8008fda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fde:	ed93 7b00 	vldr	d7, [r3]
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	ec53 2b17 	vmov	r2, r3, d7
 8008fe8:	eeb0 9a47 	vmov.f32	s18, s14
 8008fec:	eef0 9a67 	vmov.f32	s19, s15
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	f7f7 f90d 	bl	8000210 <__aeabi_dsub>
 8008ff6:	4652      	mov	r2, sl
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	460f      	mov	r7, r1
 8008ffc:	462b      	mov	r3, r5
 8008ffe:	ec51 0b19 	vmov	r0, r1, d9
 8009002:	f7f7 f907 	bl	8000214 <__adddf3>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	2000      	movs	r0, #0
 800900c:	49bb      	ldr	r1, [pc, #748]	; (80092fc <__ieee754_pow+0x76c>)
 800900e:	f7f7 fbe1 	bl	80007d4 <__aeabi_ddiv>
 8009012:	ec41 0b1a 	vmov	d10, r0, r1
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4630      	mov	r0, r6
 800901c:	4639      	mov	r1, r7
 800901e:	f7f7 faaf 	bl	8000580 <__aeabi_dmul>
 8009022:	2300      	movs	r3, #0
 8009024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009028:	9302      	str	r3, [sp, #8]
 800902a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800902e:	46ab      	mov	fp, r5
 8009030:	106d      	asrs	r5, r5, #1
 8009032:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009036:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800903a:	ec41 0b18 	vmov	d8, r0, r1
 800903e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009042:	2200      	movs	r2, #0
 8009044:	4640      	mov	r0, r8
 8009046:	4649      	mov	r1, r9
 8009048:	4614      	mov	r4, r2
 800904a:	461d      	mov	r5, r3
 800904c:	f7f7 fa98 	bl	8000580 <__aeabi_dmul>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4630      	mov	r0, r6
 8009056:	4639      	mov	r1, r7
 8009058:	f7f7 f8da 	bl	8000210 <__aeabi_dsub>
 800905c:	ec53 2b19 	vmov	r2, r3, d9
 8009060:	4606      	mov	r6, r0
 8009062:	460f      	mov	r7, r1
 8009064:	4620      	mov	r0, r4
 8009066:	4629      	mov	r1, r5
 8009068:	f7f7 f8d2 	bl	8000210 <__aeabi_dsub>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4650      	mov	r0, sl
 8009072:	4659      	mov	r1, fp
 8009074:	f7f7 f8cc 	bl	8000210 <__aeabi_dsub>
 8009078:	4642      	mov	r2, r8
 800907a:	464b      	mov	r3, r9
 800907c:	f7f7 fa80 	bl	8000580 <__aeabi_dmul>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4630      	mov	r0, r6
 8009086:	4639      	mov	r1, r7
 8009088:	f7f7 f8c2 	bl	8000210 <__aeabi_dsub>
 800908c:	ec53 2b1a 	vmov	r2, r3, d10
 8009090:	f7f7 fa76 	bl	8000580 <__aeabi_dmul>
 8009094:	ec53 2b18 	vmov	r2, r3, d8
 8009098:	ec41 0b19 	vmov	d9, r0, r1
 800909c:	ec51 0b18 	vmov	r0, r1, d8
 80090a0:	f7f7 fa6e 	bl	8000580 <__aeabi_dmul>
 80090a4:	a37c      	add	r3, pc, #496	; (adr r3, 8009298 <__ieee754_pow+0x708>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	4604      	mov	r4, r0
 80090ac:	460d      	mov	r5, r1
 80090ae:	f7f7 fa67 	bl	8000580 <__aeabi_dmul>
 80090b2:	a37b      	add	r3, pc, #492	; (adr r3, 80092a0 <__ieee754_pow+0x710>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 f8ac 	bl	8000214 <__adddf3>
 80090bc:	4622      	mov	r2, r4
 80090be:	462b      	mov	r3, r5
 80090c0:	f7f7 fa5e 	bl	8000580 <__aeabi_dmul>
 80090c4:	a378      	add	r3, pc, #480	; (adr r3, 80092a8 <__ieee754_pow+0x718>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f8a3 	bl	8000214 <__adddf3>
 80090ce:	4622      	mov	r2, r4
 80090d0:	462b      	mov	r3, r5
 80090d2:	f7f7 fa55 	bl	8000580 <__aeabi_dmul>
 80090d6:	a376      	add	r3, pc, #472	; (adr r3, 80092b0 <__ieee754_pow+0x720>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f7f7 f89a 	bl	8000214 <__adddf3>
 80090e0:	4622      	mov	r2, r4
 80090e2:	462b      	mov	r3, r5
 80090e4:	f7f7 fa4c 	bl	8000580 <__aeabi_dmul>
 80090e8:	a373      	add	r3, pc, #460	; (adr r3, 80092b8 <__ieee754_pow+0x728>)
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f7f7 f891 	bl	8000214 <__adddf3>
 80090f2:	4622      	mov	r2, r4
 80090f4:	462b      	mov	r3, r5
 80090f6:	f7f7 fa43 	bl	8000580 <__aeabi_dmul>
 80090fa:	a371      	add	r3, pc, #452	; (adr r3, 80092c0 <__ieee754_pow+0x730>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 f888 	bl	8000214 <__adddf3>
 8009104:	4622      	mov	r2, r4
 8009106:	4606      	mov	r6, r0
 8009108:	460f      	mov	r7, r1
 800910a:	462b      	mov	r3, r5
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 fa36 	bl	8000580 <__aeabi_dmul>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 fa30 	bl	8000580 <__aeabi_dmul>
 8009120:	4642      	mov	r2, r8
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	464b      	mov	r3, r9
 8009128:	ec51 0b18 	vmov	r0, r1, d8
 800912c:	f7f7 f872 	bl	8000214 <__adddf3>
 8009130:	ec53 2b19 	vmov	r2, r3, d9
 8009134:	f7f7 fa24 	bl	8000580 <__aeabi_dmul>
 8009138:	4622      	mov	r2, r4
 800913a:	462b      	mov	r3, r5
 800913c:	f7f7 f86a 	bl	8000214 <__adddf3>
 8009140:	4642      	mov	r2, r8
 8009142:	4682      	mov	sl, r0
 8009144:	468b      	mov	fp, r1
 8009146:	464b      	mov	r3, r9
 8009148:	4640      	mov	r0, r8
 800914a:	4649      	mov	r1, r9
 800914c:	f7f7 fa18 	bl	8000580 <__aeabi_dmul>
 8009150:	4b6b      	ldr	r3, [pc, #428]	; (8009300 <__ieee754_pow+0x770>)
 8009152:	2200      	movs	r2, #0
 8009154:	4606      	mov	r6, r0
 8009156:	460f      	mov	r7, r1
 8009158:	f7f7 f85c 	bl	8000214 <__adddf3>
 800915c:	4652      	mov	r2, sl
 800915e:	465b      	mov	r3, fp
 8009160:	f7f7 f858 	bl	8000214 <__adddf3>
 8009164:	2000      	movs	r0, #0
 8009166:	4604      	mov	r4, r0
 8009168:	460d      	mov	r5, r1
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	f7f7 fa05 	bl	8000580 <__aeabi_dmul>
 8009176:	4b62      	ldr	r3, [pc, #392]	; (8009300 <__ieee754_pow+0x770>)
 8009178:	4680      	mov	r8, r0
 800917a:	4689      	mov	r9, r1
 800917c:	2200      	movs	r2, #0
 800917e:	4620      	mov	r0, r4
 8009180:	4629      	mov	r1, r5
 8009182:	f7f7 f845 	bl	8000210 <__aeabi_dsub>
 8009186:	4632      	mov	r2, r6
 8009188:	463b      	mov	r3, r7
 800918a:	f7f7 f841 	bl	8000210 <__aeabi_dsub>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4650      	mov	r0, sl
 8009194:	4659      	mov	r1, fp
 8009196:	f7f7 f83b 	bl	8000210 <__aeabi_dsub>
 800919a:	ec53 2b18 	vmov	r2, r3, d8
 800919e:	f7f7 f9ef 	bl	8000580 <__aeabi_dmul>
 80091a2:	4622      	mov	r2, r4
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	462b      	mov	r3, r5
 80091aa:	ec51 0b19 	vmov	r0, r1, d9
 80091ae:	f7f7 f9e7 	bl	8000580 <__aeabi_dmul>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4630      	mov	r0, r6
 80091b8:	4639      	mov	r1, r7
 80091ba:	f7f7 f82b 	bl	8000214 <__adddf3>
 80091be:	4606      	mov	r6, r0
 80091c0:	460f      	mov	r7, r1
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4640      	mov	r0, r8
 80091c8:	4649      	mov	r1, r9
 80091ca:	f7f7 f823 	bl	8000214 <__adddf3>
 80091ce:	a33e      	add	r3, pc, #248	; (adr r3, 80092c8 <__ieee754_pow+0x738>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	2000      	movs	r0, #0
 80091d6:	4604      	mov	r4, r0
 80091d8:	460d      	mov	r5, r1
 80091da:	f7f7 f9d1 	bl	8000580 <__aeabi_dmul>
 80091de:	4642      	mov	r2, r8
 80091e0:	ec41 0b18 	vmov	d8, r0, r1
 80091e4:	464b      	mov	r3, r9
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f7 f811 	bl	8000210 <__aeabi_dsub>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4630      	mov	r0, r6
 80091f4:	4639      	mov	r1, r7
 80091f6:	f7f7 f80b 	bl	8000210 <__aeabi_dsub>
 80091fa:	a335      	add	r3, pc, #212	; (adr r3, 80092d0 <__ieee754_pow+0x740>)
 80091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009200:	f7f7 f9be 	bl	8000580 <__aeabi_dmul>
 8009204:	a334      	add	r3, pc, #208	; (adr r3, 80092d8 <__ieee754_pow+0x748>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 f9b5 	bl	8000580 <__aeabi_dmul>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4630      	mov	r0, r6
 800921c:	4639      	mov	r1, r7
 800921e:	f7f6 fff9 	bl	8000214 <__adddf3>
 8009222:	9a07      	ldr	r2, [sp, #28]
 8009224:	4b37      	ldr	r3, [pc, #220]	; (8009304 <__ieee754_pow+0x774>)
 8009226:	4413      	add	r3, r2
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f6 fff2 	bl	8000214 <__adddf3>
 8009230:	4682      	mov	sl, r0
 8009232:	9805      	ldr	r0, [sp, #20]
 8009234:	468b      	mov	fp, r1
 8009236:	f7f7 f939 	bl	80004ac <__aeabi_i2d>
 800923a:	9a07      	ldr	r2, [sp, #28]
 800923c:	4b32      	ldr	r3, [pc, #200]	; (8009308 <__ieee754_pow+0x778>)
 800923e:	4413      	add	r3, r2
 8009240:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009244:	4606      	mov	r6, r0
 8009246:	460f      	mov	r7, r1
 8009248:	4652      	mov	r2, sl
 800924a:	465b      	mov	r3, fp
 800924c:	ec51 0b18 	vmov	r0, r1, d8
 8009250:	f7f6 ffe0 	bl	8000214 <__adddf3>
 8009254:	4642      	mov	r2, r8
 8009256:	464b      	mov	r3, r9
 8009258:	f7f6 ffdc 	bl	8000214 <__adddf3>
 800925c:	4632      	mov	r2, r6
 800925e:	463b      	mov	r3, r7
 8009260:	f7f6 ffd8 	bl	8000214 <__adddf3>
 8009264:	2000      	movs	r0, #0
 8009266:	4632      	mov	r2, r6
 8009268:	463b      	mov	r3, r7
 800926a:	4604      	mov	r4, r0
 800926c:	460d      	mov	r5, r1
 800926e:	f7f6 ffcf 	bl	8000210 <__aeabi_dsub>
 8009272:	4642      	mov	r2, r8
 8009274:	464b      	mov	r3, r9
 8009276:	f7f6 ffcb 	bl	8000210 <__aeabi_dsub>
 800927a:	ec53 2b18 	vmov	r2, r3, d8
 800927e:	f7f6 ffc7 	bl	8000210 <__aeabi_dsub>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4650      	mov	r0, sl
 8009288:	4659      	mov	r1, fp
 800928a:	e610      	b.n	8008eae <__ieee754_pow+0x31e>
 800928c:	2401      	movs	r4, #1
 800928e:	e6a1      	b.n	8008fd4 <__ieee754_pow+0x444>
 8009290:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80092e0 <__ieee754_pow+0x750>
 8009294:	e617      	b.n	8008ec6 <__ieee754_pow+0x336>
 8009296:	bf00      	nop
 8009298:	4a454eef 	.word	0x4a454eef
 800929c:	3fca7e28 	.word	0x3fca7e28
 80092a0:	93c9db65 	.word	0x93c9db65
 80092a4:	3fcd864a 	.word	0x3fcd864a
 80092a8:	a91d4101 	.word	0xa91d4101
 80092ac:	3fd17460 	.word	0x3fd17460
 80092b0:	518f264d 	.word	0x518f264d
 80092b4:	3fd55555 	.word	0x3fd55555
 80092b8:	db6fabff 	.word	0xdb6fabff
 80092bc:	3fdb6db6 	.word	0x3fdb6db6
 80092c0:	33333303 	.word	0x33333303
 80092c4:	3fe33333 	.word	0x3fe33333
 80092c8:	e0000000 	.word	0xe0000000
 80092cc:	3feec709 	.word	0x3feec709
 80092d0:	dc3a03fd 	.word	0xdc3a03fd
 80092d4:	3feec709 	.word	0x3feec709
 80092d8:	145b01f5 	.word	0x145b01f5
 80092dc:	be3e2fe0 	.word	0xbe3e2fe0
 80092e0:	00000000 	.word	0x00000000
 80092e4:	3ff00000 	.word	0x3ff00000
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	43400000 	.word	0x43400000
 80092f0:	0003988e 	.word	0x0003988e
 80092f4:	000bb679 	.word	0x000bb679
 80092f8:	0800a478 	.word	0x0800a478
 80092fc:	3ff00000 	.word	0x3ff00000
 8009300:	40080000 	.word	0x40080000
 8009304:	0800a498 	.word	0x0800a498
 8009308:	0800a488 	.word	0x0800a488
 800930c:	a3b5      	add	r3, pc, #724	; (adr r3, 80095e4 <__ieee754_pow+0xa54>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	4640      	mov	r0, r8
 8009314:	4649      	mov	r1, r9
 8009316:	f7f6 ff7d 	bl	8000214 <__adddf3>
 800931a:	4622      	mov	r2, r4
 800931c:	ec41 0b1a 	vmov	d10, r0, r1
 8009320:	462b      	mov	r3, r5
 8009322:	4630      	mov	r0, r6
 8009324:	4639      	mov	r1, r7
 8009326:	f7f6 ff73 	bl	8000210 <__aeabi_dsub>
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	ec51 0b1a 	vmov	r0, r1, d10
 8009332:	f7f7 fbb5 	bl	8000aa0 <__aeabi_dcmpgt>
 8009336:	2800      	cmp	r0, #0
 8009338:	f47f ae04 	bne.w	8008f44 <__ieee754_pow+0x3b4>
 800933c:	4aa4      	ldr	r2, [pc, #656]	; (80095d0 <__ieee754_pow+0xa40>)
 800933e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009342:	4293      	cmp	r3, r2
 8009344:	f340 8108 	ble.w	8009558 <__ieee754_pow+0x9c8>
 8009348:	151b      	asrs	r3, r3, #20
 800934a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800934e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009352:	fa4a f303 	asr.w	r3, sl, r3
 8009356:	445b      	add	r3, fp
 8009358:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800935c:	4e9d      	ldr	r6, [pc, #628]	; (80095d4 <__ieee754_pow+0xa44>)
 800935e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009362:	4116      	asrs	r6, r2
 8009364:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009368:	2000      	movs	r0, #0
 800936a:	ea23 0106 	bic.w	r1, r3, r6
 800936e:	f1c2 0214 	rsb	r2, r2, #20
 8009372:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009376:	fa4a fa02 	asr.w	sl, sl, r2
 800937a:	f1bb 0f00 	cmp.w	fp, #0
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4620      	mov	r0, r4
 8009384:	4629      	mov	r1, r5
 8009386:	bfb8      	it	lt
 8009388:	f1ca 0a00 	rsblt	sl, sl, #0
 800938c:	f7f6 ff40 	bl	8000210 <__aeabi_dsub>
 8009390:	ec41 0b19 	vmov	d9, r0, r1
 8009394:	4642      	mov	r2, r8
 8009396:	464b      	mov	r3, r9
 8009398:	ec51 0b19 	vmov	r0, r1, d9
 800939c:	f7f6 ff3a 	bl	8000214 <__adddf3>
 80093a0:	a37b      	add	r3, pc, #492	; (adr r3, 8009590 <__ieee754_pow+0xa00>)
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	2000      	movs	r0, #0
 80093a8:	4604      	mov	r4, r0
 80093aa:	460d      	mov	r5, r1
 80093ac:	f7f7 f8e8 	bl	8000580 <__aeabi_dmul>
 80093b0:	ec53 2b19 	vmov	r2, r3, d9
 80093b4:	4606      	mov	r6, r0
 80093b6:	460f      	mov	r7, r1
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f6 ff28 	bl	8000210 <__aeabi_dsub>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4640      	mov	r0, r8
 80093c6:	4649      	mov	r1, r9
 80093c8:	f7f6 ff22 	bl	8000210 <__aeabi_dsub>
 80093cc:	a372      	add	r3, pc, #456	; (adr r3, 8009598 <__ieee754_pow+0xa08>)
 80093ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d2:	f7f7 f8d5 	bl	8000580 <__aeabi_dmul>
 80093d6:	a372      	add	r3, pc, #456	; (adr r3, 80095a0 <__ieee754_pow+0xa10>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	4680      	mov	r8, r0
 80093de:	4689      	mov	r9, r1
 80093e0:	4620      	mov	r0, r4
 80093e2:	4629      	mov	r1, r5
 80093e4:	f7f7 f8cc 	bl	8000580 <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4640      	mov	r0, r8
 80093ee:	4649      	mov	r1, r9
 80093f0:	f7f6 ff10 	bl	8000214 <__adddf3>
 80093f4:	4604      	mov	r4, r0
 80093f6:	460d      	mov	r5, r1
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4630      	mov	r0, r6
 80093fe:	4639      	mov	r1, r7
 8009400:	f7f6 ff08 	bl	8000214 <__adddf3>
 8009404:	4632      	mov	r2, r6
 8009406:	463b      	mov	r3, r7
 8009408:	4680      	mov	r8, r0
 800940a:	4689      	mov	r9, r1
 800940c:	f7f6 ff00 	bl	8000210 <__aeabi_dsub>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4620      	mov	r0, r4
 8009416:	4629      	mov	r1, r5
 8009418:	f7f6 fefa 	bl	8000210 <__aeabi_dsub>
 800941c:	4642      	mov	r2, r8
 800941e:	4606      	mov	r6, r0
 8009420:	460f      	mov	r7, r1
 8009422:	464b      	mov	r3, r9
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f7 f8aa 	bl	8000580 <__aeabi_dmul>
 800942c:	a35e      	add	r3, pc, #376	; (adr r3, 80095a8 <__ieee754_pow+0xa18>)
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	4604      	mov	r4, r0
 8009434:	460d      	mov	r5, r1
 8009436:	f7f7 f8a3 	bl	8000580 <__aeabi_dmul>
 800943a:	a35d      	add	r3, pc, #372	; (adr r3, 80095b0 <__ieee754_pow+0xa20>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f6 fee6 	bl	8000210 <__aeabi_dsub>
 8009444:	4622      	mov	r2, r4
 8009446:	462b      	mov	r3, r5
 8009448:	f7f7 f89a 	bl	8000580 <__aeabi_dmul>
 800944c:	a35a      	add	r3, pc, #360	; (adr r3, 80095b8 <__ieee754_pow+0xa28>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f6 fedf 	bl	8000214 <__adddf3>
 8009456:	4622      	mov	r2, r4
 8009458:	462b      	mov	r3, r5
 800945a:	f7f7 f891 	bl	8000580 <__aeabi_dmul>
 800945e:	a358      	add	r3, pc, #352	; (adr r3, 80095c0 <__ieee754_pow+0xa30>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f6 fed4 	bl	8000210 <__aeabi_dsub>
 8009468:	4622      	mov	r2, r4
 800946a:	462b      	mov	r3, r5
 800946c:	f7f7 f888 	bl	8000580 <__aeabi_dmul>
 8009470:	a355      	add	r3, pc, #340	; (adr r3, 80095c8 <__ieee754_pow+0xa38>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f6 fecd 	bl	8000214 <__adddf3>
 800947a:	4622      	mov	r2, r4
 800947c:	462b      	mov	r3, r5
 800947e:	f7f7 f87f 	bl	8000580 <__aeabi_dmul>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	f7f6 fec1 	bl	8000210 <__aeabi_dsub>
 800948e:	4604      	mov	r4, r0
 8009490:	460d      	mov	r5, r1
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4640      	mov	r0, r8
 8009498:	4649      	mov	r1, r9
 800949a:	f7f7 f871 	bl	8000580 <__aeabi_dmul>
 800949e:	2200      	movs	r2, #0
 80094a0:	ec41 0b19 	vmov	d9, r0, r1
 80094a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094a8:	4620      	mov	r0, r4
 80094aa:	4629      	mov	r1, r5
 80094ac:	f7f6 feb0 	bl	8000210 <__aeabi_dsub>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	ec51 0b19 	vmov	r0, r1, d9
 80094b8:	f7f7 f98c 	bl	80007d4 <__aeabi_ddiv>
 80094bc:	4632      	mov	r2, r6
 80094be:	4604      	mov	r4, r0
 80094c0:	460d      	mov	r5, r1
 80094c2:	463b      	mov	r3, r7
 80094c4:	4640      	mov	r0, r8
 80094c6:	4649      	mov	r1, r9
 80094c8:	f7f7 f85a 	bl	8000580 <__aeabi_dmul>
 80094cc:	4632      	mov	r2, r6
 80094ce:	463b      	mov	r3, r7
 80094d0:	f7f6 fea0 	bl	8000214 <__adddf3>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4620      	mov	r0, r4
 80094da:	4629      	mov	r1, r5
 80094dc:	f7f6 fe98 	bl	8000210 <__aeabi_dsub>
 80094e0:	4642      	mov	r2, r8
 80094e2:	464b      	mov	r3, r9
 80094e4:	f7f6 fe94 	bl	8000210 <__aeabi_dsub>
 80094e8:	460b      	mov	r3, r1
 80094ea:	4602      	mov	r2, r0
 80094ec:	493a      	ldr	r1, [pc, #232]	; (80095d8 <__ieee754_pow+0xa48>)
 80094ee:	2000      	movs	r0, #0
 80094f0:	f7f6 fe8e 	bl	8000210 <__aeabi_dsub>
 80094f4:	ec41 0b10 	vmov	d0, r0, r1
 80094f8:	ee10 3a90 	vmov	r3, s1
 80094fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009504:	da2b      	bge.n	800955e <__ieee754_pow+0x9ce>
 8009506:	4650      	mov	r0, sl
 8009508:	f000 fa5a 	bl	80099c0 <scalbn>
 800950c:	ec51 0b10 	vmov	r0, r1, d0
 8009510:	ec53 2b18 	vmov	r2, r3, d8
 8009514:	f7ff bbed 	b.w	8008cf2 <__ieee754_pow+0x162>
 8009518:	4b30      	ldr	r3, [pc, #192]	; (80095dc <__ieee754_pow+0xa4c>)
 800951a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800951e:	429e      	cmp	r6, r3
 8009520:	f77f af0c 	ble.w	800933c <__ieee754_pow+0x7ac>
 8009524:	4b2e      	ldr	r3, [pc, #184]	; (80095e0 <__ieee754_pow+0xa50>)
 8009526:	440b      	add	r3, r1
 8009528:	4303      	orrs	r3, r0
 800952a:	d009      	beq.n	8009540 <__ieee754_pow+0x9b0>
 800952c:	ec51 0b18 	vmov	r0, r1, d8
 8009530:	2200      	movs	r2, #0
 8009532:	2300      	movs	r3, #0
 8009534:	f7f7 fa96 	bl	8000a64 <__aeabi_dcmplt>
 8009538:	3800      	subs	r0, #0
 800953a:	bf18      	it	ne
 800953c:	2001      	movne	r0, #1
 800953e:	e447      	b.n	8008dd0 <__ieee754_pow+0x240>
 8009540:	4622      	mov	r2, r4
 8009542:	462b      	mov	r3, r5
 8009544:	f7f6 fe64 	bl	8000210 <__aeabi_dsub>
 8009548:	4642      	mov	r2, r8
 800954a:	464b      	mov	r3, r9
 800954c:	f7f7 fa9e 	bl	8000a8c <__aeabi_dcmpge>
 8009550:	2800      	cmp	r0, #0
 8009552:	f43f aef3 	beq.w	800933c <__ieee754_pow+0x7ac>
 8009556:	e7e9      	b.n	800952c <__ieee754_pow+0x99c>
 8009558:	f04f 0a00 	mov.w	sl, #0
 800955c:	e71a      	b.n	8009394 <__ieee754_pow+0x804>
 800955e:	ec51 0b10 	vmov	r0, r1, d0
 8009562:	4619      	mov	r1, r3
 8009564:	e7d4      	b.n	8009510 <__ieee754_pow+0x980>
 8009566:	491c      	ldr	r1, [pc, #112]	; (80095d8 <__ieee754_pow+0xa48>)
 8009568:	2000      	movs	r0, #0
 800956a:	f7ff bb30 	b.w	8008bce <__ieee754_pow+0x3e>
 800956e:	2000      	movs	r0, #0
 8009570:	2100      	movs	r1, #0
 8009572:	f7ff bb2c 	b.w	8008bce <__ieee754_pow+0x3e>
 8009576:	4630      	mov	r0, r6
 8009578:	4639      	mov	r1, r7
 800957a:	f7ff bb28 	b.w	8008bce <__ieee754_pow+0x3e>
 800957e:	9204      	str	r2, [sp, #16]
 8009580:	f7ff bb7a 	b.w	8008c78 <__ieee754_pow+0xe8>
 8009584:	2300      	movs	r3, #0
 8009586:	f7ff bb64 	b.w	8008c52 <__ieee754_pow+0xc2>
 800958a:	bf00      	nop
 800958c:	f3af 8000 	nop.w
 8009590:	00000000 	.word	0x00000000
 8009594:	3fe62e43 	.word	0x3fe62e43
 8009598:	fefa39ef 	.word	0xfefa39ef
 800959c:	3fe62e42 	.word	0x3fe62e42
 80095a0:	0ca86c39 	.word	0x0ca86c39
 80095a4:	be205c61 	.word	0xbe205c61
 80095a8:	72bea4d0 	.word	0x72bea4d0
 80095ac:	3e663769 	.word	0x3e663769
 80095b0:	c5d26bf1 	.word	0xc5d26bf1
 80095b4:	3ebbbd41 	.word	0x3ebbbd41
 80095b8:	af25de2c 	.word	0xaf25de2c
 80095bc:	3f11566a 	.word	0x3f11566a
 80095c0:	16bebd93 	.word	0x16bebd93
 80095c4:	3f66c16c 	.word	0x3f66c16c
 80095c8:	5555553e 	.word	0x5555553e
 80095cc:	3fc55555 	.word	0x3fc55555
 80095d0:	3fe00000 	.word	0x3fe00000
 80095d4:	000fffff 	.word	0x000fffff
 80095d8:	3ff00000 	.word	0x3ff00000
 80095dc:	4090cbff 	.word	0x4090cbff
 80095e0:	3f6f3400 	.word	0x3f6f3400
 80095e4:	652b82fe 	.word	0x652b82fe
 80095e8:	3c971547 	.word	0x3c971547

080095ec <__ieee754_sqrt>:
 80095ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f0:	ec55 4b10 	vmov	r4, r5, d0
 80095f4:	4e55      	ldr	r6, [pc, #340]	; (800974c <__ieee754_sqrt+0x160>)
 80095f6:	43ae      	bics	r6, r5
 80095f8:	ee10 0a10 	vmov	r0, s0
 80095fc:	ee10 3a10 	vmov	r3, s0
 8009600:	462a      	mov	r2, r5
 8009602:	4629      	mov	r1, r5
 8009604:	d110      	bne.n	8009628 <__ieee754_sqrt+0x3c>
 8009606:	ee10 2a10 	vmov	r2, s0
 800960a:	462b      	mov	r3, r5
 800960c:	f7f6 ffb8 	bl	8000580 <__aeabi_dmul>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4620      	mov	r0, r4
 8009616:	4629      	mov	r1, r5
 8009618:	f7f6 fdfc 	bl	8000214 <__adddf3>
 800961c:	4604      	mov	r4, r0
 800961e:	460d      	mov	r5, r1
 8009620:	ec45 4b10 	vmov	d0, r4, r5
 8009624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009628:	2d00      	cmp	r5, #0
 800962a:	dc10      	bgt.n	800964e <__ieee754_sqrt+0x62>
 800962c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009630:	4330      	orrs	r0, r6
 8009632:	d0f5      	beq.n	8009620 <__ieee754_sqrt+0x34>
 8009634:	b15d      	cbz	r5, 800964e <__ieee754_sqrt+0x62>
 8009636:	ee10 2a10 	vmov	r2, s0
 800963a:	462b      	mov	r3, r5
 800963c:	ee10 0a10 	vmov	r0, s0
 8009640:	f7f6 fde6 	bl	8000210 <__aeabi_dsub>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	f7f7 f8c4 	bl	80007d4 <__aeabi_ddiv>
 800964c:	e7e6      	b.n	800961c <__ieee754_sqrt+0x30>
 800964e:	1512      	asrs	r2, r2, #20
 8009650:	d074      	beq.n	800973c <__ieee754_sqrt+0x150>
 8009652:	07d4      	lsls	r4, r2, #31
 8009654:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009658:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800965c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009660:	bf5e      	ittt	pl
 8009662:	0fda      	lsrpl	r2, r3, #31
 8009664:	005b      	lslpl	r3, r3, #1
 8009666:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800966a:	2400      	movs	r4, #0
 800966c:	0fda      	lsrs	r2, r3, #31
 800966e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009672:	107f      	asrs	r7, r7, #1
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	2516      	movs	r5, #22
 8009678:	4620      	mov	r0, r4
 800967a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800967e:	1886      	adds	r6, r0, r2
 8009680:	428e      	cmp	r6, r1
 8009682:	bfde      	ittt	le
 8009684:	1b89      	suble	r1, r1, r6
 8009686:	18b0      	addle	r0, r6, r2
 8009688:	18a4      	addle	r4, r4, r2
 800968a:	0049      	lsls	r1, r1, #1
 800968c:	3d01      	subs	r5, #1
 800968e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009692:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009696:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800969a:	d1f0      	bne.n	800967e <__ieee754_sqrt+0x92>
 800969c:	462a      	mov	r2, r5
 800969e:	f04f 0e20 	mov.w	lr, #32
 80096a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80096a6:	4281      	cmp	r1, r0
 80096a8:	eb06 0c05 	add.w	ip, r6, r5
 80096ac:	dc02      	bgt.n	80096b4 <__ieee754_sqrt+0xc8>
 80096ae:	d113      	bne.n	80096d8 <__ieee754_sqrt+0xec>
 80096b0:	459c      	cmp	ip, r3
 80096b2:	d811      	bhi.n	80096d8 <__ieee754_sqrt+0xec>
 80096b4:	f1bc 0f00 	cmp.w	ip, #0
 80096b8:	eb0c 0506 	add.w	r5, ip, r6
 80096bc:	da43      	bge.n	8009746 <__ieee754_sqrt+0x15a>
 80096be:	2d00      	cmp	r5, #0
 80096c0:	db41      	blt.n	8009746 <__ieee754_sqrt+0x15a>
 80096c2:	f100 0801 	add.w	r8, r0, #1
 80096c6:	1a09      	subs	r1, r1, r0
 80096c8:	459c      	cmp	ip, r3
 80096ca:	bf88      	it	hi
 80096cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80096d0:	eba3 030c 	sub.w	r3, r3, ip
 80096d4:	4432      	add	r2, r6
 80096d6:	4640      	mov	r0, r8
 80096d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80096dc:	f1be 0e01 	subs.w	lr, lr, #1
 80096e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80096e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096ec:	d1db      	bne.n	80096a6 <__ieee754_sqrt+0xba>
 80096ee:	430b      	orrs	r3, r1
 80096f0:	d006      	beq.n	8009700 <__ieee754_sqrt+0x114>
 80096f2:	1c50      	adds	r0, r2, #1
 80096f4:	bf13      	iteet	ne
 80096f6:	3201      	addne	r2, #1
 80096f8:	3401      	addeq	r4, #1
 80096fa:	4672      	moveq	r2, lr
 80096fc:	f022 0201 	bicne.w	r2, r2, #1
 8009700:	1063      	asrs	r3, r4, #1
 8009702:	0852      	lsrs	r2, r2, #1
 8009704:	07e1      	lsls	r1, r4, #31
 8009706:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800970a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800970e:	bf48      	it	mi
 8009710:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009714:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009718:	4614      	mov	r4, r2
 800971a:	e781      	b.n	8009620 <__ieee754_sqrt+0x34>
 800971c:	0ad9      	lsrs	r1, r3, #11
 800971e:	3815      	subs	r0, #21
 8009720:	055b      	lsls	r3, r3, #21
 8009722:	2900      	cmp	r1, #0
 8009724:	d0fa      	beq.n	800971c <__ieee754_sqrt+0x130>
 8009726:	02cd      	lsls	r5, r1, #11
 8009728:	d50a      	bpl.n	8009740 <__ieee754_sqrt+0x154>
 800972a:	f1c2 0420 	rsb	r4, r2, #32
 800972e:	fa23 f404 	lsr.w	r4, r3, r4
 8009732:	1e55      	subs	r5, r2, #1
 8009734:	4093      	lsls	r3, r2
 8009736:	4321      	orrs	r1, r4
 8009738:	1b42      	subs	r2, r0, r5
 800973a:	e78a      	b.n	8009652 <__ieee754_sqrt+0x66>
 800973c:	4610      	mov	r0, r2
 800973e:	e7f0      	b.n	8009722 <__ieee754_sqrt+0x136>
 8009740:	0049      	lsls	r1, r1, #1
 8009742:	3201      	adds	r2, #1
 8009744:	e7ef      	b.n	8009726 <__ieee754_sqrt+0x13a>
 8009746:	4680      	mov	r8, r0
 8009748:	e7bd      	b.n	80096c6 <__ieee754_sqrt+0xda>
 800974a:	bf00      	nop
 800974c:	7ff00000 	.word	0x7ff00000

08009750 <__ieee754_expf>:
 8009750:	ee10 2a10 	vmov	r2, s0
 8009754:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009758:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800975c:	d902      	bls.n	8009764 <__ieee754_expf+0x14>
 800975e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009762:	4770      	bx	lr
 8009764:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009768:	d106      	bne.n	8009778 <__ieee754_expf+0x28>
 800976a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80098a4 <__ieee754_expf+0x154>
 800976e:	2b00      	cmp	r3, #0
 8009770:	bf18      	it	ne
 8009772:	eeb0 0a67 	vmovne.f32	s0, s15
 8009776:	4770      	bx	lr
 8009778:	484b      	ldr	r0, [pc, #300]	; (80098a8 <__ieee754_expf+0x158>)
 800977a:	4282      	cmp	r2, r0
 800977c:	dd02      	ble.n	8009784 <__ieee754_expf+0x34>
 800977e:	2000      	movs	r0, #0
 8009780:	f000 b904 	b.w	800998c <__math_oflowf>
 8009784:	2a00      	cmp	r2, #0
 8009786:	da05      	bge.n	8009794 <__ieee754_expf+0x44>
 8009788:	4a48      	ldr	r2, [pc, #288]	; (80098ac <__ieee754_expf+0x15c>)
 800978a:	4291      	cmp	r1, r2
 800978c:	d902      	bls.n	8009794 <__ieee754_expf+0x44>
 800978e:	2000      	movs	r0, #0
 8009790:	f000 b8f6 	b.w	8009980 <__math_uflowf>
 8009794:	4a46      	ldr	r2, [pc, #280]	; (80098b0 <__ieee754_expf+0x160>)
 8009796:	4291      	cmp	r1, r2
 8009798:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800979c:	d952      	bls.n	8009844 <__ieee754_expf+0xf4>
 800979e:	4a45      	ldr	r2, [pc, #276]	; (80098b4 <__ieee754_expf+0x164>)
 80097a0:	4291      	cmp	r1, r2
 80097a2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80097a6:	d834      	bhi.n	8009812 <__ieee754_expf+0xc2>
 80097a8:	4943      	ldr	r1, [pc, #268]	; (80098b8 <__ieee754_expf+0x168>)
 80097aa:	4411      	add	r1, r2
 80097ac:	ed91 7a00 	vldr	s14, [r1]
 80097b0:	4942      	ldr	r1, [pc, #264]	; (80098bc <__ieee754_expf+0x16c>)
 80097b2:	440a      	add	r2, r1
 80097b4:	edd2 7a00 	vldr	s15, [r2]
 80097b8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80097bc:	f1c3 0201 	rsb	r2, r3, #1
 80097c0:	1ad2      	subs	r2, r2, r3
 80097c2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80097c6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80097ca:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80098c0 <__ieee754_expf+0x170>
 80097ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098c4 <__ieee754_expf+0x174>
 80097d2:	eee6 6a05 	vfma.f32	s13, s12, s10
 80097d6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80098c8 <__ieee754_expf+0x178>
 80097da:	eea6 5a86 	vfma.f32	s10, s13, s12
 80097de:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80098cc <__ieee754_expf+0x17c>
 80097e2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80097e6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80098d0 <__ieee754_expf+0x180>
 80097ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 80097ee:	eef0 6a40 	vmov.f32	s13, s0
 80097f2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80097f6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80097fa:	ee20 5a26 	vmul.f32	s10, s0, s13
 80097fe:	bb92      	cbnz	r2, 8009866 <__ieee754_expf+0x116>
 8009800:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009804:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009808:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800980c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009810:	4770      	bx	lr
 8009812:	4b30      	ldr	r3, [pc, #192]	; (80098d4 <__ieee754_expf+0x184>)
 8009814:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80098d8 <__ieee754_expf+0x188>
 8009818:	eddf 6a30 	vldr	s13, [pc, #192]	; 80098dc <__ieee754_expf+0x18c>
 800981c:	4413      	add	r3, r2
 800981e:	edd3 7a00 	vldr	s15, [r3]
 8009822:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009826:	eeb0 7a40 	vmov.f32	s14, s0
 800982a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800982e:	ee17 2a90 	vmov	r2, s15
 8009832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009836:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800983a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80098e0 <__ieee754_expf+0x190>
 800983e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009842:	e7be      	b.n	80097c2 <__ieee754_expf+0x72>
 8009844:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8009848:	d20b      	bcs.n	8009862 <__ieee754_expf+0x112>
 800984a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80098e4 <__ieee754_expf+0x194>
 800984e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009852:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985a:	dd02      	ble.n	8009862 <__ieee754_expf+0x112>
 800985c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009860:	4770      	bx	lr
 8009862:	2200      	movs	r2, #0
 8009864:	e7af      	b.n	80097c6 <__ieee754_expf+0x76>
 8009866:	ee76 6a66 	vsub.f32	s13, s12, s13
 800986a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800986e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8009872:	bfb8      	it	lt
 8009874:	3264      	addlt	r2, #100	; 0x64
 8009876:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800987a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800987e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8009882:	ee17 3a90 	vmov	r3, s15
 8009886:	bfab      	itete	ge
 8009888:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800988c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009890:	ee00 3a10 	vmovge	s0, r3
 8009894:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80098e8 <__ieee754_expf+0x198>
 8009898:	bfbc      	itt	lt
 800989a:	ee00 3a10 	vmovlt	s0, r3
 800989e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80098a2:	4770      	bx	lr
 80098a4:	00000000 	.word	0x00000000
 80098a8:	42b17217 	.word	0x42b17217
 80098ac:	42cff1b5 	.word	0x42cff1b5
 80098b0:	3eb17218 	.word	0x3eb17218
 80098b4:	3f851591 	.word	0x3f851591
 80098b8:	0800a4b0 	.word	0x0800a4b0
 80098bc:	0800a4b8 	.word	0x0800a4b8
 80098c0:	3331bb4c 	.word	0x3331bb4c
 80098c4:	b5ddea0e 	.word	0xb5ddea0e
 80098c8:	388ab355 	.word	0x388ab355
 80098cc:	bb360b61 	.word	0xbb360b61
 80098d0:	3e2aaaab 	.word	0x3e2aaaab
 80098d4:	0800a4a8 	.word	0x0800a4a8
 80098d8:	3fb8aa3b 	.word	0x3fb8aa3b
 80098dc:	3f317180 	.word	0x3f317180
 80098e0:	3717f7d1 	.word	0x3717f7d1
 80098e4:	7149f2ca 	.word	0x7149f2ca
 80098e8:	0d800000 	.word	0x0d800000

080098ec <__ieee754_sqrtf>:
 80098ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80098f0:	4770      	bx	lr

080098f2 <with_errno>:
 80098f2:	b570      	push	{r4, r5, r6, lr}
 80098f4:	4604      	mov	r4, r0
 80098f6:	460d      	mov	r5, r1
 80098f8:	4616      	mov	r6, r2
 80098fa:	f7ff f845 	bl	8008988 <__errno>
 80098fe:	4629      	mov	r1, r5
 8009900:	6006      	str	r6, [r0, #0]
 8009902:	4620      	mov	r0, r4
 8009904:	bd70      	pop	{r4, r5, r6, pc}

08009906 <xflow>:
 8009906:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009908:	4614      	mov	r4, r2
 800990a:	461d      	mov	r5, r3
 800990c:	b108      	cbz	r0, 8009912 <xflow+0xc>
 800990e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009912:	e9cd 2300 	strd	r2, r3, [sp]
 8009916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800991a:	4620      	mov	r0, r4
 800991c:	4629      	mov	r1, r5
 800991e:	f7f6 fe2f 	bl	8000580 <__aeabi_dmul>
 8009922:	2222      	movs	r2, #34	; 0x22
 8009924:	b003      	add	sp, #12
 8009926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800992a:	f7ff bfe2 	b.w	80098f2 <with_errno>

0800992e <__math_uflow>:
 800992e:	b508      	push	{r3, lr}
 8009930:	2200      	movs	r2, #0
 8009932:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009936:	f7ff ffe6 	bl	8009906 <xflow>
 800993a:	ec41 0b10 	vmov	d0, r0, r1
 800993e:	bd08      	pop	{r3, pc}

08009940 <__math_oflow>:
 8009940:	b508      	push	{r3, lr}
 8009942:	2200      	movs	r2, #0
 8009944:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009948:	f7ff ffdd 	bl	8009906 <xflow>
 800994c:	ec41 0b10 	vmov	d0, r0, r1
 8009950:	bd08      	pop	{r3, pc}

08009952 <with_errnof>:
 8009952:	b513      	push	{r0, r1, r4, lr}
 8009954:	4604      	mov	r4, r0
 8009956:	ed8d 0a01 	vstr	s0, [sp, #4]
 800995a:	f7ff f815 	bl	8008988 <__errno>
 800995e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009962:	6004      	str	r4, [r0, #0]
 8009964:	b002      	add	sp, #8
 8009966:	bd10      	pop	{r4, pc}

08009968 <xflowf>:
 8009968:	b130      	cbz	r0, 8009978 <xflowf+0x10>
 800996a:	eef1 7a40 	vneg.f32	s15, s0
 800996e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009972:	2022      	movs	r0, #34	; 0x22
 8009974:	f7ff bfed 	b.w	8009952 <with_errnof>
 8009978:	eef0 7a40 	vmov.f32	s15, s0
 800997c:	e7f7      	b.n	800996e <xflowf+0x6>
	...

08009980 <__math_uflowf>:
 8009980:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009988 <__math_uflowf+0x8>
 8009984:	f7ff bff0 	b.w	8009968 <xflowf>
 8009988:	10000000 	.word	0x10000000

0800998c <__math_oflowf>:
 800998c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009994 <__math_oflowf+0x8>
 8009990:	f7ff bfea 	b.w	8009968 <xflowf>
 8009994:	70000000 	.word	0x70000000

08009998 <fabs>:
 8009998:	ec51 0b10 	vmov	r0, r1, d0
 800999c:	ee10 2a10 	vmov	r2, s0
 80099a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80099a4:	ec43 2b10 	vmov	d0, r2, r3
 80099a8:	4770      	bx	lr

080099aa <finite>:
 80099aa:	b082      	sub	sp, #8
 80099ac:	ed8d 0b00 	vstr	d0, [sp]
 80099b0:	9801      	ldr	r0, [sp, #4]
 80099b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80099b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80099ba:	0fc0      	lsrs	r0, r0, #31
 80099bc:	b002      	add	sp, #8
 80099be:	4770      	bx	lr

080099c0 <scalbn>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	ec55 4b10 	vmov	r4, r5, d0
 80099c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80099ca:	4606      	mov	r6, r0
 80099cc:	462b      	mov	r3, r5
 80099ce:	b99a      	cbnz	r2, 80099f8 <scalbn+0x38>
 80099d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80099d4:	4323      	orrs	r3, r4
 80099d6:	d036      	beq.n	8009a46 <scalbn+0x86>
 80099d8:	4b39      	ldr	r3, [pc, #228]	; (8009ac0 <scalbn+0x100>)
 80099da:	4629      	mov	r1, r5
 80099dc:	ee10 0a10 	vmov	r0, s0
 80099e0:	2200      	movs	r2, #0
 80099e2:	f7f6 fdcd 	bl	8000580 <__aeabi_dmul>
 80099e6:	4b37      	ldr	r3, [pc, #220]	; (8009ac4 <scalbn+0x104>)
 80099e8:	429e      	cmp	r6, r3
 80099ea:	4604      	mov	r4, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	da10      	bge.n	8009a12 <scalbn+0x52>
 80099f0:	a32b      	add	r3, pc, #172	; (adr r3, 8009aa0 <scalbn+0xe0>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	e03a      	b.n	8009a6e <scalbn+0xae>
 80099f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80099fc:	428a      	cmp	r2, r1
 80099fe:	d10c      	bne.n	8009a1a <scalbn+0x5a>
 8009a00:	ee10 2a10 	vmov	r2, s0
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fc04 	bl	8000214 <__adddf3>
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	460d      	mov	r5, r1
 8009a10:	e019      	b.n	8009a46 <scalbn+0x86>
 8009a12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a16:	460b      	mov	r3, r1
 8009a18:	3a36      	subs	r2, #54	; 0x36
 8009a1a:	4432      	add	r2, r6
 8009a1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009a20:	428a      	cmp	r2, r1
 8009a22:	dd08      	ble.n	8009a36 <scalbn+0x76>
 8009a24:	2d00      	cmp	r5, #0
 8009a26:	a120      	add	r1, pc, #128	; (adr r1, 8009aa8 <scalbn+0xe8>)
 8009a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2c:	da1c      	bge.n	8009a68 <scalbn+0xa8>
 8009a2e:	a120      	add	r1, pc, #128	; (adr r1, 8009ab0 <scalbn+0xf0>)
 8009a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a34:	e018      	b.n	8009a68 <scalbn+0xa8>
 8009a36:	2a00      	cmp	r2, #0
 8009a38:	dd08      	ble.n	8009a4c <scalbn+0x8c>
 8009a3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a46:	ec45 4b10 	vmov	d0, r4, r5
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}
 8009a4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009a50:	da19      	bge.n	8009a86 <scalbn+0xc6>
 8009a52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009a56:	429e      	cmp	r6, r3
 8009a58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009a5c:	dd0a      	ble.n	8009a74 <scalbn+0xb4>
 8009a5e:	a112      	add	r1, pc, #72	; (adr r1, 8009aa8 <scalbn+0xe8>)
 8009a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e2      	bne.n	8009a2e <scalbn+0x6e>
 8009a68:	a30f      	add	r3, pc, #60	; (adr r3, 8009aa8 <scalbn+0xe8>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7f6 fd87 	bl	8000580 <__aeabi_dmul>
 8009a72:	e7cb      	b.n	8009a0c <scalbn+0x4c>
 8009a74:	a10a      	add	r1, pc, #40	; (adr r1, 8009aa0 <scalbn+0xe0>)
 8009a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0b8      	beq.n	80099f0 <scalbn+0x30>
 8009a7e:	a10e      	add	r1, pc, #56	; (adr r1, 8009ab8 <scalbn+0xf8>)
 8009a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a84:	e7b4      	b.n	80099f0 <scalbn+0x30>
 8009a86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a8a:	3236      	adds	r2, #54	; 0x36
 8009a8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009a94:	4620      	mov	r0, r4
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <scalbn+0x108>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	e7e8      	b.n	8009a6e <scalbn+0xae>
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	c2f8f359 	.word	0xc2f8f359
 8009aa4:	01a56e1f 	.word	0x01a56e1f
 8009aa8:	8800759c 	.word	0x8800759c
 8009aac:	7e37e43c 	.word	0x7e37e43c
 8009ab0:	8800759c 	.word	0x8800759c
 8009ab4:	fe37e43c 	.word	0xfe37e43c
 8009ab8:	c2f8f359 	.word	0xc2f8f359
 8009abc:	81a56e1f 	.word	0x81a56e1f
 8009ac0:	43500000 	.word	0x43500000
 8009ac4:	ffff3cb0 	.word	0xffff3cb0
 8009ac8:	3c900000 	.word	0x3c900000

08009acc <finitef>:
 8009acc:	b082      	sub	sp, #8
 8009ace:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009ad2:	9801      	ldr	r0, [sp, #4]
 8009ad4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009ad8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009adc:	bfac      	ite	ge
 8009ade:	2000      	movge	r0, #0
 8009ae0:	2001      	movlt	r0, #1
 8009ae2:	b002      	add	sp, #8
 8009ae4:	4770      	bx	lr
	...

08009ae8 <_init>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	bf00      	nop
 8009aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aee:	bc08      	pop	{r3}
 8009af0:	469e      	mov	lr, r3
 8009af2:	4770      	bx	lr

08009af4 <_fini>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	bf00      	nop
 8009af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afa:	bc08      	pop	{r3}
 8009afc:	469e      	mov	lr, r3
 8009afe:	4770      	bx	lr
