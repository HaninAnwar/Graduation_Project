
integrated_model_4_move.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001398  080097c0  080097c0  000197c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab58  0800ab58  0002079c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab58  0800ab58  0001ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab60  0800ab60  0002079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab60  0800ab60  0001ab60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab64  0800ab64  0001ab64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000079c  20000000  0800ab68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  200007a0  0800b304  000207a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000c08  0800b304  00020c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154df  00000000  00000000  000207cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338e  00000000  00000000  00035cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00039040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  0003a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000068ce  00000000  00000000  0003afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cfd  00000000  00000000  0004189e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea756  00000000  00000000  0005959b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143cf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  00143d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000014d  00000000  00000000  00148790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200007a0 	.word	0x200007a0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080097a8 	.word	0x080097a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200007a4 	.word	0x200007a4
 8000204:	080097a8 	.word	0x080097a8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <FEAT_EXT_u32_SlopeSignChange>:

#include "FEAT_EXT.h"


uint32_t FEAT_EXT_u32_SlopeSignChange(uint32_t *Copy_int32Data ,uint32_t Copy_int32_Size)
{
 8000e84:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000e88:	b087      	sub	sp, #28
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	466b      	mov	r3, sp
 8000e92:	4618      	mov	r0, r3
	uint32_t Local_int32_NumberOfChanges = 0,
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
			Local_int32_Slope[Copy_int32_Size],
 8000e98:	6839      	ldr	r1, [r7, #0]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4688      	mov	r8, r1
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000eb2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000eb6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000eba:	2300      	movs	r3, #0
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	461d      	mov	r5, r3
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	016b      	lsls	r3, r5, #5
 8000eca:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ece:	0162      	lsls	r2, r4, #5
 8000ed0:	008b      	lsls	r3, r1, #2
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	ebad 0d03 	sub.w	sp, sp, r3
 8000edc:	466b      	mov	r3, sp
 8000ede:	3303      	adds	r3, #3
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	60bb      	str	r3, [r7, #8]
			Local_int32_Counter;

	/*Compute Slope*/
	Local_int32_Slope[0] = 0;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

	for(Local_int32_Counter = 1 ; Local_int32_Counter < Copy_int32_Size ; Local_int32_Counter++)
 8000eec:	2301      	movs	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e045      	b.n	8000f7e <FEAT_EXT_u32_SlopeSignChange+0xfa>
	{

		if(Copy_int32Data[Local_int32_Counter]  > Copy_int32Data[Local_int32_Counter-1])
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f02:	3b01      	subs	r3, #1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	440b      	add	r3, r1
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d905      	bls.n	8000f1c <FEAT_EXT_u32_SlopeSignChange+0x98>
			Local_int32_Slope[Local_int32_Counter] = 1;
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	2101      	movs	r1, #1
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f1a:	e02d      	b.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>

		else if(Copy_int32Data[Local_int32_Counter]  < Copy_int32Data[Local_int32_Counter-1])
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	440b      	add	r3, r1
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d206      	bcs.n	8000f48 <FEAT_EXT_u32_SlopeSignChange+0xc4>

			Local_int32_Slope[Local_int32_Counter] = -1;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f46:	e017      	b.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>

		else if(Copy_int32Data[Local_int32_Counter] == Copy_int32Data[Local_int32_Counter-1])
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	440b      	add	r3, r1
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d108      	bne.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>
			Local_int32_Slope[Local_int32_Counter] = Local_int32_Slope[Local_int32_Counter-1];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 1 ; Local_int32_Counter < Copy_int32_Size ; Local_int32_Counter++)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3b5      	bcc.n	8000ef2 <FEAT_EXT_u32_SlopeSignChange+0x6e>

	}

	/*Compute Changes In Sign*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_int32_Size-1 ; Local_int32_Counter++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e010      	b.n	8000fae <FEAT_EXT_u32_SlopeSignChange+0x12a>
	{
		if((Local_int32_Slope[Local_int32_Counter] != Local_int32_Slope[Local_int32_Counter+1]))
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	1c59      	adds	r1, r3, #1
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d002      	beq.n	8000fa8 <FEAT_EXT_u32_SlopeSignChange+0x124>
		{
			Local_int32_NumberOfChanges++;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_int32_Size-1 ; Local_int32_Counter++)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3e9      	bcc.n	8000f8c <FEAT_EXT_u32_SlopeSignChange+0x108>
		}
	}

	return Local_int32_NumberOfChanges;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4685      	mov	sp, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000fc6:	4770      	bx	lr

08000fc8 <FEAT_EXT_u32_ZeroCrossing>:

uint32_t FEAT_EXT_u32_ZeroCrossing(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 8000fc8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000fcc:	b087      	sub	sp, #28
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
 8000fd4:	466b      	mov	r3, sp
 8000fd6:	4618      	mov	r0, r3
	uint32_t Local_int32_Sign[Copy_u32_Size],
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ff2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ff6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	461d      	mov	r5, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	016b      	lsls	r3, r5, #5
 800100a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800100e:	0162      	lsls	r2, r4, #5
 8001010:	008b      	lsls	r3, r1, #2
 8001012:	3307      	adds	r3, #7
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	ebad 0d03 	sub.w	sp, sp, r3
 800101c:	466b      	mov	r3, sp
 800101e:	3303      	adds	r3, #3
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
	Local_int32_Counter,
	Local_int32_ZeroCounter;

	/*Compute data sign*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	e01c      	b.n	8001066 <FEAT_EXT_u32_ZeroCrossing+0x9e>
	{
		if(Copy_u32Data[Local_int32_Counter] > 0)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FEAT_EXT_u32_ZeroCrossing+0x7e>
		{
			Local_int32_Sign[Local_int32_Counter] = 1;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	2101      	movs	r1, #1
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001044:	e00c      	b.n	8001060 <FEAT_EXT_u32_ZeroCrossing+0x98>
		}
		else if (Copy_u32Data[Local_int32_Counter] <= 0)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <FEAT_EXT_u32_ZeroCrossing+0x98>
		{
			Local_int32_Sign[Local_int32_Counter] = -1;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	3301      	adds	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3de      	bcc.n	800102c <FEAT_EXT_u32_ZeroCrossing+0x64>
		}
	}

	/*Compute zero crossing*/
	Local_int32_ZeroCounter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e010      	b.n	800109a <FEAT_EXT_u32_ZeroCrossing+0xd2>
	{
		if(Local_int32_Sign[Local_int32_Counter] != Local_int32_Sign[Local_int32_Counter+1])
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1c59      	adds	r1, r3, #1
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108a:	429a      	cmp	r2, r3
 800108c:	d002      	beq.n	8001094 <FEAT_EXT_u32_ZeroCrossing+0xcc>
		{
			Local_int32_ZeroCounter++;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3e9      	bcc.n	8001078 <FEAT_EXT_u32_ZeroCrossing+0xb0>
		}
	}


	return Local_int32_ZeroCounter;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4685      	mov	sp, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80010b2:	4770      	bx	lr

080010b4 <FEAT_EXT_u32_WaveformLength>:

uint32_t FEAT_EXT_u32_WaveformLength(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80010b4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80010b8:	b087      	sub	sp, #28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
 80010c0:	466b      	mov	r3, sp
 80010c2:	4618      	mov	r0, r3
	uint32_t Local_int32_AbsDiff[Copy_u32_Size-1],
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	1e59      	subs	r1, r3, #1
 80010c8:	460b      	mov	r3, r1
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	2300      	movs	r3, #0
 80010d0:	4688      	mov	r8, r1
 80010d2:	4699      	mov	r9, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010e0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010e4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010e8:	2300      	movs	r3, #0
 80010ea:	460c      	mov	r4, r1
 80010ec:	461d      	mov	r5, r3
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	016b      	lsls	r3, r5, #5
 80010f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010fc:	0162      	lsls	r2, r4, #5
 80010fe:	008b      	lsls	r3, r1, #2
 8001100:	3307      	adds	r3, #7
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	ebad 0d03 	sub.w	sp, sp, r3
 800110a:	466b      	mov	r3, sp
 800110c:	3303      	adds	r3, #3
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
	Local_int32_Counter,
	Local_int32_WaveLength;

	/*Calculate absolute difference of data*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e030      	b.n	800117c <FEAT_EXT_u32_WaveformLength+0xc8>
	{
		if(Copy_u32Data[Local_int32_Counter] > Copy_u32Data[Local_int32_Counter+1])
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	3301      	adds	r3, #1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	440b      	add	r3, r1
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d910      	bls.n	8001156 <FEAT_EXT_u32_WaveformLength+0xa2>
		{
			Local_int32_AbsDiff[Local_int32_Counter] = Copy_u32Data[Local_int32_Counter] -  Copy_u32Data[Local_int32_Counter+1];
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	440b      	add	r3, r1
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad1      	subs	r1, r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001154:	e00f      	b.n	8001176 <FEAT_EXT_u32_WaveformLength+0xc2>
		}
		else
		{
			Local_int32_AbsDiff[Local_int32_Counter] = Copy_u32Data[Local_int32_Counter+1] -  Copy_u32Data[Local_int32_Counter];
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3301      	adds	r3, #1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	440b      	add	r3, r1
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1ad1      	subs	r1, r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	3301      	adds	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3c9      	bcc.n	800111a <FEAT_EXT_u32_WaveformLength+0x66>
		}
	}

	/*Compute wave length*/
	Local_int32_WaveLength = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	e009      	b.n	80011a4 <FEAT_EXT_u32_WaveformLength+0xf0>
	{
		Local_int32_WaveLength += Local_int32_AbsDiff[Local_int32_Counter];
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4413      	add	r3, r2
 800119c:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3f0      	bcc.n	8001190 <FEAT_EXT_u32_WaveformLength+0xdc>
	}


	return Local_int32_WaveLength;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4685      	mov	sp, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80011bc:	4770      	bx	lr

080011be <FEAT_EXT_f32_RMS>:


//float FEAT_EXT_float_RMS(int32_t *Copy_int32Data ,int32_t Copy_int32_Size)
float FEAT_EXT_f32_RMS(float Copy_f32_Variance)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	ed87 0a01 	vstr	s0, [r7, #4]
	float Local_f32_RMS;
	Local_f32_RMS = sqrtf(Copy_f32_Variance);
 80011c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80011cc:	f007 fb20 	bl	8008810 <sqrtf>
 80011d0:	ed87 0a03 	vstr	s0, [r7, #12]

	return Local_f32_RMS;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	ee07 3a90 	vmov	s15, r3

}
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <FEAT_EXT_f32_Variance>:

float FEAT_EXT_f32_Variance(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]

	uint32_t Local_int32_Counter;

	float 	Local_float_Mean = 0,
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
			Local_float_Var  = 0;
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]

	/*Compute Mean*/
	Local_float_Mean = FEAT_EXT_f32_Mean(Copy_u32Data, Copy_u32_Size);
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f851 	bl	80012a8 <FEAT_EXT_f32_Mean>
 8001206:	ed87 0a03 	vstr	s0, [r7, #12]

	/*Compute Variance*/
	for (Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e02e      	b.n	800126e <FEAT_EXT_f32_Variance+0x86>
	{
		Local_float_Var += pow(Copy_u32Data[Local_int32_Counter] - Local_float_Mean,2);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001222:	edd7 7a03 	vldr	s15, [r7, #12]
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	ee17 0a90 	vmov	r0, s15
 800122e:	f7ff f94f 	bl	80004d0 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80012a0 <FEAT_EXT_f32_Variance+0xb8>
 800123a:	ec43 2b10 	vmov	d0, r2, r3
 800123e:	f007 fa41 	bl	80086c4 <pow>
 8001242:	ec55 4b10 	vmov	r4, r5, d0
 8001246:	6938      	ldr	r0, [r7, #16]
 8001248:	f7ff f942 	bl	80004d0 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7fe ffde 	bl	8000214 <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc3e 	bl	8000ae0 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	613b      	str	r3, [r7, #16]
	for (Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d3cc      	bcc.n	8001210 <FEAT_EXT_f32_Variance+0x28>
	}
	Local_float_Var /= (Copy_u32_Size-1);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001282:	edd7 6a04 	vldr	s13, [r7, #16]
 8001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128a:	edc7 7a04 	vstr	s15, [r7, #16]

	return Local_float_Var;
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	ee07 3a90 	vmov	s15, r3
}
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40000000 	.word	0x40000000

080012a8 <FEAT_EXT_f32_Mean>:

float FEAT_EXT_f32_Mean(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	float Local_float_Mean = 0;
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	uint32_t Local_int32_Counter;

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	e011      	b.n	80012e2 <FEAT_EXT_f32_Mean+0x3a>
	{
		Local_float_Mean += Copy_u32Data[Local_int32_Counter];
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	edc7 7a03 	vstr	s15, [r7, #12]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3e9      	bcc.n	80012be <FEAT_EXT_f32_Mean+0x16>
	}

	Local_float_Mean /= (float)Copy_u32_Size;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	edc7 7a03 	vstr	s15, [r7, #12]

	return Local_float_Mean;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	ee07 3a90 	vmov	s15, r3

}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <FEAT_EXT_f32_AllFeat>:
	return Local_float_Mean;

}

uint8_t FEAT_EXT_f32_AllFeat(uint32_t Copy_u32Data[][250] , float Copy_f32_FeatArr[][6])
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	uint8_t Local_u8ErrorState = 0 ,Local_u8Counter;
 800131e:	2300      	movs	r3, #0
 8001320:	73bb      	strb	r3, [r7, #14]

	for(Local_u8Counter = 0 ; Local_u8Counter < 3 ; Local_u8Counter++)
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e093      	b.n	8001450 <FEAT_EXT_f32_AllFeat+0x13c>
	{
		Copy_f32_FeatArr[Local_u8Counter][VAR_IDX ] = FEAT_EXT_f32_Variance(Copy_u32Data[Local_u8Counter],DATA_SIZE);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	18d0      	adds	r0, r2, r3
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	461a      	mov	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	189c      	adds	r4, r3, r2
 8001346:	21fa      	movs	r1, #250	; 0xfa
 8001348:	f7ff ff4e 	bl	80011e8 <FEAT_EXT_f32_Variance>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
 8001350:	edc4 7a01 	vstr	s15, [r4, #4]
		Copy_f32_FeatArr[Local_u8Counter][RMS_IDX ] = FEAT_EXT_f32_RMS(Copy_f32_FeatArr[Local_u8Counter][VAR_IDX]);
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	461a      	mov	r2, r3
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	edd3 7a01 	vldr	s15, [r3, #4]
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	461a      	mov	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	189c      	adds	r4, r3, r2
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	f7ff ff1f 	bl	80011be <FEAT_EXT_f32_RMS>
 8001380:	eef0 7a40 	vmov.f32	s15, s0
 8001384:	edc4 7a00 	vstr	s15, [r4]
		Copy_f32_FeatArr[Local_u8Counter][MEAN_IDX] = FEAT_EXT_f32_Mean(Copy_u32Data[Local_u8Counter],DATA_SIZE);
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800138e:	fb02 f303 	mul.w	r3, r2, r3
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	18d0      	adds	r0, r2, r3
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	461a      	mov	r2, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	189c      	adds	r4, r3, r2
 80013a6:	21fa      	movs	r1, #250	; 0xfa
 80013a8:	f7ff ff7e 	bl	80012a8 <FEAT_EXT_f32_Mean>
 80013ac:	eef0 7a40 	vmov.f32	s15, s0
 80013b0:	edc4 7a02 	vstr	s15, [r4, #8]
		Copy_f32_FeatArr[Local_u8Counter][SSC_IDX] = FEAT_EXT_u32_SlopeSignChange(Copy_u32Data[Local_u8Counter],DATA_SIZE);
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	21fa      	movs	r1, #250	; 0xfa
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd5d 	bl	8000e84 <FEAT_EXT_u32_SlopeSignChange>
 80013ca:	ee07 0a90 	vmov	s15, r0
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	461a      	mov	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e2:	edc3 7a03 	vstr	s15, [r3, #12]
		Copy_f32_FeatArr[Local_u8Counter][ZC_IDX  ] = FEAT_EXT_u32_ZeroCrossing(Copy_u32Data[Local_u8Counter],DATA_SIZE) ;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	21fa      	movs	r1, #250	; 0xfa
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fde6 	bl	8000fc8 <FEAT_EXT_u32_ZeroCrossing>
 80013fc:	ee07 0a90 	vmov	s15, r0
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	461a      	mov	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001414:	edc3 7a04 	vstr	s15, [r3, #16]
		Copy_f32_FeatArr[Local_u8Counter][WVL_IDX ] = FEAT_EXT_u32_WaveformLength(Copy_u32Data[Local_u8Counter],DATA_SIZE);
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	21fa      	movs	r1, #250	; 0xfa
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe43 	bl	80010b4 <FEAT_EXT_u32_WaveformLength>
 800142e:	ee07 0a90 	vmov	s15, r0
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	461a      	mov	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001446:	edc3 7a05 	vstr	s15, [r3, #20]
	for(Local_u8Counter = 0 ; Local_u8Counter < 3 ; Local_u8Counter++)
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	3301      	adds	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b02      	cmp	r3, #2
 8001454:	f67f af68 	bls.w	8001328 <FEAT_EXT_f32_AllFeat+0x14>

	}
	return Local_u8ErrorState;
 8001458:	7bbb      	ldrb	r3, [r7, #14]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	0000      	movs	r0, r0
 8001464:	0000      	movs	r0, r0
	...

08001468 <NORM_f32_SlopeSignChange>:
#include "NORM_interface.h"
#include "NORM_private.h"


float NORM_f32_SlopeSignChange(uint8_t Copy_u8SensorNum , uint32_t Copy_u32SSC)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormSSC;

	switch(Copy_u8SensorNum)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d03a      	beq.n	80014f0 <NORM_f32_SlopeSignChange+0x88>
 800147a:	2b02      	cmp	r3, #2
 800147c:	dc52      	bgt.n	8001524 <NORM_f32_SlopeSignChange+0xbc>
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <NORM_f32_SlopeSignChange+0x20>
 8001482:	2b01      	cmp	r3, #1
 8001484:	d01a      	beq.n	80014bc <NORM_f32_SlopeSignChange+0x54>
 8001486:	e04d      	b.n	8001524 <NORM_f32_SlopeSignChange+0xbc>
	{
	case SNS1 : Local_f32_NormSSC = (Copy_u32SSC - SNS1_SSC_MEAN) / SNS1_SSC_SD; break;
 8001488:	6838      	ldr	r0, [r7, #0]
 800148a:	f7fe ffff 	bl	800048c <__aeabi_ui2d>
 800148e:	a32a      	add	r3, pc, #168	; (adr r3, 8001538 <NORM_f32_SlopeSignChange+0xd0>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe febc 	bl	8000210 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	a327      	add	r3, pc, #156	; (adr r3, 8001540 <NORM_f32_SlopeSignChange+0xd8>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f995 	bl	80007d4 <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb15 	bl	8000ae0 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e033      	b.n	8001524 <NORM_f32_SlopeSignChange+0xbc>
	case SNS2 : Local_f32_NormSSC = (Copy_u32SSC - SNS2_SSC_MEAN) / SNS2_SSC_SD; break;
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f7fe ffe5 	bl	800048c <__aeabi_ui2d>
 80014c2:	a321      	add	r3, pc, #132	; (adr r3, 8001548 <NORM_f32_SlopeSignChange+0xe0>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	f7fe fea2 	bl	8000210 <__aeabi_dsub>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	a31e      	add	r3, pc, #120	; (adr r3, 8001550 <NORM_f32_SlopeSignChange+0xe8>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff f97b 	bl	80007d4 <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fafb 	bl	8000ae0 <__aeabi_d2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	e019      	b.n	8001524 <NORM_f32_SlopeSignChange+0xbc>
	case SNS3 : Local_f32_NormSSC = (Copy_u32SSC - SNS3_SSC_MEAN) / SNS3_SSC_SD; break;
 80014f0:	6838      	ldr	r0, [r7, #0]
 80014f2:	f7fe ffcb 	bl	800048c <__aeabi_ui2d>
 80014f6:	a318      	add	r3, pc, #96	; (adr r3, 8001558 <NORM_f32_SlopeSignChange+0xf0>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7fe fe88 	bl	8000210 <__aeabi_dsub>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	a315      	add	r3, pc, #84	; (adr r3, 8001560 <NORM_f32_SlopeSignChange+0xf8>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f961 	bl	80007d4 <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fae1 	bl	8000ae0 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	bf00      	nop
	}

	return Local_f32_NormSSC;;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	ee07 3a90 	vmov	s15, r3

}
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	f3af 8000 	nop.w
 8001538:	3d70a3d7 	.word	0x3d70a3d7
 800153c:	4061c70a 	.word	0x4061c70a
 8001540:	70a3d70a 	.word	0x70a3d70a
 8001544:	40515a3d 	.word	0x40515a3d
 8001548:	3d70a3d7 	.word	0x3d70a3d7
 800154c:	40613f0a 	.word	0x40613f0a
 8001550:	147ae148 	.word	0x147ae148
 8001554:	4050d7ae 	.word	0x4050d7ae
 8001558:	f5c28f5c 	.word	0xf5c28f5c
 800155c:	40643428 	.word	0x40643428
 8001560:	47ae147b 	.word	0x47ae147b
 8001564:	40217ae1 	.word	0x40217ae1

08001568 <NORM_f32_ZeroCrossing>:

float NORM_f32_ZeroCrossing(uint8_t Copy_u8SensorNum , uint32_t Copy_u32zeroCross)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormZC;;

	switch(Copy_u8SensorNum)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d03a      	beq.n	80015f0 <NORM_f32_ZeroCrossing+0x88>
 800157a:	2b02      	cmp	r3, #2
 800157c:	dc52      	bgt.n	8001624 <NORM_f32_ZeroCrossing+0xbc>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <NORM_f32_ZeroCrossing+0x20>
 8001582:	2b01      	cmp	r3, #1
 8001584:	d01a      	beq.n	80015bc <NORM_f32_ZeroCrossing+0x54>
 8001586:	e04d      	b.n	8001624 <NORM_f32_ZeroCrossing+0xbc>
	{
	case SNS1 : Local_f32_NormZC = (Copy_u32zeroCross - SNS1_ZC_MEAN) / SNS1_ZC_SD; break;
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f7fe ff7f 	bl	800048c <__aeabi_ui2d>
 800158e:	a32a      	add	r3, pc, #168	; (adr r3, 8001638 <NORM_f32_ZeroCrossing+0xd0>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7fe fe3c 	bl	8000210 <__aeabi_dsub>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	a327      	add	r3, pc, #156	; (adr r3, 8001640 <NORM_f32_ZeroCrossing+0xd8>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7ff f915 	bl	80007d4 <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fa95 	bl	8000ae0 <__aeabi_d2f>
 80015b6:	4603      	mov	r3, r0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	e033      	b.n	8001624 <NORM_f32_ZeroCrossing+0xbc>
	case SNS2 : Local_f32_NormZC = (Copy_u32zeroCross - SNS2_ZC_MEAN) / SNS2_ZC_SD; break;
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f7fe ff65 	bl	800048c <__aeabi_ui2d>
 80015c2:	a321      	add	r3, pc, #132	; (adr r3, 8001648 <NORM_f32_ZeroCrossing+0xe0>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7fe fe22 	bl	8000210 <__aeabi_dsub>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	a31e      	add	r3, pc, #120	; (adr r3, 8001650 <NORM_f32_ZeroCrossing+0xe8>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f8fb 	bl	80007d4 <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fa7b 	bl	8000ae0 <__aeabi_d2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	e019      	b.n	8001624 <NORM_f32_ZeroCrossing+0xbc>
	case SNS3 : Local_f32_NormZC = (Copy_u32zeroCross - SNS3_ZC_MEAN) / SNS3_ZC_SD; break;
 80015f0:	6838      	ldr	r0, [r7, #0]
 80015f2:	f7fe ff4b 	bl	800048c <__aeabi_ui2d>
 80015f6:	a318      	add	r3, pc, #96	; (adr r3, 8001658 <NORM_f32_ZeroCrossing+0xf0>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7fe fe08 	bl	8000210 <__aeabi_dsub>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	a315      	add	r3, pc, #84	; (adr r3, 8001660 <NORM_f32_ZeroCrossing+0xf8>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff f8e1 	bl	80007d4 <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa61 	bl	8000ae0 <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	bf00      	nop
	}

	return Local_f32_NormZC;;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	ee07 3a90 	vmov	s15, r3
}
 800162a:	eeb0 0a67 	vmov.f32	s0, s15
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	51eb851f 	.word	0x51eb851f
 800163c:	40569eb8 	.word	0x40569eb8
 8001640:	e147ae14 	.word	0xe147ae14
 8001644:	4047147a 	.word	0x4047147a
 8001648:	eb851eb8 	.word	0xeb851eb8
 800164c:	4048b851 	.word	0x4048b851
 8001650:	e147ae14 	.word	0xe147ae14
 8001654:	4041b47a 	.word	0x4041b47a
 8001658:	d70a3d71 	.word	0xd70a3d71
 800165c:	4046b0a3 	.word	0x4046b0a3
 8001660:	28f5c28f 	.word	0x28f5c28f
 8001664:	40344f5c 	.word	0x40344f5c

08001668 <NORM_f32_WaveformLength>:

float NORM_f32_WaveformLength(uint8_t Copy_u8SensorNum , uint32_t Copy_u3WaveLength)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormWVL;

	switch(Copy_u8SensorNum)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d03a      	beq.n	80016f0 <NORM_f32_WaveformLength+0x88>
 800167a:	2b02      	cmp	r3, #2
 800167c:	dc52      	bgt.n	8001724 <NORM_f32_WaveformLength+0xbc>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <NORM_f32_WaveformLength+0x20>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d01a      	beq.n	80016bc <NORM_f32_WaveformLength+0x54>
 8001686:	e04d      	b.n	8001724 <NORM_f32_WaveformLength+0xbc>
	{
	case SNS1 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS1_WVL_MEAN) / SNS1_WVL_SD; break;
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f7fe feff 	bl	800048c <__aeabi_ui2d>
 800168e:	a32a      	add	r3, pc, #168	; (adr r3, 8001738 <NORM_f32_WaveformLength+0xd0>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7fe fdbc 	bl	8000210 <__aeabi_dsub>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	a327      	add	r3, pc, #156	; (adr r3, 8001740 <NORM_f32_WaveformLength+0xd8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7ff f895 	bl	80007d4 <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff fa15 	bl	8000ae0 <__aeabi_d2f>
 80016b6:	4603      	mov	r3, r0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e033      	b.n	8001724 <NORM_f32_WaveformLength+0xbc>
	case SNS2 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS2_WVL_MEAN) / SNS2_WVL_SD; break;
 80016bc:	6838      	ldr	r0, [r7, #0]
 80016be:	f7fe fee5 	bl	800048c <__aeabi_ui2d>
 80016c2:	a321      	add	r3, pc, #132	; (adr r3, 8001748 <NORM_f32_WaveformLength+0xe0>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe fda2 	bl	8000210 <__aeabi_dsub>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	a31e      	add	r3, pc, #120	; (adr r3, 8001750 <NORM_f32_WaveformLength+0xe8>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7ff f87b 	bl	80007d4 <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff f9fb 	bl	8000ae0 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	e019      	b.n	8001724 <NORM_f32_WaveformLength+0xbc>
	case SNS3 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS3_WVL_MEAN) / SNS3_WVL_SD; break;
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f7fe fecb 	bl	800048c <__aeabi_ui2d>
 80016f6:	a318      	add	r3, pc, #96	; (adr r3, 8001758 <NORM_f32_WaveformLength+0xf0>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe fd88 	bl	8000210 <__aeabi_dsub>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	a315      	add	r3, pc, #84	; (adr r3, 8001760 <NORM_f32_WaveformLength+0xf8>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7ff f861 	bl	80007d4 <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f9e1 	bl	8000ae0 <__aeabi_d2f>
 800171e:	4603      	mov	r3, r0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	bf00      	nop
	}

	return Local_f32_NormWVL;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ee07 3a90 	vmov	s15, r3
}
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	f3af 8000 	nop.w
 8001738:	d70a3d71 	.word	0xd70a3d71
 800173c:	40f16f93 	.word	0x40f16f93
 8001740:	eb851eb8 	.word	0xeb851eb8
 8001744:	40f08fa1 	.word	0x40f08fa1
 8001748:	b851eb85 	.word	0xb851eb85
 800174c:	40f5ea8a 	.word	0x40f5ea8a
 8001750:	cccccccd 	.word	0xcccccccd
 8001754:	40f8a064 	.word	0x40f8a064
 8001758:	9999999a 	.word	0x9999999a
 800175c:	40eb96d9 	.word	0x40eb96d9
 8001760:	ae147ae1 	.word	0xae147ae1
 8001764:	40ea693f 	.word	0x40ea693f

08001768 <NORM_f32_RMS>:
float NORM_f32_RMS(uint8_t Copy_u8SensorNum , float Copy_f32RMS)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	ed87 0a00 	vstr	s0, [r7]
 8001774:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormRMS;

	switch(Copy_u8SensorNum)
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d03a      	beq.n	80017f2 <NORM_f32_RMS+0x8a>
 800177c:	2b02      	cmp	r3, #2
 800177e:	dc52      	bgt.n	8001826 <NORM_f32_RMS+0xbe>
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <NORM_f32_RMS+0x22>
 8001784:	2b01      	cmp	r3, #1
 8001786:	d01a      	beq.n	80017be <NORM_f32_RMS+0x56>
 8001788:	e04d      	b.n	8001826 <NORM_f32_RMS+0xbe>
	{
	case SNS1 : Local_f32_NormRMS = (Copy_f32RMS - SNS1_RMS_MEAN) / SNS1_RMS_SD; break;
 800178a:	6838      	ldr	r0, [r7, #0]
 800178c:	f7fe fea0 	bl	80004d0 <__aeabi_f2d>
 8001790:	a329      	add	r3, pc, #164	; (adr r3, 8001838 <NORM_f32_RMS+0xd0>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fd3b 	bl	8000210 <__aeabi_dsub>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	a327      	add	r3, pc, #156	; (adr r3, 8001840 <NORM_f32_RMS+0xd8>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f814 	bl	80007d4 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff f994 	bl	8000ae0 <__aeabi_d2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e033      	b.n	8001826 <NORM_f32_RMS+0xbe>
	case SNS2 : Local_f32_NormRMS = (Copy_f32RMS - SNS2_RMS_MEAN) / SNS2_RMS_SD; break;
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f7fe fe86 	bl	80004d0 <__aeabi_f2d>
 80017c4:	a320      	add	r3, pc, #128	; (adr r3, 8001848 <NORM_f32_RMS+0xe0>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe fd21 	bl	8000210 <__aeabi_dsub>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	a31e      	add	r3, pc, #120	; (adr r3, 8001850 <NORM_f32_RMS+0xe8>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe fffa 	bl	80007d4 <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff f97a 	bl	8000ae0 <__aeabi_d2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e019      	b.n	8001826 <NORM_f32_RMS+0xbe>
	case SNS3 : Local_f32_NormRMS = (Copy_f32RMS - SNS3_RMS_MEAN) / SNS3_RMS_SD; break;
 80017f2:	6838      	ldr	r0, [r7, #0]
 80017f4:	f7fe fe6c 	bl	80004d0 <__aeabi_f2d>
 80017f8:	a317      	add	r3, pc, #92	; (adr r3, 8001858 <NORM_f32_RMS+0xf0>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fd07 	bl	8000210 <__aeabi_dsub>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	a315      	add	r3, pc, #84	; (adr r3, 8001860 <NORM_f32_RMS+0xf8>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe ffe0 	bl	80007d4 <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f960 	bl	8000ae0 <__aeabi_d2f>
 8001820:	4603      	mov	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	bf00      	nop
	}

	return Local_f32_NormRMS;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	ee07 3a90 	vmov	s15, r3
}
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	3d70a3d7 	.word	0x3d70a3d7
 800183c:	4073930a 	.word	0x4073930a
 8001840:	51eb851f 	.word	0x51eb851f
 8001844:	407252b8 	.word	0x407252b8
 8001848:	51eb851f 	.word	0x51eb851f
 800184c:	407712b8 	.word	0x407712b8
 8001850:	66666666 	.word	0x66666666
 8001854:	4079ea66 	.word	0x4079ea66
 8001858:	5c28f5c3 	.word	0x5c28f5c3
 800185c:	4071068f 	.word	0x4071068f
 8001860:	147ae148 	.word	0x147ae148
 8001864:	4070b3ae 	.word	0x4070b3ae

08001868 <NORM_f32_Variance>:

float NORM_f32_Variance(uint8_t Copy_u8SensorNum , float Copy_f32Variance)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	ed87 0a00 	vstr	s0, [r7]
 8001874:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormVar;

	switch(Copy_u8SensorNum)
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d03a      	beq.n	80018f2 <NORM_f32_Variance+0x8a>
 800187c:	2b02      	cmp	r3, #2
 800187e:	dc52      	bgt.n	8001926 <NORM_f32_Variance+0xbe>
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <NORM_f32_Variance+0x22>
 8001884:	2b01      	cmp	r3, #1
 8001886:	d01a      	beq.n	80018be <NORM_f32_Variance+0x56>
 8001888:	e04d      	b.n	8001926 <NORM_f32_Variance+0xbe>
	{
	case SNS1 : Local_f32_NormVar = (Copy_f32Variance - SNS1_VAR_MEAN) / SNS1_VAR_SD; break;
 800188a:	6838      	ldr	r0, [r7, #0]
 800188c:	f7fe fe20 	bl	80004d0 <__aeabi_f2d>
 8001890:	a329      	add	r3, pc, #164	; (adr r3, 8001938 <NORM_f32_Variance+0xd0>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fcbb 	bl	8000210 <__aeabi_dsub>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	a327      	add	r3, pc, #156	; (adr r3, 8001940 <NORM_f32_Variance+0xd8>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe ff94 	bl	80007d4 <__aeabi_ddiv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f914 	bl	8000ae0 <__aeabi_d2f>
 80018b8:	4603      	mov	r3, r0
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	e033      	b.n	8001926 <NORM_f32_Variance+0xbe>
	case SNS2 : Local_f32_NormVar = (Copy_f32Variance - SNS2_VAR_MEAN) / SNS2_VAR_SD; break;
 80018be:	6838      	ldr	r0, [r7, #0]
 80018c0:	f7fe fe06 	bl	80004d0 <__aeabi_f2d>
 80018c4:	a320      	add	r3, pc, #128	; (adr r3, 8001948 <NORM_f32_Variance+0xe0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fca1 	bl	8000210 <__aeabi_dsub>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	a31e      	add	r3, pc, #120	; (adr r3, 8001950 <NORM_f32_Variance+0xe8>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe ff7a 	bl	80007d4 <__aeabi_ddiv>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f8fa 	bl	8000ae0 <__aeabi_d2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e019      	b.n	8001926 <NORM_f32_Variance+0xbe>
	case SNS3 : Local_f32_NormVar = (Copy_f32Variance - SNS3_VAR_MEAN) / SNS3_VAR_SD; break;
 80018f2:	6838      	ldr	r0, [r7, #0]
 80018f4:	f7fe fdec 	bl	80004d0 <__aeabi_f2d>
 80018f8:	a317      	add	r3, pc, #92	; (adr r3, 8001958 <NORM_f32_Variance+0xf0>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fc87 	bl	8000210 <__aeabi_dsub>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	a315      	add	r3, pc, #84	; (adr r3, 8001960 <NORM_f32_Variance+0xf8>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe ff60 	bl	80007d4 <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f8e0 	bl	8000ae0 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	bf00      	nop
	}

	return Local_f32_NormVar;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	ee07 3a90 	vmov	s15, r3
}
 800192c:	eeb0 0a67 	vmov.f32	s0, s15
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	eb851eb8 	.word	0xeb851eb8
 800193c:	4106777b 	.word	0x4106777b
 8001940:	3d70a3d7 	.word	0x3d70a3d7
 8001944:	410d87b8 	.word	0x410d87b8
 8001948:	3d70a3d7 	.word	0x3d70a3d7
 800194c:	4112d029 	.word	0x4112d029
 8001950:	66666666 	.word	0x66666666
 8001954:	411a5fdb 	.word	0x411a5fdb
 8001958:	c28f5c29 	.word	0xc28f5c29
 800195c:	4101c6bb 	.word	0x4101c6bb
 8001960:	cccccccd 	.word	0xcccccccd
 8001964:	410debce 	.word	0x410debce

08001968 <NORM_f32_Mean>:

float NORM_f32_Mean(uint8_t Copy_u8SensorNum , float Copy_f32Mean)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	ed87 0a00 	vstr	s0, [r7]
 8001974:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormMean;

	switch(Copy_u8SensorNum)
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d03a      	beq.n	80019f2 <NORM_f32_Mean+0x8a>
 800197c:	2b02      	cmp	r3, #2
 800197e:	dc52      	bgt.n	8001a26 <NORM_f32_Mean+0xbe>
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <NORM_f32_Mean+0x22>
 8001984:	2b01      	cmp	r3, #1
 8001986:	d01a      	beq.n	80019be <NORM_f32_Mean+0x56>
 8001988:	e04d      	b.n	8001a26 <NORM_f32_Mean+0xbe>
	{
	case SNS1 : Local_f32_NormMean= (Copy_f32Mean - SNS1_MEAN_MEAN) / SNS1_MEAN_SD; break;
 800198a:	6838      	ldr	r0, [r7, #0]
 800198c:	f7fe fda0 	bl	80004d0 <__aeabi_f2d>
 8001990:	a329      	add	r3, pc, #164	; (adr r3, 8001a38 <NORM_f32_Mean+0xd0>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fc3b 	bl	8000210 <__aeabi_dsub>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	a327      	add	r3, pc, #156	; (adr r3, 8001a40 <NORM_f32_Mean+0xd8>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe ff14 	bl	80007d4 <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f894 	bl	8000ae0 <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e033      	b.n	8001a26 <NORM_f32_Mean+0xbe>
	case SNS2 : Local_f32_NormMean= (Copy_f32Mean - SNS2_MEAN_MEAN) / SNS2_MEAN_SD; break;
 80019be:	6838      	ldr	r0, [r7, #0]
 80019c0:	f7fe fd86 	bl	80004d0 <__aeabi_f2d>
 80019c4:	a320      	add	r3, pc, #128	; (adr r3, 8001a48 <NORM_f32_Mean+0xe0>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fc21 	bl	8000210 <__aeabi_dsub>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	a31e      	add	r3, pc, #120	; (adr r3, 8001a50 <NORM_f32_Mean+0xe8>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fefa 	bl	80007d4 <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f87a 	bl	8000ae0 <__aeabi_d2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e019      	b.n	8001a26 <NORM_f32_Mean+0xbe>
	case SNS3 : Local_f32_NormMean= (Copy_f32Mean - SNS3_MEAN_MEAN) / SNS3_MEAN_SD; break;
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f7fe fd6c 	bl	80004d0 <__aeabi_f2d>
 80019f8:	a317      	add	r3, pc, #92	; (adr r3, 8001a58 <NORM_f32_Mean+0xf0>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fc07 	bl	8000210 <__aeabi_dsub>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	a315      	add	r3, pc, #84	; (adr r3, 8001a60 <NORM_f32_Mean+0xf8>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fee0 	bl	80007d4 <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f860 	bl	8000ae0 <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	bf00      	nop
	}

	return Local_f32_NormMean;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	ee07 3a90 	vmov	s15, r3
}
 8001a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	7ae147ae 	.word	0x7ae147ae
 8001a3c:	406b1614 	.word	0x406b1614
 8001a40:	c28f5c29 	.word	0xc28f5c29
 8001a44:	406ab0f5 	.word	0x406ab0f5
 8001a48:	3d70a3d7 	.word	0x3d70a3d7
 8001a4c:	4073f30a 	.word	0x4073f30a
 8001a50:	00000000 	.word	0x00000000
 8001a54:	4076bc00 	.word	0x4076bc00
 8001a58:	e147ae14 	.word	0xe147ae14
 8001a5c:	4067e47a 	.word	0x4067e47a
 8001a60:	8f5c28f6 	.word	0x8f5c28f6
 8001a64:	4066d5c2 	.word	0x4066d5c2

08001a68 <NORM_f32_AllNorm>:

uint8_t NORM_f32_AllNorm(float Copy_f32_FeatArr[][6] , float Copy_f32_NormArr[][6])
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	uint8_t Local_u8ErrorState = 0 , Local_u8Counter;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73bb      	strb	r3, [r7, #14]

	for(Local_u8Counter = 0 ; Local_u8Counter < 3 ; Local_u8Counter++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
 8001a7a:	e0b0      	b.n	8001bde <NORM_f32_AllNorm+0x176>
	{
		Copy_f32_NormArr[Local_u8Counter][VAR_IDX ] = NORM_f32_Variance(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][VAR_IDX]);
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	189c      	adds	r4, r3, r2
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fede 	bl	8001868 <NORM_f32_Variance>
 8001aac:	eef0 7a40 	vmov.f32	s15, s0
 8001ab0:	edc4 7a01 	vstr	s15, [r4, #4]
		Copy_f32_NormArr[Local_u8Counter][RMS_IDX ] = NORM_f32_RMS(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][RMS_IDX]);
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	189c      	adds	r4, r3, r2
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	eeb0 0a67 	vmov.f32	s0, s15
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fe42 	bl	8001768 <NORM_f32_RMS>
 8001ae4:	eef0 7a40 	vmov.f32	s15, s0
 8001ae8:	edc4 7a00 	vstr	s15, [r4]
		Copy_f32_NormArr[Local_u8Counter][MEAN_IDX] = NORM_f32_Mean(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][MEAN_IDX]);
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	189c      	adds	r4, r3, r2
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	eeb0 0a67 	vmov.f32	s0, s15
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff26 	bl	8001968 <NORM_f32_Mean>
 8001b1c:	eef0 7a40 	vmov.f32	s15, s0
 8001b20:	edc4 7a02 	vstr	s15, [r4, #8]
		Copy_f32_NormArr[Local_u8Counter][SSC_IDX]= NORM_f32_SlopeSignChange(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][SSC_IDX]);
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	461a      	mov	r2, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	189c      	adds	r4, r3, r2
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	ee17 1a90 	vmov	r1, s15
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fc88 	bl	8001468 <NORM_f32_SlopeSignChange>
 8001b58:	eef0 7a40 	vmov.f32	s15, s0
 8001b5c:	edc4 7a03 	vstr	s15, [r4, #12]
		Copy_f32_NormArr[Local_u8Counter][ZC_IDX  ] = NORM_f32_ZeroCrossing(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][ZC_IDX]);
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	461a      	mov	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	189c      	adds	r4, r3, r2
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	ee17 1a90 	vmov	r1, s15
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fcea 	bl	8001568 <NORM_f32_ZeroCrossing>
 8001b94:	eef0 7a40 	vmov.f32	s15, s0
 8001b98:	edc4 7a04 	vstr	s15, [r4, #16]
		Copy_f32_NormArr[Local_u8Counter][WVL_IDX ] = NORM_f32_WaveformLength(Local_u8Counter, Copy_f32_FeatArr[Local_u8Counter][WVL_IDX]);
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	189c      	adds	r4, r3, r2
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	ee17 1a90 	vmov	r1, s15
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fd4c 	bl	8001668 <NORM_f32_WaveformLength>
 8001bd0:	eef0 7a40 	vmov.f32	s15, s0
 8001bd4:	edc4 7a05 	vstr	s15, [r4, #20]
	for(Local_u8Counter = 0 ; Local_u8Counter < 3 ; Local_u8Counter++)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	f67f af4b 	bls.w	8001a7c <NORM_f32_AllNorm+0x14>

	}
	return Local_u8ErrorState;
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}

08001bf0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <MX_ADC1_Init+0x9c>)
 8001c06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <MX_ADC1_Init+0xa0>)
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c52:	f001 fac9 	bl	80031e8 <HAL_ADC_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c5c:	f000 fde0 	bl	8002820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c72:	f001 fd95 	bl	80037a0 <HAL_ADC_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c7c:	f000 fdd0 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200007bc 	.word	0x200007bc
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	0f000001 	.word	0x0f000001

08001c94 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001ca8:	4a21      	ldr	r2, [pc, #132]	; (8001d30 <MX_ADC2_Init+0x9c>)
 8001caa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <MX_ADC2_Init+0xa0>)
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cf4:	480d      	ldr	r0, [pc, #52]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001cf6:	f001 fa77 	bl	80031e8 <HAL_ADC_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001d00:	f000 fd8e 	bl	8002820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d04:	2301      	movs	r3, #1
 8001d06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d10:	463b      	mov	r3, r7
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_ADC2_Init+0x98>)
 8001d16:	f001 fd43 	bl	80037a0 <HAL_ADC_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001d20:	f000 fd7e 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000804 	.word	0x20000804
 8001d30:	40012100 	.word	0x40012100
 8001d34:	0f000001 	.word	0x0f000001

08001d38 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d3e:	463b      	mov	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <MX_ADC3_Init+0x9c>)
 8001d4e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d56:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d78:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d7a:	4a17      	ldr	r2, [pc, #92]	; (8001dd8 <MX_ADC3_Init+0xa0>)
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001d9a:	f001 fa25 	bl	80031e8 <HAL_ADC_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001da4:	f000 fd3c 	bl	8002820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001da8:	230a      	movs	r3, #10
 8001daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_ADC3_Init+0x98>)
 8001dba:	f001 fcf1 	bl	80037a0 <HAL_ADC_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001dc4:	f000 fd2c 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000084c 	.word	0x2000084c
 8001dd4:	40012200 	.word	0x40012200
 8001dd8:	0f000001 	.word	0x0f000001

08001ddc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08e      	sub	sp, #56	; 0x38
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_ADC_MspInit+0x164>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d130      	bne.n	8001e60 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a4f      	ldr	r2, [pc, #316]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	623b      	str	r3, [r7, #32]
 8001e18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a48      	ldr	r2, [pc, #288]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e36:	2301      	movs	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	4619      	mov	r1, r3
 8001e48:	483f      	ldr	r0, [pc, #252]	; (8001f48 <HAL_ADC_MspInit+0x16c>)
 8001e4a:	f002 f81b 	bl	8003e84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2012      	movs	r0, #18
 8001e54:	f001 ffc3 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e58:	2012      	movs	r0, #18
 8001e5a:	f001 ffdc 	bl	8003e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001e5e:	e06a      	b.n	8001f36 <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a39      	ldr	r2, [pc, #228]	; (8001f4c <HAL_ADC_MspInit+0x170>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d130      	bne.n	8001ecc <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4824      	ldr	r0, [pc, #144]	; (8001f48 <HAL_ADC_MspInit+0x16c>)
 8001eb6:	f001 ffe5 	bl	8003e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2012      	movs	r0, #18
 8001ec0:	f001 ff8d 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ec4:	2012      	movs	r0, #18
 8001ec6:	f001 ffa6 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8001eca:	e034      	b.n	8001f36 <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_ADC_MspInit+0x174>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12f      	bne.n	8001f36 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001ee0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_ADC_MspInit+0x168>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f12:	2303      	movs	r3, #3
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480c      	ldr	r0, [pc, #48]	; (8001f54 <HAL_ADC_MspInit+0x178>)
 8001f22:	f001 ffaf 	bl	8003e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2012      	movs	r0, #18
 8001f2c:	f001 ff57 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f30:	2012      	movs	r0, #18
 8001f32:	f001 ff70 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3738      	adds	r7, #56	; 0x38
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40012000 	.word	0x40012000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40012100 	.word	0x40012100
 8001f50:	40012200 	.word	0x40012200
 8001f54:	40020800 	.word	0x40020800

08001f58 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_CRC_Init+0x20>)
 8001f5e:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <MX_CRC_Init+0x24>)
 8001f60:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_CRC_Init+0x20>)
 8001f64:	f001 ff71 	bl	8003e4a <HAL_CRC_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001f6e:	f000 fc57 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000894 	.word	0x20000894
 8001f7c:	40023000 	.word	0x40023000

08001f80 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_CRC_MspInit+0x3c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10d      	bne.n	8001fae <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_CRC_MspInit+0x40>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <HAL_CRC_MspInit+0x40>)
 8001f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_CRC_MspInit+0x40>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023000 	.word	0x40023000
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <MX_GPIO_Init+0xd0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <MX_GPIO_Init+0xd0>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <MX_GPIO_Init+0xd0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MX_GPIO_Init+0xd0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a25      	ldr	r2, [pc, #148]	; (8002094 <MX_GPIO_Init+0xd0>)
 8002000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <MX_GPIO_Init+0xd0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <MX_GPIO_Init+0xd0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <MX_GPIO_Init+0xd0>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <MX_GPIO_Init+0xd0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <MX_GPIO_Init+0xd0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <MX_GPIO_Init+0xd0>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <MX_GPIO_Init+0xd0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	2120      	movs	r1, #32
 800204e:	4812      	ldr	r0, [pc, #72]	; (8002098 <MX_GPIO_Init+0xd4>)
 8002050:	f002 f8ac 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800205a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	480c      	ldr	r0, [pc, #48]	; (800209c <MX_GPIO_Init+0xd8>)
 800206c:	f001 ff0a 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002070:	2320      	movs	r3, #32
 8002072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	4804      	ldr	r0, [pc, #16]	; (8002098 <MX_GPIO_Init+0xd4>)
 8002088:	f001 fefc 	bl	8003e84 <HAL_GPIO_Init>

}
 800208c:	bf00      	nop
 800208e:	3728      	adds	r7, #40	; 0x28
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020800 	.word	0x40020800

080020a0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d104      	bne.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020b2:	2120      	movs	r1, #32
 80020b4:	4813      	ldr	r0, [pc, #76]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80020b6:	f002 f892 	bl	80041de <HAL_GPIO_TogglePin>
	}
	else if (htim->Instance == TIM14)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
}
 80020ba:	e01c      	b.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM11)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d104      	bne.n	80020d0 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020c6:	2120      	movs	r1, #32
 80020c8:	480e      	ldr	r0, [pc, #56]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80020ca:	f002 f888 	bl	80041de <HAL_GPIO_TogglePin>
}
 80020ce:	e012      	b.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM13)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d104      	bne.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020da:	2120      	movs	r1, #32
 80020dc:	4809      	ldr	r0, [pc, #36]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80020de:	f002 f87e 	bl	80041de <HAL_GPIO_TogglePin>
}
 80020e2:	e008      	b.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM14)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d103      	bne.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80020ee:	2120      	movs	r1, #32
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80020f2:	f002 f874 	bl	80041de <HAL_GPIO_TogglePin>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40014400 	.word	0x40014400
 8002104:	40020000 	.word	0x40020000
 8002108:	40014800 	.word	0x40014800
 800210c:	40001c00 	.word	0x40001c00
 8002110:	40002000 	.word	0x40002000

08002114 <Model_Init>:

static ai_buffer *ai_input;
static ai_buffer *ai_output;

int Model_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
	ai_error err;
	const ai_handle acts[] = { activations };
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <Model_Init+0x48>)
 800211c:	603b      	str	r3, [r7, #0]
	err = ai_network_create_and_init(&network, acts, NULL);
 800211e:	463b      	mov	r3, r7
 8002120:	2200      	movs	r2, #0
 8002122:	4619      	mov	r1, r3
 8002124:	480e      	ldr	r0, [pc, #56]	; (8002160 <Model_Init+0x4c>)
 8002126:	f004 fa6f 	bl	8006608 <ai_network_create_and_init>
 800212a:	4603      	mov	r3, r0
 800212c:	607b      	str	r3, [r7, #4]

	ai_input = ai_network_inputs_get(network, NULL);
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <Model_Init+0x4c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f004 fadb 	bl	80066f0 <ai_network_inputs_get>
 800213a:	4603      	mov	r3, r0
 800213c:	4a09      	ldr	r2, [pc, #36]	; (8002164 <Model_Init+0x50>)
 800213e:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 8002140:	4b07      	ldr	r3, [pc, #28]	; (8002160 <Model_Init+0x4c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f004 faec 	bl	8006724 <ai_network_outputs_get>
 800214c:	4603      	mov	r3, r0
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <Model_Init+0x54>)
 8002150:	6013      	str	r3, [r2, #0]

	return 0;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200008c0 	.word	0x200008c0
 8002160:	200008b8 	.word	0x200008b8
 8002164:	20000970 	.word	0x20000970
 8002168:	20000974 	.word	0x20000974

0800216c <Model_Run>:

int Model_Run(const void *in_data, void *out_data)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	ai_i32 n_batch;
	ai_error err;

	/* 1 - Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <Model_Run+0x4c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <Model_Run+0x50>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	605a      	str	r2, [r3, #4]

	/* 2 - Perform the inference */
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <Model_Run+0x54>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <Model_Run+0x4c>)
 800218c:	6811      	ldr	r1, [r2, #0]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <Model_Run+0x50>)
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fb1c 	bl	80067d0 <ai_network_run>
 8002198:	60f8      	str	r0, [r7, #12]
	if (n_batch != 1) {
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d006      	beq.n	80021ae <Model_Run+0x42>
		err = ai_network_get_error(network);
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <Model_Run+0x54>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fa0d 	bl	80065c4 <ai_network_get_error>
 80021aa:	4603      	mov	r3, r0
 80021ac:	60bb      	str	r3, [r7, #8]
	};

	return 0;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000970 	.word	0x20000970
 80021bc:	20000974 	.word	0x20000974
 80021c0:	200008b8 	.word	0x200008b8

080021c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c6:	f5ad 5d08 	sub.w	sp, sp, #8704	; 0x2200
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t Local_u32Counter,Local_u32_RealData[3][250],Local_u32AvgCounter;

	uint8_t Local_u8Avg = 5;
 80021ce:	2305      	movs	r3, #5
 80021d0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80021d4:	f102 0203 	add.w	r2, r2, #3
 80021d8:	7013      	strb	r3, [r2, #0]
	uint8_t Local_u8Max,Local_u8ModeArr[Local_u8Avg],Local_u8Sum=0;
 80021da:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80021de:	f103 0303 	add.w	r3, r3, #3
 80021e2:	781e      	ldrb	r6, [r3, #0]
 80021e4:	4633      	mov	r3, r6
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80021ec:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	b2f3      	uxtb	r3, r6
 80021f4:	2200      	movs	r2, #0
 80021f6:	461c      	mov	r4, r3
 80021f8:	4615      	mov	r5, r2
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	00eb      	lsls	r3, r5, #3
 8002204:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002208:	00e2      	lsls	r2, r4, #3
 800220a:	b2f3      	uxtb	r3, r6
 800220c:	2200      	movs	r2, #0
 800220e:	4618      	mov	r0, r3
 8002210:	4611      	mov	r1, r2
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	00cb      	lsls	r3, r1, #3
 800221c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002220:	00c2      	lsls	r2, r0, #3
 8002222:	4633      	mov	r3, r6
 8002224:	3307      	adds	r3, #7
 8002226:	08db      	lsrs	r3, r3, #3
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	ebad 0d03 	sub.w	sp, sp, r3
 800222e:	466b      	mov	r3, sp
 8002230:	3300      	adds	r3, #0
 8002232:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002236:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	2300      	movs	r3, #0
 800223e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8002242:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8002246:	7013      	strb	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002248:	f000 ff38 	bl	80030bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800224c:	f000 fa7c 	bl	8002748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002250:	f7ff feb8 	bl	8001fc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002254:	f000 fe96 	bl	8002f84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002258:	f7ff fcca 	bl	8001bf0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800225c:	f7ff fd1a 	bl	8001c94 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002260:	f7ff fd6a 	bl	8001d38 <MX_ADC3_Init>
  MX_CRC_Init();
 8002264:	f7ff fe78 	bl	8001f58 <MX_CRC_Init>
  MX_TIM2_Init();
 8002268:	f000 fbc4 	bl	80029f4 <MX_TIM2_Init>
  MX_TIM10_Init();
 800226c:	f000 fc5a 	bl	8002b24 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002270:	f000 fc7c 	bl	8002b6c <MX_TIM11_Init>
  MX_TIM12_Init();
 8002274:	f000 fc9e 	bl	8002bb4 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002278:	f000 fd00 	bl	8002c7c <MX_TIM13_Init>
  MX_TIM14_Init();
 800227c:	f000 fd22 	bl	8002cc4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	Model_Init();
 8002280:	f7ff ff48 	bl	8002114 <Model_Init>

	/* Start GPs Timers */
	HAL_TIM_Base_Start_IT(&htim10);
 8002284:	487e      	ldr	r0, [pc, #504]	; (8002480 <main+0x2bc>)
 8002286:	f002 fdfd 	bl	8004e84 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 800228a:	487e      	ldr	r0, [pc, #504]	; (8002484 <main+0x2c0>)
 800228c:	f002 fdfa 	bl	8004e84 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8002290:	487d      	ldr	r0, [pc, #500]	; (8002488 <main+0x2c4>)
 8002292:	f002 fdf7 	bl	8004e84 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8002296:	487d      	ldr	r0, [pc, #500]	; (800248c <main+0x2c8>)
 8002298:	f002 fdf4 	bl	8004e84 <HAL_TIM_Base_Start_IT>


	/* Initialize PWM Timers*/
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800229c:	2100      	movs	r1, #0
 800229e:	487c      	ldr	r0, [pc, #496]	; (8002490 <main+0x2cc>)
 80022a0:	f002 feba 	bl	8005018 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80022a4:	2104      	movs	r1, #4
 80022a6:	487a      	ldr	r0, [pc, #488]	; (8002490 <main+0x2cc>)
 80022a8:	f002 feb6 	bl	8005018 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80022ac:	2108      	movs	r1, #8
 80022ae:	4878      	ldr	r0, [pc, #480]	; (8002490 <main+0x2cc>)
 80022b0:	f002 feb2 	bl	8005018 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80022b4:	210c      	movs	r1, #12
 80022b6:	4876      	ldr	r0, [pc, #472]	; (8002490 <main+0x2cc>)
 80022b8:	f002 feae 	bl	8005018 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80022bc:	2100      	movs	r1, #0
 80022be:	4875      	ldr	r0, [pc, #468]	; (8002494 <main+0x2d0>)
 80022c0:	f002 feaa 	bl	8005018 <HAL_TIM_PWM_Start>

	SERVO_t Servo1,Servo2,Servo3,Servo4,Servo5;
	Servo1.Pin = Servo_PA15;
 80022c4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80022c8:	f103 0310 	add.w	r3, r3, #16
 80022cc:	f6a3 43b4 	subw	r3, r3, #3252	; 0xcb4
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
	Servo2.Pin = Servo_PB10;
 80022d4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80022d8:	f103 0310 	add.w	r3, r3, #16
 80022dc:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 80022e0:	2203      	movs	r2, #3
 80022e2:	601a      	str	r2, [r3, #0]
	Servo3.Pin = Servo_PB14;
 80022e4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80022e8:	f103 0310 	add.w	r3, r3, #16
 80022ec:	f6a3 5354 	subw	r3, r3, #3412	; 0xd54
 80022f0:	2204      	movs	r2, #4
 80022f2:	601a      	str	r2, [r3, #0]
	Servo4.Pin = Servo_PB2;
 80022f4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80022f8:	f103 0310 	add.w	r3, r3, #16
 80022fc:	f6a3 53a4 	subw	r3, r3, #3492	; 0xda4
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
	Servo5.Pin = Servo_PB9;
 8002304:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002308:	f103 0310 	add.w	r3, r3, #16
 800230c:	f6a3 53f4 	subw	r3, r3, #3572	; 0xdf4
 8002310:	2202      	movs	r2, #2
 8002312:	601a      	str	r2, [r3, #0]

	/*********	Testing	*********/
	uint32_t Move2[250] = {0};
 8002314:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002318:	f103 0310 	add.w	r3, r3, #16
 800231c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002320:	4618      	mov	r0, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	461a      	mov	r2, r3
 8002328:	2100      	movs	r1, #0
 800232a:	f006 f9c3 	bl	80086b4 <memset>
	uint32_t Move1[250] = {
 800232e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002332:	f103 0310 	add.w	r3, r3, #16
 8002336:	f2a3 53c4 	subw	r3, r3, #1476	; 0x5c4
 800233a:	4a57      	ldr	r2, [pc, #348]	; (8002498 <main+0x2d4>)
 800233c:	4618      	mov	r0, r3
 800233e:	4611      	mov	r1, r2
 8002340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002344:	461a      	mov	r2, r3
 8002346:	f006 f9a7 	bl	8008698 <memcpy>
			276,   79,    5,  217,   95,   29,    8,  104,   20,  156,  189,
			146,   93,  125,   96,    5,  160,   51, 1495, 1831,   71,  599,
			181,  250,  219,  246,   47,  213,   23,  225
	};

	uint32_t Move0[SENSOR_NUM][250] = {
 800234a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800234e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002352:	4a52      	ldr	r2, [pc, #328]	; (800249c <main+0x2d8>)
 8002354:	4618      	mov	r0, r3
 8002356:	4611      	mov	r1, r2
 8002358:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800235c:	461a      	mov	r2, r3
 800235e:	f006 f99b 	bl	8008698 <memcpy>
									25,  246,    0,    0,    6,  566,   17,    0,  217,  239,    0,
									10,   12,  294,  685,  207,  107,  167,  146,    1,   37,  109,
									408,  283,  144,  310,   40,    2,    0,   81,   20,   57,   60,
									90,    0,  167,  318,  569,   72,    4,   49}};

	FEAT_EXT_f32_AllFeat(Move0 ,*Feat_f32Arr);
 8002362:	f507 52af 	add.w	r2, r7, #5600	; 0x15e0
 8002366:	f102 0214 	add.w	r2, r2, #20
 800236a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800236e:	3b3c      	subs	r3, #60	; 0x3c
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe ffce 	bl	8001314 <FEAT_EXT_f32_AllFeat>
	NORM_f32_AllNorm(*Feat_f32Arr, *Norm_f32Arr);
 8002378:	f507 52ad 	add.w	r2, r7, #5536	; 0x15a0
 800237c:	f102 020c 	add.w	r2, r2, #12
 8002380:	f507 53af 	add.w	r3, r7, #5600	; 0x15e0
 8002384:	f103 0314 	add.w	r3, r3, #20
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fb6c 	bl	8001a68 <NORM_f32_AllNorm>
//	in_data[ZC_IDX+12]   = Local_f32KoftaNorm[ZC_IDX+12];
//	in_data[WVL_IDX+12]  = Local_f32KoftaNorm[WVL_IDX+12];



	in_data[RMS_IDX]  	= Norm_f32Arr[0][RMS_IDX];
 8002390:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002394:	f103 0310 	add.w	r3, r3, #16
 8002398:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <main+0x2dc>)
 80023a0:	6013      	str	r3, [r2, #0]
	in_data[VAR_IDX]  	= Norm_f32Arr[0][VAR_IDX];
 80023a2:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80023a6:	f103 0310 	add.w	r3, r3, #16
 80023aa:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <main+0x2dc>)
 80023b2:	6053      	str	r3, [r2, #4]
	in_data[MEAN_IDX] 	= Norm_f32Arr[0][MEAN_IDX];
 80023b4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80023b8:	f103 0310 	add.w	r3, r3, #16
 80023bc:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4a37      	ldr	r2, [pc, #220]	; (80024a0 <main+0x2dc>)
 80023c4:	6093      	str	r3, [r2, #8]
	in_data[SSC_IDX] 	= Norm_f32Arr[0][SSC_IDX];
 80023c6:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80023ca:	f103 0310 	add.w	r3, r3, #16
 80023ce:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a32      	ldr	r2, [pc, #200]	; (80024a0 <main+0x2dc>)
 80023d6:	60d3      	str	r3, [r2, #12]
	in_data[ZC_IDX]   	= Norm_f32Arr[0][ZC_IDX];
 80023d8:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80023dc:	f103 0310 	add.w	r3, r3, #16
 80023e0:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	4a2e      	ldr	r2, [pc, #184]	; (80024a0 <main+0x2dc>)
 80023e8:	6113      	str	r3, [r2, #16]
	in_data[WVL_IDX]  	= Norm_f32Arr[0][WVL_IDX];
 80023ea:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80023ee:	f103 0310 	add.w	r3, r3, #16
 80023f2:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <main+0x2dc>)
 80023fa:	6153      	str	r3, [r2, #20]

	in_data[RMS_IDX+6]  =  Norm_f32Arr[1][RMS_IDX];
 80023fc:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002400:	f103 0310 	add.w	r3, r3, #16
 8002404:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4a25      	ldr	r2, [pc, #148]	; (80024a0 <main+0x2dc>)
 800240c:	6193      	str	r3, [r2, #24]
	in_data[VAR_IDX+6]  =  Norm_f32Arr[1][VAR_IDX];
 800240e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002412:	f103 0310 	add.w	r3, r3, #16
 8002416:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <main+0x2dc>)
 800241e:	61d3      	str	r3, [r2, #28]
	in_data[MEAN_IDX+6] =  Norm_f32Arr[1][MEAN_IDX];
 8002420:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002424:	f103 0310 	add.w	r3, r3, #16
 8002428:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a1c      	ldr	r2, [pc, #112]	; (80024a0 <main+0x2dc>)
 8002430:	6213      	str	r3, [r2, #32]
	in_data[SSC_IDX+6] 	=  Norm_f32Arr[1][SSC_IDX];
 8002432:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002436:	f103 0310 	add.w	r3, r3, #16
 800243a:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <main+0x2dc>)
 8002442:	6253      	str	r3, [r2, #36]	; 0x24
	in_data[ZC_IDX+6]   =  Norm_f32Arr[1][ZC_IDX];
 8002444:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002448:	f103 0310 	add.w	r3, r3, #16
 800244c:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <main+0x2dc>)
 8002454:	6293      	str	r3, [r2, #40]	; 0x28
	in_data[WVL_IDX+6]  =  Norm_f32Arr[1][WVL_IDX];
 8002456:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800245a:	f103 0310 	add.w	r3, r3, #16
 800245e:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <main+0x2dc>)
 8002466:	62d3      	str	r3, [r2, #44]	; 0x2c
//	in_data[MEAN_IDX+12] = Norm_f32Arr[2][MEAN_IDX];
//	in_data[SSC_IDX+12]  = Norm_f32Arr[2][SSC_IDX];
//	in_data[ZC_IDX+12]   = Norm_f32Arr[2][ZC_IDX];
//	in_data[WVL_IDX+12]  = Norm_f32Arr[2][WVL_IDX];

	Model_Run(in_data, out_data);
 8002468:	490e      	ldr	r1, [pc, #56]	; (80024a4 <main+0x2e0>)
 800246a:	480d      	ldr	r0, [pc, #52]	; (80024a0 <main+0x2dc>)
 800246c:	f7ff fe7e 	bl	800216c <Model_Run>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for(Local_u32Counter = 0 ;Local_u32Counter < DATA_SIZE ;)
 8002470:	2300      	movs	r3, #0
 8002472:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002476:	f102 0204 	add.w	r2, r2, #4
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	e05d      	b.n	800253a <main+0x376>
 800247e:	bf00      	nop
 8002480:	200009c4 	.word	0x200009c4
 8002484:	20000a0c 	.word	0x20000a0c
 8002488:	20000a9c 	.word	0x20000a9c
 800248c:	20000ae4 	.word	0x20000ae4
 8002490:	2000097c 	.word	0x2000097c
 8002494:	20000a54 	.word	0x20000a54
 8002498:	080097c0 	.word	0x080097c0
 800249c:	08009ba8 	.word	0x08009ba8
 80024a0:	20000920 	.word	0x20000920
 80024a4:	20000960 	.word	0x20000960
		{

			sensor1 =  analogRead(&hadc1);
 80024a8:	489c      	ldr	r0, [pc, #624]	; (800271c <main+0x558>)
 80024aa:	f000 f9bf 	bl	800282c <analogRead>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4a9b      	ldr	r2, [pc, #620]	; (8002720 <main+0x55c>)
 80024b2:	6013      	str	r3, [r2, #0]
			sensor2 =  analogRead(&hadc2);
 80024b4:	489b      	ldr	r0, [pc, #620]	; (8002724 <main+0x560>)
 80024b6:	f000 f9b9 	bl	800282c <analogRead>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4a9a      	ldr	r2, [pc, #616]	; (8002728 <main+0x564>)
 80024be:	6013      	str	r3, [r2, #0]
//			sensor3 =  analogRead(&hadc3);
//			if((sensor1 != 0) && (sensor2 != 0)/* && (sensor3 != 0)*/)
//			{

				Local_u32_RealData[SNS1][Local_u32Counter] = sensor1;
 80024c0:	4b97      	ldr	r3, [pc, #604]	; (8002720 <main+0x55c>)
 80024c2:	6819      	ldr	r1, [r3, #0]
 80024c4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80024c8:	f103 0310 	add.w	r3, r3, #16
 80024cc:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 80024d0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80024d4:	f102 0204 	add.w	r2, r2, #4
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				Local_u32_RealData[SNS2][Local_u32Counter] = sensor2;
 80024de:	4b92      	ldr	r3, [pc, #584]	; (8002728 <main+0x564>)
 80024e0:	6819      	ldr	r1, [r3, #0]
 80024e2:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80024e6:	f103 0310 	add.w	r3, r3, #16
 80024ea:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 80024ee:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80024f2:	f102 0204 	add.w	r2, r2, #4
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	32fa      	adds	r2, #250	; 0xfa
 80024fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				Local_u32_RealData[SNS3][Local_u32Counter] = 0;
 80024fe:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002502:	f103 0310 	add.w	r3, r3, #16
 8002506:	f6a3 33d4 	subw	r3, r3, #3028	; 0xbd4
 800250a:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800250e:	f102 0204 	add.w	r2, r2, #4
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8002518:	2100      	movs	r1, #0
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				Local_u32Counter++;
 800251e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002522:	f103 0304 	add.w	r3, r3, #4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800252e:	f102 0204 	add.w	r2, r2, #4
 8002532:	6013      	str	r3, [r2, #0]
//			}

			HAL_Delay(2);
 8002534:	2002      	movs	r0, #2
 8002536:	f000 fe33 	bl	80031a0 <HAL_Delay>
		for(Local_u32Counter = 0 ;Local_u32Counter < DATA_SIZE ;)
 800253a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800253e:	f103 0304 	add.w	r3, r3, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2bf9      	cmp	r3, #249	; 0xf9
 8002546:	d9af      	bls.n	80024a8 <main+0x2e4>
		}

		FEAT_EXT_f32_AllFeat(Local_u32_RealData,*Feat_f32Arr);
 8002548:	f507 52af 	add.w	r2, r7, #5600	; 0x15e0
 800254c:	f102 0214 	add.w	r2, r2, #20
 8002550:	f507 53b1 	add.w	r3, r7, #5664	; 0x1620
 8002554:	f103 031c 	add.w	r3, r3, #28
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe feda 	bl	8001314 <FEAT_EXT_f32_AllFeat>
		NORM_f32_AllNorm(*Feat_f32Arr, *Norm_f32Arr);
 8002560:	f507 52ad 	add.w	r2, r7, #5536	; 0x15a0
 8002564:	f102 020c 	add.w	r2, r2, #12
 8002568:	f507 53af 	add.w	r3, r7, #5600	; 0x15e0
 800256c:	f103 0314 	add.w	r3, r3, #20
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fa78 	bl	8001a68 <NORM_f32_AllNorm>

		in_data[RMS_IDX]  	= Norm_f32Arr[0][RMS_IDX];
 8002578:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800257c:	f103 0310 	add.w	r3, r3, #16
 8002580:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a69      	ldr	r2, [pc, #420]	; (800272c <main+0x568>)
 8002588:	6013      	str	r3, [r2, #0]
		in_data[VAR_IDX]  	= Norm_f32Arr[0][VAR_IDX];
 800258a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800258e:	f103 0310 	add.w	r3, r3, #16
 8002592:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a64      	ldr	r2, [pc, #400]	; (800272c <main+0x568>)
 800259a:	6053      	str	r3, [r2, #4]
		in_data[MEAN_IDX] 	= Norm_f32Arr[0][MEAN_IDX];
 800259c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80025a0:	f103 0310 	add.w	r3, r3, #16
 80025a4:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4a60      	ldr	r2, [pc, #384]	; (800272c <main+0x568>)
 80025ac:	6093      	str	r3, [r2, #8]
		in_data[SSC_IDX] 	= Norm_f32Arr[0][SSC_IDX];
 80025ae:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80025b2:	f103 0310 	add.w	r3, r3, #16
 80025b6:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a5b      	ldr	r2, [pc, #364]	; (800272c <main+0x568>)
 80025be:	60d3      	str	r3, [r2, #12]
		in_data[ZC_IDX]   	= Norm_f32Arr[0][ZC_IDX];
 80025c0:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80025c4:	f103 0310 	add.w	r3, r3, #16
 80025c8:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	4a57      	ldr	r2, [pc, #348]	; (800272c <main+0x568>)
 80025d0:	6113      	str	r3, [r2, #16]
		in_data[WVL_IDX]  	= Norm_f32Arr[0][WVL_IDX];
 80025d2:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80025d6:	f103 0310 	add.w	r3, r3, #16
 80025da:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	4a52      	ldr	r2, [pc, #328]	; (800272c <main+0x568>)
 80025e2:	6153      	str	r3, [r2, #20]

		in_data[RMS_IDX+6]  =  Norm_f32Arr[1][RMS_IDX];
 80025e4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80025e8:	f103 0310 	add.w	r3, r3, #16
 80025ec:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	4a4e      	ldr	r2, [pc, #312]	; (800272c <main+0x568>)
 80025f4:	6193      	str	r3, [r2, #24]
		in_data[VAR_IDX+6]  =  Norm_f32Arr[1][VAR_IDX];
 80025f6:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80025fa:	f103 0310 	add.w	r3, r3, #16
 80025fe:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <main+0x568>)
 8002606:	61d3      	str	r3, [r2, #28]
		in_data[MEAN_IDX+6] =  Norm_f32Arr[1][MEAN_IDX];
 8002608:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800260c:	f103 0310 	add.w	r3, r3, #16
 8002610:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a45      	ldr	r2, [pc, #276]	; (800272c <main+0x568>)
 8002618:	6213      	str	r3, [r2, #32]
		in_data[SSC_IDX+6] 	=  Norm_f32Arr[1][SSC_IDX];
 800261a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800261e:	f103 0310 	add.w	r3, r3, #16
 8002622:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	4a40      	ldr	r2, [pc, #256]	; (800272c <main+0x568>)
 800262a:	6253      	str	r3, [r2, #36]	; 0x24
		in_data[ZC_IDX+6]   =  Norm_f32Arr[1][ZC_IDX];
 800262c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002630:	f103 0310 	add.w	r3, r3, #16
 8002634:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	4a3c      	ldr	r2, [pc, #240]	; (800272c <main+0x568>)
 800263c:	6293      	str	r3, [r2, #40]	; 0x28
		in_data[WVL_IDX+6]  =  Norm_f32Arr[1][WVL_IDX];
 800263e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002642:	f103 0310 	add.w	r3, r3, #16
 8002646:	f6a3 4364 	subw	r3, r3, #3172	; 0xc64
 800264a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264c:	4a37      	ldr	r2, [pc, #220]	; (800272c <main+0x568>)
 800264e:	62d3      	str	r3, [r2, #44]	; 0x2c
//		in_data[MEAN_IDX+12] = Norm_f32Arr[2][MEAN_IDX];
//		in_data[SSC_IDX+12]  = Norm_f32Arr[2][SSC_IDX];
//		in_data[ZC_IDX+12]   = Norm_f32Arr[2][ZC_IDX];
//		in_data[WVL_IDX+12]  = Norm_f32Arr[2][WVL_IDX];

		Model_Run(in_data, out_data);
 8002650:	4937      	ldr	r1, [pc, #220]	; (8002730 <main+0x56c>)
 8002652:	4836      	ldr	r0, [pc, #216]	; (800272c <main+0x568>)
 8002654:	f7ff fd8a 	bl	800216c <Model_Run>
		for(int i = 0 ;i < 4; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800265e:	f102 020c 	add.w	r2, r2, #12
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	e02d      	b.n	80026c2 <main+0x4fe>
		{
			if(out_data[i] > out_data[Local_u8Max])
 8002666:	4a32      	ldr	r2, [pc, #200]	; (8002730 <main+0x56c>)
 8002668:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800266c:	f103 030c 	add.w	r3, r3, #12
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	ed93 7a00 	vldr	s14, [r3]
 800267a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800267e:	f103 030b 	add.w	r3, r3, #11
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <main+0x56c>)
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002696:	dd09      	ble.n	80026ac <main+0x4e8>
			{
				Local_u8Max = i;
 8002698:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800269c:	f103 030c 	add.w	r3, r3, #12
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80026a6:	f102 020b 	add.w	r2, r2, #11
 80026aa:	7013      	strb	r3, [r2, #0]
		for(int i = 0 ;i < 4; i++)
 80026ac:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80026b0:	f103 030c 	add.w	r3, r3, #12
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80026bc:	f102 020c 	add.w	r2, r2, #12
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80026c6:	f103 030c 	add.w	r3, r3, #12
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	ddca      	ble.n	8002666 <main+0x4a2>
			}
		}

		Two  = out_data[0];
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <main+0x56c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <main+0x570>)
 80026d6:	6013      	str	r3, [r2, #0]
		OK   = out_data[1];
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <main+0x56c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a16      	ldr	r2, [pc, #88]	; (8002738 <main+0x574>)
 80026de:	6013      	str	r3, [r2, #0]
		Fest = out_data[2];
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <main+0x56c>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a15      	ldr	r2, [pc, #84]	; (800273c <main+0x578>)
 80026e6:	6013      	str	r3, [r2, #0]
		Rest = out_data[3];
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <main+0x56c>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <main+0x57c>)
 80026ee:	6013      	str	r3, [r2, #0]
//			OK = 0;
//			Good = 0;
//			Two = 0;
//		}

		Mode = Local_u8Max;
 80026f0:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80026f4:	f103 030b 	add.w	r3, r3, #11
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <main+0x580>)
 80026fc:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 80026fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002702:	f000 fd4d 	bl	80031a0 <HAL_Delay>
		Mode = 0;
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <main+0x580>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
		Local_u8Max = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002712:	f102 020b 	add.w	r2, r2, #11
 8002716:	7013      	strb	r3, [r2, #0]
		for(Local_u32Counter = 0 ;Local_u32Counter < DATA_SIZE ;)
 8002718:	e6aa      	b.n	8002470 <main+0x2ac>
 800271a:	bf00      	nop
 800271c:	200007bc 	.word	0x200007bc
 8002720:	2000089c 	.word	0x2000089c
 8002724:	20000804 	.word	0x20000804
 8002728:	200008a0 	.word	0x200008a0
 800272c:	20000920 	.word	0x20000920
 8002730:	20000960 	.word	0x20000960
 8002734:	200008ac 	.word	0x200008ac
 8002738:	200008a8 	.word	0x200008a8
 800273c:	200008a4 	.word	0x200008a4
 8002740:	200008b0 	.word	0x200008b0
 8002744:	200008b4 	.word	0x200008b4

08002748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b094      	sub	sp, #80	; 0x50
 800274c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	2234      	movs	r2, #52	; 0x34
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f005 ffac 	bl	80086b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <SystemClock_Config+0xd0>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4a28      	ldr	r2, [pc, #160]	; (8002818 <SystemClock_Config+0xd0>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
 800277c:	4b26      	ldr	r3, [pc, #152]	; (8002818 <SystemClock_Config+0xd0>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002788:	2300      	movs	r3, #0
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <SystemClock_Config+0xd4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002794:	4a21      	ldr	r2, [pc, #132]	; (800281c <SystemClock_Config+0xd4>)
 8002796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <SystemClock_Config+0xd4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027a8:	2302      	movs	r3, #2
 80027aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027ac:	2301      	movs	r3, #1
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027b0:	2310      	movs	r3, #16
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b4:	2302      	movs	r3, #2
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027b8:	2300      	movs	r3, #0
 80027ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027bc:	2308      	movs	r3, #8
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80027c0:	235a      	movs	r3, #90	; 0x5a
 80027c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80027c8:	2302      	movs	r3, #2
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027cc:	2302      	movs	r3, #2
 80027ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 f867 	bl	80048a8 <HAL_RCC_OscConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80027e0:	f000 f81e 	bl	8002820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e4:	230f      	movs	r3, #15
 80027e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e8:	2302      	movs	r3, #2
 80027ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	2102      	movs	r1, #2
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fd07 	bl	8004214 <HAL_RCC_ClockConfig>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800280c:	f000 f808 	bl	8002820 <Error_Handler>
  }
}
 8002810:	bf00      	nop
 8002812:	3750      	adds	r7, #80	; 0x50
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	40007000 	.word	0x40007000

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002828:	e7fe      	b.n	8002828 <Error_Handler+0x8>
	...

0800282c <analogRead>:
 */

#include "sensor_readings.h"
ADC_HandleTypeDef* hadc_g; // hold the address from the argument of the function
uint32_t analogRead(ADC_HandleTypeDef* hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	// Get ADC value
	hadc_g = hadc;
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <analogRead+0x5c>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
	uint32_t raw;

	if(HAL_ADC_Start(hadc_g) != HAL_OK)
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <analogRead+0x5c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fd16 	bl	8003270 <HAL_ADC_Start>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <analogRead+0x22>
		Error_Handler();
 800284a:	f7ff ffe9 	bl	8002820 <Error_Handler>

	HAL_ADC_PollForConversion(hadc_g, HAL_MAX_DELAY);
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <analogRead+0x5c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f04f 31ff 	mov.w	r1, #4294967295
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fddc 	bl	8003414 <HAL_ADC_PollForConversion>

	if((HAL_ADC_GetState(hadc_g) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <analogRead+0x5c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f001 f8cf 	bl	8003a04 <HAL_ADC_GetState>
 8002866:	4603      	mov	r3, r0
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002870:	d105      	bne.n	800287e <analogRead+0x52>
		raw = HAL_ADC_GetValue(hadc_g);
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <analogRead+0x5c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 ff67 	bl	800374a <HAL_ADC_GetValue>
 800287c:	60f8      	str	r0, [r7, #12]

	return raw;
 800287e:	68fb      	ldr	r3, [r7, #12]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000978 	.word	0x20000978

0800288c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_MspInit+0x4c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_MspInit+0x4c>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a0:	6453      	str	r3, [r2, #68]	; 0x44
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_MspInit+0x4c>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_MspInit+0x4c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_MspInit+0x4c>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_MspInit+0x4c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028ca:	2007      	movs	r0, #7
 80028cc:	f001 fa7c 	bl	8003dc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <NMI_Handler+0x4>

080028e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e6:	e7fe      	b.n	80028e6 <HardFault_Handler+0x4>

080028e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028ec:	e7fe      	b.n	80028ec <MemManage_Handler+0x4>

080028ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f2:	e7fe      	b.n	80028f2 <BusFault_Handler+0x4>

080028f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <UsageFault_Handler+0x4>

080028fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002928:	f000 fc1a 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}

08002930 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002934:	4805      	ldr	r0, [pc, #20]	; (800294c <ADC_IRQHandler+0x1c>)
 8002936:	f000 fdf8 	bl	800352a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <ADC_IRQHandler+0x20>)
 800293c:	f000 fdf5 	bl	800352a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <ADC_IRQHandler+0x24>)
 8002942:	f000 fdf2 	bl	800352a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200007bc 	.word	0x200007bc
 8002950:	20000804 	.word	0x20000804
 8002954:	2000084c 	.word	0x2000084c

08002958 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800295e:	f002 fc23 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200009c4 	.word	0x200009c4

0800296c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002972:	f002 fc19 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000a0c 	.word	0x20000a0c

08002980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <TIM2_IRQHandler+0x10>)
 8002986:	f002 fc0f 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	2000097c 	.word	0x2000097c

08002994 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800299a:	f002 fc05 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000a54 	.word	0x20000a54

080029a8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80029ae:	f002 fbfb 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000a9c 	.word	0x20000a9c

080029bc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80029c2:	f002 fbf1 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000ae4 	.word	0x20000ae4

080029d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <SystemInit+0x20>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <SystemInit+0x20>)
 80029dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08e      	sub	sp, #56	; 0x38
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a08:	f107 0320 	add.w	r3, r7, #32
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
 8002a20:	615a      	str	r2, [r3, #20]
 8002a22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8002a2c:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a2e:	f240 3283 	movw	r2, #899	; 0x383
 8002a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a34:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a48:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a4e:	4834      	ldr	r0, [pc, #208]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a50:	f002 f9c8 	bl	8004de4 <HAL_TIM_Base_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002a5a:	f7ff fee1 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a68:	4619      	mov	r1, r3
 8002a6a:	482d      	ldr	r0, [pc, #180]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a6c:	f002 fd66 	bl	800553c <HAL_TIM_ConfigClockSource>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002a76:	f7ff fed3 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a7a:	4829      	ldr	r0, [pc, #164]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a7c:	f002 fa72 	bl	8004f64 <HAL_TIM_PWM_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002a86:	f7ff fecb 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a92:	f107 0320 	add.w	r3, r7, #32
 8002a96:	4619      	mov	r1, r3
 8002a98:	4821      	ldr	r0, [pc, #132]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002a9a:	f003 f94f 	bl	8005d3c <HAL_TIMEx_MasterConfigSynchronization>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002aa4:	f7ff febc 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa8:	2360      	movs	r3, #96	; 0x60
 8002aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	4619      	mov	r1, r3
 8002abe:	4818      	ldr	r0, [pc, #96]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002ac0:	f002 fc7a 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002aca:	f7ff fea9 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4812      	ldr	r0, [pc, #72]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002ad6:	f002 fc6f 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002ae0:	f7ff fe9e 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	4619      	mov	r1, r3
 8002aea:	480d      	ldr	r0, [pc, #52]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002aec:	f002 fc64 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002af6:	f7ff fe93 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	220c      	movs	r2, #12
 8002afe:	4619      	mov	r1, r3
 8002b00:	4807      	ldr	r0, [pc, #28]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002b02:	f002 fc59 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002b0c:	f7ff fe88 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <MX_TIM2_Init+0x12c>)
 8002b12:	f000 f9b7 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 8002b16:	bf00      	nop
 8002b18:	3738      	adds	r7, #56	; 0x38
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2000097c 	.word	0x2000097c

08002b24 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_TIM10_Init+0x40>)
 8002b2a:	4a0f      	ldr	r2, [pc, #60]	; (8002b68 <MX_TIM10_Init+0x44>)
 8002b2c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <MX_TIM10_Init+0x40>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_TIM10_Init+0x40>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <MX_TIM10_Init+0x40>)
 8002b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b40:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <MX_TIM10_Init+0x40>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_TIM10_Init+0x40>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b4e:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_TIM10_Init+0x40>)
 8002b50:	f002 f948 	bl	8004de4 <HAL_TIM_Base_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002b5a:	f7ff fe61 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200009c4 	.word	0x200009c4
 8002b68:	40014400 	.word	0x40014400

08002b6c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_TIM11_Init+0x40>)
 8002b72:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <MX_TIM11_Init+0x44>)
 8002b74:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <MX_TIM11_Init+0x40>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_TIM11_Init+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <MX_TIM11_Init+0x40>)
 8002b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b88:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_TIM11_Init+0x40>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_TIM11_Init+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b96:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_TIM11_Init+0x40>)
 8002b98:	f002 f924 	bl	8004de4 <HAL_TIM_Base_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002ba2:	f7ff fe3d 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000a0c 	.word	0x20000a0c
 8002bb0:	40014800 	.word	0x40014800

08002bb4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bba:	f107 0320 	add.w	r3, r7, #32
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	611a      	str	r2, [r3, #16]
 8002bd6:	615a      	str	r2, [r3, #20]
 8002bd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002bdc:	4a26      	ldr	r2, [pc, #152]	; (8002c78 <MX_TIM12_Init+0xc4>)
 8002bde:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 900-1;
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002be2:	f240 3283 	movw	r2, #899	; 0x383
 8002be6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002bf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bf4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002c02:	481c      	ldr	r0, [pc, #112]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002c04:	f002 f8ee 	bl	8004de4 <HAL_TIM_Base_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8002c0e:	f7ff fe07 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c16:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002c18:	f107 0320 	add.w	r3, r7, #32
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4815      	ldr	r0, [pc, #84]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002c20:	f002 fc8c 	bl	800553c <HAL_TIM_ConfigClockSource>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8002c2a:	f7ff fdf9 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002c2e:	4811      	ldr	r0, [pc, #68]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002c30:	f002 f998 	bl	8004f64 <HAL_TIM_PWM_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002c3a:	f7ff fdf1 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c3e:	2360      	movs	r3, #96	; 0x60
 8002c40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c4e:	1d3b      	adds	r3, r7, #4
 8002c50:	2200      	movs	r2, #0
 8002c52:	4619      	mov	r1, r3
 8002c54:	4807      	ldr	r0, [pc, #28]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002c56:	f002 fbaf 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8002c60:	f7ff fdde 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <MX_TIM12_Init+0xc0>)
 8002c66:	f000 f90d 	bl	8002e84 <HAL_TIM_MspPostInit>

}
 8002c6a:	bf00      	nop
 8002c6c:	3730      	adds	r7, #48	; 0x30
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000a54 	.word	0x20000a54
 8002c78:	40001800 	.word	0x40001800

08002c7c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002c80:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <MX_TIM13_Init+0x40>)
 8002c82:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <MX_TIM13_Init+0x44>)
 8002c84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <MX_TIM13_Init+0x40>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <MX_TIM13_Init+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <MX_TIM13_Init+0x40>)
 8002c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <MX_TIM13_Init+0x40>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <MX_TIM13_Init+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002ca6:	4805      	ldr	r0, [pc, #20]	; (8002cbc <MX_TIM13_Init+0x40>)
 8002ca8:	f002 f89c 	bl	8004de4 <HAL_TIM_Base_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002cb2:	f7ff fdb5 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000a9c 	.word	0x20000a9c
 8002cc0:	40001c00 	.word	0x40001c00

08002cc4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_TIM14_Init+0x40>)
 8002cca:	4a0f      	ldr	r2, [pc, #60]	; (8002d08 <MX_TIM14_Init+0x44>)
 8002ccc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <MX_TIM14_Init+0x40>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_TIM14_Init+0x40>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <MX_TIM14_Init+0x40>)
 8002cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_TIM14_Init+0x40>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_TIM14_Init+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_TIM14_Init+0x40>)
 8002cf0:	f002 f878 	bl	8004de4 <HAL_TIM_Base_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002cfa:	f7ff fd91 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000ae4 	.word	0x20000ae4
 8002d08:	40002000 	.word	0x40002000

08002d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d116      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	4a51      	ldr	r2, [pc, #324]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2e:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	201c      	movs	r0, #28
 8002d40:	f001 f84d 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d44:	201c      	movs	r0, #28
 8002d46:	f001 f866 	bl	8003e16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002d4a:	e08a      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM10)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_TIM_Base_MspInit+0x164>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d116      	bne.n	8002d84 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4a43      	ldr	r2, [pc, #268]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d64:	6453      	str	r3, [r2, #68]	; 0x44
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	2019      	movs	r0, #25
 8002d78:	f001 f831 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d7c:	2019      	movs	r0, #25
 8002d7e:	f001 f84a 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8002d82:	e06e      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a3a      	ldr	r2, [pc, #232]	; (8002e74 <HAL_TIM_Base_MspInit+0x168>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d116      	bne.n	8002dbc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a35      	ldr	r2, [pc, #212]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	201a      	movs	r0, #26
 8002db0:	f001 f815 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002db4:	201a      	movs	r0, #26
 8002db6:	f001 f82e 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8002dba:	e052      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM12)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <HAL_TIM_Base_MspInit+0x16c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d116      	bne.n	8002df4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	202b      	movs	r0, #43	; 0x2b
 8002de8:	f000 fff9 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002dec:	202b      	movs	r0, #43	; 0x2b
 8002dee:	f001 f812 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8002df2:	e036      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM13)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <HAL_TIM_Base_MspInit+0x170>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d116      	bne.n	8002e2c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	202c      	movs	r0, #44	; 0x2c
 8002e20:	f000 ffdd 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e24:	202c      	movs	r0, #44	; 0x2c
 8002e26:	f000 fff6 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8002e2a:	e01a      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM14)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <HAL_TIM_Base_MspInit+0x174>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d115      	bne.n	8002e62 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_TIM_Base_MspInit+0x160>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	202d      	movs	r0, #45	; 0x2d
 8002e58:	f000 ffc1 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e5c:	202d      	movs	r0, #45	; 0x2d
 8002e5e:	f000 ffda 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800
 8002e78:	40001800 	.word	0x40001800
 8002e7c:	40001c00 	.word	0x40001c00
 8002e80:	40002000 	.word	0x40002000

08002e84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea4:	d13e      	bne.n	8002f24 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a31      	ldr	r2, [pc, #196]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002eb0:	f043 0302 	orr.w	r3, r3, #2
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_9;
 8002ede:	f240 6304 	movw	r3, #1540	; 0x604
 8002ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4619      	mov	r1, r3
 8002efa:	481f      	ldr	r0, [pc, #124]	; (8002f78 <HAL_TIM_MspPostInit+0xf4>)
 8002efc:	f000 ffc2 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f12:	2301      	movs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4817      	ldr	r0, [pc, #92]	; (8002f7c <HAL_TIM_MspPostInit+0xf8>)
 8002f1e:	f000 ffb1 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002f22:	e023      	b.n	8002f6c <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM12)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <HAL_TIM_MspPostInit+0xfc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d11e      	bne.n	8002f6c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <HAL_TIM_MspPostInit+0xf0>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002f4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002f5c:	2309      	movs	r3, #9
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4619      	mov	r1, r3
 8002f66:	4804      	ldr	r0, [pc, #16]	; (8002f78 <HAL_TIM_MspPostInit+0xf4>)
 8002f68:	f000 ff8c 	bl	8003e84 <HAL_GPIO_Init>
}
 8002f6c:	bf00      	nop
 8002f6e:	3728      	adds	r7, #40	; 0x28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020400 	.word	0x40020400
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40001800 	.word	0x40001800

08002f84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <MX_USART2_UART_Init+0x50>)
 8002f8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002faa:	220c      	movs	r2, #12
 8002fac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fae:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002fbc:	f002 ff4e 	bl	8005e5c <HAL_UART_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fc6:	f7ff fc2b 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000b2c 	.word	0x20000b2c
 8002fd4:	40004400 	.word	0x40004400

08002fd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <HAL_UART_MspInit+0x84>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d12b      	bne.n	8003052 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_UART_MspInit+0x88>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <HAL_UART_MspInit+0x88>)
 8003004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_UART_MspInit+0x88>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_UART_MspInit+0x88>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_UART_MspInit+0x88>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_UART_MspInit+0x88>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003032:	230c      	movs	r3, #12
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003042:	2307      	movs	r3, #7
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <HAL_UART_MspInit+0x8c>)
 800304e:	f000 ff19 	bl	8003e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	; 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40004400 	.word	0x40004400
 8003060:	40023800 	.word	0x40023800
 8003064:	40020000 	.word	0x40020000

08003068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800306c:	480d      	ldr	r0, [pc, #52]	; (80030a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800306e:	490e      	ldr	r1, [pc, #56]	; (80030a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003070:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003074:	e002      	b.n	800307c <LoopCopyDataInit>

08003076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307a:	3304      	adds	r3, #4

0800307c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800307c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003080:	d3f9      	bcc.n	8003076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003082:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003084:	4c0b      	ldr	r4, [pc, #44]	; (80030b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003088:	e001      	b.n	800308e <LoopFillZerobss>

0800308a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800308c:	3204      	adds	r2, #4

0800308e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003090:	d3fb      	bcc.n	800308a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003092:	f7ff fc9d 	bl	80029d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003096:	f005 fadb 	bl	8008650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309a:	f7ff f893 	bl	80021c4 <main>
  bx  lr    
 800309e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a8:	2000079c 	.word	0x2000079c
  ldr r2, =_sidata
 80030ac:	0800ab68 	.word	0x0800ab68
  ldr r2, =_sbss
 80030b0:	200007a0 	.word	0x200007a0
  ldr r4, =_ebss
 80030b4:	20000c08 	.word	0x20000c08

080030b8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <CAN1_RX0_IRQHandler>
	...

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_Init+0x40>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_Init+0x40>)
 80030d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_Init+0x40>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 fe6f 	bl	8003dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f000 f808 	bl	8003100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7ff fbcc 	bl	800288c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_InitTick+0x54>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_InitTick+0x58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	fbb3 f3f1 	udiv	r3, r3, r1
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fe87 	bl	8003e32 <HAL_SYSTICK_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00e      	b.n	800314c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d80a      	bhi.n	800314a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003134:	2200      	movs	r2, #0
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f000 fe4f 	bl	8003dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_InitTick+0x5c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000000 	.word	0x20000000
 8003158:	20000008 	.word	0x20000008
 800315c:	20000004 	.word	0x20000004

08003160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000008 	.word	0x20000008
 8003184:	20000b70 	.word	0x20000b70

08003188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000b70 	.word	0x20000b70

080031a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff ffee 	bl	8003188 <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d005      	beq.n	80031c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_Delay+0x44>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031c6:	bf00      	nop
 80031c8:	f7ff ffde 	bl	8003188 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d8f7      	bhi.n	80031c8 <HAL_Delay+0x28>
  {
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000008 	.word	0x20000008

080031e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e033      	b.n	8003266 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe fde8 	bl	8001ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800322e:	f023 0302 	bic.w	r3, r3, #2
 8003232:	f043 0202 	orr.w	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fbee 	bl	8003a1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f023 0303 	bic.w	r3, r3, #3
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
 8003256:	e001      	b.n	800325c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_ADC_Start+0x1a>
 8003286:	2302      	movs	r3, #2
 8003288:	e0b2      	b.n	80033f0 <HAL_ADC_Start+0x180>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d018      	beq.n	80032d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032b0:	4b52      	ldr	r3, [pc, #328]	; (80033fc <HAL_ADC_Start+0x18c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_ADC_Start+0x190>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	0c9a      	lsrs	r2, r3, #18
 80032bc:	4613      	mov	r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4413      	add	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80032c4:	e002      	b.n	80032cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f9      	bne.n	80032c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d17a      	bne.n	80033d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800330a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331e:	d106      	bne.n	800332e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f023 0206 	bic.w	r2, r3, #6
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	645a      	str	r2, [r3, #68]	; 0x44
 800332c:	e002      	b.n	8003334 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800333c:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_ADC_Start+0x194>)
 800333e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003348:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2b00      	cmp	r3, #0
 8003354:	d12a      	bne.n	80033ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <HAL_ADC_Start+0x198>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d015      	beq.n	800338c <HAL_ADC_Start+0x11c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a29      	ldr	r2, [pc, #164]	; (800340c <HAL_ADC_Start+0x19c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d105      	bne.n	8003376 <HAL_ADC_Start+0x106>
 800336a:	4b26      	ldr	r3, [pc, #152]	; (8003404 <HAL_ADC_Start+0x194>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a25      	ldr	r2, [pc, #148]	; (8003410 <HAL_ADC_Start+0x1a0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d136      	bne.n	80033ee <HAL_ADC_Start+0x17e>
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_ADC_Start+0x194>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d130      	bne.n	80033ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d129      	bne.n	80033ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	e020      	b.n	80033ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_ADC_Start+0x198>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d11b      	bne.n	80033ee <HAL_ADC_Start+0x17e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d114      	bne.n	80033ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	e00b      	b.n	80033ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f043 0201 	orr.w	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	20000000 	.word	0x20000000
 8003400:	431bde83 	.word	0x431bde83
 8003404:	40012300 	.word	0x40012300
 8003408:	40012000 	.word	0x40012000
 800340c:	40012100 	.word	0x40012100
 8003410:	40012200 	.word	0x40012200

08003414 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d113      	bne.n	800345a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800343c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003440:	d10b      	bne.n	800345a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e063      	b.n	8003522 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800345a:	f7ff fe95 	bl	8003188 <HAL_GetTick>
 800345e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003460:	e021      	b.n	80034a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d01d      	beq.n	80034a6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_ADC_PollForConversion+0x6c>
 8003470:	f7ff fe8a 	bl	8003188 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d212      	bcs.n	80034a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d00b      	beq.n	80034a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e03d      	b.n	8003522 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d1d6      	bne.n	8003462 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0212 	mvn.w	r2, #18
 80034bc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d123      	bne.n	8003520 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d11f      	bne.n	8003520 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d111      	bne.n	8003520 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d049      	beq.n	80035f4 <HAL_ADC_IRQHandler+0xca>
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d046      	beq.n	80035f4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d12b      	bne.n	80035e4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003590:	2b00      	cmp	r3, #0
 8003592:	d127      	bne.n	80035e4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d006      	beq.n	80035b0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d119      	bne.n	80035e4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0220 	bic.w	r2, r2, #32
 80035be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f8bd 	bl	8003764 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f06f 0212 	mvn.w	r2, #18
 80035f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d057      	beq.n	80036ba <HAL_ADC_IRQHandler+0x190>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d054      	beq.n	80036ba <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d105      	bne.n	8003628 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d139      	bne.n	80036aa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800364e:	2b00      	cmp	r3, #0
 8003650:	d12b      	bne.n	80036aa <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800365c:	2b00      	cmp	r3, #0
 800365e:	d124      	bne.n	80036aa <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800366a:	2b00      	cmp	r3, #0
 800366c:	d11d      	bne.n	80036aa <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003672:	2b00      	cmp	r3, #0
 8003674:	d119      	bne.n	80036aa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003684:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fab2 	bl	8003c14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 020c 	mvn.w	r2, #12
 80036b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d017      	beq.n	8003700 <HAL_ADC_IRQHandler+0x1d6>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d014      	beq.n	8003700 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d10d      	bne.n	8003700 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f841 	bl	8003778 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f06f 0201 	mvn.w	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800370e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d015      	beq.n	8003742 <HAL_ADC_IRQHandler+0x218>
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d012      	beq.n	8003742 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003720:	f043 0202 	orr.w	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0220 	mvn.w	r2, #32
 8003730:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f82a 	bl	800378c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0220 	mvn.w	r2, #32
 8003740:	601a      	str	r2, [r3, #0]
  }
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e113      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x244>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d925      	bls.n	8003818 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68d9      	ldr	r1, [r3, #12]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	3b1e      	subs	r3, #30
 80037e2:	2207      	movs	r2, #7
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43da      	mvns	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	400a      	ands	r2, r1
 80037f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68d9      	ldr	r1, [r3, #12]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	4618      	mov	r0, r3
 8003804:	4603      	mov	r3, r0
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4403      	add	r3, r0
 800380a:	3b1e      	subs	r3, #30
 800380c:	409a      	lsls	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	e022      	b.n	800385e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6919      	ldr	r1, [r3, #16]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	2207      	movs	r2, #7
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	400a      	ands	r2, r1
 800383a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6919      	ldr	r1, [r3, #16]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	4618      	mov	r0, r3
 800384e:	4603      	mov	r3, r0
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4403      	add	r3, r0
 8003854:	409a      	lsls	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b06      	cmp	r3, #6
 8003864:	d824      	bhi.n	80038b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	3b05      	subs	r3, #5
 8003878:	221f      	movs	r2, #31
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	400a      	ands	r2, r1
 8003886:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	4618      	mov	r0, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	3b05      	subs	r3, #5
 80038a2:	fa00 f203 	lsl.w	r2, r0, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	635a      	str	r2, [r3, #52]	; 0x34
 80038ae:	e04c      	b.n	800394a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d824      	bhi.n	8003902 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b23      	subs	r3, #35	; 0x23
 80038ca:	221f      	movs	r2, #31
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43da      	mvns	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	400a      	ands	r2, r1
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b23      	subs	r3, #35	; 0x23
 80038f4:	fa00 f203 	lsl.w	r2, r0, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003900:	e023      	b.n	800394a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	3b41      	subs	r3, #65	; 0x41
 8003914:	221f      	movs	r2, #31
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	400a      	ands	r2, r1
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4618      	mov	r0, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	3b41      	subs	r3, #65	; 0x41
 800393e:	fa00 f203 	lsl.w	r2, r0, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_ADC_ConfigChannel+0x250>)
 800394c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <HAL_ADC_ConfigChannel+0x254>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d10f      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x1d8>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b12      	cmp	r3, #18
 800395e:	d10b      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <HAL_ADC_ConfigChannel+0x254>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d12b      	bne.n	80039da <HAL_ADC_ConfigChannel+0x23a>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_ADC_ConfigChannel+0x258>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <HAL_ADC_ConfigChannel+0x1f4>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b11      	cmp	r3, #17
 8003992:	d122      	bne.n	80039da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <HAL_ADC_ConfigChannel+0x258>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d111      	bne.n	80039da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_ADC_ConfigChannel+0x25c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <HAL_ADC_ConfigChannel+0x260>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	0c9a      	lsrs	r2, r3, #18
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039cc:	e002      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f9      	bne.n	80039ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40012300 	.word	0x40012300
 80039f4:	40012000 	.word	0x40012000
 80039f8:	10000012 	.word	0x10000012
 80039fc:	20000000 	.word	0x20000000
 8003a00:	431bde83 	.word	0x431bde83

08003a04 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a24:	4b79      	ldr	r3, [pc, #484]	; (8003c0c <ADC_Init+0x1f0>)
 8003a26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	021a      	lsls	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6899      	ldr	r1, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	4a58      	ldr	r2, [pc, #352]	; (8003c10 <ADC_Init+0x1f4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6899      	ldr	r1, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6899      	ldr	r1, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	e00f      	b.n	8003b1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0202 	bic.w	r2, r2, #2
 8003b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6899      	ldr	r1, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7e1b      	ldrb	r3, [r3, #24]
 8003b34:	005a      	lsls	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01b      	beq.n	8003b80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6859      	ldr	r1, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	3b01      	subs	r3, #1
 8003b74:	035a      	lsls	r2, r3, #13
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	e007      	b.n	8003b90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	051a      	lsls	r2, r3, #20
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bd2:	025a      	lsls	r2, r3, #9
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	029a      	lsls	r2, r3, #10
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40012300 	.word	0x40012300
 8003c10:	0f000001 	.word	0x0f000001

08003c14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c44:	4013      	ands	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	60d3      	str	r3, [r2, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <__NVIC_GetPriorityGrouping+0x18>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 0307 	and.w	r3, r3, #7
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db0b      	blt.n	8003cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	4907      	ldr	r1, [pc, #28]	; (8003cc4 <__NVIC_EnableIRQ+0x38>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2001      	movs	r0, #1
 8003cae:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	e000e100 	.word	0xe000e100

08003cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	; (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	; (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1c3 0307 	rsb	r3, r3, #7
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf28      	it	cs
 8003d3a:	2304      	movcs	r3, #4
 8003d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <NVIC_EncodePriority+0x30>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3b03      	subs	r3, #3
 8003d4a:	e000      	b.n	8003d4e <NVIC_EncodePriority+0x32>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4313      	orrs	r3, r2
         );
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d94:	d301      	bcc.n	8003d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00f      	b.n	8003dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <SysTick_Config+0x40>)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da2:	210f      	movs	r1, #15
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	f7ff ff8e 	bl	8003cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <SysTick_Config+0x40>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <SysTick_Config+0x40>)
 8003db4:	2207      	movs	r2, #7
 8003db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	e000e010 	.word	0xe000e010

08003dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff29 	bl	8003c28 <__NVIC_SetPriorityGrouping>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df0:	f7ff ff3e 	bl	8003c70 <__NVIC_GetPriorityGrouping>
 8003df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff ff8e 	bl	8003d1c <NVIC_EncodePriority>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff5d 	bl	8003cc8 <__NVIC_SetPriority>
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff31 	bl	8003c8c <__NVIC_EnableIRQ>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ffa2 	bl	8003d84 <SysTick_Config>
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e00e      	b.n	8003e7a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	795b      	ldrb	r3, [r3, #5]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7fe f887 	bl	8001f80 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e165      	b.n	800416c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	f040 8154 	bne.w	8004166 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d005      	beq.n	8003ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d130      	bne.n	8003f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 0201 	and.w	r2, r3, #1
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d017      	beq.n	8003f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d123      	bne.n	8003fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	08da      	lsrs	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3208      	adds	r2, #8
 8003f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	220f      	movs	r2, #15
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	08da      	lsrs	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3208      	adds	r2, #8
 8003fc2:	69b9      	ldr	r1, [r7, #24]
 8003fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0203 	and.w	r2, r3, #3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80ae 	beq.w	8004166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	4b5d      	ldr	r3, [pc, #372]	; (8004184 <HAL_GPIO_Init+0x300>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <HAL_GPIO_Init+0x300>)
 8004014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004018:	6453      	str	r3, [r2, #68]	; 0x44
 800401a:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_GPIO_Init+0x300>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004026:	4a58      	ldr	r2, [pc, #352]	; (8004188 <HAL_GPIO_Init+0x304>)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4f      	ldr	r2, [pc, #316]	; (800418c <HAL_GPIO_Init+0x308>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d025      	beq.n	800409e <HAL_GPIO_Init+0x21a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4e      	ldr	r2, [pc, #312]	; (8004190 <HAL_GPIO_Init+0x30c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01f      	beq.n	800409a <HAL_GPIO_Init+0x216>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4d      	ldr	r2, [pc, #308]	; (8004194 <HAL_GPIO_Init+0x310>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d019      	beq.n	8004096 <HAL_GPIO_Init+0x212>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4c      	ldr	r2, [pc, #304]	; (8004198 <HAL_GPIO_Init+0x314>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x20e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4b      	ldr	r2, [pc, #300]	; (800419c <HAL_GPIO_Init+0x318>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00d      	beq.n	800408e <HAL_GPIO_Init+0x20a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4a      	ldr	r2, [pc, #296]	; (80041a0 <HAL_GPIO_Init+0x31c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <HAL_GPIO_Init+0x206>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a49      	ldr	r2, [pc, #292]	; (80041a4 <HAL_GPIO_Init+0x320>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_GPIO_Init+0x202>
 8004082:	2306      	movs	r3, #6
 8004084:	e00c      	b.n	80040a0 <HAL_GPIO_Init+0x21c>
 8004086:	2307      	movs	r3, #7
 8004088:	e00a      	b.n	80040a0 <HAL_GPIO_Init+0x21c>
 800408a:	2305      	movs	r3, #5
 800408c:	e008      	b.n	80040a0 <HAL_GPIO_Init+0x21c>
 800408e:	2304      	movs	r3, #4
 8004090:	e006      	b.n	80040a0 <HAL_GPIO_Init+0x21c>
 8004092:	2303      	movs	r3, #3
 8004094:	e004      	b.n	80040a0 <HAL_GPIO_Init+0x21c>
 8004096:	2302      	movs	r3, #2
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_Init+0x21c>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_GPIO_Init+0x21c>
 800409e:	2300      	movs	r3, #0
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	f002 0203 	and.w	r2, r2, #3
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	4093      	lsls	r3, r2
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b0:	4935      	ldr	r1, [pc, #212]	; (8004188 <HAL_GPIO_Init+0x304>)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040be:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <HAL_GPIO_Init+0x324>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4013      	ands	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040e2:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <HAL_GPIO_Init+0x324>)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e8:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <HAL_GPIO_Init+0x324>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <HAL_GPIO_Init+0x324>)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004112:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_GPIO_Init+0x324>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <HAL_GPIO_Init+0x324>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_GPIO_Init+0x324>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004160:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <HAL_GPIO_Init+0x324>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3301      	adds	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b0f      	cmp	r3, #15
 8004170:	f67f ae96 	bls.w	8003ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop
 8004178:	3724      	adds	r7, #36	; 0x24
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800
 8004188:	40013800 	.word	0x40013800
 800418c:	40020000 	.word	0x40020000
 8004190:	40020400 	.word	0x40020400
 8004194:	40020800 	.word	0x40020800
 8004198:	40020c00 	.word	0x40020c00
 800419c:	40021000 	.word	0x40021000
 80041a0:	40021400 	.word	0x40021400
 80041a4:	40021800 	.word	0x40021800
 80041a8:	40013c00 	.word	0x40013c00

080041ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
 80041b8:	4613      	mov	r3, r2
 80041ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041bc:	787b      	ldrb	r3, [r7, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041c8:	e003      	b.n	80041d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	041a      	lsls	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	619a      	str	r2, [r3, #24]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041f0:	887a      	ldrh	r2, [r7, #2]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4013      	ands	r3, r2
 80041f6:	041a      	lsls	r2, r3, #16
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	43d9      	mvns	r1, r3
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	400b      	ands	r3, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	619a      	str	r2, [r3, #24]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0cc      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004228:	4b68      	ldr	r3, [pc, #416]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d90c      	bls.n	8004250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b65      	ldr	r3, [pc, #404]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b63      	ldr	r3, [pc, #396]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b8      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d020      	beq.n	800429e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a58      	ldr	r2, [pc, #352]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a52      	ldr	r2, [pc, #328]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800428a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	494d      	ldr	r1, [pc, #308]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d044      	beq.n	8004334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d119      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e07f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d003      	beq.n	80042d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	4b3f      	ldr	r3, [pc, #252]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e06f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e067      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f2:	4b37      	ldr	r3, [pc, #220]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 0203 	bic.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4934      	ldr	r1, [pc, #208]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004304:	f7fe ff40 	bl	8003188 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	e00a      	b.n	8004322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7fe ff3c 	bl	8003188 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e04f      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 020c 	and.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	429a      	cmp	r2, r3
 8004332:	d1eb      	bne.n	800430c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004334:	4b25      	ldr	r3, [pc, #148]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d20c      	bcs.n	800435c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b22      	ldr	r3, [pc, #136]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434a:	4b20      	ldr	r3, [pc, #128]	; (80043cc <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d001      	beq.n	800435c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e032      	b.n	80043c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4916      	ldr	r1, [pc, #88]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004386:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	490e      	ldr	r1, [pc, #56]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800439a:	f000 f855 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	490a      	ldr	r1, [pc, #40]	; (80043d4 <HAL_RCC_ClockConfig+0x1c0>)
 80043ac:	5ccb      	ldrb	r3, [r1, r3]
 80043ae:	fa22 f303 	lsr.w	r3, r2, r3
 80043b2:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fea0 	bl	8003100 <HAL_InitTick>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023c00 	.word	0x40023c00
 80043d0:	40023800 	.word	0x40023800
 80043d4:	0800a790 	.word	0x0800a790
 80043d8:	20000000 	.word	0x20000000
 80043dc:	20000004 	.word	0x20000004

080043e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e0:	b480      	push	{r7}
 80043e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e6:	681b      	ldr	r3, [r3, #0]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000000 	.word	0x20000000

080043f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043fc:	f7ff fff0 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	0a9b      	lsrs	r3, r3, #10
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4903      	ldr	r1, [pc, #12]	; (800441c <HAL_RCC_GetPCLK1Freq+0x24>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	0800a7a0 	.word	0x0800a7a0

08004420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004424:	f7ff ffdc 	bl	80043e0 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0b5b      	lsrs	r3, r3, #13
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4903      	ldr	r1, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	0800a7a0 	.word	0x0800a7a0

08004448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800444c:	b0ae      	sub	sp, #184	; 0xb8
 800444e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800446e:	4bcb      	ldr	r3, [pc, #812]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b0c      	cmp	r3, #12
 8004478:	f200 8206 	bhi.w	8004888 <HAL_RCC_GetSysClockFreq+0x440>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_RCC_GetSysClockFreq+0x3c>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044b9 	.word	0x080044b9
 8004488:	08004889 	.word	0x08004889
 800448c:	08004889 	.word	0x08004889
 8004490:	08004889 	.word	0x08004889
 8004494:	080044c1 	.word	0x080044c1
 8004498:	08004889 	.word	0x08004889
 800449c:	08004889 	.word	0x08004889
 80044a0:	08004889 	.word	0x08004889
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	08004889 	.word	0x08004889
 80044ac:	08004889 	.word	0x08004889
 80044b0:	08004889 	.word	0x08004889
 80044b4:	080046b9 	.word	0x080046b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4bb9      	ldr	r3, [pc, #740]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80044ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80044be:	e1e7      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044c0:	4bb8      	ldr	r3, [pc, #736]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80044c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044c6:	e1e3      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c8:	4bb4      	ldr	r3, [pc, #720]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d4:	4bb1      	ldr	r3, [pc, #708]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d071      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e0:	4bae      	ldr	r3, [pc, #696]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	099b      	lsrs	r3, r3, #6
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044ec:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80044f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004506:	4622      	mov	r2, r4
 8004508:	462b      	mov	r3, r5
 800450a:	f04f 0000 	mov.w	r0, #0
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	0159      	lsls	r1, r3, #5
 8004514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004518:	0150      	lsls	r0, r2, #5
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4621      	mov	r1, r4
 8004520:	1a51      	subs	r1, r2, r1
 8004522:	6439      	str	r1, [r7, #64]	; 0x40
 8004524:	4629      	mov	r1, r5
 8004526:	eb63 0301 	sbc.w	r3, r3, r1
 800452a:	647b      	str	r3, [r7, #68]	; 0x44
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004538:	4649      	mov	r1, r9
 800453a:	018b      	lsls	r3, r1, #6
 800453c:	4641      	mov	r1, r8
 800453e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004542:	4641      	mov	r1, r8
 8004544:	018a      	lsls	r2, r1, #6
 8004546:	4641      	mov	r1, r8
 8004548:	1a51      	subs	r1, r2, r1
 800454a:	63b9      	str	r1, [r7, #56]	; 0x38
 800454c:	4649      	mov	r1, r9
 800454e:	eb63 0301 	sbc.w	r3, r3, r1
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004560:	4649      	mov	r1, r9
 8004562:	00cb      	lsls	r3, r1, #3
 8004564:	4641      	mov	r1, r8
 8004566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800456a:	4641      	mov	r1, r8
 800456c:	00ca      	lsls	r2, r1, #3
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	4603      	mov	r3, r0
 8004574:	4622      	mov	r2, r4
 8004576:	189b      	adds	r3, r3, r2
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
 800457a:	462b      	mov	r3, r5
 800457c:	460a      	mov	r2, r1
 800457e:	eb42 0303 	adc.w	r3, r2, r3
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004590:	4629      	mov	r1, r5
 8004592:	024b      	lsls	r3, r1, #9
 8004594:	4621      	mov	r1, r4
 8004596:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800459a:	4621      	mov	r1, r4
 800459c:	024a      	lsls	r2, r1, #9
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045b0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80045b4:	f7fc fae4 	bl	8000b80 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4613      	mov	r3, r2
 80045be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045c2:	e067      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c4:	4b75      	ldr	r3, [pc, #468]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80045d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80045de:	2300      	movs	r3, #0
 80045e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045e2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	f04f 0000 	mov.w	r0, #0
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	0159      	lsls	r1, r3, #5
 80045f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f8:	0150      	lsls	r0, r2, #5
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4621      	mov	r1, r4
 8004600:	1a51      	subs	r1, r2, r1
 8004602:	62b9      	str	r1, [r7, #40]	; 0x28
 8004604:	4629      	mov	r1, r5
 8004606:	eb63 0301 	sbc.w	r3, r3, r1
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004618:	4649      	mov	r1, r9
 800461a:	018b      	lsls	r3, r1, #6
 800461c:	4641      	mov	r1, r8
 800461e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004622:	4641      	mov	r1, r8
 8004624:	018a      	lsls	r2, r1, #6
 8004626:	4641      	mov	r1, r8
 8004628:	ebb2 0a01 	subs.w	sl, r2, r1
 800462c:	4649      	mov	r1, r9
 800462e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800463e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004646:	4692      	mov	sl, r2
 8004648:	469b      	mov	fp, r3
 800464a:	4623      	mov	r3, r4
 800464c:	eb1a 0303 	adds.w	r3, sl, r3
 8004650:	623b      	str	r3, [r7, #32]
 8004652:	462b      	mov	r3, r5
 8004654:	eb4b 0303 	adc.w	r3, fp, r3
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004666:	4629      	mov	r1, r5
 8004668:	028b      	lsls	r3, r1, #10
 800466a:	4621      	mov	r1, r4
 800466c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004670:	4621      	mov	r1, r4
 8004672:	028a      	lsls	r2, r1, #10
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800467c:	2200      	movs	r2, #0
 800467e:	673b      	str	r3, [r7, #112]	; 0x70
 8004680:	677a      	str	r2, [r7, #116]	; 0x74
 8004682:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004686:	f7fc fa7b 	bl	8000b80 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4613      	mov	r3, r2
 8004690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004694:	4b41      	ldr	r3, [pc, #260]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	3301      	adds	r3, #1
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80046a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046b6:	e0eb      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b8:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046c4:	4b35      	ldr	r3, [pc, #212]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d06b      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d0:	4b32      	ldr	r3, [pc, #200]	; (800479c <HAL_RCC_GetSysClockFreq+0x354>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	099b      	lsrs	r3, r3, #6
 80046d6:	2200      	movs	r2, #0
 80046d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	663b      	str	r3, [r7, #96]	; 0x60
 80046e4:	2300      	movs	r3, #0
 80046e6:	667b      	str	r3, [r7, #100]	; 0x64
 80046e8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80046ec:	4622      	mov	r2, r4
 80046ee:	462b      	mov	r3, r5
 80046f0:	f04f 0000 	mov.w	r0, #0
 80046f4:	f04f 0100 	mov.w	r1, #0
 80046f8:	0159      	lsls	r1, r3, #5
 80046fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046fe:	0150      	lsls	r0, r2, #5
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4621      	mov	r1, r4
 8004706:	1a51      	subs	r1, r2, r1
 8004708:	61b9      	str	r1, [r7, #24]
 800470a:	4629      	mov	r1, r5
 800470c:	eb63 0301 	sbc.w	r3, r3, r1
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800471e:	4659      	mov	r1, fp
 8004720:	018b      	lsls	r3, r1, #6
 8004722:	4651      	mov	r1, sl
 8004724:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004728:	4651      	mov	r1, sl
 800472a:	018a      	lsls	r2, r1, #6
 800472c:	4651      	mov	r1, sl
 800472e:	ebb2 0801 	subs.w	r8, r2, r1
 8004732:	4659      	mov	r1, fp
 8004734:	eb63 0901 	sbc.w	r9, r3, r1
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004744:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004748:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474c:	4690      	mov	r8, r2
 800474e:	4699      	mov	r9, r3
 8004750:	4623      	mov	r3, r4
 8004752:	eb18 0303 	adds.w	r3, r8, r3
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	462b      	mov	r3, r5
 800475a:	eb49 0303 	adc.w	r3, r9, r3
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800476c:	4629      	mov	r1, r5
 800476e:	024b      	lsls	r3, r1, #9
 8004770:	4621      	mov	r1, r4
 8004772:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004776:	4621      	mov	r1, r4
 8004778:	024a      	lsls	r2, r1, #9
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004782:	2200      	movs	r2, #0
 8004784:	65bb      	str	r3, [r7, #88]	; 0x58
 8004786:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004788:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800478c:	f7fc f9f8 	bl	8000b80 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800479a:	e065      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x420>
 800479c:	40023800 	.word	0x40023800
 80047a0:	00f42400 	.word	0x00f42400
 80047a4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a8:	4b3d      	ldr	r3, [pc, #244]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x458>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	2200      	movs	r2, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	4611      	mov	r1, r2
 80047b4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047b8:	653b      	str	r3, [r7, #80]	; 0x50
 80047ba:	2300      	movs	r3, #0
 80047bc:	657b      	str	r3, [r7, #84]	; 0x54
 80047be:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80047c2:	4642      	mov	r2, r8
 80047c4:	464b      	mov	r3, r9
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	0159      	lsls	r1, r3, #5
 80047d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d4:	0150      	lsls	r0, r2, #5
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4641      	mov	r1, r8
 80047dc:	1a51      	subs	r1, r2, r1
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	4649      	mov	r1, r9
 80047e2:	eb63 0301 	sbc.w	r3, r3, r1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80047f4:	4659      	mov	r1, fp
 80047f6:	018b      	lsls	r3, r1, #6
 80047f8:	4651      	mov	r1, sl
 80047fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047fe:	4651      	mov	r1, sl
 8004800:	018a      	lsls	r2, r1, #6
 8004802:	4651      	mov	r1, sl
 8004804:	1a54      	subs	r4, r2, r1
 8004806:	4659      	mov	r1, fp
 8004808:	eb63 0501 	sbc.w	r5, r3, r1
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	00eb      	lsls	r3, r5, #3
 8004816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800481a:	00e2      	lsls	r2, r4, #3
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	4643      	mov	r3, r8
 8004822:	18e3      	adds	r3, r4, r3
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	464b      	mov	r3, r9
 8004828:	eb45 0303 	adc.w	r3, r5, r3
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800483a:	4629      	mov	r1, r5
 800483c:	028b      	lsls	r3, r1, #10
 800483e:	4621      	mov	r1, r4
 8004840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004844:	4621      	mov	r1, r4
 8004846:	028a      	lsls	r2, r1, #10
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004850:	2200      	movs	r2, #0
 8004852:	64bb      	str	r3, [r7, #72]	; 0x48
 8004854:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004856:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800485a:	f7fc f991 	bl	8000b80 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4613      	mov	r3, r2
 8004864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x458>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	0f1b      	lsrs	r3, r3, #28
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800487a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004886:	e003      	b.n	8004890 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800488a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800488e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004894:	4618      	mov	r0, r3
 8004896:	37b8      	adds	r7, #184	; 0xb8
 8004898:	46bd      	mov	sp, r7
 800489a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800
 80048a4:	00f42400 	.word	0x00f42400

080048a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e28d      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8083 	beq.w	80049ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048c8:	4b94      	ldr	r3, [pc, #592]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 030c 	and.w	r3, r3, #12
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d019      	beq.n	8004908 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048d4:	4b91      	ldr	r3, [pc, #580]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d106      	bne.n	80048ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048e0:	4b8e      	ldr	r3, [pc, #568]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ec:	d00c      	beq.n	8004908 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ee:	4b8b      	ldr	r3, [pc, #556]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d112      	bne.n	8004920 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fa:	4b88      	ldr	r3, [pc, #544]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004906:	d10b      	bne.n	8004920 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004908:	4b84      	ldr	r3, [pc, #528]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d05b      	beq.n	80049cc <HAL_RCC_OscConfig+0x124>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d157      	bne.n	80049cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e25a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d106      	bne.n	8004938 <HAL_RCC_OscConfig+0x90>
 800492a:	4b7c      	ldr	r3, [pc, #496]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a7b      	ldr	r2, [pc, #492]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e01d      	b.n	8004974 <HAL_RCC_OscConfig+0xcc>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004940:	d10c      	bne.n	800495c <HAL_RCC_OscConfig+0xb4>
 8004942:	4b76      	ldr	r3, [pc, #472]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a75      	ldr	r2, [pc, #468]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4b73      	ldr	r3, [pc, #460]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a72      	ldr	r2, [pc, #456]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e00b      	b.n	8004974 <HAL_RCC_OscConfig+0xcc>
 800495c:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a6e      	ldr	r2, [pc, #440]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	4b6c      	ldr	r3, [pc, #432]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6b      	ldr	r2, [pc, #428]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 800496e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d013      	beq.n	80049a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fe fc04 	bl	8003188 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004984:	f7fe fc00 	bl	8003188 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e21f      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0xdc>
 80049a2:	e014      	b.n	80049ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fe fbf0 	bl	8003188 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049ac:	f7fe fbec 	bl	8003188 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	; 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e20b      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049be:	4b57      	ldr	r3, [pc, #348]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x104>
 80049ca:	e000      	b.n	80049ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d06f      	beq.n	8004aba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049da:	4b50      	ldr	r3, [pc, #320]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d017      	beq.n	8004a16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049e6:	4b4d      	ldr	r3, [pc, #308]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d105      	bne.n	80049fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049f2:	4b4a      	ldr	r3, [pc, #296]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fe:	4b47      	ldr	r3, [pc, #284]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d11c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a0a:	4b44      	ldr	r3, [pc, #272]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d116      	bne.n	8004a44 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a16:	4b41      	ldr	r3, [pc, #260]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_RCC_OscConfig+0x186>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d001      	beq.n	8004a2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e1d3      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2e:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4937      	ldr	r1, [pc, #220]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a42:	e03a      	b.n	8004aba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a4c:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_RCC_OscConfig+0x278>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fe fb99 	bl	8003188 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a5a:	f7fe fb95 	bl	8003188 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e1b4      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6c:	4b2b      	ldr	r3, [pc, #172]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a78:	4b28      	ldr	r3, [pc, #160]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4925      	ldr	r1, [pc, #148]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]
 8004a8c:	e015      	b.n	8004aba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a8e:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <HAL_RCC_OscConfig+0x278>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fe fb78 	bl	8003188 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a9c:	f7fe fb74 	bl	8003188 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e193      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aae:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d036      	beq.n	8004b34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fe fb58 	bl	8003188 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004adc:	f7fe fb54 	bl	8003188 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e173      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_OscConfig+0x274>)
 8004af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x234>
 8004afa:	e01b      	b.n	8004b34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_RCC_OscConfig+0x27c>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fe fb41 	bl	8003188 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b08:	e00e      	b.n	8004b28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b0a:	f7fe fb3d 	bl	8003188 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d907      	bls.n	8004b28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e15c      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	42470000 	.word	0x42470000
 8004b24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	4b8a      	ldr	r3, [pc, #552]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ea      	bne.n	8004b0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8097 	beq.w	8004c70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b42:	2300      	movs	r3, #0
 8004b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b46:	4b83      	ldr	r3, [pc, #524]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10f      	bne.n	8004b72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	4a7e      	ldr	r2, [pc, #504]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b60:	6413      	str	r3, [r2, #64]	; 0x40
 8004b62:	4b7c      	ldr	r3, [pc, #496]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b72:	4b79      	ldr	r3, [pc, #484]	; (8004d58 <HAL_RCC_OscConfig+0x4b0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d118      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b7e:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <HAL_RCC_OscConfig+0x4b0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a75      	ldr	r2, [pc, #468]	; (8004d58 <HAL_RCC_OscConfig+0x4b0>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b8a:	f7fe fafd 	bl	8003188 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b92:	f7fe faf9 	bl	8003188 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e118      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	4b6c      	ldr	r3, [pc, #432]	; (8004d58 <HAL_RCC_OscConfig+0x4b0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d106      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x31e>
 8004bb8:	4b66      	ldr	r3, [pc, #408]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	4a65      	ldr	r2, [pc, #404]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc4:	e01c      	b.n	8004c00 <HAL_RCC_OscConfig+0x358>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b05      	cmp	r3, #5
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x340>
 8004bce:	4b61      	ldr	r3, [pc, #388]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4a60      	ldr	r2, [pc, #384]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bda:	4b5e      	ldr	r3, [pc, #376]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	4a5d      	ldr	r2, [pc, #372]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	6713      	str	r3, [r2, #112]	; 0x70
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0x358>
 8004be8:	4b5a      	ldr	r3, [pc, #360]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4a59      	ldr	r2, [pc, #356]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf4:	4b57      	ldr	r3, [pc, #348]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a56      	ldr	r2, [pc, #344]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004bfa:	f023 0304 	bic.w	r3, r3, #4
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d015      	beq.n	8004c34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fe fabe 	bl	8003188 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fe faba 	bl	8003188 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0d7      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c26:	4b4b      	ldr	r3, [pc, #300]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0ee      	beq.n	8004c10 <HAL_RCC_OscConfig+0x368>
 8004c32:	e014      	b.n	8004c5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fe faa8 	bl	8003188 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c3c:	f7fe faa4 	bl	8003188 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e0c1      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c52:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1ee      	bne.n	8004c3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d105      	bne.n	8004c70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c64:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	4a3a      	ldr	r2, [pc, #232]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80ad 	beq.w	8004dd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c7a:	4b36      	ldr	r3, [pc, #216]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d060      	beq.n	8004d48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d145      	bne.n	8004d1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8e:	4b33      	ldr	r3, [pc, #204]	; (8004d5c <HAL_RCC_OscConfig+0x4b4>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fe fa78 	bl	8003188 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fe fa74 	bl	8003188 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e093      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cae:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f0      	bne.n	8004c9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	019b      	lsls	r3, r3, #6
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	085b      	lsrs	r3, r3, #1
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	041b      	lsls	r3, r3, #16
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	061b      	lsls	r3, r3, #24
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	071b      	lsls	r3, r3, #28
 8004ce6:	491b      	ldr	r1, [pc, #108]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cec:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <HAL_RCC_OscConfig+0x4b4>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7fe fa49 	bl	8003188 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fe fa45 	bl	8003188 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e064      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x452>
 8004d18:	e05c      	b.n	8004dd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCC_OscConfig+0x4b4>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fe fa32 	bl	8003188 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d28:	f7fe fa2e 	bl	8003188 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e04d      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_RCC_OscConfig+0x4ac>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x480>
 8004d46:	e045      	b.n	8004dd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e040      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d60:	4b1f      	ldr	r3, [pc, #124]	; (8004de0 <HAL_RCC_OscConfig+0x538>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d030      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d129      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d122      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d90:	4013      	ands	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d119      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	3b01      	subs	r3, #1
 8004daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d10f      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d107      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e041      	b.n	8004e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd ff7e 	bl	8002d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 fc7a 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d001      	beq.n	8004e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e04e      	b.n	8004f3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a23      	ldr	r2, [pc, #140]	; (8004f48 <HAL_TIM_Base_Start_IT+0xc4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d01d      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1f      	ldr	r2, [pc, #124]	; (8004f4c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1c      	ldr	r2, [pc, #112]	; (8004f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1b      	ldr	r2, [pc, #108]	; (8004f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIM_Base_Start_IT+0x80>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d111      	bne.n	8004f28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d010      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	e007      	b.n	8004f38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40010400 	.word	0x40010400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40001800 	.word	0x40001800

08004f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e041      	b.n	8004ffa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f839 	bl	8005002 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f000 fbba 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <HAL_TIM_PWM_Start+0x24>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e022      	b.n	8005082 <HAL_TIM_PWM_Start+0x6a>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2b04      	cmp	r3, #4
 8005040:	d109      	bne.n	8005056 <HAL_TIM_PWM_Start+0x3e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e015      	b.n	8005082 <HAL_TIM_PWM_Start+0x6a>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d109      	bne.n	8005070 <HAL_TIM_PWM_Start+0x58>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e008      	b.n	8005082 <HAL_TIM_PWM_Start+0x6a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b01      	cmp	r3, #1
 800507a:	bf14      	ite	ne
 800507c:	2301      	movne	r3, #1
 800507e:	2300      	moveq	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e07c      	b.n	8005184 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_TIM_PWM_Start+0x82>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005098:	e013      	b.n	80050c2 <HAL_TIM_PWM_Start+0xaa>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d104      	bne.n	80050aa <HAL_TIM_PWM_Start+0x92>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a8:	e00b      	b.n	80050c2 <HAL_TIM_PWM_Start+0xaa>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d104      	bne.n	80050ba <HAL_TIM_PWM_Start+0xa2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b8:	e003      	b.n	80050c2 <HAL_TIM_PWM_Start+0xaa>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2201      	movs	r2, #1
 80050c8:	6839      	ldr	r1, [r7, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fe10 	bl	8005cf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2d      	ldr	r2, [pc, #180]	; (800518c <HAL_TIM_PWM_Start+0x174>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIM_PWM_Start+0xcc>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <HAL_TIM_PWM_Start+0x178>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d101      	bne.n	80050e8 <HAL_TIM_PWM_Start+0xd0>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_TIM_PWM_Start+0xd2>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a22      	ldr	r2, [pc, #136]	; (800518c <HAL_TIM_PWM_Start+0x174>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_TIM_PWM_Start+0x136>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005110:	d01d      	beq.n	800514e <HAL_TIM_PWM_Start+0x136>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <HAL_TIM_PWM_Start+0x17c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_TIM_PWM_Start+0x136>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1d      	ldr	r2, [pc, #116]	; (8005198 <HAL_TIM_PWM_Start+0x180>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_TIM_PWM_Start+0x136>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1c      	ldr	r2, [pc, #112]	; (800519c <HAL_TIM_PWM_Start+0x184>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIM_PWM_Start+0x136>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a16      	ldr	r2, [pc, #88]	; (8005190 <HAL_TIM_PWM_Start+0x178>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_TIM_PWM_Start+0x136>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <HAL_TIM_PWM_Start+0x188>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIM_PWM_Start+0x136>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <HAL_TIM_PWM_Start+0x18c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d111      	bne.n	8005172 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b06      	cmp	r3, #6
 800515e:	d010      	beq.n	8005182 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	e007      	b.n	8005182 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0201 	orr.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40010000 	.word	0x40010000
 8005190:	40010400 	.word	0x40010400
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40001800 	.word	0x40001800

080051a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d122      	bne.n	8005204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0202 	mvn.w	r2, #2
 80051d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa77 	bl	80056de <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa69 	bl	80056ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fa7a 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b04      	cmp	r3, #4
 8005210:	d122      	bne.n	8005258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d11b      	bne.n	8005258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0204 	mvn.w	r2, #4
 8005228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fa4d 	bl	80056de <HAL_TIM_IC_CaptureCallback>
 8005244:	e005      	b.n	8005252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa3f 	bl	80056ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa50 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b08      	cmp	r3, #8
 8005264:	d122      	bne.n	80052ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d11b      	bne.n	80052ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0208 	mvn.w	r2, #8
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2204      	movs	r2, #4
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa23 	bl	80056de <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa15 	bl	80056ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fa26 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d122      	bne.n	8005300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d11b      	bne.n	8005300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0210 	mvn.w	r2, #16
 80052d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2208      	movs	r2, #8
 80052d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9f9 	bl	80056de <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9eb 	bl	80056ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f9fc 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0201 	mvn.w	r2, #1
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc feba 	bl	80020a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b80      	cmp	r3, #128	; 0x80
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fd78 	bl	8005e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9c1 	bl	8005706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b20      	cmp	r3, #32
 8005390:	d10e      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b20      	cmp	r3, #32
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0220 	mvn.w	r2, #32
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fd42 	bl	8005e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e0ae      	b.n	8005534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b0c      	cmp	r3, #12
 80053e2:	f200 809f 	bhi.w	8005524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005421 	.word	0x08005421
 80053f0:	08005525 	.word	0x08005525
 80053f4:	08005525 	.word	0x08005525
 80053f8:	08005525 	.word	0x08005525
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005525 	.word	0x08005525
 8005404:	08005525 	.word	0x08005525
 8005408:	08005525 	.word	0x08005525
 800540c:	080054a3 	.word	0x080054a3
 8005410:	08005525 	.word	0x08005525
 8005414:	08005525 	.word	0x08005525
 8005418:	08005525 	.word	0x08005525
 800541c:	080054e3 	.word	0x080054e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68b9      	ldr	r1, [r7, #8]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fa18 	bl	800585c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0208 	orr.w	r2, r2, #8
 800543a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0204 	bic.w	r2, r2, #4
 800544a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6999      	ldr	r1, [r3, #24]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	619a      	str	r2, [r3, #24]
      break;
 800545e:	e064      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fa68 	bl	800593c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	021a      	lsls	r2, r3, #8
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	619a      	str	r2, [r3, #24]
      break;
 80054a0:	e043      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fabd 	bl	8005a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0208 	orr.w	r2, r2, #8
 80054bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69da      	ldr	r2, [r3, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0204 	bic.w	r2, r2, #4
 80054cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69d9      	ldr	r1, [r3, #28]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	61da      	str	r2, [r3, #28]
      break;
 80054e0:	e023      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fb11 	bl	8005b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	021a      	lsls	r2, r3, #8
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	61da      	str	r2, [r3, #28]
      break;
 8005522:	e002      	b.n	800552a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
      break;
 8005528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005532:	7dfb      	ldrb	r3, [r7, #23]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005550:	2b01      	cmp	r3, #1
 8005552:	d101      	bne.n	8005558 <HAL_TIM_ConfigClockSource+0x1c>
 8005554:	2302      	movs	r3, #2
 8005556:	e0b4      	b.n	80056c2 <HAL_TIM_ConfigClockSource+0x186>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005590:	d03e      	beq.n	8005610 <HAL_TIM_ConfigClockSource+0xd4>
 8005592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005596:	f200 8087 	bhi.w	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	f000 8086 	beq.w	80056ae <HAL_TIM_ConfigClockSource+0x172>
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a6:	d87f      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b70      	cmp	r3, #112	; 0x70
 80055aa:	d01a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0xa6>
 80055ac:	2b70      	cmp	r3, #112	; 0x70
 80055ae:	d87b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b60      	cmp	r3, #96	; 0x60
 80055b2:	d050      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x11a>
 80055b4:	2b60      	cmp	r3, #96	; 0x60
 80055b6:	d877      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b50      	cmp	r3, #80	; 0x50
 80055ba:	d03c      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0xfa>
 80055bc:	2b50      	cmp	r3, #80	; 0x50
 80055be:	d873      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b40      	cmp	r3, #64	; 0x40
 80055c2:	d058      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0x13a>
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d86f      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b30      	cmp	r3, #48	; 0x30
 80055ca:	d064      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055cc:	2b30      	cmp	r3, #48	; 0x30
 80055ce:	d86b      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d060      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d867      	bhi.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d05c      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d05a      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x15a>
 80055e0:	e062      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6899      	ldr	r1, [r3, #8]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f000 fb5d 	bl	8005cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	609a      	str	r2, [r3, #8]
      break;
 800560e:	e04f      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	6899      	ldr	r1, [r3, #8]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f000 fb46 	bl	8005cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005632:	609a      	str	r2, [r3, #8]
      break;
 8005634:	e03c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f000 faba 	bl	8005bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2150      	movs	r1, #80	; 0x50
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fb13 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 8005654:	e02c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	461a      	mov	r2, r3
 8005664:	f000 fad9 	bl	8005c1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2160      	movs	r1, #96	; 0x60
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fb03 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 8005674:	e01c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	461a      	mov	r2, r3
 8005684:	f000 fa9a 	bl	8005bbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2140      	movs	r1, #64	; 0x40
 800568e:	4618      	mov	r0, r3
 8005690:	f000 faf3 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 8005694:	e00c      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f000 faea 	bl	8005c7a <TIM_ITRx_SetConfig>
      break;
 80056a6:	e003      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
      break;
 80056ac:	e000      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a40      	ldr	r2, [pc, #256]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d00f      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3d      	ldr	r2, [pc, #244]	; (8005834 <TIM_Base_SetConfig+0x118>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3c      	ldr	r2, [pc, #240]	; (8005838 <TIM_Base_SetConfig+0x11c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3b      	ldr	r2, [pc, #236]	; (800583c <TIM_Base_SetConfig+0x120>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3a      	ldr	r2, [pc, #232]	; (8005840 <TIM_Base_SetConfig+0x124>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d027      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <TIM_Base_SetConfig+0x118>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d023      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2b      	ldr	r2, [pc, #172]	; (8005838 <TIM_Base_SetConfig+0x11c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01f      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2a      	ldr	r2, [pc, #168]	; (800583c <TIM_Base_SetConfig+0x120>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a29      	ldr	r2, [pc, #164]	; (8005840 <TIM_Base_SetConfig+0x124>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d017      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a28      	ldr	r2, [pc, #160]	; (8005844 <TIM_Base_SetConfig+0x128>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a27      	ldr	r2, [pc, #156]	; (8005848 <TIM_Base_SetConfig+0x12c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00f      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a26      	ldr	r2, [pc, #152]	; (800584c <TIM_Base_SetConfig+0x130>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a25      	ldr	r2, [pc, #148]	; (8005850 <TIM_Base_SetConfig+0x134>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a24      	ldr	r2, [pc, #144]	; (8005854 <TIM_Base_SetConfig+0x138>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a23      	ldr	r2, [pc, #140]	; (8005858 <TIM_Base_SetConfig+0x13c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0xf8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0c      	ldr	r2, [pc, #48]	; (8005840 <TIM_Base_SetConfig+0x124>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40010400 	.word	0x40010400
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400
 800584c:	40014800 	.word	0x40014800
 8005850:	40001800 	.word	0x40001800
 8005854:	40001c00 	.word	0x40001c00
 8005858:	40002000 	.word	0x40002000

0800585c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b480      	push	{r7}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	f023 0201 	bic.w	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 0302 	bic.w	r3, r3, #2
 80058a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a20      	ldr	r2, [pc, #128]	; (8005934 <TIM_OC1_SetConfig+0xd8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_OC1_SetConfig+0x64>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a1f      	ldr	r2, [pc, #124]	; (8005938 <TIM_OC1_SetConfig+0xdc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10c      	bne.n	80058da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0308 	bic.w	r3, r3, #8
 80058c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 0304 	bic.w	r3, r3, #4
 80058d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a15      	ldr	r2, [pc, #84]	; (8005934 <TIM_OC1_SetConfig+0xd8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_OC1_SetConfig+0x8e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a14      	ldr	r2, [pc, #80]	; (8005938 <TIM_OC1_SetConfig+0xdc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d111      	bne.n	800590e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	621a      	str	r2, [r3, #32]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400

0800593c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f023 0210 	bic.w	r2, r3, #16
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f023 0320 	bic.w	r3, r3, #32
 8005986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <TIM_OC2_SetConfig+0xe4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC2_SetConfig+0x68>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <TIM_OC2_SetConfig+0xe8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d10d      	bne.n	80059c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <TIM_OC2_SetConfig+0xe4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC2_SetConfig+0x94>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <TIM_OC2_SetConfig+0xe8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d113      	bne.n	80059f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400

08005a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a21      	ldr	r2, [pc, #132]	; (8005b08 <TIM_OC3_SetConfig+0xe0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_OC3_SetConfig+0x66>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <TIM_OC3_SetConfig+0xe4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d10d      	bne.n	8005aaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a16      	ldr	r2, [pc, #88]	; (8005b08 <TIM_OC3_SetConfig+0xe0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_OC3_SetConfig+0x92>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a15      	ldr	r2, [pc, #84]	; (8005b0c <TIM_OC3_SetConfig+0xe4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d113      	bne.n	8005ae2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	011b      	lsls	r3, r3, #4
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	621a      	str	r2, [r3, #32]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40010400 	.word	0x40010400

08005b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	031b      	lsls	r3, r3, #12
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <TIM_OC4_SetConfig+0xa4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC4_SetConfig+0x68>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a11      	ldr	r2, [pc, #68]	; (8005bb8 <TIM_OC4_SetConfig+0xa8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d109      	bne.n	8005b8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	019b      	lsls	r3, r3, #6
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40010400 	.word	0x40010400

08005bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	f023 0201 	bic.w	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f023 030a 	bic.w	r3, r3, #10
 8005bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0210 	bic.w	r2, r3, #16
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	031b      	lsls	r3, r3, #12
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f043 0307 	orr.w	r3, r3, #7
 8005c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	609a      	str	r2, [r3, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	021a      	lsls	r2, r3, #8
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	609a      	str	r2, [r3, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	2201      	movs	r2, #1
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1a      	ldr	r2, [r3, #32]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	43db      	mvns	r3, r3
 8005d12:	401a      	ands	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1a      	ldr	r2, [r3, #32]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 031f 	and.w	r3, r3, #31
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	fa01 f303 	lsl.w	r3, r1, r3
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e05a      	b.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d022      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da0:	d01d      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1d      	ldr	r2, [pc, #116]	; (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d018      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1b      	ldr	r2, [pc, #108]	; (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a18      	ldr	r2, [pc, #96]	; (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d10c      	bne.n	8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40010000 	.word	0x40010000
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40000800 	.word	0x40000800
 8005e24:	40000c00 	.word	0x40000c00
 8005e28:	40010400 	.word	0x40010400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40001800 	.word	0x40001800

08005e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e03f      	b.n	8005eee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fd f8a8 	bl	8002fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2224      	movs	r2, #36	; 0x24
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f829 	bl	8005ef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005efc:	b0c0      	sub	sp, #256	; 0x100
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	68d9      	ldr	r1, [r3, #12]
 8005f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	ea40 0301 	orr.w	r3, r0, r1
 8005f20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f50:	f021 010c 	bic.w	r1, r1, #12
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	6999      	ldr	r1, [r3, #24]
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	ea40 0301 	orr.w	r3, r0, r1
 8005f7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4b8f      	ldr	r3, [pc, #572]	; (80061c4 <UART_SetConfig+0x2cc>)
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d005      	beq.n	8005f98 <UART_SetConfig+0xa0>
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b8d      	ldr	r3, [pc, #564]	; (80061c8 <UART_SetConfig+0x2d0>)
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d104      	bne.n	8005fa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f98:	f7fe fa42 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8005f9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fa0:	e003      	b.n	8005faa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fa2:	f7fe fa29 	bl	80043f8 <HAL_RCC_GetPCLK1Freq>
 8005fa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb4:	f040 810c 	bne.w	80061d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005fca:	4622      	mov	r2, r4
 8005fcc:	462b      	mov	r3, r5
 8005fce:	1891      	adds	r1, r2, r2
 8005fd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fd2:	415b      	adcs	r3, r3
 8005fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fda:	4621      	mov	r1, r4
 8005fdc:	eb12 0801 	adds.w	r8, r2, r1
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	eb43 0901 	adc.w	r9, r3, r1
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffa:	4690      	mov	r8, r2
 8005ffc:	4699      	mov	r9, r3
 8005ffe:	4623      	mov	r3, r4
 8006000:	eb18 0303 	adds.w	r3, r8, r3
 8006004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006008:	462b      	mov	r3, r5
 800600a:	eb49 0303 	adc.w	r3, r9, r3
 800600e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800601e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006022:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006026:	460b      	mov	r3, r1
 8006028:	18db      	adds	r3, r3, r3
 800602a:	653b      	str	r3, [r7, #80]	; 0x50
 800602c:	4613      	mov	r3, r2
 800602e:	eb42 0303 	adc.w	r3, r2, r3
 8006032:	657b      	str	r3, [r7, #84]	; 0x54
 8006034:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800603c:	f7fa fda0 	bl	8000b80 <__aeabi_uldivmod>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4b61      	ldr	r3, [pc, #388]	; (80061cc <UART_SetConfig+0x2d4>)
 8006046:	fba3 2302 	umull	r2, r3, r3, r2
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	011c      	lsls	r4, r3, #4
 800604e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006058:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800605c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	1891      	adds	r1, r2, r2
 8006066:	64b9      	str	r1, [r7, #72]	; 0x48
 8006068:	415b      	adcs	r3, r3
 800606a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006070:	4641      	mov	r1, r8
 8006072:	eb12 0a01 	adds.w	sl, r2, r1
 8006076:	4649      	mov	r1, r9
 8006078:	eb43 0b01 	adc.w	fp, r3, r1
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006088:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800608c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006090:	4692      	mov	sl, r2
 8006092:	469b      	mov	fp, r3
 8006094:	4643      	mov	r3, r8
 8006096:	eb1a 0303 	adds.w	r3, sl, r3
 800609a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800609e:	464b      	mov	r3, r9
 80060a0:	eb4b 0303 	adc.w	r3, fp, r3
 80060a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060bc:	460b      	mov	r3, r1
 80060be:	18db      	adds	r3, r3, r3
 80060c0:	643b      	str	r3, [r7, #64]	; 0x40
 80060c2:	4613      	mov	r3, r2
 80060c4:	eb42 0303 	adc.w	r3, r2, r3
 80060c8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060d2:	f7fa fd55 	bl	8000b80 <__aeabi_uldivmod>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4611      	mov	r1, r2
 80060dc:	4b3b      	ldr	r3, [pc, #236]	; (80061cc <UART_SetConfig+0x2d4>)
 80060de:	fba3 2301 	umull	r2, r3, r3, r1
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	2264      	movs	r2, #100	; 0x64
 80060e6:	fb02 f303 	mul.w	r3, r2, r3
 80060ea:	1acb      	subs	r3, r1, r3
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060f2:	4b36      	ldr	r3, [pc, #216]	; (80061cc <UART_SetConfig+0x2d4>)
 80060f4:	fba3 2302 	umull	r2, r3, r3, r2
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006100:	441c      	add	r4, r3
 8006102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800610c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006110:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	1891      	adds	r1, r2, r2
 800611a:	63b9      	str	r1, [r7, #56]	; 0x38
 800611c:	415b      	adcs	r3, r3
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006124:	4641      	mov	r1, r8
 8006126:	1851      	adds	r1, r2, r1
 8006128:	6339      	str	r1, [r7, #48]	; 0x30
 800612a:	4649      	mov	r1, r9
 800612c:	414b      	adcs	r3, r1
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800613c:	4659      	mov	r1, fp
 800613e:	00cb      	lsls	r3, r1, #3
 8006140:	4651      	mov	r1, sl
 8006142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006146:	4651      	mov	r1, sl
 8006148:	00ca      	lsls	r2, r1, #3
 800614a:	4610      	mov	r0, r2
 800614c:	4619      	mov	r1, r3
 800614e:	4603      	mov	r3, r0
 8006150:	4642      	mov	r2, r8
 8006152:	189b      	adds	r3, r3, r2
 8006154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006158:	464b      	mov	r3, r9
 800615a:	460a      	mov	r2, r1
 800615c:	eb42 0303 	adc.w	r3, r2, r3
 8006160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006170:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006178:	460b      	mov	r3, r1
 800617a:	18db      	adds	r3, r3, r3
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
 800617e:	4613      	mov	r3, r2
 8006180:	eb42 0303 	adc.w	r3, r2, r3
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800618a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800618e:	f7fa fcf7 	bl	8000b80 <__aeabi_uldivmod>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <UART_SetConfig+0x2d4>)
 8006198:	fba3 1302 	umull	r1, r3, r3, r2
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	2164      	movs	r1, #100	; 0x64
 80061a0:	fb01 f303 	mul.w	r3, r1, r3
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	3332      	adds	r3, #50	; 0x32
 80061aa:	4a08      	ldr	r2, [pc, #32]	; (80061cc <UART_SetConfig+0x2d4>)
 80061ac:	fba2 2303 	umull	r2, r3, r2, r3
 80061b0:	095b      	lsrs	r3, r3, #5
 80061b2:	f003 0207 	and.w	r2, r3, #7
 80061b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4422      	add	r2, r4
 80061be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061c0:	e105      	b.n	80063ce <UART_SetConfig+0x4d6>
 80061c2:	bf00      	nop
 80061c4:	40011000 	.word	0x40011000
 80061c8:	40011400 	.word	0x40011400
 80061cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061e2:	4642      	mov	r2, r8
 80061e4:	464b      	mov	r3, r9
 80061e6:	1891      	adds	r1, r2, r2
 80061e8:	6239      	str	r1, [r7, #32]
 80061ea:	415b      	adcs	r3, r3
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
 80061ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061f2:	4641      	mov	r1, r8
 80061f4:	1854      	adds	r4, r2, r1
 80061f6:	4649      	mov	r1, r9
 80061f8:	eb43 0501 	adc.w	r5, r3, r1
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	00eb      	lsls	r3, r5, #3
 8006206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800620a:	00e2      	lsls	r2, r4, #3
 800620c:	4614      	mov	r4, r2
 800620e:	461d      	mov	r5, r3
 8006210:	4643      	mov	r3, r8
 8006212:	18e3      	adds	r3, r4, r3
 8006214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006218:	464b      	mov	r3, r9
 800621a:	eb45 0303 	adc.w	r3, r5, r3
 800621e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800622e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800623e:	4629      	mov	r1, r5
 8006240:	008b      	lsls	r3, r1, #2
 8006242:	4621      	mov	r1, r4
 8006244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006248:	4621      	mov	r1, r4
 800624a:	008a      	lsls	r2, r1, #2
 800624c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006250:	f7fa fc96 	bl	8000b80 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4b60      	ldr	r3, [pc, #384]	; (80063dc <UART_SetConfig+0x4e4>)
 800625a:	fba3 2302 	umull	r2, r3, r3, r2
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	011c      	lsls	r4, r3, #4
 8006262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006266:	2200      	movs	r2, #0
 8006268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800626c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006270:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	1891      	adds	r1, r2, r2
 800627a:	61b9      	str	r1, [r7, #24]
 800627c:	415b      	adcs	r3, r3
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006284:	4641      	mov	r1, r8
 8006286:	1851      	adds	r1, r2, r1
 8006288:	6139      	str	r1, [r7, #16]
 800628a:	4649      	mov	r1, r9
 800628c:	414b      	adcs	r3, r1
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800629c:	4659      	mov	r1, fp
 800629e:	00cb      	lsls	r3, r1, #3
 80062a0:	4651      	mov	r1, sl
 80062a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a6:	4651      	mov	r1, sl
 80062a8:	00ca      	lsls	r2, r1, #3
 80062aa:	4610      	mov	r0, r2
 80062ac:	4619      	mov	r1, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	4642      	mov	r2, r8
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062b8:	464b      	mov	r3, r9
 80062ba:	460a      	mov	r2, r1
 80062bc:	eb42 0303 	adc.w	r3, r2, r3
 80062c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062d0:	f04f 0200 	mov.w	r2, #0
 80062d4:	f04f 0300 	mov.w	r3, #0
 80062d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062dc:	4649      	mov	r1, r9
 80062de:	008b      	lsls	r3, r1, #2
 80062e0:	4641      	mov	r1, r8
 80062e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e6:	4641      	mov	r1, r8
 80062e8:	008a      	lsls	r2, r1, #2
 80062ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062ee:	f7fa fc47 	bl	8000b80 <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4b39      	ldr	r3, [pc, #228]	; (80063dc <UART_SetConfig+0x4e4>)
 80062f8:	fba3 1302 	umull	r1, r3, r3, r2
 80062fc:	095b      	lsrs	r3, r3, #5
 80062fe:	2164      	movs	r1, #100	; 0x64
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	3332      	adds	r3, #50	; 0x32
 800630a:	4a34      	ldr	r2, [pc, #208]	; (80063dc <UART_SetConfig+0x4e4>)
 800630c:	fba2 2303 	umull	r2, r3, r2, r3
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006316:	441c      	add	r4, r3
 8006318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800631c:	2200      	movs	r2, #0
 800631e:	673b      	str	r3, [r7, #112]	; 0x70
 8006320:	677a      	str	r2, [r7, #116]	; 0x74
 8006322:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006326:	4642      	mov	r2, r8
 8006328:	464b      	mov	r3, r9
 800632a:	1891      	adds	r1, r2, r2
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	415b      	adcs	r3, r3
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006336:	4641      	mov	r1, r8
 8006338:	1851      	adds	r1, r2, r1
 800633a:	6039      	str	r1, [r7, #0]
 800633c:	4649      	mov	r1, r9
 800633e:	414b      	adcs	r3, r1
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800634e:	4659      	mov	r1, fp
 8006350:	00cb      	lsls	r3, r1, #3
 8006352:	4651      	mov	r1, sl
 8006354:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006358:	4651      	mov	r1, sl
 800635a:	00ca      	lsls	r2, r1, #3
 800635c:	4610      	mov	r0, r2
 800635e:	4619      	mov	r1, r3
 8006360:	4603      	mov	r3, r0
 8006362:	4642      	mov	r2, r8
 8006364:	189b      	adds	r3, r3, r2
 8006366:	66bb      	str	r3, [r7, #104]	; 0x68
 8006368:	464b      	mov	r3, r9
 800636a:	460a      	mov	r2, r1
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	663b      	str	r3, [r7, #96]	; 0x60
 800637c:	667a      	str	r2, [r7, #100]	; 0x64
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800638a:	4649      	mov	r1, r9
 800638c:	008b      	lsls	r3, r1, #2
 800638e:	4641      	mov	r1, r8
 8006390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006394:	4641      	mov	r1, r8
 8006396:	008a      	lsls	r2, r1, #2
 8006398:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800639c:	f7fa fbf0 	bl	8000b80 <__aeabi_uldivmod>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4b0d      	ldr	r3, [pc, #52]	; (80063dc <UART_SetConfig+0x4e4>)
 80063a6:	fba3 1302 	umull	r1, r3, r3, r2
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	2164      	movs	r1, #100	; 0x64
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	3332      	adds	r3, #50	; 0x32
 80063b8:	4a08      	ldr	r2, [pc, #32]	; (80063dc <UART_SetConfig+0x4e4>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	f003 020f 	and.w	r2, r3, #15
 80063c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4422      	add	r2, r4
 80063cc:	609a      	str	r2, [r3, #8]
}
 80063ce:	bf00      	nop
 80063d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063d4:	46bd      	mov	sp, r7
 80063d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063da:	bf00      	nop
 80063dc:	51eb851f 	.word	0x51eb851f

080063e0 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	2101      	movs	r1, #1
 80063ee:	4828      	ldr	r0, [pc, #160]	; (8006490 <network_configure_activations+0xb0>)
 80063f0:	f000 facc 	bl	800698c <ai_platform_get_activations_map>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d03f      	beq.n	800647a <network_configure_activations+0x9a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80063fa:	4b25      	ldr	r3, [pc, #148]	; (8006490 <network_configure_activations+0xb0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a25      	ldr	r2, [pc, #148]	; (8006494 <network_configure_activations+0xb4>)
 8006400:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006402:	4b23      	ldr	r3, [pc, #140]	; (8006490 <network_configure_activations+0xb0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a23      	ldr	r2, [pc, #140]	; (8006494 <network_configure_activations+0xb4>)
 8006408:	60d3      	str	r3, [r2, #12]
    
    dense_18_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 48);
 800640a:	4b21      	ldr	r3, [pc, #132]	; (8006490 <network_configure_activations+0xb0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3330      	adds	r3, #48	; 0x30
 8006410:	4a21      	ldr	r2, [pc, #132]	; (8006498 <network_configure_activations+0xb8>)
 8006412:	6093      	str	r3, [r2, #8]
    dense_18_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 48);
 8006414:	4b1e      	ldr	r3, [pc, #120]	; (8006490 <network_configure_activations+0xb0>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3330      	adds	r3, #48	; 0x30
 800641a:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <network_configure_activations+0xb8>)
 800641c:	60d3      	str	r3, [r2, #12]
    
    dense_18_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800641e:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <network_configure_activations+0xb0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <network_configure_activations+0xbc>)
 8006424:	6093      	str	r3, [r2, #8]
    dense_18_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006426:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <network_configure_activations+0xb0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1c      	ldr	r2, [pc, #112]	; (800649c <network_configure_activations+0xbc>)
 800642c:	60d3      	str	r3, [r2, #12]
    
    dense_19_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 28);
 800642e:	4b18      	ldr	r3, [pc, #96]	; (8006490 <network_configure_activations+0xb0>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	331c      	adds	r3, #28
 8006434:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <network_configure_activations+0xc0>)
 8006436:	6093      	str	r3, [r2, #8]
    dense_19_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 28);
 8006438:	4b15      	ldr	r3, [pc, #84]	; (8006490 <network_configure_activations+0xb0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	331c      	adds	r3, #28
 800643e:	4a18      	ldr	r2, [pc, #96]	; (80064a0 <network_configure_activations+0xc0>)
 8006440:	60d3      	str	r3, [r2, #12]
    
    dense_19_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <network_configure_activations+0xb0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a17      	ldr	r2, [pc, #92]	; (80064a4 <network_configure_activations+0xc4>)
 8006448:	6093      	str	r3, [r2, #8]
    dense_19_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800644a:	4b11      	ldr	r3, [pc, #68]	; (8006490 <network_configure_activations+0xb0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a15      	ldr	r2, [pc, #84]	; (80064a4 <network_configure_activations+0xc4>)
 8006450:	60d3      	str	r3, [r2, #12]
    
    dense_20_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 28);
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <network_configure_activations+0xb0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	331c      	adds	r3, #28
 8006458:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <network_configure_activations+0xc8>)
 800645a:	6093      	str	r3, [r2, #8]
    dense_20_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 28);
 800645c:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <network_configure_activations+0xb0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	331c      	adds	r3, #28
 8006462:	4a11      	ldr	r2, [pc, #68]	; (80064a8 <network_configure_activations+0xc8>)
 8006464:	60d3      	str	r3, [r2, #12]
    
    dense_20_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <network_configure_activations+0xb0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a10      	ldr	r2, [pc, #64]	; (80064ac <network_configure_activations+0xcc>)
 800646c:	6093      	str	r3, [r2, #8]
    dense_20_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800646e:	4b08      	ldr	r3, [pc, #32]	; (8006490 <network_configure_activations+0xb0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a0e      	ldr	r2, [pc, #56]	; (80064ac <network_configure_activations+0xcc>)
 8006474:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006476:	2301      	movs	r3, #1
 8006478:	e005      	b.n	8006486 <network_configure_activations+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800647a:	2213      	movs	r2, #19
 800647c:	2130      	movs	r1, #48	; 0x30
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fb68 	bl	8006b54 <ai_platform_network_set_error>
  return false;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000b74 	.word	0x20000b74
 8006494:	2000001c 	.word	0x2000001c
 8006498:	2000002c 	.word	0x2000002c
 800649c:	2000004c 	.word	0x2000004c
 80064a0:	2000005c 	.word	0x2000005c
 80064a4:	2000007c 	.word	0x2000007c
 80064a8:	2000008c 	.word	0x2000008c
 80064ac:	2000009c 	.word	0x2000009c

080064b0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	2101      	movs	r1, #1
 80064be:	483a      	ldr	r0, [pc, #232]	; (80065a8 <network_configure_weights+0xf8>)
 80064c0:	f000 fa10 	bl	80068e4 <ai_platform_get_weights_map>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d063      	beq.n	8006592 <network_configure_weights+0xe2>
    /* Updating weights (byte) offsets */
    
    dense_19_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80064ca:	4b38      	ldr	r3, [pc, #224]	; (80065ac <network_configure_weights+0xfc>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064d2:	4a36      	ldr	r2, [pc, #216]	; (80065ac <network_configure_weights+0xfc>)
 80064d4:	6013      	str	r3, [r2, #0]
    dense_19_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80064d6:	4b34      	ldr	r3, [pc, #208]	; (80065a8 <network_configure_weights+0xf8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a34      	ldr	r2, [pc, #208]	; (80065ac <network_configure_weights+0xfc>)
 80064dc:	6093      	str	r3, [r2, #8]
    dense_19_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80064de:	4b32      	ldr	r3, [pc, #200]	; (80065a8 <network_configure_weights+0xf8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a32      	ldr	r2, [pc, #200]	; (80065ac <network_configure_weights+0xfc>)
 80064e4:	60d3      	str	r3, [r2, #12]
    
    dense_20_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80064e6:	4b32      	ldr	r3, [pc, #200]	; (80065b0 <network_configure_weights+0x100>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ee:	4a30      	ldr	r2, [pc, #192]	; (80065b0 <network_configure_weights+0x100>)
 80064f0:	6013      	str	r3, [r2, #0]
    dense_20_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 28);
 80064f2:	4b2d      	ldr	r3, [pc, #180]	; (80065a8 <network_configure_weights+0xf8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	331c      	adds	r3, #28
 80064f8:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <network_configure_weights+0x100>)
 80064fa:	6093      	str	r3, [r2, #8]
    dense_20_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 28);
 80064fc:	4b2a      	ldr	r3, [pc, #168]	; (80065a8 <network_configure_weights+0xf8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	331c      	adds	r3, #28
 8006502:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <network_configure_weights+0x100>)
 8006504:	60d3      	str	r3, [r2, #12]
    
    dense_20_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006506:	4b2b      	ldr	r3, [pc, #172]	; (80065b4 <network_configure_weights+0x104>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800650e:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <network_configure_weights+0x104>)
 8006510:	6013      	str	r3, [r2, #0]
    dense_20_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 140);
 8006512:	4b25      	ldr	r3, [pc, #148]	; (80065a8 <network_configure_weights+0xf8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	338c      	adds	r3, #140	; 0x8c
 8006518:	4a26      	ldr	r2, [pc, #152]	; (80065b4 <network_configure_weights+0x104>)
 800651a:	6093      	str	r3, [r2, #8]
    dense_20_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 140);
 800651c:	4b22      	ldr	r3, [pc, #136]	; (80065a8 <network_configure_weights+0xf8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	338c      	adds	r3, #140	; 0x8c
 8006522:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <network_configure_weights+0x104>)
 8006524:	60d3      	str	r3, [r2, #12]
    
    dense_18_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006526:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <network_configure_weights+0x108>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800652e:	4a22      	ldr	r2, [pc, #136]	; (80065b8 <network_configure_weights+0x108>)
 8006530:	6013      	str	r3, [r2, #0]
    dense_18_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 156);
 8006532:	4b1d      	ldr	r3, [pc, #116]	; (80065a8 <network_configure_weights+0xf8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	339c      	adds	r3, #156	; 0x9c
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <network_configure_weights+0x108>)
 800653a:	6093      	str	r3, [r2, #8]
    dense_18_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 156);
 800653c:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <network_configure_weights+0xf8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	339c      	adds	r3, #156	; 0x9c
 8006542:	4a1d      	ldr	r2, [pc, #116]	; (80065b8 <network_configure_weights+0x108>)
 8006544:	60d3      	str	r3, [r2, #12]
    
    dense_18_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <network_configure_weights+0x10c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800654e:	4a1b      	ldr	r2, [pc, #108]	; (80065bc <network_configure_weights+0x10c>)
 8006550:	6013      	str	r3, [r2, #0]
    dense_18_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 492);
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <network_configure_weights+0xf8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800655a:	4a18      	ldr	r2, [pc, #96]	; (80065bc <network_configure_weights+0x10c>)
 800655c:	6093      	str	r3, [r2, #8]
    dense_18_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 492);
 800655e:	4b12      	ldr	r3, [pc, #72]	; (80065a8 <network_configure_weights+0xf8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006566:	4a15      	ldr	r2, [pc, #84]	; (80065bc <network_configure_weights+0x10c>)
 8006568:	60d3      	str	r3, [r2, #12]
    
    dense_19_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <network_configure_weights+0x110>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006572:	4a13      	ldr	r2, [pc, #76]	; (80065c0 <network_configure_weights+0x110>)
 8006574:	6013      	str	r3, [r2, #0]
    dense_19_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 520);
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <network_configure_weights+0xf8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800657e:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <network_configure_weights+0x110>)
 8006580:	6093      	str	r3, [r2, #8]
    dense_19_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 520);
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <network_configure_weights+0xf8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800658a:	4a0d      	ldr	r2, [pc, #52]	; (80065c0 <network_configure_weights+0x110>)
 800658c:	60d3      	str	r3, [r2, #12]
    
    return true;
 800658e:	2301      	movs	r3, #1
 8006590:	e005      	b.n	800659e <network_configure_weights+0xee>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006592:	2212      	movs	r2, #18
 8006594:	2130      	movs	r1, #48	; 0x30
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fadc 	bl	8006b54 <ai_platform_network_set_error>
  return false;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000b78 	.word	0x20000b78
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	2000003c 	.word	0x2000003c
 80065b4:	2000006c 	.word	0x2000006c
 80065b8:	200000ac 	.word	0x200000ac
 80065bc:	200000bc 	.word	0x200000bc
 80065c0:	200000cc 	.word	0x200000cc

080065c4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa53 	bl	8006a78 <ai_platform_network_get_error>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80065e6:	2300      	movs	r3, #0
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	2305      	movs	r3, #5
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	2301      	movs	r3, #1
 80065f0:	4a04      	ldr	r2, [pc, #16]	; (8006604 <ai_network_create+0x28>)
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fc59 	bl	8006eac <ai_platform_network_create>
 80065fa:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000694 	.word	0x20000694

08006608 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b096      	sub	sp, #88	; 0x58
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006614:	2100      	movs	r1, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f7ff ffe0 	bl	80065dc <ai_network_create>
 800661c:	4603      	mov	r3, r0
 800661e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8006620:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <ai_network_create_and_init+0x24>
        return err;
 8006628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662a:	e05d      	b.n	80066e8 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 800662c:	f107 0314 	add.w	r3, r7, #20
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f8dd 	bl	80067f0 <ai_network_data_params_get>
 8006636:	4603      	mov	r3, r0
 8006638:	f083 0301 	eor.w	r3, r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d008      	beq.n	8006654 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff ffbc 	bl	80065c4 <ai_network_get_error>
 800664c:	4603      	mov	r3, r0
 800664e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8006650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006652:	e049      	b.n	80066e8 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d016      	beq.n	8006688 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800665a:	2300      	movs	r3, #0
 800665c:	657b      	str	r3, [r7, #84]	; 0x54
 800665e:	e00e      	b.n	800667e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006660:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	4413      	add	r3, r2
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	330c      	adds	r3, #12
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f922 	bl	80068bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800667a:	3301      	adds	r3, #1
 800667c:	657b      	str	r3, [r7, #84]	; 0x54
 800667e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006680:	461a      	mov	r2, r3
 8006682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006684:	4293      	cmp	r3, r2
 8006686:	dbeb      	blt.n	8006660 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800668e:	2300      	movs	r3, #0
 8006690:	653b      	str	r3, [r7, #80]	; 0x50
 8006692:	e00e      	b.n	80066b2 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006694:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	3304      	adds	r3, #4
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 f908 	bl	80068bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80066ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ae:	3301      	adds	r3, #1
 80066b0:	653b      	str	r3, [r7, #80]	; 0x50
 80066b2:	8b7b      	ldrh	r3, [r7, #26]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b8:	4293      	cmp	r3, r2
 80066ba:	dbeb      	blt.n	8006694 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f107 0214 	add.w	r2, r7, #20
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f846 	bl	8006758 <ai_network_init>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f083 0301 	eor.w	r3, r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7ff ff71 	bl	80065c4 <ai_network_get_error>
 80066e2:	4603      	mov	r3, r0
 80066e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80066e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3758      	adds	r7, #88	; 0x58
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d104      	bne.n	800670a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006700:	4b06      	ldr	r3, [pc, #24]	; (800671c <ai_network_inputs_get+0x2c>)
 8006702:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a06      	ldr	r2, [pc, #24]	; (8006720 <ai_network_inputs_get+0x30>)
 8006708:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa27 	bl	8006b60 <ai_platform_inputs_get>
 8006712:	4603      	mov	r3, r0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000694 	.word	0x20000694
 8006720:	a1c00100 	.word	0xa1c00100

08006724 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <ai_network_outputs_get+0x2c>)
 8006736:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a06      	ldr	r2, [pc, #24]	; (8006754 <ai_network_outputs_get+0x30>)
 800673c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fae3 	bl	8006d0c <ai_platform_outputs_get>
 8006746:	4603      	mov	r3, r0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000694 	.word	0x20000694
 8006754:	a1c00100 	.word	0xa1c00100

08006758 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc77 	bl	8007058 <ai_platform_network_init>
 800676a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <ai_network_init+0x1e>
 8006772:	2300      	movs	r3, #0
 8006774:	e028      	b.n	80067c8 <ai_network_init+0x70>

  ai_bool ok = true;
 8006776:	2301      	movs	r3, #1
 8006778:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff fe97 	bl	80064b0 <network_configure_weights>
 8006782:	4603      	mov	r3, r0
 8006784:	461a      	mov	r2, r3
 8006786:	7afb      	ldrb	r3, [r7, #11]
 8006788:	4013      	ands	r3, r2
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf14      	ite	ne
 800678e:	2301      	movne	r3, #1
 8006790:	2300      	moveq	r3, #0
 8006792:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff fe22 	bl	80063e0 <network_configure_activations>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bf14      	ite	ne
 80067a8:	2301      	movne	r3, #1
 80067aa:	2300      	moveq	r3, #0
 80067ac:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fd40 	bl	8007234 <ai_platform_network_post_init>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	7afb      	ldrb	r3, [r7, #11]
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80067c6:	7afb      	ldrb	r3, [r7, #11]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	68b9      	ldr	r1, [r7, #8]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fdaf 	bl	8007344 <ai_platform_network_process>
 80067e6:	4603      	mov	r3, r0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <ai_network_data_params_get+0x12>
 80067fe:	2300      	movs	r3, #0
 8006800:	e016      	b.n	8006830 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8006802:	4a0d      	ldr	r2, [pc, #52]	; (8006838 <ai_network_data_params_get+0x48>)
 8006804:	f107 0310 	add.w	r3, r7, #16
 8006808:	e892 0003 	ldmia.w	r2, {r0, r1}
 800680c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8006810:	4a0a      	ldr	r2, [pc, #40]	; (800683c <ai_network_data_params_get+0x4c>)
 8006812:	f107 0308 	add.w	r3, r7, #8
 8006816:	e892 0003 	ldmia.w	r2, {r0, r1}
 800681a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800681e:	f107 0210 	add.w	r2, r7, #16
 8006822:	f107 0308 	add.w	r3, r7, #8
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f903 	bl	8006a34 <ai_platform_bind_network_params>
 800682e:	4603      	mov	r3, r0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	0800a780 	.word	0x0800a780
 800683c:	0800a788 	.word	0x0800a788

08006840 <ai_buffer_get_size>:
 8006840:	b378      	cbz	r0, 80068a2 <ai_buffer_get_size+0x62>
 8006842:	b410      	push	{r4}
 8006844:	6803      	ldr	r3, [r0, #0]
 8006846:	4a17      	ldr	r2, [pc, #92]	; (80068a4 <ai_buffer_get_size+0x64>)
 8006848:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800684c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006850:	4293      	cmp	r3, r2
 8006852:	d01e      	beq.n	8006892 <ai_buffer_get_size+0x52>
 8006854:	6984      	ldr	r4, [r0, #24]
 8006856:	6862      	ldr	r2, [r4, #4]
 8006858:	7d03      	ldrb	r3, [r0, #20]
 800685a:	6941      	ldr	r1, [r0, #20]
 800685c:	f1a3 0301 	sub.w	r3, r3, #1
 8006860:	fab3 f383 	clz	r3, r3
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800686a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800686e:	da0b      	bge.n	8006888 <ai_buffer_get_size+0x48>
 8006870:	2b01      	cmp	r3, #1
 8006872:	d102      	bne.n	800687a <ai_buffer_get_size+0x3a>
 8006874:	2802      	cmp	r0, #2
 8006876:	d007      	beq.n	8006888 <ai_buffer_get_size+0x48>
 8006878:	2302      	movs	r3, #2
 800687a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800687e:	3301      	adds	r3, #1
 8006880:	4298      	cmp	r0, r3
 8006882:	fb01 f202 	mul.w	r2, r1, r2
 8006886:	d1f3      	bne.n	8006870 <ai_buffer_get_size+0x30>
 8006888:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800688c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	2900      	cmp	r1, #0
 8006894:	d0de      	beq.n	8006854 <ai_buffer_get_size+0x14>
 8006896:	6984      	ldr	r4, [r0, #24]
 8006898:	6863      	ldr	r3, [r4, #4]
 800689a:	331f      	adds	r3, #31
 800689c:	f023 021f 	bic.w	r2, r3, #31
 80068a0:	e7da      	b.n	8006858 <ai_buffer_get_size+0x18>
 80068a2:	4770      	bx	lr
 80068a4:	000400c0 	.word	0x000400c0

080068a8 <ai_buffer_array_sane>:
 80068a8:	b138      	cbz	r0, 80068ba <ai_buffer_array_sane+0x12>
 80068aa:	6843      	ldr	r3, [r0, #4]
 80068ac:	b123      	cbz	r3, 80068b8 <ai_buffer_array_sane+0x10>
 80068ae:	8840      	ldrh	r0, [r0, #2]
 80068b0:	3800      	subs	r0, #0
 80068b2:	bf18      	it	ne
 80068b4:	2001      	movne	r0, #1
 80068b6:	4770      	bx	lr
 80068b8:	4618      	mov	r0, r3
 80068ba:	4770      	bx	lr

080068bc <ai_buffer_array_item_set_address>:
 80068bc:	b150      	cbz	r0, 80068d4 <ai_buffer_array_item_set_address+0x18>
 80068be:	6843      	ldr	r3, [r0, #4]
 80068c0:	b14b      	cbz	r3, 80068d6 <ai_buffer_array_item_set_address+0x1a>
 80068c2:	8840      	ldrh	r0, [r0, #2]
 80068c4:	b900      	cbnz	r0, 80068c8 <ai_buffer_array_item_set_address+0xc>
 80068c6:	4770      	bx	lr
 80068c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80068cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80068d0:	2001      	movs	r0, #1
 80068d2:	604a      	str	r2, [r1, #4]
 80068d4:	4770      	bx	lr
 80068d6:	4618      	mov	r0, r3
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop

080068dc <_ai_platform_acquire_crc>:
 80068dc:	2001      	movs	r0, #1
 80068de:	4770      	bx	lr

080068e0 <_ai_platform_release_crc>:
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop

080068e4 <ai_platform_get_weights_map>:
 80068e4:	2a00      	cmp	r2, #0
 80068e6:	d037      	beq.n	8006958 <ai_platform_get_weights_map+0x74>
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	4604      	mov	r4, r0
 80068ec:	b1a0      	cbz	r0, 8006918 <ai_platform_get_weights_map+0x34>
 80068ee:	460f      	mov	r7, r1
 80068f0:	b191      	cbz	r1, 8006918 <ai_platform_get_weights_map+0x34>
 80068f2:	4b25      	ldr	r3, [pc, #148]	; (8006988 <ai_platform_get_weights_map+0xa4>)
 80068f4:	6810      	ldr	r0, [r2, #0]
 80068f6:	4298      	cmp	r0, r3
 80068f8:	4615      	mov	r5, r2
 80068fa:	d00f      	beq.n	800691c <ai_platform_get_weights_map+0x38>
 80068fc:	6855      	ldr	r5, [r2, #4]
 80068fe:	b15d      	cbz	r5, 8006918 <ai_platform_get_weights_map+0x34>
 8006900:	682e      	ldr	r6, [r5, #0]
 8006902:	429e      	cmp	r6, r3
 8006904:	d02a      	beq.n	800695c <ai_platform_get_weights_map+0x78>
 8006906:	f1a1 0001 	sub.w	r0, r1, #1
 800690a:	6025      	str	r5, [r4, #0]
 800690c:	fab0 f080 	clz	r0, r0
 8006910:	0940      	lsrs	r0, r0, #5
 8006912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006914:	42a7      	cmp	r7, r4
 8006916:	d034      	beq.n	8006982 <ai_platform_get_weights_map+0x9e>
 8006918:	2000      	movs	r0, #0
 800691a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691c:	1d10      	adds	r0, r2, #4
 800691e:	f7ff ffc3 	bl	80068a8 <ai_buffer_array_sane>
 8006922:	2800      	cmp	r0, #0
 8006924:	d0f8      	beq.n	8006918 <ai_platform_get_weights_map+0x34>
 8006926:	88eb      	ldrh	r3, [r5, #6]
 8006928:	429f      	cmp	r7, r3
 800692a:	d1f5      	bne.n	8006918 <ai_platform_get_weights_map+0x34>
 800692c:	f04f 0e00 	mov.w	lr, #0
 8006930:	1f23      	subs	r3, r4, #4
 8006932:	4670      	mov	r0, lr
 8006934:	68aa      	ldr	r2, [r5, #8]
 8006936:	eb02 0c0e 	add.w	ip, r2, lr
 800693a:	f10e 0e1c 	add.w	lr, lr, #28
 800693e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006942:	b124      	cbz	r4, 800694e <ai_platform_get_weights_map+0x6a>
 8006944:	3001      	adds	r0, #1
 8006946:	4287      	cmp	r7, r0
 8006948:	f843 4f04 	str.w	r4, [r3, #4]!
 800694c:	d1f2      	bne.n	8006934 <ai_platform_get_weights_map+0x50>
 800694e:	1a38      	subs	r0, r7, r0
 8006950:	fab0 f080 	clz	r0, r0
 8006954:	0940      	lsrs	r0, r0, #5
 8006956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006958:	2000      	movs	r0, #0
 800695a:	4770      	bx	lr
 800695c:	1f23      	subs	r3, r4, #4
 800695e:	4628      	mov	r0, r5
 8006960:	2400      	movs	r4, #0
 8006962:	e000      	b.n	8006966 <ai_platform_get_weights_map+0x82>
 8006964:	4614      	mov	r4, r2
 8006966:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800696a:	42b2      	cmp	r2, r6
 800696c:	d0d2      	beq.n	8006914 <ai_platform_get_weights_map+0x30>
 800696e:	f843 2f04 	str.w	r2, [r3, #4]!
 8006972:	1c62      	adds	r2, r4, #1
 8006974:	4297      	cmp	r7, r2
 8006976:	d1f5      	bne.n	8006964 <ai_platform_get_weights_map+0x80>
 8006978:	3402      	adds	r4, #2
 800697a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800697e:	42b3      	cmp	r3, r6
 8006980:	d1ca      	bne.n	8006918 <ai_platform_get_weights_map+0x34>
 8006982:	2001      	movs	r0, #1
 8006984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006986:	bf00      	nop
 8006988:	a1facade 	.word	0xa1facade

0800698c <ai_platform_get_activations_map>:
 800698c:	2a00      	cmp	r2, #0
 800698e:	d038      	beq.n	8006a02 <ai_platform_get_activations_map+0x76>
 8006990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006992:	4604      	mov	r4, r0
 8006994:	b1a0      	cbz	r0, 80069c0 <ai_platform_get_activations_map+0x34>
 8006996:	460f      	mov	r7, r1
 8006998:	b191      	cbz	r1, 80069c0 <ai_platform_get_activations_map+0x34>
 800699a:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <ai_platform_get_activations_map+0xa4>)
 800699c:	6810      	ldr	r0, [r2, #0]
 800699e:	4298      	cmp	r0, r3
 80069a0:	4615      	mov	r5, r2
 80069a2:	d00f      	beq.n	80069c4 <ai_platform_get_activations_map+0x38>
 80069a4:	6a15      	ldr	r5, [r2, #32]
 80069a6:	b15d      	cbz	r5, 80069c0 <ai_platform_get_activations_map+0x34>
 80069a8:	682e      	ldr	r6, [r5, #0]
 80069aa:	429e      	cmp	r6, r3
 80069ac:	d02b      	beq.n	8006a06 <ai_platform_get_activations_map+0x7a>
 80069ae:	f1a1 0001 	sub.w	r0, r1, #1
 80069b2:	6025      	str	r5, [r4, #0]
 80069b4:	fab0 f080 	clz	r0, r0
 80069b8:	0940      	lsrs	r0, r0, #5
 80069ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069bc:	42a7      	cmp	r7, r4
 80069be:	d035      	beq.n	8006a2c <ai_platform_get_activations_map+0xa0>
 80069c0:	2000      	movs	r0, #0
 80069c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c4:	f102 000c 	add.w	r0, r2, #12
 80069c8:	f7ff ff6e 	bl	80068a8 <ai_buffer_array_sane>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d0f7      	beq.n	80069c0 <ai_platform_get_activations_map+0x34>
 80069d0:	89eb      	ldrh	r3, [r5, #14]
 80069d2:	429f      	cmp	r7, r3
 80069d4:	d1f4      	bne.n	80069c0 <ai_platform_get_activations_map+0x34>
 80069d6:	f04f 0e00 	mov.w	lr, #0
 80069da:	1f23      	subs	r3, r4, #4
 80069dc:	4670      	mov	r0, lr
 80069de:	692a      	ldr	r2, [r5, #16]
 80069e0:	eb02 0c0e 	add.w	ip, r2, lr
 80069e4:	f10e 0e1c 	add.w	lr, lr, #28
 80069e8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80069ec:	b124      	cbz	r4, 80069f8 <ai_platform_get_activations_map+0x6c>
 80069ee:	3001      	adds	r0, #1
 80069f0:	4287      	cmp	r7, r0
 80069f2:	f843 4f04 	str.w	r4, [r3, #4]!
 80069f6:	d1f2      	bne.n	80069de <ai_platform_get_activations_map+0x52>
 80069f8:	1a38      	subs	r0, r7, r0
 80069fa:	fab0 f080 	clz	r0, r0
 80069fe:	0940      	lsrs	r0, r0, #5
 8006a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a02:	2000      	movs	r0, #0
 8006a04:	4770      	bx	lr
 8006a06:	1f23      	subs	r3, r4, #4
 8006a08:	4628      	mov	r0, r5
 8006a0a:	2400      	movs	r4, #0
 8006a0c:	e000      	b.n	8006a10 <ai_platform_get_activations_map+0x84>
 8006a0e:	4614      	mov	r4, r2
 8006a10:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006a14:	42b2      	cmp	r2, r6
 8006a16:	d0d1      	beq.n	80069bc <ai_platform_get_activations_map+0x30>
 8006a18:	f843 2f04 	str.w	r2, [r3, #4]!
 8006a1c:	1c62      	adds	r2, r4, #1
 8006a1e:	4297      	cmp	r7, r2
 8006a20:	d1f5      	bne.n	8006a0e <ai_platform_get_activations_map+0x82>
 8006a22:	3402      	adds	r4, #2
 8006a24:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006a28:	42b3      	cmp	r3, r6
 8006a2a:	d1c9      	bne.n	80069c0 <ai_platform_get_activations_map+0x34>
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a30:	a1facade 	.word	0xa1facade

08006a34 <ai_platform_bind_network_params>:
 8006a34:	b1a0      	cbz	r0, 8006a60 <ai_platform_bind_network_params+0x2c>
 8006a36:	b1b1      	cbz	r1, 8006a66 <ai_platform_bind_network_params+0x32>
 8006a38:	b1c2      	cbz	r2, 8006a6c <ai_platform_bind_network_params+0x38>
 8006a3a:	b410      	push	{r4}
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4c0d      	ldr	r4, [pc, #52]	; (8006a74 <ai_platform_bind_network_params+0x40>)
 8006a40:	f843 4b04 	str.w	r4, [r3], #4
 8006a44:	f100 0c0c 	add.w	ip, r0, #12
 8006a48:	c903      	ldmia	r1, {r0, r1}
 8006a4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8006a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a52:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006a56:	2301      	movs	r3, #1
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	4603      	mov	r3, r0
 8006a62:	4618      	mov	r0, r3
 8006a64:	4770      	bx	lr
 8006a66:	460b      	mov	r3, r1
 8006a68:	4618      	mov	r0, r3
 8006a6a:	4770      	bx	lr
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	a1facade 	.word	0xa1facade

08006a78 <ai_platform_network_get_error>:
 8006a78:	b510      	push	{r4, lr}
 8006a7a:	b1f0      	cbz	r0, 8006aba <ai_platform_network_get_error+0x42>
 8006a7c:	4b2f      	ldr	r3, [pc, #188]	; (8006b3c <ai_platform_network_get_error+0xc4>)
 8006a7e:	6802      	ldr	r2, [r0, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	4604      	mov	r4, r0
 8006a84:	d119      	bne.n	8006aba <ai_platform_network_get_error+0x42>
 8006a86:	f7ff ff29 	bl	80068dc <_ai_platform_acquire_crc>
 8006a8a:	4b2d      	ldr	r3, [pc, #180]	; (8006b40 <ai_platform_network_get_error+0xc8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a96:	d03c      	beq.n	8006b12 <ai_platform_network_get_error+0x9a>
 8006a98:	4a2a      	ldr	r2, [pc, #168]	; (8006b44 <ai_platform_network_get_error+0xcc>)
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006aa0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1fb      	bne.n	8006aa0 <ai_platform_network_get_error+0x28>
 8006aa8:	4b27      	ldr	r3, [pc, #156]	; (8006b48 <ai_platform_network_get_error+0xd0>)
 8006aaa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006aae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ab2:	4b26      	ldr	r3, [pc, #152]	; (8006b4c <ai_platform_network_get_error+0xd4>)
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d038      	beq.n	8006b2a <ai_platform_network_get_error+0xb2>
 8006ab8:	e7fe      	b.n	8006ab8 <ai_platform_network_get_error+0x40>
 8006aba:	f7ff ff0f 	bl	80068dc <_ai_platform_acquire_crc>
 8006abe:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <ai_platform_network_get_error+0xc8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aca:	d010      	beq.n	8006aee <ai_platform_network_get_error+0x76>
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <ai_platform_network_get_error+0xcc>)
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006ad4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1fb      	bne.n	8006ad4 <ai_platform_network_get_error+0x5c>
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <ai_platform_network_get_error+0xd0>)
 8006ade:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006ae2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ae6:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <ai_platform_network_get_error+0xd4>)
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d00d      	beq.n	8006b08 <ai_platform_network_get_error+0x90>
 8006aec:	e7fe      	b.n	8006aec <ai_platform_network_get_error+0x74>
 8006aee:	4a18      	ldr	r2, [pc, #96]	; (8006b50 <ai_platform_network_get_error+0xd8>)
 8006af0:	2301      	movs	r3, #1
 8006af2:	6093      	str	r3, [r2, #8]
 8006af4:	6893      	ldr	r3, [r2, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1fc      	bne.n	8006af4 <ai_platform_network_get_error+0x7c>
 8006afa:	4b13      	ldr	r3, [pc, #76]	; (8006b48 <ai_platform_network_get_error+0xd0>)
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <ai_platform_network_get_error+0xd4>)
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d000      	beq.n	8006b08 <ai_platform_network_get_error+0x90>
 8006b06:	e7fe      	b.n	8006b06 <ai_platform_network_get_error+0x8e>
 8006b08:	f7ff feea 	bl	80068e0 <_ai_platform_release_crc>
 8006b0c:	f241 0010 	movw	r0, #4112	; 0x1010
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <ai_platform_network_get_error+0xd8>)
 8006b14:	2301      	movs	r3, #1
 8006b16:	6093      	str	r3, [r2, #8]
 8006b18:	6893      	ldr	r3, [r2, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1fc      	bne.n	8006b18 <ai_platform_network_get_error+0xa0>
 8006b1e:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <ai_platform_network_get_error+0xd0>)
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <ai_platform_network_get_error+0xd4>)
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d107      	bne.n	8006b3a <ai_platform_network_get_error+0xc2>
 8006b2a:	f7ff fed9 	bl	80068e0 <_ai_platform_release_crc>
 8006b2e:	f104 0010 	add.w	r0, r4, #16
 8006b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b36:	f000 be8d 	b.w	8007854 <core_get_error>
 8006b3a:	e7fe      	b.n	8006b3a <ai_platform_network_get_error+0xc2>
 8006b3c:	a1c00100 	.word	0xa1c00100
 8006b40:	e0042000 	.word	0xe0042000
 8006b44:	58024000 	.word	0x58024000
 8006b48:	f407a5c2 	.word	0xf407a5c2
 8006b4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b50:	40023000 	.word	0x40023000

08006b54 <ai_platform_network_set_error>:
 8006b54:	b110      	cbz	r0, 8006b5c <ai_platform_network_set_error+0x8>
 8006b56:	3010      	adds	r0, #16
 8006b58:	f000 be82 	b.w	8007860 <core_set_error>
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop

08006b60 <ai_platform_inputs_get>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	b085      	sub	sp, #20
 8006b66:	9102      	str	r1, [sp, #8]
 8006b68:	b1f0      	cbz	r0, 8006ba8 <ai_platform_inputs_get+0x48>
 8006b6a:	4b62      	ldr	r3, [pc, #392]	; (8006cf4 <ai_platform_inputs_get+0x194>)
 8006b6c:	6802      	ldr	r2, [r0, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	4607      	mov	r7, r0
 8006b72:	d119      	bne.n	8006ba8 <ai_platform_inputs_get+0x48>
 8006b74:	f7ff feb2 	bl	80068dc <_ai_platform_acquire_crc>
 8006b78:	4b5f      	ldr	r3, [pc, #380]	; (8006cf8 <ai_platform_inputs_get+0x198>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b84:	d03d      	beq.n	8006c02 <ai_platform_inputs_get+0xa2>
 8006b86:	4a5d      	ldr	r2, [pc, #372]	; (8006cfc <ai_platform_inputs_get+0x19c>)
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b8e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1fb      	bne.n	8006b8e <ai_platform_inputs_get+0x2e>
 8006b96:	4b5a      	ldr	r3, [pc, #360]	; (8006d00 <ai_platform_inputs_get+0x1a0>)
 8006b98:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006b9c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006ba0:	4b58      	ldr	r3, [pc, #352]	; (8006d04 <ai_platform_inputs_get+0x1a4>)
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d039      	beq.n	8006c1a <ai_platform_inputs_get+0xba>
 8006ba6:	e7fe      	b.n	8006ba6 <ai_platform_inputs_get+0x46>
 8006ba8:	f7ff fe98 	bl	80068dc <_ai_platform_acquire_crc>
 8006bac:	4b52      	ldr	r3, [pc, #328]	; (8006cf8 <ai_platform_inputs_get+0x198>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb8:	d010      	beq.n	8006bdc <ai_platform_inputs_get+0x7c>
 8006bba:	4a50      	ldr	r2, [pc, #320]	; (8006cfc <ai_platform_inputs_get+0x19c>)
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bc2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1fb      	bne.n	8006bc2 <ai_platform_inputs_get+0x62>
 8006bca:	4b4d      	ldr	r3, [pc, #308]	; (8006d00 <ai_platform_inputs_get+0x1a0>)
 8006bcc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006bd0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006bd4:	4b4b      	ldr	r3, [pc, #300]	; (8006d04 <ai_platform_inputs_get+0x1a4>)
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d00d      	beq.n	8006bf6 <ai_platform_inputs_get+0x96>
 8006bda:	e7fe      	b.n	8006bda <ai_platform_inputs_get+0x7a>
 8006bdc:	4a4a      	ldr	r2, [pc, #296]	; (8006d08 <ai_platform_inputs_get+0x1a8>)
 8006bde:	2301      	movs	r3, #1
 8006be0:	6093      	str	r3, [r2, #8]
 8006be2:	6893      	ldr	r3, [r2, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1fc      	bne.n	8006be2 <ai_platform_inputs_get+0x82>
 8006be8:	4b45      	ldr	r3, [pc, #276]	; (8006d00 <ai_platform_inputs_get+0x1a0>)
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	4b45      	ldr	r3, [pc, #276]	; (8006d04 <ai_platform_inputs_get+0x1a4>)
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d000      	beq.n	8006bf6 <ai_platform_inputs_get+0x96>
 8006bf4:	e7fe      	b.n	8006bf4 <ai_platform_inputs_get+0x94>
 8006bf6:	f7ff fe73 	bl	80068e0 <_ai_platform_release_crc>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	b005      	add	sp, #20
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	4a41      	ldr	r2, [pc, #260]	; (8006d08 <ai_platform_inputs_get+0x1a8>)
 8006c04:	2301      	movs	r3, #1
 8006c06:	6093      	str	r3, [r2, #8]
 8006c08:	6893      	ldr	r3, [r2, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1fc      	bne.n	8006c08 <ai_platform_inputs_get+0xa8>
 8006c0e:	4b3c      	ldr	r3, [pc, #240]	; (8006d00 <ai_platform_inputs_get+0x1a0>)
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	4b3b      	ldr	r3, [pc, #236]	; (8006d04 <ai_platform_inputs_get+0x1a4>)
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d155      	bne.n	8006cc6 <ai_platform_inputs_get+0x166>
 8006c1a:	f7ff fe61 	bl	80068e0 <_ai_platform_release_crc>
 8006c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d051      	beq.n	8006cc8 <ai_platform_inputs_get+0x168>
 8006c24:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8006c28:	f1ba 0f00 	cmp.w	sl, #0
 8006c2c:	d04c      	beq.n	8006cc8 <ai_platform_inputs_get+0x168>
 8006c2e:	f04f 0b00 	mov.w	fp, #0
 8006c32:	465d      	mov	r5, fp
 8006c34:	9703      	str	r7, [sp, #12]
 8006c36:	e016      	b.n	8006c66 <ai_platform_inputs_get+0x106>
 8006c38:	9901      	ldr	r1, [sp, #4]
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	507b      	str	r3, [r7, r1]
 8006c3e:	69b1      	ldr	r1, [r6, #24]
 8006c40:	6849      	ldr	r1, [r1, #4]
 8006c42:	6121      	str	r1, [r4, #16]
 8006c44:	f04f 0301 	mov.w	r3, #1
 8006c48:	7523      	strb	r3, [r4, #20]
 8006c4a:	e9c4 c200 	strd	ip, r2, [r4]
 8006c4e:	6962      	ldr	r2, [r4, #20]
 8006c50:	60a0      	str	r0, [r4, #8]
 8006c52:	2300      	movs	r3, #0
 8006c54:	f369 221f 	bfi	r2, r9, #8, #24
 8006c58:	f8c4 8018 	str.w	r8, [r4, #24]
 8006c5c:	60e3      	str	r3, [r4, #12]
 8006c5e:	3501      	adds	r5, #1
 8006c60:	f10b 0b1c 	add.w	fp, fp, #28
 8006c64:	6162      	str	r2, [r4, #20]
 8006c66:	f8ba 3000 	ldrh.w	r3, [sl]
 8006c6a:	42ab      	cmp	r3, r5
 8006c6c:	b2aa      	uxth	r2, r5
 8006c6e:	d93a      	bls.n	8006ce6 <ai_platform_inputs_get+0x186>
 8006c70:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006c74:	00e9      	lsls	r1, r5, #3
 8006c76:	9101      	str	r1, [sp, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d034      	beq.n	8006ce6 <ai_platform_inputs_get+0x186>
 8006c7c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	d030      	beq.n	8006ce6 <ai_platform_inputs_get+0x186>
 8006c84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006c88:	69b2      	ldr	r2, [r6, #24]
 8006c8a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8006c8e:	6810      	ldr	r0, [r2, #0]
 8006c90:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006c94:	68b3      	ldr	r3, [r6, #8]
 8006c96:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8006c9a:	f001 fc2d 	bl	80084f8 <ai_array_to_buffer_fmt>
 8006c9e:	69b1      	ldr	r1, [r6, #24]
 8006ca0:	4684      	mov	ip, r0
 8006ca2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8006ca6:	688a      	ldr	r2, [r1, #8]
 8006ca8:	445c      	add	r4, fp
 8006caa:	2800      	cmp	r0, #0
 8006cac:	d0c8      	beq.n	8006c40 <ai_platform_inputs_get+0xe0>
 8006cae:	2100      	movs	r1, #0
 8006cb0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006cb4:	6831      	ldr	r1, [r6, #0]
 8006cb6:	6041      	str	r1, [r0, #4]
 8006cb8:	b111      	cbz	r1, 8006cc0 <ai_platform_inputs_get+0x160>
 8006cba:	8849      	ldrh	r1, [r1, #2]
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d1bb      	bne.n	8006c38 <ai_platform_inputs_get+0xd8>
 8006cc0:	69b1      	ldr	r1, [r6, #24]
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e7bc      	b.n	8006c40 <ai_platform_inputs_get+0xe0>
 8006cc6:	e7fe      	b.n	8006cc6 <ai_platform_inputs_get+0x166>
 8006cc8:	2218      	movs	r2, #24
 8006cca:	2111      	movs	r1, #17
 8006ccc:	f107 0010 	add.w	r0, r7, #16
 8006cd0:	f000 fdc6 	bl	8007860 <core_set_error>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	9b02      	ldr	r3, [sp, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d08e      	beq.n	8006bfc <ai_platform_inputs_get+0x9c>
 8006cde:	801a      	strh	r2, [r3, #0]
 8006ce0:	b005      	add	sp, #20
 8006ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce6:	9f03      	ldr	r7, [sp, #12]
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	d0ed      	beq.n	8006cc8 <ai_platform_inputs_get+0x168>
 8006cec:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006cf0:	6858      	ldr	r0, [r3, #4]
 8006cf2:	e7f1      	b.n	8006cd8 <ai_platform_inputs_get+0x178>
 8006cf4:	a1c00100 	.word	0xa1c00100
 8006cf8:	e0042000 	.word	0xe0042000
 8006cfc:	58024000 	.word	0x58024000
 8006d00:	f407a5c2 	.word	0xf407a5c2
 8006d04:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d08:	40023000 	.word	0x40023000

08006d0c <ai_platform_outputs_get>:
 8006d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d10:	b085      	sub	sp, #20
 8006d12:	9102      	str	r1, [sp, #8]
 8006d14:	b1f0      	cbz	r0, 8006d54 <ai_platform_outputs_get+0x48>
 8006d16:	4b5f      	ldr	r3, [pc, #380]	; (8006e94 <ai_platform_outputs_get+0x188>)
 8006d18:	6802      	ldr	r2, [r0, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	4607      	mov	r7, r0
 8006d1e:	d119      	bne.n	8006d54 <ai_platform_outputs_get+0x48>
 8006d20:	f7ff fddc 	bl	80068dc <_ai_platform_acquire_crc>
 8006d24:	4b5c      	ldr	r3, [pc, #368]	; (8006e98 <ai_platform_outputs_get+0x18c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d30:	d03d      	beq.n	8006dae <ai_platform_outputs_get+0xa2>
 8006d32:	4a5a      	ldr	r2, [pc, #360]	; (8006e9c <ai_platform_outputs_get+0x190>)
 8006d34:	2301      	movs	r3, #1
 8006d36:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d3a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1fb      	bne.n	8006d3a <ai_platform_outputs_get+0x2e>
 8006d42:	4b57      	ldr	r3, [pc, #348]	; (8006ea0 <ai_platform_outputs_get+0x194>)
 8006d44:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d4c:	4b55      	ldr	r3, [pc, #340]	; (8006ea4 <ai_platform_outputs_get+0x198>)
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d039      	beq.n	8006dc6 <ai_platform_outputs_get+0xba>
 8006d52:	e7fe      	b.n	8006d52 <ai_platform_outputs_get+0x46>
 8006d54:	f7ff fdc2 	bl	80068dc <_ai_platform_acquire_crc>
 8006d58:	4b4f      	ldr	r3, [pc, #316]	; (8006e98 <ai_platform_outputs_get+0x18c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d64:	d010      	beq.n	8006d88 <ai_platform_outputs_get+0x7c>
 8006d66:	4a4d      	ldr	r2, [pc, #308]	; (8006e9c <ai_platform_outputs_get+0x190>)
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d6e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1fb      	bne.n	8006d6e <ai_platform_outputs_get+0x62>
 8006d76:	4b4a      	ldr	r3, [pc, #296]	; (8006ea0 <ai_platform_outputs_get+0x194>)
 8006d78:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d7c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d80:	4b48      	ldr	r3, [pc, #288]	; (8006ea4 <ai_platform_outputs_get+0x198>)
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d00d      	beq.n	8006da2 <ai_platform_outputs_get+0x96>
 8006d86:	e7fe      	b.n	8006d86 <ai_platform_outputs_get+0x7a>
 8006d88:	4a47      	ldr	r2, [pc, #284]	; (8006ea8 <ai_platform_outputs_get+0x19c>)
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	6093      	str	r3, [r2, #8]
 8006d8e:	6893      	ldr	r3, [r2, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1fc      	bne.n	8006d8e <ai_platform_outputs_get+0x82>
 8006d94:	4b42      	ldr	r3, [pc, #264]	; (8006ea0 <ai_platform_outputs_get+0x194>)
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	4b42      	ldr	r3, [pc, #264]	; (8006ea4 <ai_platform_outputs_get+0x198>)
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d000      	beq.n	8006da2 <ai_platform_outputs_get+0x96>
 8006da0:	e7fe      	b.n	8006da0 <ai_platform_outputs_get+0x94>
 8006da2:	f7ff fd9d 	bl	80068e0 <_ai_platform_release_crc>
 8006da6:	2000      	movs	r0, #0
 8006da8:	b005      	add	sp, #20
 8006daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dae:	4a3e      	ldr	r2, [pc, #248]	; (8006ea8 <ai_platform_outputs_get+0x19c>)
 8006db0:	2301      	movs	r3, #1
 8006db2:	6093      	str	r3, [r2, #8]
 8006db4:	6893      	ldr	r3, [r2, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1fc      	bne.n	8006db4 <ai_platform_outputs_get+0xa8>
 8006dba:	4b39      	ldr	r3, [pc, #228]	; (8006ea0 <ai_platform_outputs_get+0x194>)
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	4b38      	ldr	r3, [pc, #224]	; (8006ea4 <ai_platform_outputs_get+0x198>)
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d150      	bne.n	8006e68 <ai_platform_outputs_get+0x15c>
 8006dc6:	f7ff fd8b 	bl	80068e0 <_ai_platform_release_crc>
 8006dca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d958      	bls.n	8006e82 <ai_platform_outputs_get+0x176>
 8006dd0:	f04f 0b00 	mov.w	fp, #0
 8006dd4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8006dd8:	9703      	str	r7, [sp, #12]
 8006dda:	465d      	mov	r5, fp
 8006ddc:	e016      	b.n	8006e0c <ai_platform_outputs_get+0x100>
 8006dde:	9901      	ldr	r1, [sp, #4]
 8006de0:	2301      	movs	r3, #1
 8006de2:	507b      	str	r3, [r7, r1]
 8006de4:	69b1      	ldr	r1, [r6, #24]
 8006de6:	6849      	ldr	r1, [r1, #4]
 8006de8:	6121      	str	r1, [r4, #16]
 8006dea:	f04f 0301 	mov.w	r3, #1
 8006dee:	7523      	strb	r3, [r4, #20]
 8006df0:	e9c4 c200 	strd	ip, r2, [r4]
 8006df4:	6962      	ldr	r2, [r4, #20]
 8006df6:	60a0      	str	r0, [r4, #8]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f369 221f 	bfi	r2, r9, #8, #24
 8006dfe:	f8c4 8018 	str.w	r8, [r4, #24]
 8006e02:	60e3      	str	r3, [r4, #12]
 8006e04:	3501      	adds	r5, #1
 8006e06:	f10b 0b1c 	add.w	fp, fp, #28
 8006e0a:	6162      	str	r2, [r4, #20]
 8006e0c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006e10:	42ab      	cmp	r3, r5
 8006e12:	b2aa      	uxth	r2, r5
 8006e14:	d929      	bls.n	8006e6a <ai_platform_outputs_get+0x15e>
 8006e16:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006e1a:	00e9      	lsls	r1, r5, #3
 8006e1c:	9101      	str	r1, [sp, #4]
 8006e1e:	b323      	cbz	r3, 8006e6a <ai_platform_outputs_get+0x15e>
 8006e20:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006e24:	b30e      	cbz	r6, 8006e6a <ai_platform_outputs_get+0x15e>
 8006e26:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006e2a:	69b2      	ldr	r2, [r6, #24]
 8006e2c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8006e30:	6810      	ldr	r0, [r2, #0]
 8006e32:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006e36:	68b3      	ldr	r3, [r6, #8]
 8006e38:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8006e3c:	f001 fb5c 	bl	80084f8 <ai_array_to_buffer_fmt>
 8006e40:	69b1      	ldr	r1, [r6, #24]
 8006e42:	4684      	mov	ip, r0
 8006e44:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8006e48:	688a      	ldr	r2, [r1, #8]
 8006e4a:	445c      	add	r4, fp
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d0ca      	beq.n	8006de6 <ai_platform_outputs_get+0xda>
 8006e50:	2100      	movs	r1, #0
 8006e52:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006e56:	6831      	ldr	r1, [r6, #0]
 8006e58:	6041      	str	r1, [r0, #4]
 8006e5a:	b111      	cbz	r1, 8006e62 <ai_platform_outputs_get+0x156>
 8006e5c:	8849      	ldrh	r1, [r1, #2]
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	d1bd      	bne.n	8006dde <ai_platform_outputs_get+0xd2>
 8006e62:	69b1      	ldr	r1, [r6, #24]
 8006e64:	2000      	movs	r0, #0
 8006e66:	e7be      	b.n	8006de6 <ai_platform_outputs_get+0xda>
 8006e68:	e7fe      	b.n	8006e68 <ai_platform_outputs_get+0x15c>
 8006e6a:	9f03      	ldr	r7, [sp, #12]
 8006e6c:	b14a      	cbz	r2, 8006e82 <ai_platform_outputs_get+0x176>
 8006e6e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006e72:	6858      	ldr	r0, [r3, #4]
 8006e74:	9b02      	ldr	r3, [sp, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d096      	beq.n	8006da8 <ai_platform_outputs_get+0x9c>
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	b005      	add	sp, #20
 8006e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e82:	2218      	movs	r2, #24
 8006e84:	2111      	movs	r1, #17
 8006e86:	f107 0010 	add.w	r0, r7, #16
 8006e8a:	f000 fce9 	bl	8007860 <core_set_error>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	4610      	mov	r0, r2
 8006e92:	e7ef      	b.n	8006e74 <ai_platform_outputs_get+0x168>
 8006e94:	a1c00100 	.word	0xa1c00100
 8006e98:	e0042000 	.word	0xe0042000
 8006e9c:	58024000 	.word	0x58024000
 8006ea0:	f407a5c2 	.word	0xf407a5c2
 8006ea4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ea8:	40023000 	.word	0x40023000

08006eac <ai_platform_network_create>:
 8006eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8006eb8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8006ebc:	4615      	mov	r5, r2
 8006ebe:	461f      	mov	r7, r3
 8006ec0:	f7ff fd0c 	bl	80068dc <_ai_platform_acquire_crc>
 8006ec4:	b188      	cbz	r0, 8006eea <ai_platform_network_create+0x3e>
 8006ec6:	4a5d      	ldr	r2, [pc, #372]	; (800703c <ai_platform_network_create+0x190>)
 8006ec8:	6812      	ldr	r2, [r2, #0]
 8006eca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006ece:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	d00e      	beq.n	8006ef4 <ai_platform_network_create+0x48>
 8006ed6:	4a5a      	ldr	r2, [pc, #360]	; (8007040 <ai_platform_network_create+0x194>)
 8006ed8:	2118      	movs	r1, #24
 8006eda:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8006ede:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006ee2:	2918      	cmp	r1, #24
 8006ee4:	d018      	beq.n	8006f18 <ai_platform_network_create+0x6c>
 8006ee6:	f7ff fcfb 	bl	80068e0 <_ai_platform_release_crc>
 8006eea:	f244 1033 	movw	r0, #16691	; 0x4133
 8006eee:	b003      	add	sp, #12
 8006ef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ef4:	4a53      	ldr	r2, [pc, #332]	; (8007044 <ai_platform_network_create+0x198>)
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6091      	str	r1, [r2, #8]
 8006efa:	2114      	movs	r1, #20
 8006efc:	e001      	b.n	8006f02 <ai_platform_network_create+0x56>
 8006efe:	3901      	subs	r1, #1
 8006f00:	d002      	beq.n	8006f08 <ai_platform_network_create+0x5c>
 8006f02:	6894      	ldr	r4, [r2, #8]
 8006f04:	2c00      	cmp	r4, #0
 8006f06:	d1fa      	bne.n	8006efe <ai_platform_network_create+0x52>
 8006f08:	4a4e      	ldr	r2, [pc, #312]	; (8007044 <ai_platform_network_create+0x198>)
 8006f0a:	6891      	ldr	r1, [r2, #8]
 8006f0c:	b911      	cbnz	r1, 8006f14 <ai_platform_network_create+0x68>
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	3201      	adds	r2, #1
 8006f12:	d008      	beq.n	8006f26 <ai_platform_network_create+0x7a>
 8006f14:	4618      	mov	r0, r3
 8006f16:	e7e6      	b.n	8006ee6 <ai_platform_network_create+0x3a>
 8006f18:	2101      	movs	r1, #1
 8006f1a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8006f1e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006f22:	2900      	cmp	r1, #0
 8006f24:	d1fb      	bne.n	8006f1e <ai_platform_network_create+0x72>
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fcda 	bl	80068e0 <_ai_platform_release_crc>
 8006f2c:	f7ff fcd6 	bl	80068dc <_ai_platform_acquire_crc>
 8006f30:	4b42      	ldr	r3, [pc, #264]	; (800703c <ai_platform_network_create+0x190>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3c:	d010      	beq.n	8006f60 <ai_platform_network_create+0xb4>
 8006f3e:	4b40      	ldr	r3, [pc, #256]	; (8007040 <ai_platform_network_create+0x194>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006f46:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8006f4a:	2900      	cmp	r1, #0
 8006f4c:	d1fb      	bne.n	8006f46 <ai_platform_network_create+0x9a>
 8006f4e:	4a3e      	ldr	r2, [pc, #248]	; (8007048 <ai_platform_network_create+0x19c>)
 8006f50:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006f54:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006f58:	4b3c      	ldr	r3, [pc, #240]	; (800704c <ai_platform_network_create+0x1a0>)
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d00c      	beq.n	8006f78 <ai_platform_network_create+0xcc>
 8006f5e:	e7fe      	b.n	8006f5e <ai_platform_network_create+0xb2>
 8006f60:	4a38      	ldr	r2, [pc, #224]	; (8007044 <ai_platform_network_create+0x198>)
 8006f62:	2301      	movs	r3, #1
 8006f64:	6093      	str	r3, [r2, #8]
 8006f66:	6893      	ldr	r3, [r2, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1fc      	bne.n	8006f66 <ai_platform_network_create+0xba>
 8006f6c:	4b36      	ldr	r3, [pc, #216]	; (8007048 <ai_platform_network_create+0x19c>)
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	4b36      	ldr	r3, [pc, #216]	; (800704c <ai_platform_network_create+0x1a0>)
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d122      	bne.n	8006fbe <ai_platform_network_create+0x112>
 8006f78:	f7ff fcb2 	bl	80068e0 <_ai_platform_release_crc>
 8006f7c:	b38e      	cbz	r6, 8006fe2 <ai_platform_network_create+0x136>
 8006f7e:	4b34      	ldr	r3, [pc, #208]	; (8007050 <ai_platform_network_create+0x1a4>)
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	6035      	str	r5, [r6, #0]
 8006f84:	f000 fc64 	bl	8007850 <core_init>
 8006f88:	b1d0      	cbz	r0, 8006fc0 <ai_platform_network_create+0x114>
 8006f8a:	f7ff fca7 	bl	80068dc <_ai_platform_acquire_crc>
 8006f8e:	4b2b      	ldr	r3, [pc, #172]	; (800703c <ai_platform_network_create+0x190>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9a:	d025      	beq.n	8006fe8 <ai_platform_network_create+0x13c>
 8006f9c:	4a28      	ldr	r2, [pc, #160]	; (8007040 <ai_platform_network_create+0x194>)
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006fa4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1fb      	bne.n	8006fa4 <ai_platform_network_create+0xf8>
 8006fac:	4b26      	ldr	r3, [pc, #152]	; (8007048 <ai_platform_network_create+0x19c>)
 8006fae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006fb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006fb6:	4b25      	ldr	r3, [pc, #148]	; (800704c <ai_platform_network_create+0x1a0>)
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d022      	beq.n	8007002 <ai_platform_network_create+0x156>
 8006fbc:	e7fe      	b.n	8006fbc <ai_platform_network_create+0x110>
 8006fbe:	e7fe      	b.n	8006fbe <ai_platform_network_create+0x112>
 8006fc0:	2430      	movs	r4, #48	; 0x30
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6033      	str	r3, [r6, #0]
 8006fc6:	2610      	movs	r6, #16
 8006fc8:	464a      	mov	r2, r9
 8006fca:	4641      	mov	r1, r8
 8006fcc:	4638      	mov	r0, r7
 8006fce:	f001 fa75 	bl	80084bc <ai_version_get>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f364 0007 	bfi	r0, r4, #0, #8
 8006fda:	64ab      	str	r3, [r5, #72]	; 0x48
 8006fdc:	f366 201f 	bfi	r0, r6, #8, #24
 8006fe0:	e785      	b.n	8006eee <ai_platform_network_create+0x42>
 8006fe2:	f241 0010 	movw	r0, #4112	; 0x1010
 8006fe6:	e782      	b.n	8006eee <ai_platform_network_create+0x42>
 8006fe8:	4a16      	ldr	r2, [pc, #88]	; (8007044 <ai_platform_network_create+0x198>)
 8006fea:	2301      	movs	r3, #1
 8006fec:	6093      	str	r3, [r2, #8]
 8006fee:	6893      	ldr	r3, [r2, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1fc      	bne.n	8006fee <ai_platform_network_create+0x142>
 8006ff4:	4b14      	ldr	r3, [pc, #80]	; (8007048 <ai_platform_network_create+0x19c>)
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	4b14      	ldr	r3, [pc, #80]	; (800704c <ai_platform_network_create+0x1a0>)
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d000      	beq.n	8007002 <ai_platform_network_create+0x156>
 8007000:	e7fe      	b.n	8007000 <ai_platform_network_create+0x154>
 8007002:	f7ff fc6d 	bl	80068e0 <_ai_platform_release_crc>
 8007006:	2200      	movs	r2, #0
 8007008:	4641      	mov	r1, r8
 800700a:	4638      	mov	r0, r7
 800700c:	f001 fa56 	bl	80084bc <ai_version_get>
 8007010:	2200      	movs	r2, #0
 8007012:	4604      	mov	r4, r0
 8007014:	2105      	movs	r1, #5
 8007016:	2001      	movs	r0, #1
 8007018:	f001 fa50 	bl	80084bc <ai_version_get>
 800701c:	4284      	cmp	r4, r0
 800701e:	d001      	beq.n	8007024 <ai_platform_network_create+0x178>
 8007020:	2401      	movs	r4, #1
 8007022:	e7ce      	b.n	8006fc2 <ai_platform_network_create+0x116>
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <ai_platform_network_create+0x1a8>)
 8007026:	9301      	str	r3, [sp, #4]
 8007028:	a801      	add	r0, sp, #4
 800702a:	f001 f88d 	bl	8008148 <ai_check_custom_types>
 800702e:	b110      	cbz	r0, 8007036 <ai_platform_network_create+0x18a>
 8007030:	2600      	movs	r6, #0
 8007032:	4634      	mov	r4, r6
 8007034:	e7c8      	b.n	8006fc8 <ai_platform_network_create+0x11c>
 8007036:	2402      	movs	r4, #2
 8007038:	e7c3      	b.n	8006fc2 <ai_platform_network_create+0x116>
 800703a:	bf00      	nop
 800703c:	e0042000 	.word	0xe0042000
 8007040:	58024000 	.word	0x58024000
 8007044:	40023000 	.word	0x40023000
 8007048:	f407a5c2 	.word	0xf407a5c2
 800704c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007050:	a1c00100 	.word	0xa1c00100
 8007054:	84048403 	.word	0x84048403

08007058 <ai_platform_network_init>:
 8007058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800705c:	b1f8      	cbz	r0, 800709e <ai_platform_network_init+0x46>
 800705e:	4b6e      	ldr	r3, [pc, #440]	; (8007218 <ai_platform_network_init+0x1c0>)
 8007060:	6802      	ldr	r2, [r0, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	4604      	mov	r4, r0
 8007066:	d11a      	bne.n	800709e <ai_platform_network_init+0x46>
 8007068:	460e      	mov	r6, r1
 800706a:	f7ff fc37 	bl	80068dc <_ai_platform_acquire_crc>
 800706e:	4b6b      	ldr	r3, [pc, #428]	; (800721c <ai_platform_network_init+0x1c4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707a:	d03d      	beq.n	80070f8 <ai_platform_network_init+0xa0>
 800707c:	4a68      	ldr	r2, [pc, #416]	; (8007220 <ai_platform_network_init+0x1c8>)
 800707e:	2301      	movs	r3, #1
 8007080:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007084:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1fb      	bne.n	8007084 <ai_platform_network_init+0x2c>
 800708c:	4b65      	ldr	r3, [pc, #404]	; (8007224 <ai_platform_network_init+0x1cc>)
 800708e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007092:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007096:	4b64      	ldr	r3, [pc, #400]	; (8007228 <ai_platform_network_init+0x1d0>)
 8007098:	429a      	cmp	r2, r3
 800709a:	d039      	beq.n	8007110 <ai_platform_network_init+0xb8>
 800709c:	e7fe      	b.n	800709c <ai_platform_network_init+0x44>
 800709e:	f7ff fc1d 	bl	80068dc <_ai_platform_acquire_crc>
 80070a2:	4b5e      	ldr	r3, [pc, #376]	; (800721c <ai_platform_network_init+0x1c4>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ae:	d010      	beq.n	80070d2 <ai_platform_network_init+0x7a>
 80070b0:	4a5b      	ldr	r2, [pc, #364]	; (8007220 <ai_platform_network_init+0x1c8>)
 80070b2:	2301      	movs	r3, #1
 80070b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80070b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1fb      	bne.n	80070b8 <ai_platform_network_init+0x60>
 80070c0:	4b58      	ldr	r3, [pc, #352]	; (8007224 <ai_platform_network_init+0x1cc>)
 80070c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80070c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80070ca:	4b57      	ldr	r3, [pc, #348]	; (8007228 <ai_platform_network_init+0x1d0>)
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d00d      	beq.n	80070ec <ai_platform_network_init+0x94>
 80070d0:	e7fe      	b.n	80070d0 <ai_platform_network_init+0x78>
 80070d2:	4a56      	ldr	r2, [pc, #344]	; (800722c <ai_platform_network_init+0x1d4>)
 80070d4:	2301      	movs	r3, #1
 80070d6:	6093      	str	r3, [r2, #8]
 80070d8:	6893      	ldr	r3, [r2, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1fc      	bne.n	80070d8 <ai_platform_network_init+0x80>
 80070de:	4b51      	ldr	r3, [pc, #324]	; (8007224 <ai_platform_network_init+0x1cc>)
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	6812      	ldr	r2, [r2, #0]
 80070e4:	4b50      	ldr	r3, [pc, #320]	; (8007228 <ai_platform_network_init+0x1d0>)
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d000      	beq.n	80070ec <ai_platform_network_init+0x94>
 80070ea:	e7fe      	b.n	80070ea <ai_platform_network_init+0x92>
 80070ec:	f7ff fbf8 	bl	80068e0 <_ai_platform_release_crc>
 80070f0:	2600      	movs	r6, #0
 80070f2:	4630      	mov	r0, r6
 80070f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f8:	4a4c      	ldr	r2, [pc, #304]	; (800722c <ai_platform_network_init+0x1d4>)
 80070fa:	2301      	movs	r3, #1
 80070fc:	6093      	str	r3, [r2, #8]
 80070fe:	6893      	ldr	r3, [r2, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1fc      	bne.n	80070fe <ai_platform_network_init+0xa6>
 8007104:	4b47      	ldr	r3, [pc, #284]	; (8007224 <ai_platform_network_init+0x1cc>)
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	4b47      	ldr	r3, [pc, #284]	; (8007228 <ai_platform_network_init+0x1d0>)
 800710c:	429a      	cmp	r2, r3
 800710e:	d11c      	bne.n	800714a <ai_platform_network_init+0xf2>
 8007110:	f7ff fbe6 	bl	80068e0 <_ai_platform_release_crc>
 8007114:	2e00      	cmp	r6, #0
 8007116:	d06f      	beq.n	80071f8 <ai_platform_network_init+0x1a0>
 8007118:	4b45      	ldr	r3, [pc, #276]	; (8007230 <ai_platform_network_init+0x1d8>)
 800711a:	6832      	ldr	r2, [r6, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d115      	bne.n	800714c <ai_platform_network_init+0xf4>
 8007120:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8007124:	6933      	ldr	r3, [r6, #16]
 8007126:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800712a:	89f7      	ldrh	r7, [r6, #14]
 800712c:	62a3      	str	r3, [r4, #40]	; 0x28
 800712e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007132:	2303      	movs	r3, #3
 8007134:	84e7      	strh	r7, [r4, #38]	; 0x26
 8007136:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800713a:	60e3      	str	r3, [r4, #12]
 800713c:	4620      	mov	r0, r4
 800713e:	4626      	mov	r6, r4
 8007140:	f001 f82c 	bl	800819c <ai_layers_init_all>
 8007144:	4630      	mov	r0, r6
 8007146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714a:	e7fe      	b.n	800714a <ai_platform_network_init+0xf2>
 800714c:	2101      	movs	r1, #1
 800714e:	4630      	mov	r0, r6
 8007150:	4635      	mov	r5, r6
 8007152:	6876      	ldr	r6, [r6, #4]
 8007154:	f7ff fb74 	bl	8006840 <ai_buffer_get_size>
 8007158:	f105 081c 	add.w	r8, r5, #28
 800715c:	4681      	mov	r9, r0
 800715e:	2101      	movs	r1, #1
 8007160:	4640      	mov	r0, r8
 8007162:	6a2f      	ldr	r7, [r5, #32]
 8007164:	f7ff fb6c 	bl	8006840 <ai_buffer_get_size>
 8007168:	f1b9 0f00 	cmp.w	r9, #0
 800716c:	d025      	beq.n	80071ba <ai_platform_network_init+0x162>
 800716e:	2201      	movs	r2, #1
 8007170:	4696      	mov	lr, r2
 8007172:	bb30      	cbnz	r0, 80071c2 <ai_platform_network_init+0x16a>
 8007174:	4680      	mov	r8, r0
 8007176:	4607      	mov	r7, r0
 8007178:	b376      	cbz	r6, 80071d8 <ai_platform_network_init+0x180>
 800717a:	8be3      	ldrh	r3, [r4, #30]
 800717c:	4573      	cmp	r3, lr
 800717e:	d323      	bcc.n	80071c8 <ai_platform_network_init+0x170>
 8007180:	b142      	cbz	r2, 8007194 <ai_platform_network_init+0x13c>
 8007182:	46ac      	mov	ip, r5
 8007184:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007188:	6a25      	ldr	r5, [r4, #32]
 800718a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800718c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007190:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007194:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007196:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800719a:	2600      	movs	r6, #0
 800719c:	42bb      	cmp	r3, r7
 800719e:	83a6      	strh	r6, [r4, #28]
 80071a0:	d323      	bcc.n	80071ea <ai_platform_network_init+0x192>
 80071a2:	b37f      	cbz	r7, 8007204 <ai_platform_network_init+0x1ac>
 80071a4:	46c4      	mov	ip, r8
 80071a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80071aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80071ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071ae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80071b2:	46b6      	mov	lr, r6
 80071b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80071b8:	e7bb      	b.n	8007132 <ai_platform_network_init+0xda>
 80071ba:	464a      	mov	r2, r9
 80071bc:	46ce      	mov	lr, r9
 80071be:	464d      	mov	r5, r9
 80071c0:	e7d7      	b.n	8007172 <ai_platform_network_init+0x11a>
 80071c2:	b30f      	cbz	r7, 8007208 <ai_platform_network_init+0x1b0>
 80071c4:	2701      	movs	r7, #1
 80071c6:	e7d7      	b.n	8007178 <ai_platform_network_init+0x120>
 80071c8:	2212      	movs	r2, #18
 80071ca:	2116      	movs	r1, #22
 80071cc:	f104 0010 	add.w	r0, r4, #16
 80071d0:	f000 fb46 	bl	8007860 <core_set_error>
 80071d4:	2600      	movs	r6, #0
 80071d6:	e78c      	b.n	80070f2 <ai_platform_network_init+0x9a>
 80071d8:	f1b9 0f00 	cmp.w	r9, #0
 80071dc:	d0cd      	beq.n	800717a <ai_platform_network_init+0x122>
 80071de:	2110      	movs	r1, #16
 80071e0:	2212      	movs	r2, #18
 80071e2:	1860      	adds	r0, r4, r1
 80071e4:	f000 fb3c 	bl	8007860 <core_set_error>
 80071e8:	e783      	b.n	80070f2 <ai_platform_network_init+0x9a>
 80071ea:	2213      	movs	r2, #19
 80071ec:	2116      	movs	r1, #22
 80071ee:	f104 0010 	add.w	r0, r4, #16
 80071f2:	f000 fb35 	bl	8007860 <core_set_error>
 80071f6:	e77c      	b.n	80070f2 <ai_platform_network_init+0x9a>
 80071f8:	2110      	movs	r1, #16
 80071fa:	2211      	movs	r2, #17
 80071fc:	1860      	adds	r0, r4, r1
 80071fe:	f000 fb2f 	bl	8007860 <core_set_error>
 8007202:	e776      	b.n	80070f2 <ai_platform_network_init+0x9a>
 8007204:	46be      	mov	lr, r7
 8007206:	e794      	b.n	8007132 <ai_platform_network_init+0xda>
 8007208:	2110      	movs	r1, #16
 800720a:	2213      	movs	r2, #19
 800720c:	1860      	adds	r0, r4, r1
 800720e:	f000 fb27 	bl	8007860 <core_set_error>
 8007212:	463e      	mov	r6, r7
 8007214:	e76d      	b.n	80070f2 <ai_platform_network_init+0x9a>
 8007216:	bf00      	nop
 8007218:	a1c00100 	.word	0xa1c00100
 800721c:	e0042000 	.word	0xe0042000
 8007220:	58024000 	.word	0x58024000
 8007224:	f407a5c2 	.word	0xf407a5c2
 8007228:	b5e8b5cd 	.word	0xb5e8b5cd
 800722c:	40023000 	.word	0x40023000
 8007230:	a1facade 	.word	0xa1facade

08007234 <ai_platform_network_post_init>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	b1f0      	cbz	r0, 8007276 <ai_platform_network_post_init+0x42>
 8007238:	4b3c      	ldr	r3, [pc, #240]	; (800732c <ai_platform_network_post_init+0xf8>)
 800723a:	6802      	ldr	r2, [r0, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	4604      	mov	r4, r0
 8007240:	d119      	bne.n	8007276 <ai_platform_network_post_init+0x42>
 8007242:	f7ff fb4b 	bl	80068dc <_ai_platform_acquire_crc>
 8007246:	4b3a      	ldr	r3, [pc, #232]	; (8007330 <ai_platform_network_post_init+0xfc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800724e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007252:	d03b      	beq.n	80072cc <ai_platform_network_post_init+0x98>
 8007254:	4a37      	ldr	r2, [pc, #220]	; (8007334 <ai_platform_network_post_init+0x100>)
 8007256:	2301      	movs	r3, #1
 8007258:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800725c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1fb      	bne.n	800725c <ai_platform_network_post_init+0x28>
 8007264:	4b34      	ldr	r3, [pc, #208]	; (8007338 <ai_platform_network_post_init+0x104>)
 8007266:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800726a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800726e:	4b33      	ldr	r3, [pc, #204]	; (800733c <ai_platform_network_post_init+0x108>)
 8007270:	429a      	cmp	r2, r3
 8007272:	d037      	beq.n	80072e4 <ai_platform_network_post_init+0xb0>
 8007274:	e7fe      	b.n	8007274 <ai_platform_network_post_init+0x40>
 8007276:	f7ff fb31 	bl	80068dc <_ai_platform_acquire_crc>
 800727a:	4b2d      	ldr	r3, [pc, #180]	; (8007330 <ai_platform_network_post_init+0xfc>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007286:	d010      	beq.n	80072aa <ai_platform_network_post_init+0x76>
 8007288:	4a2a      	ldr	r2, [pc, #168]	; (8007334 <ai_platform_network_post_init+0x100>)
 800728a:	2301      	movs	r3, #1
 800728c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007290:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1fb      	bne.n	8007290 <ai_platform_network_post_init+0x5c>
 8007298:	4b27      	ldr	r3, [pc, #156]	; (8007338 <ai_platform_network_post_init+0x104>)
 800729a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800729e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072a2:	4b26      	ldr	r3, [pc, #152]	; (800733c <ai_platform_network_post_init+0x108>)
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d00d      	beq.n	80072c4 <ai_platform_network_post_init+0x90>
 80072a8:	e7fe      	b.n	80072a8 <ai_platform_network_post_init+0x74>
 80072aa:	4a25      	ldr	r2, [pc, #148]	; (8007340 <ai_platform_network_post_init+0x10c>)
 80072ac:	2301      	movs	r3, #1
 80072ae:	6093      	str	r3, [r2, #8]
 80072b0:	6893      	ldr	r3, [r2, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1fc      	bne.n	80072b0 <ai_platform_network_post_init+0x7c>
 80072b6:	4b20      	ldr	r3, [pc, #128]	; (8007338 <ai_platform_network_post_init+0x104>)
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	4b1f      	ldr	r3, [pc, #124]	; (800733c <ai_platform_network_post_init+0x108>)
 80072be:	429a      	cmp	r2, r3
 80072c0:	d000      	beq.n	80072c4 <ai_platform_network_post_init+0x90>
 80072c2:	e7fe      	b.n	80072c2 <ai_platform_network_post_init+0x8e>
 80072c4:	f7ff fb0c 	bl	80068e0 <_ai_platform_release_crc>
 80072c8:	2000      	movs	r0, #0
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	4a1c      	ldr	r2, [pc, #112]	; (8007340 <ai_platform_network_post_init+0x10c>)
 80072ce:	2301      	movs	r3, #1
 80072d0:	6093      	str	r3, [r2, #8]
 80072d2:	6893      	ldr	r3, [r2, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1fc      	bne.n	80072d2 <ai_platform_network_post_init+0x9e>
 80072d8:	4b17      	ldr	r3, [pc, #92]	; (8007338 <ai_platform_network_post_init+0x104>)
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	4b17      	ldr	r3, [pc, #92]	; (800733c <ai_platform_network_post_init+0x108>)
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d11a      	bne.n	800731a <ai_platform_network_post_init+0xe6>
 80072e4:	f7ff fafc 	bl	80068e0 <_ai_platform_release_crc>
 80072e8:	68e3      	ldr	r3, [r4, #12]
 80072ea:	f013 0502 	ands.w	r5, r3, #2
 80072ee:	d015      	beq.n	800731c <ai_platform_network_post_init+0xe8>
 80072f0:	4620      	mov	r0, r4
 80072f2:	f000 ff61 	bl	80081b8 <ai_layers_post_init_all>
 80072f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072f8:	b16b      	cbz	r3, 8007316 <ai_platform_network_post_init+0xe2>
 80072fa:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80072fc:	e007      	b.n	800730e <ai_platform_network_post_init+0xda>
 80072fe:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007302:	4798      	blx	r3
 8007304:	692b      	ldr	r3, [r5, #16]
 8007306:	42ab      	cmp	r3, r5
 8007308:	d005      	beq.n	8007316 <ai_platform_network_post_init+0xe2>
 800730a:	b123      	cbz	r3, 8007316 <ai_platform_network_post_init+0xe2>
 800730c:	461d      	mov	r5, r3
 800730e:	4629      	mov	r1, r5
 8007310:	2000      	movs	r0, #0
 8007312:	2d00      	cmp	r5, #0
 8007314:	d1f3      	bne.n	80072fe <ai_platform_network_post_init+0xca>
 8007316:	2001      	movs	r0, #1
 8007318:	bd38      	pop	{r3, r4, r5, pc}
 800731a:	e7fe      	b.n	800731a <ai_platform_network_post_init+0xe6>
 800731c:	2210      	movs	r2, #16
 800731e:	2111      	movs	r1, #17
 8007320:	18a0      	adds	r0, r4, r2
 8007322:	f000 fa9d 	bl	8007860 <core_set_error>
 8007326:	4628      	mov	r0, r5
 8007328:	bd38      	pop	{r3, r4, r5, pc}
 800732a:	bf00      	nop
 800732c:	a1c00100 	.word	0xa1c00100
 8007330:	e0042000 	.word	0xe0042000
 8007334:	58024000 	.word	0x58024000
 8007338:	f407a5c2 	.word	0xf407a5c2
 800733c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007340:	40023000 	.word	0x40023000

08007344 <ai_platform_network_process>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	460e      	mov	r6, r1
 800734a:	b085      	sub	sp, #20
 800734c:	4693      	mov	fp, r2
 800734e:	4605      	mov	r5, r0
 8007350:	b120      	cbz	r0, 800735c <ai_platform_network_process+0x18>
 8007352:	4bb8      	ldr	r3, [pc, #736]	; (8007634 <ai_platform_network_process+0x2f0>)
 8007354:	6802      	ldr	r2, [r0, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	bf18      	it	ne
 800735a:	2500      	movne	r5, #0
 800735c:	f7ff fabe 	bl	80068dc <_ai_platform_acquire_crc>
 8007360:	4bb5      	ldr	r3, [pc, #724]	; (8007638 <ai_platform_network_process+0x2f4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	d010      	beq.n	8007390 <ai_platform_network_process+0x4c>
 800736e:	4ab3      	ldr	r2, [pc, #716]	; (800763c <ai_platform_network_process+0x2f8>)
 8007370:	2301      	movs	r3, #1
 8007372:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007376:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1fb      	bne.n	8007376 <ai_platform_network_process+0x32>
 800737e:	4bb0      	ldr	r3, [pc, #704]	; (8007640 <ai_platform_network_process+0x2fc>)
 8007380:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007384:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007388:	4bae      	ldr	r3, [pc, #696]	; (8007644 <ai_platform_network_process+0x300>)
 800738a:	429a      	cmp	r2, r3
 800738c:	d00d      	beq.n	80073aa <ai_platform_network_process+0x66>
 800738e:	e7fe      	b.n	800738e <ai_platform_network_process+0x4a>
 8007390:	4aad      	ldr	r2, [pc, #692]	; (8007648 <ai_platform_network_process+0x304>)
 8007392:	2301      	movs	r3, #1
 8007394:	6093      	str	r3, [r2, #8]
 8007396:	6893      	ldr	r3, [r2, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1fc      	bne.n	8007396 <ai_platform_network_process+0x52>
 800739c:	4ba8      	ldr	r3, [pc, #672]	; (8007640 <ai_platform_network_process+0x2fc>)
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	4ba8      	ldr	r3, [pc, #672]	; (8007644 <ai_platform_network_process+0x300>)
 80073a4:	429a      	cmp	r2, r3
 80073a6:	f040 812c 	bne.w	8007602 <ai_platform_network_process+0x2be>
 80073aa:	f7ff fa99 	bl	80068e0 <_ai_platform_release_crc>
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	f000 8154 	beq.w	800765c <ai_platform_network_process+0x318>
 80073b4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 8124 	beq.w	8007604 <ai_platform_network_process+0x2c0>
 80073bc:	68eb      	ldr	r3, [r5, #12]
 80073be:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	2700      	movs	r7, #0
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	616f      	str	r7, [r5, #20]
 80073cc:	f040 813e 	bne.w	800764c <ai_platform_network_process+0x308>
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	f000 811d 	beq.w	8007610 <ai_platform_network_process+0x2cc>
 80073d6:	f1ba 0f00 	cmp.w	sl, #0
 80073da:	f000 8119 	beq.w	8007610 <ai_platform_network_process+0x2cc>
 80073de:	f8ba 3000 	ldrh.w	r3, [sl]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 8114 	beq.w	8007610 <ai_platform_network_process+0x2cc>
 80073e8:	69b3      	ldr	r3, [r6, #24]
 80073ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80073f4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d072      	beq.n	80074e2 <ai_platform_network_process+0x19e>
 80073fc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007400:	2c00      	cmp	r4, #0
 8007402:	d06e      	beq.n	80074e2 <ai_platform_network_process+0x19e>
 8007404:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007408:	f8d3 9000 	ldr.w	r9, [r3]
 800740c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007410:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007414:	f000 81e0 	beq.w	80077d8 <ai_platform_network_process+0x494>
 8007418:	69a3      	ldr	r3, [r4, #24]
 800741a:	2101      	movs	r1, #1
 800741c:	4630      	mov	r0, r6
 800741e:	685d      	ldr	r5, [r3, #4]
 8007420:	f7ff fa0e 	bl	8006840 <ai_buffer_get_size>
 8007424:	4285      	cmp	r5, r0
 8007426:	f0c0 811b 	bcc.w	8007660 <ai_platform_network_process+0x31c>
 800742a:	68e0      	ldr	r0, [r4, #12]
 800742c:	69b1      	ldr	r1, [r6, #24]
 800742e:	68c2      	ldr	r2, [r0, #12]
 8007430:	68cb      	ldr	r3, [r1, #12]
 8007432:	429a      	cmp	r2, r3
 8007434:	f040 8114 	bne.w	8007660 <ai_platform_network_process+0x31c>
 8007438:	6882      	ldr	r2, [r0, #8]
 800743a:	688b      	ldr	r3, [r1, #8]
 800743c:	429a      	cmp	r2, r3
 800743e:	f040 810f 	bne.w	8007660 <ai_platform_network_process+0x31c>
 8007442:	6842      	ldr	r2, [r0, #4]
 8007444:	684b      	ldr	r3, [r1, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	f040 810a 	bne.w	8007660 <ai_platform_network_process+0x31c>
 800744c:	69a3      	ldr	r3, [r4, #24]
 800744e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007452:	f001 f8e5 	bl	8008620 <ai_array_get_data_byte_size>
 8007456:	4605      	mov	r5, r0
 8007458:	4620      	mov	r0, r4
 800745a:	f001 f835 	bl	80084c8 <get_tensor_byte_size>
 800745e:	4285      	cmp	r5, r0
 8007460:	f0c0 80fe 	bcc.w	8007660 <ai_platform_network_process+0x31c>
 8007464:	69a3      	ldr	r3, [r4, #24]
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	f001 f846 	bl	80084f8 <ai_array_to_buffer_fmt>
 800746c:	6833      	ldr	r3, [r6, #0]
 800746e:	4058      	eors	r0, r3
 8007470:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007474:	f040 81bb 	bne.w	80077ee <ai_platform_network_process+0x4aa>
 8007478:	6873      	ldr	r3, [r6, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 81ae 	beq.w	80077dc <ai_platform_network_process+0x498>
 8007480:	69b3      	ldr	r3, [r6, #24]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 819e 	beq.w	80077c6 <ai_platform_network_process+0x482>
 800748a:	9a01      	ldr	r2, [sp, #4]
 800748c:	429a      	cmp	r2, r3
 800748e:	bf38      	it	cc
 8007490:	461a      	movcc	r2, r3
 8007492:	4620      	mov	r0, r4
 8007494:	9201      	str	r2, [sp, #4]
 8007496:	f001 f817 	bl	80084c8 <get_tensor_byte_size>
 800749a:	f8c8 0008 	str.w	r0, [r8, #8]
 800749e:	69b3      	ldr	r3, [r6, #24]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	fb00 f303 	mul.w	r3, r0, r3
 80074a6:	f8c8 300c 	str.w	r3, [r8, #12]
 80074aa:	6871      	ldr	r1, [r6, #4]
 80074ac:	f8c8 1004 	str.w	r1, [r8, #4]
 80074b0:	440b      	add	r3, r1
 80074b2:	f849 300b 	str.w	r3, [r9, fp]
 80074b6:	69a0      	ldr	r0, [r4, #24]
 80074b8:	6803      	ldr	r3, [r0, #0]
 80074ba:	009a      	lsls	r2, r3, #2
 80074bc:	f107 0701 	add.w	r7, r7, #1
 80074c0:	f106 061c 	add.w	r6, r6, #28
 80074c4:	f100 80af 	bmi.w	8007626 <ai_platform_network_process+0x2e2>
 80074c8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80074cc:	1a9b      	subs	r3, r3, r2
 80074ce:	4419      	add	r1, r3
 80074d0:	6081      	str	r1, [r0, #8]
 80074d2:	69a3      	ldr	r3, [r4, #24]
 80074d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80074d8:	60da      	str	r2, [r3, #12]
 80074da:	f8ba 3000 	ldrh.w	r3, [sl]
 80074de:	42bb      	cmp	r3, r7
 80074e0:	d888      	bhi.n	80073f4 <ai_platform_network_process+0xb0>
 80074e2:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80074e6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80074e8:	f1bb 0f00 	cmp.w	fp, #0
 80074ec:	f000 8188 	beq.w	8007800 <ai_platform_network_process+0x4bc>
 80074f0:	2a01      	cmp	r2, #1
 80074f2:	f240 8160 	bls.w	80077b6 <ai_platform_network_process+0x472>
 80074f6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80074fa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 8159 	beq.w	80077b6 <ai_platform_network_process+0x472>
 8007504:	465e      	mov	r6, fp
 8007506:	2700      	movs	r7, #0
 8007508:	462c      	mov	r4, r5
 800750a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 80b4 	beq.w	800767c <ai_platform_network_process+0x338>
 8007514:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8007518:	2d00      	cmp	r5, #0
 800751a:	f000 80af 	beq.w	800767c <ai_platform_network_process+0x338>
 800751e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007522:	f8d3 8000 	ldr.w	r8, [r3]
 8007526:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800752a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800752e:	f000 8173 	beq.w	8007818 <ai_platform_network_process+0x4d4>
 8007532:	69ab      	ldr	r3, [r5, #24]
 8007534:	2101      	movs	r1, #1
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	9302      	str	r3, [sp, #8]
 800753a:	4630      	mov	r0, r6
 800753c:	f7ff f980 	bl	8006840 <ai_buffer_get_size>
 8007540:	9b02      	ldr	r3, [sp, #8]
 8007542:	4283      	cmp	r3, r0
 8007544:	f0c0 8136 	bcc.w	80077b4 <ai_platform_network_process+0x470>
 8007548:	68e8      	ldr	r0, [r5, #12]
 800754a:	69b1      	ldr	r1, [r6, #24]
 800754c:	68c2      	ldr	r2, [r0, #12]
 800754e:	68cb      	ldr	r3, [r1, #12]
 8007550:	429a      	cmp	r2, r3
 8007552:	f040 812f 	bne.w	80077b4 <ai_platform_network_process+0x470>
 8007556:	6882      	ldr	r2, [r0, #8]
 8007558:	688b      	ldr	r3, [r1, #8]
 800755a:	429a      	cmp	r2, r3
 800755c:	f040 812a 	bne.w	80077b4 <ai_platform_network_process+0x470>
 8007560:	6842      	ldr	r2, [r0, #4]
 8007562:	684b      	ldr	r3, [r1, #4]
 8007564:	429a      	cmp	r2, r3
 8007566:	f040 8125 	bne.w	80077b4 <ai_platform_network_process+0x470>
 800756a:	69ab      	ldr	r3, [r5, #24]
 800756c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007570:	f001 f856 	bl	8008620 <ai_array_get_data_byte_size>
 8007574:	9002      	str	r0, [sp, #8]
 8007576:	4628      	mov	r0, r5
 8007578:	f000 ffa6 	bl	80084c8 <get_tensor_byte_size>
 800757c:	9b02      	ldr	r3, [sp, #8]
 800757e:	4283      	cmp	r3, r0
 8007580:	f0c0 8118 	bcc.w	80077b4 <ai_platform_network_process+0x470>
 8007584:	69ab      	ldr	r3, [r5, #24]
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	f000 ffb6 	bl	80084f8 <ai_array_to_buffer_fmt>
 800758c:	6833      	ldr	r3, [r6, #0]
 800758e:	4058      	eors	r0, r3
 8007590:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007594:	f040 8138 	bne.w	8007808 <ai_platform_network_process+0x4c4>
 8007598:	6873      	ldr	r3, [r6, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 814f 	beq.w	800783e <ai_platform_network_process+0x4fa>
 80075a0:	69b3      	ldr	r3, [r6, #24]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 8141 	beq.w	800782c <ai_platform_network_process+0x4e8>
 80075aa:	9a01      	ldr	r2, [sp, #4]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	bf38      	it	cc
 80075b0:	461a      	movcc	r2, r3
 80075b2:	4628      	mov	r0, r5
 80075b4:	9201      	str	r2, [sp, #4]
 80075b6:	f000 ff87 	bl	80084c8 <get_tensor_byte_size>
 80075ba:	f8ca 0008 	str.w	r0, [sl, #8]
 80075be:	69b3      	ldr	r3, [r6, #24]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	fb00 f303 	mul.w	r3, r0, r3
 80075c6:	f8ca 300c 	str.w	r3, [sl, #12]
 80075ca:	6871      	ldr	r1, [r6, #4]
 80075cc:	f8ca 1004 	str.w	r1, [sl, #4]
 80075d0:	440b      	add	r3, r1
 80075d2:	f848 300b 	str.w	r3, [r8, fp]
 80075d6:	69a8      	ldr	r0, [r5, #24]
 80075d8:	6803      	ldr	r3, [r0, #0]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	f107 0701 	add.w	r7, r7, #1
 80075e0:	f106 061c 	add.w	r6, r6, #28
 80075e4:	d445      	bmi.n	8007672 <ai_platform_network_process+0x32e>
 80075e6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	4419      	add	r1, r3
 80075ee:	6081      	str	r1, [r0, #8]
 80075f0:	69ab      	ldr	r3, [r5, #24]
 80075f2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80075f6:	60da      	str	r2, [r3, #12]
 80075f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80075fc:	429f      	cmp	r7, r3
 80075fe:	d384      	bcc.n	800750a <ai_platform_network_process+0x1c6>
 8007600:	e03c      	b.n	800767c <ai_platform_network_process+0x338>
 8007602:	e7fe      	b.n	8007602 <ai_platform_network_process+0x2be>
 8007604:	68ea      	ldr	r2, [r5, #12]
 8007606:	616b      	str	r3, [r5, #20]
 8007608:	f002 0203 	and.w	r2, r2, #3
 800760c:	2a03      	cmp	r2, #3
 800760e:	d11d      	bne.n	800764c <ai_platform_network_process+0x308>
 8007610:	2217      	movs	r2, #23
 8007612:	2112      	movs	r1, #18
 8007614:	f105 0010 	add.w	r0, r5, #16
 8007618:	f000 f922 	bl	8007860 <core_set_error>
 800761c:	2400      	movs	r4, #0
 800761e:	4620      	mov	r0, r4
 8007620:	b005      	add	sp, #20
 8007622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007626:	f8ba 3000 	ldrh.w	r3, [sl]
 800762a:	429f      	cmp	r7, r3
 800762c:	f4ff aee2 	bcc.w	80073f4 <ai_platform_network_process+0xb0>
 8007630:	e757      	b.n	80074e2 <ai_platform_network_process+0x19e>
 8007632:	bf00      	nop
 8007634:	a1c00100 	.word	0xa1c00100
 8007638:	e0042000 	.word	0xe0042000
 800763c:	58024000 	.word	0x58024000
 8007640:	f407a5c2 	.word	0xf407a5c2
 8007644:	b5e8b5cd 	.word	0xb5e8b5cd
 8007648:	40023000 	.word	0x40023000
 800764c:	2230      	movs	r2, #48	; 0x30
 800764e:	2111      	movs	r1, #17
 8007650:	f105 0010 	add.w	r0, r5, #16
 8007654:	f000 f904 	bl	8007860 <core_set_error>
 8007658:	2400      	movs	r4, #0
 800765a:	e7e0      	b.n	800761e <ai_platform_network_process+0x2da>
 800765c:	462c      	mov	r4, r5
 800765e:	e7de      	b.n	800761e <ai_platform_network_process+0x2da>
 8007660:	9d02      	ldr	r5, [sp, #8]
 8007662:	2218      	movs	r2, #24
 8007664:	2112      	movs	r1, #18
 8007666:	f105 0010 	add.w	r0, r5, #16
 800766a:	f000 f8f9 	bl	8007860 <core_set_error>
 800766e:	2400      	movs	r4, #0
 8007670:	e7d5      	b.n	800761e <ai_platform_network_process+0x2da>
 8007672:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007676:	429f      	cmp	r7, r3
 8007678:	f4ff af47 	bcc.w	800750a <ai_platform_network_process+0x1c6>
 800767c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007680:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8007682:	82a3      	strh	r3, [r4, #20]
 8007684:	4625      	mov	r5, r4
 8007686:	2a00      	cmp	r2, #0
 8007688:	f040 808e 	bne.w	80077a8 <ai_platform_network_process+0x464>
 800768c:	4616      	mov	r6, r2
 800768e:	4617      	mov	r7, r2
 8007690:	8aec      	ldrh	r4, [r5, #22]
 8007692:	429c      	cmp	r4, r3
 8007694:	bf38      	it	cc
 8007696:	46ab      	movcc	fp, r5
 8007698:	d2c1      	bcs.n	800761e <ai_platform_network_process+0x2da>
 800769a:	2e00      	cmp	r6, #0
 800769c:	d030      	beq.n	8007700 <ai_platform_network_process+0x3bc>
 800769e:	f04f 0800 	mov.w	r8, #0
 80076a2:	e014      	b.n	80076ce <ai_platform_network_process+0x38a>
 80076a4:	6882      	ldr	r2, [r0, #8]
 80076a6:	68c5      	ldr	r5, [r0, #12]
 80076a8:	6863      	ldr	r3, [r4, #4]
 80076aa:	1b52      	subs	r2, r2, r5
 80076ac:	4413      	add	r3, r2
 80076ae:	6083      	str	r3, [r0, #8]
 80076b0:	698b      	ldr	r3, [r1, #24]
 80076b2:	6862      	ldr	r2, [r4, #4]
 80076b4:	60da      	str	r2, [r3, #12]
 80076b6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80076ba:	f859 200a 	ldr.w	r2, [r9, sl]
 80076be:	440b      	add	r3, r1
 80076c0:	4293      	cmp	r3, r2
 80076c2:	bf24      	itt	cs
 80076c4:	68e3      	ldrcs	r3, [r4, #12]
 80076c6:	1ad3      	subcs	r3, r2, r3
 80076c8:	6063      	str	r3, [r4, #4]
 80076ca:	f108 0801 	add.w	r8, r8, #1
 80076ce:	8833      	ldrh	r3, [r6, #0]
 80076d0:	4543      	cmp	r3, r8
 80076d2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80076d6:	d913      	bls.n	8007700 <ai_platform_network_process+0x3bc>
 80076d8:	6873      	ldr	r3, [r6, #4]
 80076da:	b18b      	cbz	r3, 8007700 <ai_platform_network_process+0x3bc>
 80076dc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80076e0:	b171      	cbz	r1, 8007700 <ai_platform_network_process+0x3bc>
 80076e2:	6988      	ldr	r0, [r1, #24]
 80076e4:	68b2      	ldr	r2, [r6, #8]
 80076e6:	6803      	ldr	r3, [r0, #0]
 80076e8:	f8d2 9000 	ldr.w	r9, [r2]
 80076ec:	009d      	lsls	r5, r3, #2
 80076ee:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80076f2:	d5d7      	bpl.n	80076a4 <ai_platform_network_process+0x360>
 80076f4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80076f8:	6880      	ldr	r0, [r0, #8]
 80076fa:	f000 ffcd 	bl	8008698 <memcpy>
 80076fe:	e7da      	b.n	80076b6 <ai_platform_network_process+0x372>
 8007700:	4658      	mov	r0, fp
 8007702:	f000 fd6d 	bl	80081e0 <ai_layers_forward_all>
 8007706:	2f00      	cmp	r7, #0
 8007708:	d03f      	beq.n	800778a <ai_platform_network_process+0x446>
 800770a:	2400      	movs	r4, #0
 800770c:	e016      	b.n	800773c <ai_platform_network_process+0x3f8>
 800770e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007712:	f859 100a 	ldr.w	r1, [r9, sl]
 8007716:	4413      	add	r3, r2
 8007718:	428b      	cmp	r3, r1
 800771a:	bf24      	itt	cs
 800771c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007720:	1acb      	subcs	r3, r1, r3
 8007722:	f8c8 3004 	str.w	r3, [r8, #4]
 8007726:	6981      	ldr	r1, [r0, #24]
 8007728:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800772c:	1b52      	subs	r2, r2, r5
 800772e:	4413      	add	r3, r2
 8007730:	608b      	str	r3, [r1, #8]
 8007732:	6983      	ldr	r3, [r0, #24]
 8007734:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007738:	60da      	str	r2, [r3, #12]
 800773a:	3401      	adds	r4, #1
 800773c:	883b      	ldrh	r3, [r7, #0]
 800773e:	42a3      	cmp	r3, r4
 8007740:	d923      	bls.n	800778a <ai_platform_network_process+0x446>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	b30b      	cbz	r3, 800778a <ai_platform_network_process+0x446>
 8007746:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800774a:	b1f0      	cbz	r0, 800778a <ai_platform_network_process+0x446>
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	6983      	ldr	r3, [r0, #24]
 8007750:	f8d2 9000 	ldr.w	r9, [r2]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	0092      	lsls	r2, r2, #2
 8007758:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800775c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007760:	d5d5      	bpl.n	800770e <ai_platform_network_process+0x3ca>
 8007762:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007766:	6899      	ldr	r1, [r3, #8]
 8007768:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800776c:	f000 ff94 	bl	8008698 <memcpy>
 8007770:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007774:	f859 200a 	ldr.w	r2, [r9, sl]
 8007778:	440b      	add	r3, r1
 800777a:	4293      	cmp	r3, r2
 800777c:	bf24      	itt	cs
 800777e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007782:	1ad3      	subcs	r3, r2, r3
 8007784:	f8c8 3004 	str.w	r3, [r8, #4]
 8007788:	e7d7      	b.n	800773a <ai_platform_network_process+0x3f6>
 800778a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800778e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007792:	3401      	adds	r4, #1
 8007794:	b2a4      	uxth	r4, r4
 8007796:	42a3      	cmp	r3, r4
 8007798:	f8ab 4016 	strh.w	r4, [fp, #22]
 800779c:	f63f af7d 	bhi.w	800769a <ai_platform_network_process+0x356>
 80077a0:	4620      	mov	r0, r4
 80077a2:	b005      	add	sp, #20
 80077a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a8:	2a01      	cmp	r2, #1
 80077aa:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80077ac:	d03c      	beq.n	8007828 <ai_platform_network_process+0x4e4>
 80077ae:	f106 070c 	add.w	r7, r6, #12
 80077b2:	e76d      	b.n	8007690 <ai_platform_network_process+0x34c>
 80077b4:	4625      	mov	r5, r4
 80077b6:	2218      	movs	r2, #24
 80077b8:	2113      	movs	r1, #19
 80077ba:	f105 0010 	add.w	r0, r5, #16
 80077be:	f000 f84f 	bl	8007860 <core_set_error>
 80077c2:	2400      	movs	r4, #0
 80077c4:	e72b      	b.n	800761e <ai_platform_network_process+0x2da>
 80077c6:	9d02      	ldr	r5, [sp, #8]
 80077c8:	4604      	mov	r4, r0
 80077ca:	2221      	movs	r2, #33	; 0x21
 80077cc:	2112      	movs	r1, #18
 80077ce:	f105 0010 	add.w	r0, r5, #16
 80077d2:	f000 f845 	bl	8007860 <core_set_error>
 80077d6:	e722      	b.n	800761e <ai_platform_network_process+0x2da>
 80077d8:	9d02      	ldr	r5, [sp, #8]
 80077da:	e719      	b.n	8007610 <ai_platform_network_process+0x2cc>
 80077dc:	9d02      	ldr	r5, [sp, #8]
 80077de:	4604      	mov	r4, r0
 80077e0:	2217      	movs	r2, #23
 80077e2:	2112      	movs	r1, #18
 80077e4:	f105 0010 	add.w	r0, r5, #16
 80077e8:	f000 f83a 	bl	8007860 <core_set_error>
 80077ec:	e717      	b.n	800761e <ai_platform_network_process+0x2da>
 80077ee:	9d02      	ldr	r5, [sp, #8]
 80077f0:	2219      	movs	r2, #25
 80077f2:	2112      	movs	r1, #18
 80077f4:	f105 0010 	add.w	r0, r5, #16
 80077f8:	f000 f832 	bl	8007860 <core_set_error>
 80077fc:	2400      	movs	r4, #0
 80077fe:	e70e      	b.n	800761e <ai_platform_network_process+0x2da>
 8007800:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007804:	82ab      	strh	r3, [r5, #20]
 8007806:	e73e      	b.n	8007686 <ai_platform_network_process+0x342>
 8007808:	f104 0010 	add.w	r0, r4, #16
 800780c:	2219      	movs	r2, #25
 800780e:	2113      	movs	r1, #19
 8007810:	f000 f826 	bl	8007860 <core_set_error>
 8007814:	2400      	movs	r4, #0
 8007816:	e702      	b.n	800761e <ai_platform_network_process+0x2da>
 8007818:	f104 0010 	add.w	r0, r4, #16
 800781c:	2217      	movs	r2, #23
 800781e:	2113      	movs	r1, #19
 8007820:	f000 f81e 	bl	8007860 <core_set_error>
 8007824:	4654      	mov	r4, sl
 8007826:	e6fa      	b.n	800761e <ai_platform_network_process+0x2da>
 8007828:	2700      	movs	r7, #0
 800782a:	e731      	b.n	8007690 <ai_platform_network_process+0x34c>
 800782c:	4625      	mov	r5, r4
 800782e:	2221      	movs	r2, #33	; 0x21
 8007830:	4604      	mov	r4, r0
 8007832:	2113      	movs	r1, #19
 8007834:	f105 0010 	add.w	r0, r5, #16
 8007838:	f000 f812 	bl	8007860 <core_set_error>
 800783c:	e6ef      	b.n	800761e <ai_platform_network_process+0x2da>
 800783e:	4625      	mov	r5, r4
 8007840:	2217      	movs	r2, #23
 8007842:	4604      	mov	r4, r0
 8007844:	2113      	movs	r1, #19
 8007846:	f105 0010 	add.w	r0, r5, #16
 800784a:	f000 f809 	bl	8007860 <core_set_error>
 800784e:	e6e6      	b.n	800761e <ai_platform_network_process+0x2da>

08007850 <core_init>:
 8007850:	2001      	movs	r0, #1
 8007852:	4770      	bx	lr

08007854 <core_get_error>:
 8007854:	4603      	mov	r3, r0
 8007856:	2200      	movs	r2, #0
 8007858:	6800      	ldr	r0, [r0, #0]
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop

08007860 <core_set_error>:
 8007860:	4603      	mov	r3, r0
 8007862:	7800      	ldrb	r0, [r0, #0]
 8007864:	b108      	cbz	r0, 800786a <core_set_error+0xa>
 8007866:	2000      	movs	r0, #0
 8007868:	4770      	bx	lr
 800786a:	7019      	strb	r1, [r3, #0]
 800786c:	6819      	ldr	r1, [r3, #0]
 800786e:	f362 211f 	bfi	r1, r2, #8, #24
 8007872:	2001      	movs	r0, #1
 8007874:	6019      	str	r1, [r3, #0]
 8007876:	4770      	bx	lr

08007878 <forward_dense>:
 8007878:	6983      	ldr	r3, [r0, #24]
 800787a:	881a      	ldrh	r2, [r3, #0]
 800787c:	2a00      	cmp	r2, #0
 800787e:	f000 8181 	beq.w	8007b84 <forward_dense+0x30c>
 8007882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007886:	ed2d 8b02 	vpush	{d8}
 800788a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800788e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8007892:	b095      	sub	sp, #84	; 0x54
 8007894:	b105      	cbz	r5, 8007898 <forward_dense+0x20>
 8007896:	682d      	ldr	r5, [r5, #0]
 8007898:	2a01      	cmp	r2, #1
 800789a:	f000 828f 	beq.w	8007dbc <forward_dense+0x544>
 800789e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80078a2:	b106      	cbz	r6, 80078a6 <forward_dense+0x2e>
 80078a4:	6836      	ldr	r6, [r6, #0]
 80078a6:	2a02      	cmp	r2, #2
 80078a8:	f000 816e 	beq.w	8007b88 <forward_dense+0x310>
 80078ac:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80078b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 8274 	beq.w	8007da0 <forward_dense+0x528>
 80078b8:	4619      	mov	r1, r3
 80078ba:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80078be:	6809      	ldr	r1, [r1, #0]
 80078c0:	910d      	str	r1, [sp, #52]	; 0x34
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	f240 826e 	bls.w	8007da4 <forward_dense+0x52c>
 80078c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ce:	460b      	mov	r3, r1
 80078d0:	68e8      	ldr	r0, [r5, #12]
 80078d2:	68f7      	ldr	r7, [r6, #12]
 80078d4:	6840      	ldr	r0, [r0, #4]
 80078d6:	6999      	ldr	r1, [r3, #24]
 80078d8:	9013      	str	r0, [sp, #76]	; 0x4c
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	680b      	ldr	r3, [r1, #0]
 80078de:	9012      	str	r0, [sp, #72]	; 0x48
 80078e0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80078e4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80078e8:	fb00 f404 	mul.w	r4, r0, r4
 80078ec:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80078f0:	fa4e f000 	asr.w	r0, lr, r0
 80078f4:	2a03      	cmp	r2, #3
 80078f6:	9010      	str	r0, [sp, #64]	; 0x40
 80078f8:	f000 825d 	beq.w	8007db6 <forward_dense+0x53e>
 80078fc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8007900:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007904:	2a00      	cmp	r2, #0
 8007906:	f000 8246 	beq.w	8007d96 <forward_dense+0x51e>
 800790a:	6812      	ldr	r2, [r2, #0]
 800790c:	2a00      	cmp	r2, #0
 800790e:	f000 8242 	beq.w	8007d96 <forward_dense+0x51e>
 8007912:	2b04      	cmp	r3, #4
 8007914:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007918:	f000 822c 	beq.w	8007d74 <forward_dense+0x4fc>
 800791c:	2b08      	cmp	r3, #8
 800791e:	f000 8229 	beq.w	8007d74 <forward_dense+0x4fc>
 8007922:	f04f 0b00 	mov.w	fp, #0
 8007926:	69b2      	ldr	r2, [r6, #24]
 8007928:	69ab      	ldr	r3, [r5, #24]
 800792a:	6891      	ldr	r1, [r2, #8]
 800792c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	6952      	ldr	r2, [r2, #20]
 8007932:	9106      	str	r1, [sp, #24]
 8007934:	fb07 f404 	mul.w	r4, r7, r4
 8007938:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800793c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800793e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007942:	4281      	cmp	r1, r0
 8007944:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8007948:	900e      	str	r0, [sp, #56]	; 0x38
 800794a:	940c      	str	r4, [sp, #48]	; 0x30
 800794c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8007950:	f080 8113 	bcs.w	8007b7a <forward_dense+0x302>
 8007954:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007956:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8007ba4 <forward_dense+0x32c>
 800795a:	f021 0201 	bic.w	r2, r1, #1
 800795e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8007962:	9204      	str	r2, [sp, #16]
 8007964:	f001 0201 	and.w	r2, r1, #1
 8007968:	08c8      	lsrs	r0, r1, #3
 800796a:	9208      	str	r2, [sp, #32]
 800796c:	008a      	lsls	r2, r1, #2
 800796e:	f001 0a07 	and.w	sl, r1, #7
 8007972:	920f      	str	r2, [sp, #60]	; 0x3c
 8007974:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8007978:	3320      	adds	r3, #32
 800797a:	465c      	mov	r4, fp
 800797c:	9007      	str	r0, [sp, #28]
 800797e:	46cb      	mov	fp, r9
 8007980:	9205      	str	r2, [sp, #20]
 8007982:	9302      	str	r3, [sp, #8]
 8007984:	46c1      	mov	r9, r8
 8007986:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800798a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	9b02      	ldr	r3, [sp, #8]
 8007992:	3b20      	subs	r3, #32
 8007994:	930a      	str	r3, [sp, #40]	; 0x28
 8007996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007998:	b10b      	cbz	r3, 800799e <forward_dense+0x126>
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2c00      	cmp	r4, #0
 80079a0:	f000 81da 	beq.w	8007d58 <forward_dense+0x4e0>
 80079a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80079a6:	2904      	cmp	r1, #4
 80079a8:	9906      	ldr	r1, [sp, #24]
 80079aa:	f000 80fd 	beq.w	8007ba8 <forward_dense+0x330>
 80079ae:	4549      	cmp	r1, r9
 80079b0:	f080 80d2 	bcs.w	8007b58 <forward_dense+0x2e0>
 80079b4:	460f      	mov	r7, r1
 80079b6:	9907      	ldr	r1, [sp, #28]
 80079b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80079bc:	f8dd a014 	ldr.w	sl, [sp, #20]
 80079c0:	1c4e      	adds	r6, r1, #1
 80079c2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80079c6:	4694      	mov	ip, r2
 80079c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80079ca:	468e      	mov	lr, r1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80de 	beq.w	8007b8e <forward_dense+0x316>
 80079d2:	ecf3 2a01 	vldmia	r3!, {s5}
 80079d6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007ba4 <forward_dense+0x32c>
 80079da:	f1be 0f00 	cmp.w	lr, #0
 80079de:	f000 80de 	beq.w	8007b9e <forward_dense+0x326>
 80079e2:	f10c 0108 	add.w	r1, ip, #8
 80079e6:	4640      	mov	r0, r8
 80079e8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80079ec:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80079f0:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80079f4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80079f8:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80079fc:	ed10 5a04 	vldr	s10, [r0, #-16]
 8007a00:	ed50 5a03 	vldr	s11, [r0, #-12]
 8007a04:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007a08:	ed50 6a01 	vldr	s13, [r0, #-4]
 8007a0c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a10:	edd5 7a00 	vldr	s15, [r5]
 8007a14:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8007a18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a1c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007a20:	ed95 3a00 	vldr	s6, [r5]
 8007a24:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8007a28:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007a2c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a30:	3108      	adds	r1, #8
 8007a32:	edd5 3a00 	vldr	s7, [r5]
 8007a36:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007a3a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007a3e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a42:	3020      	adds	r0, #32
 8007a44:	ed95 4a00 	vldr	s8, [r5]
 8007a48:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007a4c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007a50:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a54:	edd5 4a00 	vldr	s9, [r5]
 8007a58:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007a5c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007a60:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a64:	ed95 5a00 	vldr	s10, [r5]
 8007a68:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007a6c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007a70:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a74:	edd5 5a00 	vldr	s11, [r5]
 8007a78:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007a7c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007a80:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007a84:	428e      	cmp	r6, r1
 8007a86:	ed95 6a00 	vldr	s12, [r5]
 8007a8a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a92:	d1a9      	bne.n	80079e8 <forward_dense+0x170>
 8007a94:	f1a6 0108 	sub.w	r1, r6, #8
 8007a98:	4650      	mov	r0, sl
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	d04a      	beq.n	8007b34 <forward_dense+0x2bc>
 8007a9e:	780d      	ldrb	r5, [r1, #0]
 8007aa0:	edd0 6a00 	vldr	s13, [r0]
 8007aa4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007aa8:	edd5 7a00 	vldr	s15, [r5]
 8007aac:	2a01      	cmp	r2, #1
 8007aae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ab2:	d03f      	beq.n	8007b34 <forward_dense+0x2bc>
 8007ab4:	784d      	ldrb	r5, [r1, #1]
 8007ab6:	edd0 6a01 	vldr	s13, [r0, #4]
 8007aba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007abe:	edd5 7a00 	vldr	s15, [r5]
 8007ac2:	2a02      	cmp	r2, #2
 8007ac4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ac8:	d034      	beq.n	8007b34 <forward_dense+0x2bc>
 8007aca:	788d      	ldrb	r5, [r1, #2]
 8007acc:	edd0 6a02 	vldr	s13, [r0, #8]
 8007ad0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ad4:	edd5 7a00 	vldr	s15, [r5]
 8007ad8:	2a03      	cmp	r2, #3
 8007ada:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ade:	d029      	beq.n	8007b34 <forward_dense+0x2bc>
 8007ae0:	78cd      	ldrb	r5, [r1, #3]
 8007ae2:	edd0 6a03 	vldr	s13, [r0, #12]
 8007ae6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007aea:	edd5 7a00 	vldr	s15, [r5]
 8007aee:	2a04      	cmp	r2, #4
 8007af0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007af4:	d01e      	beq.n	8007b34 <forward_dense+0x2bc>
 8007af6:	790d      	ldrb	r5, [r1, #4]
 8007af8:	edd0 6a04 	vldr	s13, [r0, #16]
 8007afc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b00:	edd5 7a00 	vldr	s15, [r5]
 8007b04:	2a05      	cmp	r2, #5
 8007b06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b0a:	d013      	beq.n	8007b34 <forward_dense+0x2bc>
 8007b0c:	794d      	ldrb	r5, [r1, #5]
 8007b0e:	edd0 6a05 	vldr	s13, [r0, #20]
 8007b12:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007b16:	edd5 7a00 	vldr	s15, [r5]
 8007b1a:	2a06      	cmp	r2, #6
 8007b1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b20:	d008      	beq.n	8007b34 <forward_dense+0x2bc>
 8007b22:	7989      	ldrb	r1, [r1, #6]
 8007b24:	edd0 7a06 	vldr	s15, [r0, #24]
 8007b28:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007b2c:	edd1 6a00 	vldr	s13, [r1]
 8007b30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007b34:	44dc      	add	ip, fp
 8007b36:	445e      	add	r6, fp
 8007b38:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007b3c:	eca7 7a01 	vstmia	r7!, {s14}
 8007b40:	454f      	cmp	r7, r9
 8007b42:	f4ff af43 	bcc.w	80079cc <forward_dense+0x154>
 8007b46:	9a06      	ldr	r2, [sp, #24]
 8007b48:	eba9 0302 	sub.w	r3, r9, r2
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	f023 0303 	bic.w	r3, r3, #3
 8007b52:	3304      	adds	r3, #4
 8007b54:	18d3      	adds	r3, r2, r3
 8007b56:	9306      	str	r3, [sp, #24]
 8007b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b5a:	9a05      	ldr	r2, [sp, #20]
 8007b5c:	4499      	add	r9, r3
 8007b5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b60:	441a      	add	r2, r3
 8007b62:	9205      	str	r2, [sp, #20]
 8007b64:	9a02      	ldr	r2, [sp, #8]
 8007b66:	441a      	add	r2, r3
 8007b68:	9202      	str	r2, [sp, #8]
 8007b6a:	9a04      	ldr	r2, [sp, #16]
 8007b6c:	441a      	add	r2, r3
 8007b6e:	9204      	str	r2, [sp, #16]
 8007b70:	9b06      	ldr	r3, [sp, #24]
 8007b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b74:	4293      	cmp	r3, r2
 8007b76:	f4ff af08 	bcc.w	800798a <forward_dense+0x112>
 8007b7a:	b015      	add	sp, #84	; 0x54
 8007b7c:	ecbd 8b02 	vpop	{d8}
 8007b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b84:	6853      	ldr	r3, [r2, #4]
 8007b86:	deff      	udf	#255	; 0xff
 8007b88:	2300      	movs	r3, #0
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	deff      	udf	#255	; 0xff
 8007b8e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007ba4 <forward_dense+0x32c>
 8007b92:	eef0 2a48 	vmov.f32	s5, s16
 8007b96:	f1be 0f00 	cmp.w	lr, #0
 8007b9a:	f47f af22 	bne.w	80079e2 <forward_dense+0x16a>
 8007b9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ba0:	4661      	mov	r1, ip
 8007ba2:	e77a      	b.n	8007a9a <forward_dense+0x222>
 8007ba4:	00000000 	.word	0x00000000
 8007ba8:	4549      	cmp	r1, r9
 8007baa:	d2d5      	bcs.n	8007b58 <forward_dense+0x2e0>
 8007bac:	9807      	ldr	r0, [sp, #28]
 8007bae:	9103      	str	r1, [sp, #12]
 8007bb0:	9904      	ldr	r1, [sp, #16]
 8007bb2:	f100 0c01 	add.w	ip, r0, #1
 8007bb6:	3901      	subs	r1, #1
 8007bb8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007bbc:	9109      	str	r1, [sp, #36]	; 0x24
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 80b2 	beq.w	8007d28 <forward_dense+0x4b0>
 8007bc4:	9907      	ldr	r1, [sp, #28]
 8007bc6:	ecf3 2a01 	vldmia	r3!, {s5}
 8007bca:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8007ba4 <forward_dense+0x32c>
 8007bce:	2900      	cmp	r1, #0
 8007bd0:	f000 80b2 	beq.w	8007d38 <forward_dense+0x4c0>
 8007bd4:	9902      	ldr	r1, [sp, #8]
 8007bd6:	1d10      	adds	r0, r2, #4
 8007bd8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8007bdc:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8007be0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8007be4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8007be8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8007bec:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8007bf0:	ed11 5a04 	vldr	s10, [r1, #-16]
 8007bf4:	ed51 5a03 	vldr	s11, [r1, #-12]
 8007bf8:	ed11 6a02 	vldr	s12, [r1, #-8]
 8007bfc:	ed51 6a01 	vldr	s13, [r1, #-4]
 8007c00:	f006 070f 	and.w	r7, r6, #15
 8007c04:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007c08:	edd7 7a00 	vldr	s15, [r7]
 8007c0c:	0936      	lsrs	r6, r6, #4
 8007c0e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007c12:	ed96 3a00 	vldr	s6, [r6]
 8007c16:	ee67 7a82 	vmul.f32	s15, s15, s4
 8007c1a:	092e      	lsrs	r6, r5, #4
 8007c1c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c20:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007c24:	f005 050f 	and.w	r5, r5, #15
 8007c28:	edd6 3a00 	vldr	s7, [r6]
 8007c2c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8007c30:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007c34:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007c38:	0937      	lsrs	r7, r6, #4
 8007c3a:	ed95 4a00 	vldr	s8, [r5]
 8007c3e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8007c42:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c46:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007c4a:	f006 060f 	and.w	r6, r6, #15
 8007c4e:	edd7 4a00 	vldr	s9, [r7]
 8007c52:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007c56:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007c5a:	3004      	adds	r0, #4
 8007c5c:	ed96 5a00 	vldr	s10, [r6]
 8007c60:	092e      	lsrs	r6, r5, #4
 8007c62:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c66:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007c6a:	f005 050f 	and.w	r5, r5, #15
 8007c6e:	edd6 5a00 	vldr	s11, [r6]
 8007c72:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c76:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007c7a:	4584      	cmp	ip, r0
 8007c7c:	ed95 6a00 	vldr	s12, [r5]
 8007c80:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c84:	f101 0120 	add.w	r1, r1, #32
 8007c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c8c:	d1a4      	bne.n	8007bd8 <forward_dense+0x360>
 8007c8e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8007c92:	f1ac 0804 	sub.w	r8, ip, #4
 8007c96:	9904      	ldr	r1, [sp, #16]
 8007c98:	458e      	cmp	lr, r1
 8007c9a:	d22a      	bcs.n	8007cf2 <forward_dense+0x47a>
 8007c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c9e:	eba1 070e 	sub.w	r7, r1, lr
 8007ca2:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8007ca6:	f10e 0008 	add.w	r0, lr, #8
 8007caa:	f108 36ff 	add.w	r6, r8, #4294967295
 8007cae:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8007cb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cb6:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007cba:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007cbe:	f001 050f 	and.w	r5, r1, #15
 8007cc2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007cc6:	edd5 7a00 	vldr	s15, [r5]
 8007cca:	0909      	lsrs	r1, r1, #4
 8007ccc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007cd0:	ed91 6a00 	vldr	s12, [r1]
 8007cd4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007cd8:	42b7      	cmp	r7, r6
 8007cda:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007cde:	f100 0008 	add.w	r0, r0, #8
 8007ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ce6:	d1e4      	bne.n	8007cb2 <forward_dense+0x43a>
 8007ce8:	f10a 0a01 	add.w	sl, sl, #1
 8007cec:	44d0      	add	r8, sl
 8007cee:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8007cf2:	9908      	ldr	r1, [sp, #32]
 8007cf4:	b321      	cbz	r1, 8007d40 <forward_dense+0x4c8>
 8007cf6:	f898 1000 	ldrb.w	r1, [r8]
 8007cfa:	edde 7a00 	vldr	s15, [lr]
 8007cfe:	0909      	lsrs	r1, r1, #4
 8007d00:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007d04:	edd1 6a00 	vldr	s13, [r1]
 8007d08:	9903      	ldr	r1, [sp, #12]
 8007d0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d0e:	445a      	add	r2, fp
 8007d10:	44dc      	add	ip, fp
 8007d12:	ee72 2a87 	vadd.f32	s5, s5, s14
 8007d16:	ece1 2a01 	vstmia	r1!, {s5}
 8007d1a:	4589      	cmp	r9, r1
 8007d1c:	9103      	str	r1, [sp, #12]
 8007d1e:	f67f af12 	bls.w	8007b46 <forward_dense+0x2ce>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f47f af4e 	bne.w	8007bc4 <forward_dense+0x34c>
 8007d28:	9907      	ldr	r1, [sp, #28]
 8007d2a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8007ba4 <forward_dense+0x32c>
 8007d2e:	eef0 2a48 	vmov.f32	s5, s16
 8007d32:	2900      	cmp	r1, #0
 8007d34:	f47f af4e 	bne.w	8007bd4 <forward_dense+0x35c>
 8007d38:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8007d3c:	4690      	mov	r8, r2
 8007d3e:	e7aa      	b.n	8007c96 <forward_dense+0x41e>
 8007d40:	9903      	ldr	r1, [sp, #12]
 8007d42:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007d46:	445a      	add	r2, fp
 8007d48:	eca1 7a01 	vstmia	r1!, {s14}
 8007d4c:	4549      	cmp	r1, r9
 8007d4e:	9103      	str	r1, [sp, #12]
 8007d50:	44dc      	add	ip, fp
 8007d52:	f4ff af34 	bcc.w	8007bbe <forward_dense+0x346>
 8007d56:	e6f6      	b.n	8007b46 <forward_dense+0x2ce>
 8007d58:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007d5a:	9d06      	ldr	r5, [sp, #24]
 8007d5c:	9101      	str	r1, [sp, #4]
 8007d5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d60:	9100      	str	r1, [sp, #0]
 8007d62:	4628      	mov	r0, r5
 8007d64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d66:	f000 fa85 	bl	8008274 <lite_dense_if32of32wf32>
 8007d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d6c:	462b      	mov	r3, r5
 8007d6e:	4413      	add	r3, r2
 8007d70:	9306      	str	r3, [sp, #24]
 8007d72:	e6f1      	b.n	8007b58 <forward_dense+0x2e0>
 8007d74:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8007d78:	f1b9 0f00 	cmp.w	r9, #0
 8007d7c:	d016      	beq.n	8007dac <forward_dense+0x534>
 8007d7e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007d82:	f000 fc25 	bl	80085d0 <ai_array_get_byte_size>
 8007d86:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	4658      	mov	r0, fp
 8007d90:	f000 fc82 	bl	8008698 <memcpy>
 8007d94:	e5c7      	b.n	8007926 <forward_dense+0xae>
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d00a      	beq.n	8007db0 <forward_dense+0x538>
 8007d9a:	f04f 0900 	mov.w	r9, #0
 8007d9e:	e5bd      	b.n	800791c <forward_dense+0xa4>
 8007da0:	930d      	str	r3, [sp, #52]	; 0x34
 8007da2:	e595      	b.n	80078d0 <forward_dense+0x58>
 8007da4:	2300      	movs	r3, #0
 8007da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007da8:	460b      	mov	r3, r1
 8007daa:	e591      	b.n	80078d0 <forward_dense+0x58>
 8007dac:	46c3      	mov	fp, r8
 8007dae:	e5ba      	b.n	8007926 <forward_dense+0xae>
 8007db0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8007db4:	e5b7      	b.n	8007926 <forward_dense+0xae>
 8007db6:	2300      	movs	r3, #0
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	deff      	udf	#255	; 0xff
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	deff      	udf	#255	; 0xff
 8007dc2:	bf00      	nop

08007dc4 <forward_relu>:
 8007dc4:	6982      	ldr	r2, [r0, #24]
 8007dc6:	8813      	ldrh	r3, [r2, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05b      	beq.n	8007e84 <forward_relu+0xc0>
 8007dcc:	6851      	ldr	r1, [r2, #4]
 8007dce:	684a      	ldr	r2, [r1, #4]
 8007dd0:	b102      	cbz	r2, 8007dd4 <forward_relu+0x10>
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	f000 8123 	beq.w	8008020 <forward_relu+0x25c>
 8007dda:	b470      	push	{r4, r5, r6}
 8007ddc:	6909      	ldr	r1, [r1, #16]
 8007dde:	b101      	cbz	r1, 8007de2 <forward_relu+0x1e>
 8007de0:	6809      	ldr	r1, [r1, #0]
 8007de2:	69c6      	ldr	r6, [r0, #28]
 8007de4:	2e00      	cmp	r6, #0
 8007de6:	f000 8097 	beq.w	8007f18 <forward_relu+0x154>
 8007dea:	6873      	ldr	r3, [r6, #4]
 8007dec:	6988      	ldr	r0, [r1, #24]
 8007dee:	6991      	ldr	r1, [r2, #24]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	f000 80c1 	beq.w	8007f78 <forward_relu+0x1b4>
 8007df6:	6893      	ldr	r3, [r2, #8]
 8007df8:	6880      	ldr	r0, [r0, #8]
 8007dfa:	688c      	ldr	r4, [r1, #8]
 8007dfc:	0a1b      	lsrs	r3, r3, #8
 8007dfe:	f000 80f2 	beq.w	8007fe6 <forward_relu+0x222>
 8007e02:	68d5      	ldr	r5, [r2, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007e0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e0e:	42ab      	cmp	r3, r5
 8007e10:	fb01 f202 	mul.w	r2, r1, r2
 8007e14:	d1f9      	bne.n	8007e0a <forward_relu+0x46>
 8007e16:	68b3      	ldr	r3, [r6, #8]
 8007e18:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e1c:	edd3 6a00 	vldr	s13, [r3]
 8007e20:	ed93 6a01 	vldr	s12, [r3, #4]
 8007e24:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007e28:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007e2c:	3a01      	subs	r2, #1
 8007e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e36:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007e3a:	d425      	bmi.n	8007e88 <forward_relu+0xc4>
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	d81f      	bhi.n	8007e80 <forward_relu+0xbc>
 8007e40:	1d1a      	adds	r2, r3, #4
 8007e42:	1d01      	adds	r1, r0, #4
 8007e44:	e00d      	b.n	8007e62 <forward_relu+0x9e>
 8007e46:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4e:	db03      	blt.n	8007e58 <forward_relu+0x94>
 8007e50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e54:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007e58:	3b08      	subs	r3, #8
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	ed61 7a01 	vstmdb	r1!, {s15}
 8007e60:	d80e      	bhi.n	8007e80 <forward_relu+0xbc>
 8007e62:	4613      	mov	r3, r2
 8007e64:	ed72 7a01 	vldmdb	r2!, {s15}
 8007e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e70:	d9e9      	bls.n	8007e46 <forward_relu+0x82>
 8007e72:	3b08      	subs	r3, #8
 8007e74:	eef0 7a47 	vmov.f32	s15, s14
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	ed61 7a01 	vstmdb	r1!, {s15}
 8007e7e:	d9f0      	bls.n	8007e62 <forward_relu+0x9e>
 8007e80:	bc70      	pop	{r4, r5, r6}
 8007e82:	4770      	bx	lr
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	deff      	udf	#255	; 0xff
 8007e88:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e90:	d11f      	bne.n	8007ed2 <forward_relu+0x10e>
 8007e92:	429c      	cmp	r4, r3
 8007e94:	d8f4      	bhi.n	8007e80 <forward_relu+0xbc>
 8007e96:	1b1c      	subs	r4, r3, r4
 8007e98:	f024 0403 	bic.w	r4, r4, #3
 8007e9c:	1d1a      	adds	r2, r3, #4
 8007e9e:	2500      	movs	r5, #0
 8007ea0:	1b1b      	subs	r3, r3, r4
 8007ea2:	1d01      	adds	r1, r0, #4
 8007ea4:	ed72 7a01 	vldmdb	r2!, {s15}
 8007ea8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb0:	dc0a      	bgt.n	8007ec8 <forward_relu+0x104>
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	f841 5d04 	str.w	r5, [r1, #-4]!
 8007eb8:	d0e2      	beq.n	8007e80 <forward_relu+0xbc>
 8007eba:	ed72 7a01 	vldmdb	r2!, {s15}
 8007ebe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec6:	ddf4      	ble.n	8007eb2 <forward_relu+0xee>
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	ed61 7a01 	vstmdb	r1!, {s15}
 8007ece:	d1e9      	bne.n	8007ea4 <forward_relu+0xe0>
 8007ed0:	e7d6      	b.n	8007e80 <forward_relu+0xbc>
 8007ed2:	429c      	cmp	r4, r3
 8007ed4:	d8d4      	bhi.n	8007e80 <forward_relu+0xbc>
 8007ed6:	1b1c      	subs	r4, r3, r4
 8007ed8:	f024 0403 	bic.w	r4, r4, #3
 8007edc:	1d1a      	adds	r2, r3, #4
 8007ede:	1d01      	adds	r1, r0, #4
 8007ee0:	1b1b      	subs	r3, r3, r4
 8007ee2:	ed72 7a01 	vldmdb	r2!, {s15}
 8007ee6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eee:	db0e      	blt.n	8007f0e <forward_relu+0x14a>
 8007ef0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007efa:	ed61 7a01 	vstmdb	r1!, {s15}
 8007efe:	d0bf      	beq.n	8007e80 <forward_relu+0xbc>
 8007f00:	ed72 7a01 	vldmdb	r2!, {s15}
 8007f04:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0c:	daf0      	bge.n	8007ef0 <forward_relu+0x12c>
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	ed61 7a01 	vstmdb	r1!, {s15}
 8007f14:	d1e5      	bne.n	8007ee2 <forward_relu+0x11e>
 8007f16:	e7b3      	b.n	8007e80 <forward_relu+0xbc>
 8007f18:	6893      	ldr	r3, [r2, #8]
 8007f1a:	6989      	ldr	r1, [r1, #24]
 8007f1c:	6990      	ldr	r0, [r2, #24]
 8007f1e:	6889      	ldr	r1, [r1, #8]
 8007f20:	6884      	ldr	r4, [r0, #8]
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	d075      	beq.n	8008012 <forward_relu+0x24e>
 8007f26:	68d5      	ldr	r5, [r2, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007f2e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007f32:	429d      	cmp	r5, r3
 8007f34:	fb00 f202 	mul.w	r2, r0, r2
 8007f38:	d1f9      	bne.n	8007f2e <forward_relu+0x16a>
 8007f3a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007f44:	4294      	cmp	r4, r2
 8007f46:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007f4a:	d899      	bhi.n	8007e80 <forward_relu+0xbc>
 8007f4c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008028 <forward_relu+0x264>
 8007f50:	3204      	adds	r2, #4
 8007f52:	3104      	adds	r1, #4
 8007f54:	4613      	mov	r3, r2
 8007f56:	ed72 7a01 	vldmdb	r2!, {s15}
 8007f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f62:	f1a3 0308 	sub.w	r3, r3, #8
 8007f66:	bfb8      	it	lt
 8007f68:	eef0 7a47 	vmovlt.f32	s15, s14
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007f72:	d9ef      	bls.n	8007f54 <forward_relu+0x190>
 8007f74:	bc70      	pop	{r4, r5, r6}
 8007f76:	4770      	bx	lr
 8007f78:	688c      	ldr	r4, [r1, #8]
 8007f7a:	6891      	ldr	r1, [r2, #8]
 8007f7c:	6880      	ldr	r0, [r0, #8]
 8007f7e:	0a09      	lsrs	r1, r1, #8
 8007f80:	d049      	beq.n	8008016 <forward_relu+0x252>
 8007f82:	68d5      	ldr	r5, [r2, #12]
 8007f84:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8007f88:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007f8c:	42aa      	cmp	r2, r5
 8007f8e:	fb01 f303 	mul.w	r3, r1, r3
 8007f92:	d1f9      	bne.n	8007f88 <forward_relu+0x1c4>
 8007f94:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8007f98:	3a01      	subs	r2, #1
 8007f9a:	68b1      	ldr	r1, [r6, #8]
 8007f9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	ed91 7a00 	vldr	s14, [r1]
 8007fa6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007faa:	f63f af69 	bhi.w	8007e80 <forward_relu+0xbc>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	1d02      	adds	r2, r0, #4
 8007fb4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc0:	f1a3 0104 	sub.w	r1, r3, #4
 8007fc4:	f1a3 0308 	sub.w	r3, r3, #8
 8007fc8:	d406      	bmi.n	8007fd8 <forward_relu+0x214>
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007fd0:	f63f af56 	bhi.w	8007e80 <forward_relu+0xbc>
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	e7ed      	b.n	8007fb4 <forward_relu+0x1f0>
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	ed62 7a01 	vstmdb	r2!, {s15}
 8007fde:	f63f af4f 	bhi.w	8007e80 <forward_relu+0xbc>
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	e7e6      	b.n	8007fb4 <forward_relu+0x1f0>
 8007fe6:	68b3      	ldr	r3, [r6, #8]
 8007fe8:	ed93 7a02 	vldr	s14, [r3, #8]
 8007fec:	edd3 6a00 	vldr	s13, [r3]
 8007ff0:	ed93 6a01 	vldr	s12, [r3, #4]
 8007ff4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffc:	d401      	bmi.n	8008002 <forward_relu+0x23e>
 8007ffe:	4623      	mov	r3, r4
 8008000:	e71e      	b.n	8007e40 <forward_relu+0x7c>
 8008002:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800a:	4623      	mov	r3, r4
 800800c:	f47f af63 	bne.w	8007ed6 <forward_relu+0x112>
 8008010:	e741      	b.n	8007e96 <forward_relu+0xd2>
 8008012:	4622      	mov	r2, r4
 8008014:	e79a      	b.n	8007f4c <forward_relu+0x188>
 8008016:	68b2      	ldr	r2, [r6, #8]
 8008018:	4623      	mov	r3, r4
 800801a:	ed92 7a00 	vldr	s14, [r2]
 800801e:	e7c6      	b.n	8007fae <forward_relu+0x1ea>
 8008020:	2300      	movs	r3, #0
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	deff      	udf	#255	; 0xff
 8008026:	bf00      	nop
 8008028:	00000000 	.word	0x00000000

0800802c <forward_sm>:
 800802c:	6982      	ldr	r2, [r0, #24]
 800802e:	8813      	ldrh	r3, [r2, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d07c      	beq.n	800812e <forward_sm+0x102>
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	ed2d 8b04 	vpush	{d8-d9}
 800803c:	6852      	ldr	r2, [r2, #4]
 800803e:	6854      	ldr	r4, [r2, #4]
 8008040:	b085      	sub	sp, #20
 8008042:	b104      	cbz	r4, 8008046 <forward_sm+0x1a>
 8008044:	6824      	ldr	r4, [r4, #0]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d076      	beq.n	8008138 <forward_sm+0x10c>
 800804a:	6913      	ldr	r3, [r2, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d076      	beq.n	800813e <forward_sm+0x112>
 8008050:	681e      	ldr	r6, [r3, #0]
 8008052:	68a3      	ldr	r3, [r4, #8]
 8008054:	68e0      	ldr	r0, [r4, #12]
 8008056:	68f2      	ldr	r2, [r6, #12]
 8008058:	6845      	ldr	r5, [r0, #4]
 800805a:	6857      	ldr	r7, [r2, #4]
 800805c:	0a1b      	lsrs	r3, r3, #8
 800805e:	d068      	beq.n	8008132 <forward_sm+0x106>
 8008060:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008064:	2201      	movs	r2, #1
 8008066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800806a:	4298      	cmp	r0, r3
 800806c:	fb01 f202 	mul.w	r2, r1, r2
 8008070:	d1f9      	bne.n	8008066 <forward_sm+0x3a>
 8008072:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8008076:	69a2      	ldr	r2, [r4, #24]
 8008078:	69b3      	ldr	r3, [r6, #24]
 800807a:	6892      	ldr	r2, [r2, #8]
 800807c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008080:	eb02 0309 	add.w	r3, r2, r9
 8008084:	429a      	cmp	r2, r3
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	d24c      	bcs.n	8008124 <forward_sm+0xf8>
 800808a:	00bb      	lsls	r3, r7, #2
 800808c:	9303      	str	r3, [sp, #12]
 800808e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8008092:	00ab      	lsls	r3, r5, #2
 8008094:	2d01      	cmp	r5, #1
 8008096:	ed92 8a00 	vldr	s16, [r2]
 800809a:	9302      	str	r3, [sp, #8]
 800809c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80080a0:	463e      	mov	r6, r7
 80080a2:	d93c      	bls.n	800811e <forward_sm+0xf2>
 80080a4:	1d13      	adds	r3, r2, #4
 80080a6:	ecf3 7a01 	vldmia	r3!, {s15}
 80080aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80080ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b2:	bfb8      	it	lt
 80080b4:	eeb0 8a67 	vmovlt.f32	s16, s15
 80080b8:	429e      	cmp	r6, r3
 80080ba:	d1f4      	bne.n	80080a6 <forward_sm+0x7a>
 80080bc:	eddf 8a21 	vldr	s17, [pc, #132]	; 8008144 <forward_sm+0x118>
 80080c0:	4692      	mov	sl, r2
 80080c2:	46c3      	mov	fp, r8
 80080c4:	46c1      	mov	r9, r8
 80080c6:	2400      	movs	r4, #0
 80080c8:	ecba 0a01 	vldmia	sl!, {s0}
 80080cc:	ee30 0a48 	vsub.f32	s0, s0, s16
 80080d0:	f000 fb68 	bl	80087a4 <expf>
 80080d4:	3401      	adds	r4, #1
 80080d6:	42a5      	cmp	r5, r4
 80080d8:	ee78 8a80 	vadd.f32	s17, s17, s0
 80080dc:	eca9 0a01 	vstmia	r9!, {s0}
 80080e0:	d8f2      	bhi.n	80080c8 <forward_sm+0x9c>
 80080e2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80080e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ea:	d00b      	beq.n	8008104 <forward_sm+0xd8>
 80080ec:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80080f0:	2300      	movs	r3, #0
 80080f2:	3301      	adds	r3, #1
 80080f4:	429d      	cmp	r5, r3
 80080f6:	eddb 7a00 	vldr	s15, [fp]
 80080fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fe:	eceb 7a01 	vstmia	fp!, {s15}
 8008102:	d8f6      	bhi.n	80080f2 <forward_sm+0xc6>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	9901      	ldr	r1, [sp, #4]
 8008108:	4498      	add	r8, r3
 800810a:	9b02      	ldr	r3, [sp, #8]
 800810c:	42b9      	cmp	r1, r7
 800810e:	463a      	mov	r2, r7
 8008110:	441e      	add	r6, r3
 8008112:	d907      	bls.n	8008124 <forward_sm+0xf8>
 8008114:	2d01      	cmp	r5, #1
 8008116:	ed92 8a00 	vldr	s16, [r2]
 800811a:	441f      	add	r7, r3
 800811c:	d8c2      	bhi.n	80080a4 <forward_sm+0x78>
 800811e:	2d00      	cmp	r5, #0
 8008120:	d0f0      	beq.n	8008104 <forward_sm+0xd8>
 8008122:	e7cb      	b.n	80080bc <forward_sm+0x90>
 8008124:	b005      	add	sp, #20
 8008126:	ecbd 8b04 	vpop	{d8-d9}
 800812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	deff      	udf	#255	; 0xff
 8008132:	f04f 0904 	mov.w	r9, #4
 8008136:	e79e      	b.n	8008076 <forward_sm+0x4a>
 8008138:	2300      	movs	r3, #0
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	deff      	udf	#255	; 0xff
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	deff      	udf	#255	; 0xff
 8008142:	bf00      	nop
 8008144:	00000000 	.word	0x00000000

08008148 <ai_check_custom_types>:
 8008148:	b082      	sub	sp, #8
 800814a:	4b13      	ldr	r3, [pc, #76]	; (8008198 <ai_check_custom_types+0x50>)
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	b118      	cbz	r0, 8008158 <ai_check_custom_types+0x10>
 8008150:	7803      	ldrb	r3, [r0, #0]
 8008152:	2b03      	cmp	r3, #3
 8008154:	d002      	beq.n	800815c <ai_check_custom_types+0x14>
 8008156:	2000      	movs	r0, #0
 8008158:	b002      	add	sp, #8
 800815a:	4770      	bx	lr
 800815c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <ai_check_custom_types+0x26>
 8008164:	2001      	movs	r0, #1
 8008166:	f080 0001 	eor.w	r0, r0, #1
 800816a:	b002      	add	sp, #8
 800816c:	4770      	bx	lr
 800816e:	7842      	ldrb	r2, [r0, #1]
 8008170:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008174:	429a      	cmp	r2, r3
 8008176:	f100 0001 	add.w	r0, r0, #1
 800817a:	d1f3      	bne.n	8008164 <ai_check_custom_types+0x1c>
 800817c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008180:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008184:	429a      	cmp	r2, r3
 8008186:	d1ed      	bne.n	8008164 <ai_check_custom_types+0x1c>
 8008188:	7842      	ldrb	r2, [r0, #1]
 800818a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800818e:	429a      	cmp	r2, r3
 8008190:	d1e8      	bne.n	8008164 <ai_check_custom_types+0x1c>
 8008192:	2000      	movs	r0, #0
 8008194:	e7e7      	b.n	8008166 <ai_check_custom_types+0x1e>
 8008196:	bf00      	nop
 8008198:	84048403 	.word	0x84048403

0800819c <ai_layers_init_all>:
 800819c:	4601      	mov	r1, r0
 800819e:	2000      	movs	r0, #0
 80081a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80081a2:	b143      	cbz	r3, 80081b6 <ai_layers_init_all+0x1a>
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	60d9      	str	r1, [r3, #12]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	f100 0001 	add.w	r0, r0, #1
 80081ae:	d002      	beq.n	80081b6 <ai_layers_init_all+0x1a>
 80081b0:	b10a      	cbz	r2, 80081b6 <ai_layers_init_all+0x1a>
 80081b2:	4613      	mov	r3, r2
 80081b4:	e7f5      	b.n	80081a2 <ai_layers_init_all+0x6>
 80081b6:	4770      	bx	lr

080081b8 <ai_layers_post_init_all>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80081bc:	2500      	movs	r5, #0
 80081be:	b16c      	cbz	r4, 80081dc <ai_layers_post_init_all+0x24>
 80081c0:	6863      	ldr	r3, [r4, #4]
 80081c2:	07db      	lsls	r3, r3, #31
 80081c4:	d504      	bpl.n	80081d0 <ai_layers_post_init_all+0x18>
 80081c6:	6a23      	ldr	r3, [r4, #32]
 80081c8:	4620      	mov	r0, r4
 80081ca:	b10b      	cbz	r3, 80081d0 <ai_layers_post_init_all+0x18>
 80081cc:	4798      	blx	r3
 80081ce:	3501      	adds	r5, #1
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	d002      	beq.n	80081dc <ai_layers_post_init_all+0x24>
 80081d6:	b10b      	cbz	r3, 80081dc <ai_layers_post_init_all+0x24>
 80081d8:	461c      	mov	r4, r3
 80081da:	e7f0      	b.n	80081be <ai_layers_post_init_all+0x6>
 80081dc:	4628      	mov	r0, r5
 80081de:	bd38      	pop	{r3, r4, r5, pc}

080081e0 <ai_layers_forward_all>:
 80081e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e4:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80081e8:	4604      	mov	r4, r0
 80081ea:	f1b8 0f00 	cmp.w	r8, #0
 80081ee:	d02b      	beq.n	8008248 <ai_layers_forward_all+0x68>
 80081f0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80081f2:	6381      	str	r1, [r0, #56]	; 0x38
 80081f4:	b321      	cbz	r1, 8008240 <ai_layers_forward_all+0x60>
 80081f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80081f8:	2001      	movs	r0, #1
 80081fa:	47c0      	blx	r8
 80081fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80081fe:	b1fe      	cbz	r6, 8008240 <ai_layers_forward_all+0x60>
 8008200:	2700      	movs	r7, #0
 8008202:	4631      	mov	r1, r6
 8008204:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008206:	2002      	movs	r0, #2
 8008208:	47c0      	blx	r8
 800820a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800820c:	4628      	mov	r0, r5
 800820e:	696b      	ldr	r3, [r5, #20]
 8008210:	4798      	blx	r3
 8008212:	692e      	ldr	r6, [r5, #16]
 8008214:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008216:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008218:	42b5      	cmp	r5, r6
 800821a:	f04f 0003 	mov.w	r0, #3
 800821e:	d007      	beq.n	8008230 <ai_layers_forward_all+0x50>
 8008220:	47c0      	blx	r8
 8008222:	3701      	adds	r7, #1
 8008224:	63a6      	str	r6, [r4, #56]	; 0x38
 8008226:	2e00      	cmp	r6, #0
 8008228:	d1eb      	bne.n	8008202 <ai_layers_forward_all+0x22>
 800822a:	4638      	mov	r0, r7
 800822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008230:	2003      	movs	r0, #3
 8008232:	47c0      	blx	r8
 8008234:	2300      	movs	r3, #0
 8008236:	3701      	adds	r7, #1
 8008238:	63a3      	str	r3, [r4, #56]	; 0x38
 800823a:	4638      	mov	r0, r7
 800823c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008240:	2700      	movs	r7, #0
 8008242:	4638      	mov	r0, r7
 8008244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008248:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800824a:	6385      	str	r5, [r0, #56]	; 0x38
 800824c:	2d00      	cmp	r5, #0
 800824e:	d0f7      	beq.n	8008240 <ai_layers_forward_all+0x60>
 8008250:	4647      	mov	r7, r8
 8008252:	696b      	ldr	r3, [r5, #20]
 8008254:	4628      	mov	r0, r5
 8008256:	4798      	blx	r3
 8008258:	462b      	mov	r3, r5
 800825a:	692d      	ldr	r5, [r5, #16]
 800825c:	429d      	cmp	r5, r3
 800825e:	d004      	beq.n	800826a <ai_layers_forward_all+0x8a>
 8008260:	63a5      	str	r5, [r4, #56]	; 0x38
 8008262:	3701      	adds	r7, #1
 8008264:	2d00      	cmp	r5, #0
 8008266:	d1f4      	bne.n	8008252 <ai_layers_forward_all+0x72>
 8008268:	e7df      	b.n	800822a <ai_layers_forward_all+0x4a>
 800826a:	2300      	movs	r3, #0
 800826c:	63a3      	str	r3, [r4, #56]	; 0x38
 800826e:	3701      	adds	r7, #1
 8008270:	e7db      	b.n	800822a <ai_layers_forward_all+0x4a>
 8008272:	bf00      	nop

08008274 <lite_dense_if32of32wf32>:
 8008274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008278:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800827c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008280:	4287      	cmp	r7, r0
 8008282:	f240 8106 	bls.w	8008492 <lite_dense_if32of32wf32+0x21e>
 8008286:	f1a6 0810 	sub.w	r8, r6, #16
 800828a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8008296:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800829a:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800829e:	4605      	mov	r5, r0
 80082a0:	f006 0a0f 	and.w	sl, r6, #15
 80082a4:	2e0f      	cmp	r6, #15
 80082a6:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80084b8 <lite_dense_if32of32wf32+0x244>
 80082aa:	f240 8101 	bls.w	80084b0 <lite_dense_if32of32wf32+0x23c>
 80082ae:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80082b2:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80082b6:	46b6      	mov	lr, r6
 80082b8:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 80082bc:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80082c0:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80082c4:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80082c8:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80082cc:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80082d0:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80082d4:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80082d8:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80082dc:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80082e0:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80082e4:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80082e8:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80082ec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80082f0:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80082f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80082f8:	f1ae 0e10 	sub.w	lr, lr, #16
 80082fc:	f1be 0f0f 	cmp.w	lr, #15
 8008300:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8008304:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8008308:	eee5 7a86 	vfma.f32	s15, s11, s12
 800830c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008310:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008314:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8008318:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800831c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008320:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8008324:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8008328:	eee5 7a25 	vfma.f32	s15, s10, s11
 800832c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8008330:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8008334:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008338:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800833c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8008340:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008344:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008348:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800834c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008350:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008354:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008358:	eee5 7a25 	vfma.f32	s15, s10, s11
 800835c:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8008360:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8008364:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008368:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800836c:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8008370:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008374:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008378:	eee3 7a23 	vfma.f32	s15, s6, s7
 800837c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008380:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008384:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800838c:	d894      	bhi.n	80082b8 <lite_dense_if32of32wf32+0x44>
 800838e:	eb02 0e0b 	add.w	lr, r2, fp
 8008392:	4654      	mov	r4, sl
 8008394:	46c4      	mov	ip, r8
 8008396:	2c00      	cmp	r4, #0
 8008398:	d075      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800839a:	eddc 6a00 	vldr	s13, [ip]
 800839e:	edde 7a00 	vldr	s15, [lr]
 80083a2:	2c01      	cmp	r4, #1
 80083a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083a8:	d06d      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 80083aa:	eddc 6a01 	vldr	s13, [ip, #4]
 80083ae:	edde 7a01 	vldr	s15, [lr, #4]
 80083b2:	2c02      	cmp	r4, #2
 80083b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083b8:	d065      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 80083ba:	eddc 6a02 	vldr	s13, [ip, #8]
 80083be:	edde 7a02 	vldr	s15, [lr, #8]
 80083c2:	2c03      	cmp	r4, #3
 80083c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083c8:	d05d      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 80083ca:	eddc 6a03 	vldr	s13, [ip, #12]
 80083ce:	edde 7a03 	vldr	s15, [lr, #12]
 80083d2:	2c04      	cmp	r4, #4
 80083d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083d8:	d055      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 80083da:	eddc 6a04 	vldr	s13, [ip, #16]
 80083de:	edde 7a04 	vldr	s15, [lr, #16]
 80083e2:	2c05      	cmp	r4, #5
 80083e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083e8:	d04d      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 80083ea:	eddc 6a05 	vldr	s13, [ip, #20]
 80083ee:	edde 7a05 	vldr	s15, [lr, #20]
 80083f2:	2c06      	cmp	r4, #6
 80083f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083f8:	d045      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 80083fa:	eddc 6a06 	vldr	s13, [ip, #24]
 80083fe:	edde 7a06 	vldr	s15, [lr, #24]
 8008402:	2c07      	cmp	r4, #7
 8008404:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008408:	d03d      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800840a:	eddc 6a07 	vldr	s13, [ip, #28]
 800840e:	edde 7a07 	vldr	s15, [lr, #28]
 8008412:	2c08      	cmp	r4, #8
 8008414:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008418:	d035      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800841a:	eddc 6a08 	vldr	s13, [ip, #32]
 800841e:	edde 7a08 	vldr	s15, [lr, #32]
 8008422:	2c09      	cmp	r4, #9
 8008424:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008428:	d02d      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800842a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800842e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8008432:	2c0a      	cmp	r4, #10
 8008434:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008438:	d025      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800843a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800843e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8008442:	2c0b      	cmp	r4, #11
 8008444:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008448:	d01d      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800844a:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800844e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8008452:	2c0c      	cmp	r4, #12
 8008454:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008458:	d015      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800845a:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800845e:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8008462:	3c0d      	subs	r4, #13
 8008464:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008468:	d00d      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800846a:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800846e:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8008472:	2c01      	cmp	r4, #1
 8008474:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008478:	d005      	beq.n	8008486 <lite_dense_if32of32wf32+0x212>
 800847a:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800847e:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8008482:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008486:	444a      	add	r2, r9
 8008488:	eca5 7a01 	vstmia	r5!, {s14}
 800848c:	42af      	cmp	r7, r5
 800848e:	f63f af09 	bhi.w	80082a4 <lite_dense_if32of32wf32+0x30>
 8008492:	b15b      	cbz	r3, 80084ac <lite_dense_if32of32wf32+0x238>
 8008494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008496:	b14a      	cbz	r2, 80084ac <lite_dense_if32of32wf32+0x238>
 8008498:	edd0 7a00 	vldr	s15, [r0]
 800849c:	ecb3 7a01 	vldmia	r3!, {s14}
 80084a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084a4:	ece0 7a01 	vstmia	r0!, {s15}
 80084a8:	4287      	cmp	r7, r0
 80084aa:	d1f5      	bne.n	8008498 <lite_dense_if32of32wf32+0x224>
 80084ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b0:	4634      	mov	r4, r6
 80084b2:	4696      	mov	lr, r2
 80084b4:	468c      	mov	ip, r1
 80084b6:	e76e      	b.n	8008396 <lite_dense_if32of32wf32+0x122>
 80084b8:	00000000 	.word	0x00000000

080084bc <ai_version_get>:
 80084bc:	0212      	lsls	r2, r2, #8
 80084be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80084c2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80084c6:	4770      	bx	lr

080084c8 <get_tensor_byte_size>:
 80084c8:	b410      	push	{r4}
 80084ca:	6983      	ldr	r3, [r0, #24]
 80084cc:	68c4      	ldr	r4, [r0, #12]
 80084ce:	6941      	ldr	r1, [r0, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68e0      	ldr	r0, [r4, #12]
 80084d4:	4a07      	ldr	r2, [pc, #28]	; (80084f4 <get_tensor_byte_size+0x2c>)
 80084d6:	68c9      	ldr	r1, [r1, #12]
 80084d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084dc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80084e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80084e4:	fb01 f000 	mul.w	r0, r1, r0
 80084e8:	4293      	cmp	r3, r2
 80084ea:	bf04      	itt	eq
 80084ec:	3007      	addeq	r0, #7
 80084ee:	08c0      	lsreq	r0, r0, #3
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	000400c0 	.word	0x000400c0

080084f8 <ai_array_to_buffer_fmt>:
 80084f8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d050      	beq.n	80085a2 <ai_array_to_buffer_fmt+0xaa>
 8008500:	4b2a      	ldr	r3, [pc, #168]	; (80085ac <ai_array_to_buffer_fmt+0xb4>)
 8008502:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8008506:	429a      	cmp	r2, r3
 8008508:	d00b      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 800850a:	dc1c      	bgt.n	8008546 <ai_array_to_buffer_fmt+0x4e>
 800850c:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <ai_array_to_buffer_fmt+0xb8>)
 800850e:	429a      	cmp	r2, r3
 8008510:	d007      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 8008512:	dd0b      	ble.n	800852c <ai_array_to_buffer_fmt+0x34>
 8008514:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <ai_array_to_buffer_fmt+0xbc>)
 8008516:	429a      	cmp	r2, r3
 8008518:	d003      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 800851a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800851e:	429a      	cmp	r2, r3
 8008520:	d131      	bne.n	8008586 <ai_array_to_buffer_fmt+0x8e>
 8008522:	4613      	mov	r3, r2
 8008524:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008528:	4318      	orrs	r0, r3
 800852a:	4770      	bx	lr
 800852c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008530:	429a      	cmp	r2, r3
 8008532:	d0f6      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 8008534:	dd2c      	ble.n	8008590 <ai_array_to_buffer_fmt+0x98>
 8008536:	4b20      	ldr	r3, [pc, #128]	; (80085b8 <ai_array_to_buffer_fmt+0xc0>)
 8008538:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800853c:	429a      	cmp	r2, r3
 800853e:	bf18      	it	ne
 8008540:	2340      	movne	r3, #64	; 0x40
 8008542:	4318      	orrs	r0, r3
 8008544:	4770      	bx	lr
 8008546:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <ai_array_to_buffer_fmt+0xc4>)
 8008548:	429a      	cmp	r2, r3
 800854a:	d0ea      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 800854c:	dd0e      	ble.n	800856c <ai_array_to_buffer_fmt+0x74>
 800854e:	4b1c      	ldr	r3, [pc, #112]	; (80085c0 <ai_array_to_buffer_fmt+0xc8>)
 8008550:	429a      	cmp	r2, r3
 8008552:	d0e6      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 8008554:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008558:	429a      	cmp	r2, r3
 800855a:	d0e2      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 800855c:	4b19      	ldr	r3, [pc, #100]	; (80085c4 <ai_array_to_buffer_fmt+0xcc>)
 800855e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008562:	429a      	cmp	r2, r3
 8008564:	bf18      	it	ne
 8008566:	2340      	movne	r3, #64	; 0x40
 8008568:	4318      	orrs	r0, r3
 800856a:	4770      	bx	lr
 800856c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008570:	429a      	cmp	r2, r3
 8008572:	d0d6      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 8008574:	3307      	adds	r3, #7
 8008576:	429a      	cmp	r2, r3
 8008578:	d0d3      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 800857a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800857e:	429a      	cmp	r2, r3
 8008580:	bf18      	it	ne
 8008582:	2340      	movne	r3, #64	; 0x40
 8008584:	e7ce      	b.n	8008524 <ai_array_to_buffer_fmt+0x2c>
 8008586:	4b10      	ldr	r3, [pc, #64]	; (80085c8 <ai_array_to_buffer_fmt+0xd0>)
 8008588:	429a      	cmp	r2, r3
 800858a:	bf18      	it	ne
 800858c:	2340      	movne	r3, #64	; 0x40
 800858e:	e7c9      	b.n	8008524 <ai_array_to_buffer_fmt+0x2c>
 8008590:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008594:	429a      	cmp	r2, r3
 8008596:	d0c4      	beq.n	8008522 <ai_array_to_buffer_fmt+0x2a>
 8008598:	3380      	adds	r3, #128	; 0x80
 800859a:	429a      	cmp	r2, r3
 800859c:	bf18      	it	ne
 800859e:	2340      	movne	r3, #64	; 0x40
 80085a0:	e7c0      	b.n	8008524 <ai_array_to_buffer_fmt+0x2c>
 80085a2:	4b0a      	ldr	r3, [pc, #40]	; (80085cc <ai_array_to_buffer_fmt+0xd4>)
 80085a4:	4003      	ands	r3, r0
 80085a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085aa:	e7bb      	b.n	8008524 <ai_array_to_buffer_fmt+0x2c>
 80085ac:	00840040 	.word	0x00840040
 80085b0:	00040840 	.word	0x00040840
 80085b4:	00041040 	.word	0x00041040
 80085b8:	00040447 	.word	0x00040447
 80085bc:	00840840 	.word	0x00840840
 80085c0:	00841040 	.word	0x00841040
 80085c4:	0084084f 	.word	0x0084084f
 80085c8:	0004084f 	.word	0x0004084f
 80085cc:	00803fff 	.word	0x00803fff

080085d0 <ai_array_get_byte_size>:
 80085d0:	b319      	cbz	r1, 800861a <ai_array_get_byte_size+0x4a>
 80085d2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80085d6:	fb03 f101 	mul.w	r1, r3, r1
 80085da:	3107      	adds	r1, #7
 80085dc:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80085e0:	f021 0307 	bic.w	r3, r1, #7
 80085e4:	2a04      	cmp	r2, #4
 80085e6:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80085ea:	fa23 f101 	lsr.w	r1, r3, r1
 80085ee:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80085f2:	d00b      	beq.n	800860c <ai_array_get_byte_size+0x3c>
 80085f4:	2a08      	cmp	r2, #8
 80085f6:	d002      	beq.n	80085fe <ai_array_get_byte_size+0x2e>
 80085f8:	3107      	adds	r1, #7
 80085fa:	08c8      	lsrs	r0, r1, #3
 80085fc:	4770      	bx	lr
 80085fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008602:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008606:	3107      	adds	r1, #7
 8008608:	08c8      	lsrs	r0, r1, #3
 800860a:	4770      	bx	lr
 800860c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008610:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008614:	3107      	adds	r1, #7
 8008616:	08c8      	lsrs	r0, r1, #3
 8008618:	4770      	bx	lr
 800861a:	4608      	mov	r0, r1
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop

08008620 <ai_array_get_data_byte_size>:
 8008620:	b169      	cbz	r1, 800863e <ai_array_get_data_byte_size+0x1e>
 8008622:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8008626:	fb02 f101 	mul.w	r1, r2, r1
 800862a:	1dcb      	adds	r3, r1, #7
 800862c:	f023 0307 	bic.w	r3, r3, #7
 8008630:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008634:	fa23 f000 	lsr.w	r0, r3, r0
 8008638:	3007      	adds	r0, #7
 800863a:	08c0      	lsrs	r0, r0, #3
 800863c:	4770      	bx	lr
 800863e:	4608      	mov	r0, r1
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop

08008644 <__errno>:
 8008644:	4b01      	ldr	r3, [pc, #4]	; (800864c <__errno+0x8>)
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	20000738 	.word	0x20000738

08008650 <__libc_init_array>:
 8008650:	b570      	push	{r4, r5, r6, lr}
 8008652:	4d0d      	ldr	r5, [pc, #52]	; (8008688 <__libc_init_array+0x38>)
 8008654:	4c0d      	ldr	r4, [pc, #52]	; (800868c <__libc_init_array+0x3c>)
 8008656:	1b64      	subs	r4, r4, r5
 8008658:	10a4      	asrs	r4, r4, #2
 800865a:	2600      	movs	r6, #0
 800865c:	42a6      	cmp	r6, r4
 800865e:	d109      	bne.n	8008674 <__libc_init_array+0x24>
 8008660:	4d0b      	ldr	r5, [pc, #44]	; (8008690 <__libc_init_array+0x40>)
 8008662:	4c0c      	ldr	r4, [pc, #48]	; (8008694 <__libc_init_array+0x44>)
 8008664:	f001 f8a0 	bl	80097a8 <_init>
 8008668:	1b64      	subs	r4, r4, r5
 800866a:	10a4      	asrs	r4, r4, #2
 800866c:	2600      	movs	r6, #0
 800866e:	42a6      	cmp	r6, r4
 8008670:	d105      	bne.n	800867e <__libc_init_array+0x2e>
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	f855 3b04 	ldr.w	r3, [r5], #4
 8008678:	4798      	blx	r3
 800867a:	3601      	adds	r6, #1
 800867c:	e7ee      	b.n	800865c <__libc_init_array+0xc>
 800867e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008682:	4798      	blx	r3
 8008684:	3601      	adds	r6, #1
 8008686:	e7f2      	b.n	800866e <__libc_init_array+0x1e>
 8008688:	0800ab60 	.word	0x0800ab60
 800868c:	0800ab60 	.word	0x0800ab60
 8008690:	0800ab60 	.word	0x0800ab60
 8008694:	0800ab64 	.word	0x0800ab64

08008698 <memcpy>:
 8008698:	440a      	add	r2, r1
 800869a:	4291      	cmp	r1, r2
 800869c:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a0:	d100      	bne.n	80086a4 <memcpy+0xc>
 80086a2:	4770      	bx	lr
 80086a4:	b510      	push	{r4, lr}
 80086a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ae:	4291      	cmp	r1, r2
 80086b0:	d1f9      	bne.n	80086a6 <memcpy+0xe>
 80086b2:	bd10      	pop	{r4, pc}

080086b4 <memset>:
 80086b4:	4402      	add	r2, r0
 80086b6:	4603      	mov	r3, r0
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d100      	bne.n	80086be <memset+0xa>
 80086bc:	4770      	bx	lr
 80086be:	f803 1b01 	strb.w	r1, [r3], #1
 80086c2:	e7f9      	b.n	80086b8 <memset+0x4>

080086c4 <pow>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	ed2d 8b02 	vpush	{d8}
 80086ca:	eeb0 8a40 	vmov.f32	s16, s0
 80086ce:	eef0 8a60 	vmov.f32	s17, s1
 80086d2:	ec55 4b11 	vmov	r4, r5, d1
 80086d6:	f000 f8bb 	bl	8008850 <__ieee754_pow>
 80086da:	4622      	mov	r2, r4
 80086dc:	462b      	mov	r3, r5
 80086de:	4620      	mov	r0, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	ec57 6b10 	vmov	r6, r7, d0
 80086e6:	f7f8 f9e5 	bl	8000ab4 <__aeabi_dcmpun>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d13b      	bne.n	8008766 <pow+0xa2>
 80086ee:	ec51 0b18 	vmov	r0, r1, d8
 80086f2:	2200      	movs	r2, #0
 80086f4:	2300      	movs	r3, #0
 80086f6:	f7f8 f9ab 	bl	8000a50 <__aeabi_dcmpeq>
 80086fa:	b1b8      	cbz	r0, 800872c <pow+0x68>
 80086fc:	2200      	movs	r2, #0
 80086fe:	2300      	movs	r3, #0
 8008700:	4620      	mov	r0, r4
 8008702:	4629      	mov	r1, r5
 8008704:	f7f8 f9a4 	bl	8000a50 <__aeabi_dcmpeq>
 8008708:	2800      	cmp	r0, #0
 800870a:	d146      	bne.n	800879a <pow+0xd6>
 800870c:	ec45 4b10 	vmov	d0, r4, r5
 8008710:	f000 ffab 	bl	800966a <finite>
 8008714:	b338      	cbz	r0, 8008766 <pow+0xa2>
 8008716:	2200      	movs	r2, #0
 8008718:	2300      	movs	r3, #0
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f8 f9a1 	bl	8000a64 <__aeabi_dcmplt>
 8008722:	b300      	cbz	r0, 8008766 <pow+0xa2>
 8008724:	f7ff ff8e 	bl	8008644 <__errno>
 8008728:	2322      	movs	r3, #34	; 0x22
 800872a:	e01b      	b.n	8008764 <pow+0xa0>
 800872c:	ec47 6b10 	vmov	d0, r6, r7
 8008730:	f000 ff9b 	bl	800966a <finite>
 8008734:	b9e0      	cbnz	r0, 8008770 <pow+0xac>
 8008736:	eeb0 0a48 	vmov.f32	s0, s16
 800873a:	eef0 0a68 	vmov.f32	s1, s17
 800873e:	f000 ff94 	bl	800966a <finite>
 8008742:	b1a8      	cbz	r0, 8008770 <pow+0xac>
 8008744:	ec45 4b10 	vmov	d0, r4, r5
 8008748:	f000 ff8f 	bl	800966a <finite>
 800874c:	b180      	cbz	r0, 8008770 <pow+0xac>
 800874e:	4632      	mov	r2, r6
 8008750:	463b      	mov	r3, r7
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	f7f8 f9ad 	bl	8000ab4 <__aeabi_dcmpun>
 800875a:	2800      	cmp	r0, #0
 800875c:	d0e2      	beq.n	8008724 <pow+0x60>
 800875e:	f7ff ff71 	bl	8008644 <__errno>
 8008762:	2321      	movs	r3, #33	; 0x21
 8008764:	6003      	str	r3, [r0, #0]
 8008766:	ecbd 8b02 	vpop	{d8}
 800876a:	ec47 6b10 	vmov	d0, r6, r7
 800876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008770:	2200      	movs	r2, #0
 8008772:	2300      	movs	r3, #0
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f7f8 f96a 	bl	8000a50 <__aeabi_dcmpeq>
 800877c:	2800      	cmp	r0, #0
 800877e:	d0f2      	beq.n	8008766 <pow+0xa2>
 8008780:	eeb0 0a48 	vmov.f32	s0, s16
 8008784:	eef0 0a68 	vmov.f32	s1, s17
 8008788:	f000 ff6f 	bl	800966a <finite>
 800878c:	2800      	cmp	r0, #0
 800878e:	d0ea      	beq.n	8008766 <pow+0xa2>
 8008790:	ec45 4b10 	vmov	d0, r4, r5
 8008794:	f000 ff69 	bl	800966a <finite>
 8008798:	e7c3      	b.n	8008722 <pow+0x5e>
 800879a:	4f01      	ldr	r7, [pc, #4]	; (80087a0 <pow+0xdc>)
 800879c:	2600      	movs	r6, #0
 800879e:	e7e2      	b.n	8008766 <pow+0xa2>
 80087a0:	3ff00000 	.word	0x3ff00000

080087a4 <expf>:
 80087a4:	b508      	push	{r3, lr}
 80087a6:	ed2d 8b02 	vpush	{d8}
 80087aa:	eef0 8a40 	vmov.f32	s17, s0
 80087ae:	f000 fe2f 	bl	8009410 <__ieee754_expf>
 80087b2:	eeb0 8a40 	vmov.f32	s16, s0
 80087b6:	eeb0 0a68 	vmov.f32	s0, s17
 80087ba:	f000 ffe7 	bl	800978c <finitef>
 80087be:	b160      	cbz	r0, 80087da <expf+0x36>
 80087c0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008800 <expf+0x5c>
 80087c4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80087c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087cc:	dd0a      	ble.n	80087e4 <expf+0x40>
 80087ce:	f7ff ff39 	bl	8008644 <__errno>
 80087d2:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8008804 <expf+0x60>
 80087d6:	2322      	movs	r3, #34	; 0x22
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	eeb0 0a48 	vmov.f32	s0, s16
 80087de:	ecbd 8b02 	vpop	{d8}
 80087e2:	bd08      	pop	{r3, pc}
 80087e4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008808 <expf+0x64>
 80087e8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80087ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f0:	d5f3      	bpl.n	80087da <expf+0x36>
 80087f2:	f7ff ff27 	bl	8008644 <__errno>
 80087f6:	2322      	movs	r3, #34	; 0x22
 80087f8:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800880c <expf+0x68>
 80087fc:	6003      	str	r3, [r0, #0]
 80087fe:	e7ec      	b.n	80087da <expf+0x36>
 8008800:	42b17180 	.word	0x42b17180
 8008804:	7f800000 	.word	0x7f800000
 8008808:	c2cff1b5 	.word	0xc2cff1b5
 800880c:	00000000 	.word	0x00000000

08008810 <sqrtf>:
 8008810:	b508      	push	{r3, lr}
 8008812:	ed2d 8b02 	vpush	{d8}
 8008816:	eeb0 8a40 	vmov.f32	s16, s0
 800881a:	f000 fec7 	bl	80095ac <__ieee754_sqrtf>
 800881e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008826:	d60c      	bvs.n	8008842 <sqrtf+0x32>
 8008828:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008848 <sqrtf+0x38>
 800882c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008834:	d505      	bpl.n	8008842 <sqrtf+0x32>
 8008836:	f7ff ff05 	bl	8008644 <__errno>
 800883a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800883e:	2321      	movs	r3, #33	; 0x21
 8008840:	6003      	str	r3, [r0, #0]
 8008842:	ecbd 8b02 	vpop	{d8}
 8008846:	bd08      	pop	{r3, pc}
	...

08008850 <__ieee754_pow>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	ed2d 8b06 	vpush	{d8-d10}
 8008858:	b089      	sub	sp, #36	; 0x24
 800885a:	ed8d 1b00 	vstr	d1, [sp]
 800885e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008862:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008866:	ea58 0102 	orrs.w	r1, r8, r2
 800886a:	ec57 6b10 	vmov	r6, r7, d0
 800886e:	d115      	bne.n	800889c <__ieee754_pow+0x4c>
 8008870:	19b3      	adds	r3, r6, r6
 8008872:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008876:	4152      	adcs	r2, r2
 8008878:	4299      	cmp	r1, r3
 800887a:	4b89      	ldr	r3, [pc, #548]	; (8008aa0 <__ieee754_pow+0x250>)
 800887c:	4193      	sbcs	r3, r2
 800887e:	f080 84d2 	bcs.w	8009226 <__ieee754_pow+0x9d6>
 8008882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008886:	4630      	mov	r0, r6
 8008888:	4639      	mov	r1, r7
 800888a:	f7f7 fcc3 	bl	8000214 <__adddf3>
 800888e:	ec41 0b10 	vmov	d0, r0, r1
 8008892:	b009      	add	sp, #36	; 0x24
 8008894:	ecbd 8b06 	vpop	{d8-d10}
 8008898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889c:	4b81      	ldr	r3, [pc, #516]	; (8008aa4 <__ieee754_pow+0x254>)
 800889e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80088a2:	429c      	cmp	r4, r3
 80088a4:	ee10 aa10 	vmov	sl, s0
 80088a8:	463d      	mov	r5, r7
 80088aa:	dc06      	bgt.n	80088ba <__ieee754_pow+0x6a>
 80088ac:	d101      	bne.n	80088b2 <__ieee754_pow+0x62>
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	d1e7      	bne.n	8008882 <__ieee754_pow+0x32>
 80088b2:	4598      	cmp	r8, r3
 80088b4:	dc01      	bgt.n	80088ba <__ieee754_pow+0x6a>
 80088b6:	d10f      	bne.n	80088d8 <__ieee754_pow+0x88>
 80088b8:	b172      	cbz	r2, 80088d8 <__ieee754_pow+0x88>
 80088ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80088be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80088c2:	ea55 050a 	orrs.w	r5, r5, sl
 80088c6:	d1dc      	bne.n	8008882 <__ieee754_pow+0x32>
 80088c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088cc:	18db      	adds	r3, r3, r3
 80088ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80088d2:	4152      	adcs	r2, r2
 80088d4:	429d      	cmp	r5, r3
 80088d6:	e7d0      	b.n	800887a <__ieee754_pow+0x2a>
 80088d8:	2d00      	cmp	r5, #0
 80088da:	da3b      	bge.n	8008954 <__ieee754_pow+0x104>
 80088dc:	4b72      	ldr	r3, [pc, #456]	; (8008aa8 <__ieee754_pow+0x258>)
 80088de:	4598      	cmp	r8, r3
 80088e0:	dc51      	bgt.n	8008986 <__ieee754_pow+0x136>
 80088e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80088e6:	4598      	cmp	r8, r3
 80088e8:	f340 84ac 	ble.w	8009244 <__ieee754_pow+0x9f4>
 80088ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80088f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088f4:	2b14      	cmp	r3, #20
 80088f6:	dd0f      	ble.n	8008918 <__ieee754_pow+0xc8>
 80088f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80088fc:	fa22 f103 	lsr.w	r1, r2, r3
 8008900:	fa01 f303 	lsl.w	r3, r1, r3
 8008904:	4293      	cmp	r3, r2
 8008906:	f040 849d 	bne.w	8009244 <__ieee754_pow+0x9f4>
 800890a:	f001 0101 	and.w	r1, r1, #1
 800890e:	f1c1 0302 	rsb	r3, r1, #2
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	b182      	cbz	r2, 8008938 <__ieee754_pow+0xe8>
 8008916:	e05f      	b.n	80089d8 <__ieee754_pow+0x188>
 8008918:	2a00      	cmp	r2, #0
 800891a:	d15b      	bne.n	80089d4 <__ieee754_pow+0x184>
 800891c:	f1c3 0314 	rsb	r3, r3, #20
 8008920:	fa48 f103 	asr.w	r1, r8, r3
 8008924:	fa01 f303 	lsl.w	r3, r1, r3
 8008928:	4543      	cmp	r3, r8
 800892a:	f040 8488 	bne.w	800923e <__ieee754_pow+0x9ee>
 800892e:	f001 0101 	and.w	r1, r1, #1
 8008932:	f1c1 0302 	rsb	r3, r1, #2
 8008936:	9304      	str	r3, [sp, #16]
 8008938:	4b5c      	ldr	r3, [pc, #368]	; (8008aac <__ieee754_pow+0x25c>)
 800893a:	4598      	cmp	r8, r3
 800893c:	d132      	bne.n	80089a4 <__ieee754_pow+0x154>
 800893e:	f1b9 0f00 	cmp.w	r9, #0
 8008942:	f280 8478 	bge.w	8009236 <__ieee754_pow+0x9e6>
 8008946:	4959      	ldr	r1, [pc, #356]	; (8008aac <__ieee754_pow+0x25c>)
 8008948:	4632      	mov	r2, r6
 800894a:	463b      	mov	r3, r7
 800894c:	2000      	movs	r0, #0
 800894e:	f7f7 ff41 	bl	80007d4 <__aeabi_ddiv>
 8008952:	e79c      	b.n	800888e <__ieee754_pow+0x3e>
 8008954:	2300      	movs	r3, #0
 8008956:	9304      	str	r3, [sp, #16]
 8008958:	2a00      	cmp	r2, #0
 800895a:	d13d      	bne.n	80089d8 <__ieee754_pow+0x188>
 800895c:	4b51      	ldr	r3, [pc, #324]	; (8008aa4 <__ieee754_pow+0x254>)
 800895e:	4598      	cmp	r8, r3
 8008960:	d1ea      	bne.n	8008938 <__ieee754_pow+0xe8>
 8008962:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008966:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800896a:	ea53 030a 	orrs.w	r3, r3, sl
 800896e:	f000 845a 	beq.w	8009226 <__ieee754_pow+0x9d6>
 8008972:	4b4f      	ldr	r3, [pc, #316]	; (8008ab0 <__ieee754_pow+0x260>)
 8008974:	429c      	cmp	r4, r3
 8008976:	dd08      	ble.n	800898a <__ieee754_pow+0x13a>
 8008978:	f1b9 0f00 	cmp.w	r9, #0
 800897c:	f2c0 8457 	blt.w	800922e <__ieee754_pow+0x9de>
 8008980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008984:	e783      	b.n	800888e <__ieee754_pow+0x3e>
 8008986:	2302      	movs	r3, #2
 8008988:	e7e5      	b.n	8008956 <__ieee754_pow+0x106>
 800898a:	f1b9 0f00 	cmp.w	r9, #0
 800898e:	f04f 0000 	mov.w	r0, #0
 8008992:	f04f 0100 	mov.w	r1, #0
 8008996:	f6bf af7a 	bge.w	800888e <__ieee754_pow+0x3e>
 800899a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800899e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80089a2:	e774      	b.n	800888e <__ieee754_pow+0x3e>
 80089a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80089a8:	d106      	bne.n	80089b8 <__ieee754_pow+0x168>
 80089aa:	4632      	mov	r2, r6
 80089ac:	463b      	mov	r3, r7
 80089ae:	4630      	mov	r0, r6
 80089b0:	4639      	mov	r1, r7
 80089b2:	f7f7 fde5 	bl	8000580 <__aeabi_dmul>
 80089b6:	e76a      	b.n	800888e <__ieee754_pow+0x3e>
 80089b8:	4b3e      	ldr	r3, [pc, #248]	; (8008ab4 <__ieee754_pow+0x264>)
 80089ba:	4599      	cmp	r9, r3
 80089bc:	d10c      	bne.n	80089d8 <__ieee754_pow+0x188>
 80089be:	2d00      	cmp	r5, #0
 80089c0:	db0a      	blt.n	80089d8 <__ieee754_pow+0x188>
 80089c2:	ec47 6b10 	vmov	d0, r6, r7
 80089c6:	b009      	add	sp, #36	; 0x24
 80089c8:	ecbd 8b06 	vpop	{d8-d10}
 80089cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	f000 bc6c 	b.w	80092ac <__ieee754_sqrt>
 80089d4:	2300      	movs	r3, #0
 80089d6:	9304      	str	r3, [sp, #16]
 80089d8:	ec47 6b10 	vmov	d0, r6, r7
 80089dc:	f000 fe3c 	bl	8009658 <fabs>
 80089e0:	ec51 0b10 	vmov	r0, r1, d0
 80089e4:	f1ba 0f00 	cmp.w	sl, #0
 80089e8:	d129      	bne.n	8008a3e <__ieee754_pow+0x1ee>
 80089ea:	b124      	cbz	r4, 80089f6 <__ieee754_pow+0x1a6>
 80089ec:	4b2f      	ldr	r3, [pc, #188]	; (8008aac <__ieee754_pow+0x25c>)
 80089ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d123      	bne.n	8008a3e <__ieee754_pow+0x1ee>
 80089f6:	f1b9 0f00 	cmp.w	r9, #0
 80089fa:	da05      	bge.n	8008a08 <__ieee754_pow+0x1b8>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	2000      	movs	r0, #0
 8008a02:	492a      	ldr	r1, [pc, #168]	; (8008aac <__ieee754_pow+0x25c>)
 8008a04:	f7f7 fee6 	bl	80007d4 <__aeabi_ddiv>
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	f6bf af40 	bge.w	800888e <__ieee754_pow+0x3e>
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008a14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008a18:	4323      	orrs	r3, r4
 8008a1a:	d108      	bne.n	8008a2e <__ieee754_pow+0x1de>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4610      	mov	r0, r2
 8008a22:	4619      	mov	r1, r3
 8008a24:	f7f7 fbf4 	bl	8000210 <__aeabi_dsub>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	e78f      	b.n	800894e <__ieee754_pow+0xfe>
 8008a2e:	9b04      	ldr	r3, [sp, #16]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	f47f af2c 	bne.w	800888e <__ieee754_pow+0x3e>
 8008a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	e727      	b.n	800888e <__ieee754_pow+0x3e>
 8008a3e:	0feb      	lsrs	r3, r5, #31
 8008a40:	3b01      	subs	r3, #1
 8008a42:	9306      	str	r3, [sp, #24]
 8008a44:	9a06      	ldr	r2, [sp, #24]
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	d102      	bne.n	8008a52 <__ieee754_pow+0x202>
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	463b      	mov	r3, r7
 8008a50:	e7e6      	b.n	8008a20 <__ieee754_pow+0x1d0>
 8008a52:	4b19      	ldr	r3, [pc, #100]	; (8008ab8 <__ieee754_pow+0x268>)
 8008a54:	4598      	cmp	r8, r3
 8008a56:	f340 80fb 	ble.w	8008c50 <__ieee754_pow+0x400>
 8008a5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008a5e:	4598      	cmp	r8, r3
 8008a60:	4b13      	ldr	r3, [pc, #76]	; (8008ab0 <__ieee754_pow+0x260>)
 8008a62:	dd0c      	ble.n	8008a7e <__ieee754_pow+0x22e>
 8008a64:	429c      	cmp	r4, r3
 8008a66:	dc0f      	bgt.n	8008a88 <__ieee754_pow+0x238>
 8008a68:	f1b9 0f00 	cmp.w	r9, #0
 8008a6c:	da0f      	bge.n	8008a8e <__ieee754_pow+0x23e>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	b009      	add	sp, #36	; 0x24
 8008a72:	ecbd 8b06 	vpop	{d8-d10}
 8008a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7a:	f000 bdc1 	b.w	8009600 <__math_oflow>
 8008a7e:	429c      	cmp	r4, r3
 8008a80:	dbf2      	blt.n	8008a68 <__ieee754_pow+0x218>
 8008a82:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <__ieee754_pow+0x25c>)
 8008a84:	429c      	cmp	r4, r3
 8008a86:	dd19      	ble.n	8008abc <__ieee754_pow+0x26c>
 8008a88:	f1b9 0f00 	cmp.w	r9, #0
 8008a8c:	dcef      	bgt.n	8008a6e <__ieee754_pow+0x21e>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	b009      	add	sp, #36	; 0x24
 8008a92:	ecbd 8b06 	vpop	{d8-d10}
 8008a96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9a:	f000 bda8 	b.w	80095ee <__math_uflow>
 8008a9e:	bf00      	nop
 8008aa0:	fff00000 	.word	0xfff00000
 8008aa4:	7ff00000 	.word	0x7ff00000
 8008aa8:	433fffff 	.word	0x433fffff
 8008aac:	3ff00000 	.word	0x3ff00000
 8008ab0:	3fefffff 	.word	0x3fefffff
 8008ab4:	3fe00000 	.word	0x3fe00000
 8008ab8:	41e00000 	.word	0x41e00000
 8008abc:	4b60      	ldr	r3, [pc, #384]	; (8008c40 <__ieee754_pow+0x3f0>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f7f7 fba6 	bl	8000210 <__aeabi_dsub>
 8008ac4:	a354      	add	r3, pc, #336	; (adr r3, 8008c18 <__ieee754_pow+0x3c8>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	4604      	mov	r4, r0
 8008acc:	460d      	mov	r5, r1
 8008ace:	f7f7 fd57 	bl	8000580 <__aeabi_dmul>
 8008ad2:	a353      	add	r3, pc, #332	; (adr r3, 8008c20 <__ieee754_pow+0x3d0>)
 8008ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad8:	4606      	mov	r6, r0
 8008ada:	460f      	mov	r7, r1
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	f7f7 fd4e 	bl	8000580 <__aeabi_dmul>
 8008ae4:	4b57      	ldr	r3, [pc, #348]	; (8008c44 <__ieee754_pow+0x3f4>)
 8008ae6:	4682      	mov	sl, r0
 8008ae8:	468b      	mov	fp, r1
 8008aea:	2200      	movs	r2, #0
 8008aec:	4620      	mov	r0, r4
 8008aee:	4629      	mov	r1, r5
 8008af0:	f7f7 fd46 	bl	8000580 <__aeabi_dmul>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	a14b      	add	r1, pc, #300	; (adr r1, 8008c28 <__ieee754_pow+0x3d8>)
 8008afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afe:	f7f7 fb87 	bl	8000210 <__aeabi_dsub>
 8008b02:	4622      	mov	r2, r4
 8008b04:	462b      	mov	r3, r5
 8008b06:	f7f7 fd3b 	bl	8000580 <__aeabi_dmul>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	2000      	movs	r0, #0
 8008b10:	494d      	ldr	r1, [pc, #308]	; (8008c48 <__ieee754_pow+0x3f8>)
 8008b12:	f7f7 fb7d 	bl	8000210 <__aeabi_dsub>
 8008b16:	4622      	mov	r2, r4
 8008b18:	4680      	mov	r8, r0
 8008b1a:	4689      	mov	r9, r1
 8008b1c:	462b      	mov	r3, r5
 8008b1e:	4620      	mov	r0, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	f7f7 fd2d 	bl	8000580 <__aeabi_dmul>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	f7f7 fd27 	bl	8000580 <__aeabi_dmul>
 8008b32:	a33f      	add	r3, pc, #252	; (adr r3, 8008c30 <__ieee754_pow+0x3e0>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd22 	bl	8000580 <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4650      	mov	r0, sl
 8008b42:	4659      	mov	r1, fp
 8008b44:	f7f7 fb64 	bl	8000210 <__aeabi_dsub>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	4689      	mov	r9, r1
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	f7f7 fb5e 	bl	8000214 <__adddf3>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460d      	mov	r5, r1
 8008b62:	f7f7 fb55 	bl	8000210 <__aeabi_dsub>
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	f7f7 fb4f 	bl	8000210 <__aeabi_dsub>
 8008b72:	9b04      	ldr	r3, [sp, #16]
 8008b74:	9a06      	ldr	r2, [sp, #24]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	468b      	mov	fp, r1
 8008b7e:	f040 81e7 	bne.w	8008f50 <__ieee754_pow+0x700>
 8008b82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008c38 <__ieee754_pow+0x3e8>
 8008b86:	eeb0 8a47 	vmov.f32	s16, s14
 8008b8a:	eef0 8a67 	vmov.f32	s17, s15
 8008b8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b92:	2600      	movs	r6, #0
 8008b94:	4632      	mov	r2, r6
 8008b96:	463b      	mov	r3, r7
 8008b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b9c:	f7f7 fb38 	bl	8000210 <__aeabi_dsub>
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	462b      	mov	r3, r5
 8008ba4:	f7f7 fcec 	bl	8000580 <__aeabi_dmul>
 8008ba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bac:	4680      	mov	r8, r0
 8008bae:	4689      	mov	r9, r1
 8008bb0:	4650      	mov	r0, sl
 8008bb2:	4659      	mov	r1, fp
 8008bb4:	f7f7 fce4 	bl	8000580 <__aeabi_dmul>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	f7f7 fb28 	bl	8000214 <__adddf3>
 8008bc4:	4632      	mov	r2, r6
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	4680      	mov	r8, r0
 8008bca:	4689      	mov	r9, r1
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4629      	mov	r1, r5
 8008bd0:	f7f7 fcd6 	bl	8000580 <__aeabi_dmul>
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	460d      	mov	r5, r1
 8008bda:	4602      	mov	r2, r0
 8008bdc:	4649      	mov	r1, r9
 8008bde:	4640      	mov	r0, r8
 8008be0:	f7f7 fb18 	bl	8000214 <__adddf3>
 8008be4:	4b19      	ldr	r3, [pc, #100]	; (8008c4c <__ieee754_pow+0x3fc>)
 8008be6:	4299      	cmp	r1, r3
 8008be8:	ec45 4b19 	vmov	d9, r4, r5
 8008bec:	4606      	mov	r6, r0
 8008bee:	460f      	mov	r7, r1
 8008bf0:	468b      	mov	fp, r1
 8008bf2:	f340 82f1 	ble.w	80091d8 <__ieee754_pow+0x988>
 8008bf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008bfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008bfe:	4303      	orrs	r3, r0
 8008c00:	f000 81e4 	beq.w	8008fcc <__ieee754_pow+0x77c>
 8008c04:	ec51 0b18 	vmov	r0, r1, d8
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f7f7 ff2a 	bl	8000a64 <__aeabi_dcmplt>
 8008c10:	3800      	subs	r0, #0
 8008c12:	bf18      	it	ne
 8008c14:	2001      	movne	r0, #1
 8008c16:	e72b      	b.n	8008a70 <__ieee754_pow+0x220>
 8008c18:	60000000 	.word	0x60000000
 8008c1c:	3ff71547 	.word	0x3ff71547
 8008c20:	f85ddf44 	.word	0xf85ddf44
 8008c24:	3e54ae0b 	.word	0x3e54ae0b
 8008c28:	55555555 	.word	0x55555555
 8008c2c:	3fd55555 	.word	0x3fd55555
 8008c30:	652b82fe 	.word	0x652b82fe
 8008c34:	3ff71547 	.word	0x3ff71547
 8008c38:	00000000 	.word	0x00000000
 8008c3c:	bff00000 	.word	0xbff00000
 8008c40:	3ff00000 	.word	0x3ff00000
 8008c44:	3fd00000 	.word	0x3fd00000
 8008c48:	3fe00000 	.word	0x3fe00000
 8008c4c:	408fffff 	.word	0x408fffff
 8008c50:	4bd5      	ldr	r3, [pc, #852]	; (8008fa8 <__ieee754_pow+0x758>)
 8008c52:	402b      	ands	r3, r5
 8008c54:	2200      	movs	r2, #0
 8008c56:	b92b      	cbnz	r3, 8008c64 <__ieee754_pow+0x414>
 8008c58:	4bd4      	ldr	r3, [pc, #848]	; (8008fac <__ieee754_pow+0x75c>)
 8008c5a:	f7f7 fc91 	bl	8000580 <__aeabi_dmul>
 8008c5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008c62:	460c      	mov	r4, r1
 8008c64:	1523      	asrs	r3, r4, #20
 8008c66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008c6a:	4413      	add	r3, r2
 8008c6c:	9305      	str	r3, [sp, #20]
 8008c6e:	4bd0      	ldr	r3, [pc, #832]	; (8008fb0 <__ieee754_pow+0x760>)
 8008c70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008c74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008c78:	429c      	cmp	r4, r3
 8008c7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008c7e:	dd08      	ble.n	8008c92 <__ieee754_pow+0x442>
 8008c80:	4bcc      	ldr	r3, [pc, #816]	; (8008fb4 <__ieee754_pow+0x764>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	f340 8162 	ble.w	8008f4c <__ieee754_pow+0x6fc>
 8008c88:	9b05      	ldr	r3, [sp, #20]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	9305      	str	r3, [sp, #20]
 8008c8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008c92:	2400      	movs	r4, #0
 8008c94:	00e3      	lsls	r3, r4, #3
 8008c96:	9307      	str	r3, [sp, #28]
 8008c98:	4bc7      	ldr	r3, [pc, #796]	; (8008fb8 <__ieee754_pow+0x768>)
 8008c9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c9e:	ed93 7b00 	vldr	d7, [r3]
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	ec53 2b17 	vmov	r2, r3, d7
 8008ca8:	eeb0 9a47 	vmov.f32	s18, s14
 8008cac:	eef0 9a67 	vmov.f32	s19, s15
 8008cb0:	4682      	mov	sl, r0
 8008cb2:	f7f7 faad 	bl	8000210 <__aeabi_dsub>
 8008cb6:	4652      	mov	r2, sl
 8008cb8:	4606      	mov	r6, r0
 8008cba:	460f      	mov	r7, r1
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	ec51 0b19 	vmov	r0, r1, d9
 8008cc2:	f7f7 faa7 	bl	8000214 <__adddf3>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	2000      	movs	r0, #0
 8008ccc:	49bb      	ldr	r1, [pc, #748]	; (8008fbc <__ieee754_pow+0x76c>)
 8008cce:	f7f7 fd81 	bl	80007d4 <__aeabi_ddiv>
 8008cd2:	ec41 0b1a 	vmov	d10, r0, r1
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4639      	mov	r1, r7
 8008cde:	f7f7 fc4f 	bl	8000580 <__aeabi_dmul>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce8:	9302      	str	r3, [sp, #8]
 8008cea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008cee:	46ab      	mov	fp, r5
 8008cf0:	106d      	asrs	r5, r5, #1
 8008cf2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008cf6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008cfa:	ec41 0b18 	vmov	d8, r0, r1
 8008cfe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008d02:	2200      	movs	r2, #0
 8008d04:	4640      	mov	r0, r8
 8008d06:	4649      	mov	r1, r9
 8008d08:	4614      	mov	r4, r2
 8008d0a:	461d      	mov	r5, r3
 8008d0c:	f7f7 fc38 	bl	8000580 <__aeabi_dmul>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4630      	mov	r0, r6
 8008d16:	4639      	mov	r1, r7
 8008d18:	f7f7 fa7a 	bl	8000210 <__aeabi_dsub>
 8008d1c:	ec53 2b19 	vmov	r2, r3, d9
 8008d20:	4606      	mov	r6, r0
 8008d22:	460f      	mov	r7, r1
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7f7 fa72 	bl	8000210 <__aeabi_dsub>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4650      	mov	r0, sl
 8008d32:	4659      	mov	r1, fp
 8008d34:	f7f7 fa6c 	bl	8000210 <__aeabi_dsub>
 8008d38:	4642      	mov	r2, r8
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	f7f7 fc20 	bl	8000580 <__aeabi_dmul>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4630      	mov	r0, r6
 8008d46:	4639      	mov	r1, r7
 8008d48:	f7f7 fa62 	bl	8000210 <__aeabi_dsub>
 8008d4c:	ec53 2b1a 	vmov	r2, r3, d10
 8008d50:	f7f7 fc16 	bl	8000580 <__aeabi_dmul>
 8008d54:	ec53 2b18 	vmov	r2, r3, d8
 8008d58:	ec41 0b19 	vmov	d9, r0, r1
 8008d5c:	ec51 0b18 	vmov	r0, r1, d8
 8008d60:	f7f7 fc0e 	bl	8000580 <__aeabi_dmul>
 8008d64:	a37c      	add	r3, pc, #496	; (adr r3, 8008f58 <__ieee754_pow+0x708>)
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	f7f7 fc07 	bl	8000580 <__aeabi_dmul>
 8008d72:	a37b      	add	r3, pc, #492	; (adr r3, 8008f60 <__ieee754_pow+0x710>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f7f7 fa4c 	bl	8000214 <__adddf3>
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	462b      	mov	r3, r5
 8008d80:	f7f7 fbfe 	bl	8000580 <__aeabi_dmul>
 8008d84:	a378      	add	r3, pc, #480	; (adr r3, 8008f68 <__ieee754_pow+0x718>)
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	f7f7 fa43 	bl	8000214 <__adddf3>
 8008d8e:	4622      	mov	r2, r4
 8008d90:	462b      	mov	r3, r5
 8008d92:	f7f7 fbf5 	bl	8000580 <__aeabi_dmul>
 8008d96:	a376      	add	r3, pc, #472	; (adr r3, 8008f70 <__ieee754_pow+0x720>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f7f7 fa3a 	bl	8000214 <__adddf3>
 8008da0:	4622      	mov	r2, r4
 8008da2:	462b      	mov	r3, r5
 8008da4:	f7f7 fbec 	bl	8000580 <__aeabi_dmul>
 8008da8:	a373      	add	r3, pc, #460	; (adr r3, 8008f78 <__ieee754_pow+0x728>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fa31 	bl	8000214 <__adddf3>
 8008db2:	4622      	mov	r2, r4
 8008db4:	462b      	mov	r3, r5
 8008db6:	f7f7 fbe3 	bl	8000580 <__aeabi_dmul>
 8008dba:	a371      	add	r3, pc, #452	; (adr r3, 8008f80 <__ieee754_pow+0x730>)
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	f7f7 fa28 	bl	8000214 <__adddf3>
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	4606      	mov	r6, r0
 8008dc8:	460f      	mov	r7, r1
 8008dca:	462b      	mov	r3, r5
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4629      	mov	r1, r5
 8008dd0:	f7f7 fbd6 	bl	8000580 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4630      	mov	r0, r6
 8008dda:	4639      	mov	r1, r7
 8008ddc:	f7f7 fbd0 	bl	8000580 <__aeabi_dmul>
 8008de0:	4642      	mov	r2, r8
 8008de2:	4604      	mov	r4, r0
 8008de4:	460d      	mov	r5, r1
 8008de6:	464b      	mov	r3, r9
 8008de8:	ec51 0b18 	vmov	r0, r1, d8
 8008dec:	f7f7 fa12 	bl	8000214 <__adddf3>
 8008df0:	ec53 2b19 	vmov	r2, r3, d9
 8008df4:	f7f7 fbc4 	bl	8000580 <__aeabi_dmul>
 8008df8:	4622      	mov	r2, r4
 8008dfa:	462b      	mov	r3, r5
 8008dfc:	f7f7 fa0a 	bl	8000214 <__adddf3>
 8008e00:	4642      	mov	r2, r8
 8008e02:	4682      	mov	sl, r0
 8008e04:	468b      	mov	fp, r1
 8008e06:	464b      	mov	r3, r9
 8008e08:	4640      	mov	r0, r8
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	f7f7 fbb8 	bl	8000580 <__aeabi_dmul>
 8008e10:	4b6b      	ldr	r3, [pc, #428]	; (8008fc0 <__ieee754_pow+0x770>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	4606      	mov	r6, r0
 8008e16:	460f      	mov	r7, r1
 8008e18:	f7f7 f9fc 	bl	8000214 <__adddf3>
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	465b      	mov	r3, fp
 8008e20:	f7f7 f9f8 	bl	8000214 <__adddf3>
 8008e24:	2000      	movs	r0, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	460d      	mov	r5, r1
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fba5 	bl	8000580 <__aeabi_dmul>
 8008e36:	4b62      	ldr	r3, [pc, #392]	; (8008fc0 <__ieee754_pow+0x770>)
 8008e38:	4680      	mov	r8, r0
 8008e3a:	4689      	mov	r9, r1
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	4620      	mov	r0, r4
 8008e40:	4629      	mov	r1, r5
 8008e42:	f7f7 f9e5 	bl	8000210 <__aeabi_dsub>
 8008e46:	4632      	mov	r2, r6
 8008e48:	463b      	mov	r3, r7
 8008e4a:	f7f7 f9e1 	bl	8000210 <__aeabi_dsub>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4650      	mov	r0, sl
 8008e54:	4659      	mov	r1, fp
 8008e56:	f7f7 f9db 	bl	8000210 <__aeabi_dsub>
 8008e5a:	ec53 2b18 	vmov	r2, r3, d8
 8008e5e:	f7f7 fb8f 	bl	8000580 <__aeabi_dmul>
 8008e62:	4622      	mov	r2, r4
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	462b      	mov	r3, r5
 8008e6a:	ec51 0b19 	vmov	r0, r1, d9
 8008e6e:	f7f7 fb87 	bl	8000580 <__aeabi_dmul>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 f9cb 	bl	8000214 <__adddf3>
 8008e7e:	4606      	mov	r6, r0
 8008e80:	460f      	mov	r7, r1
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4640      	mov	r0, r8
 8008e88:	4649      	mov	r1, r9
 8008e8a:	f7f7 f9c3 	bl	8000214 <__adddf3>
 8008e8e:	a33e      	add	r3, pc, #248	; (adr r3, 8008f88 <__ieee754_pow+0x738>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	2000      	movs	r0, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	460d      	mov	r5, r1
 8008e9a:	f7f7 fb71 	bl	8000580 <__aeabi_dmul>
 8008e9e:	4642      	mov	r2, r8
 8008ea0:	ec41 0b18 	vmov	d8, r0, r1
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 f9b1 	bl	8000210 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	f7f7 f9ab 	bl	8000210 <__aeabi_dsub>
 8008eba:	a335      	add	r3, pc, #212	; (adr r3, 8008f90 <__ieee754_pow+0x740>)
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f7f7 fb5e 	bl	8000580 <__aeabi_dmul>
 8008ec4:	a334      	add	r3, pc, #208	; (adr r3, 8008f98 <__ieee754_pow+0x748>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460f      	mov	r7, r1
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	f7f7 fb55 	bl	8000580 <__aeabi_dmul>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4630      	mov	r0, r6
 8008edc:	4639      	mov	r1, r7
 8008ede:	f7f7 f999 	bl	8000214 <__adddf3>
 8008ee2:	9a07      	ldr	r2, [sp, #28]
 8008ee4:	4b37      	ldr	r3, [pc, #220]	; (8008fc4 <__ieee754_pow+0x774>)
 8008ee6:	4413      	add	r3, r2
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 f992 	bl	8000214 <__adddf3>
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	9805      	ldr	r0, [sp, #20]
 8008ef4:	468b      	mov	fp, r1
 8008ef6:	f7f7 fad9 	bl	80004ac <__aeabi_i2d>
 8008efa:	9a07      	ldr	r2, [sp, #28]
 8008efc:	4b32      	ldr	r3, [pc, #200]	; (8008fc8 <__ieee754_pow+0x778>)
 8008efe:	4413      	add	r3, r2
 8008f00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f04:	4606      	mov	r6, r0
 8008f06:	460f      	mov	r7, r1
 8008f08:	4652      	mov	r2, sl
 8008f0a:	465b      	mov	r3, fp
 8008f0c:	ec51 0b18 	vmov	r0, r1, d8
 8008f10:	f7f7 f980 	bl	8000214 <__adddf3>
 8008f14:	4642      	mov	r2, r8
 8008f16:	464b      	mov	r3, r9
 8008f18:	f7f7 f97c 	bl	8000214 <__adddf3>
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	463b      	mov	r3, r7
 8008f20:	f7f7 f978 	bl	8000214 <__adddf3>
 8008f24:	2000      	movs	r0, #0
 8008f26:	4632      	mov	r2, r6
 8008f28:	463b      	mov	r3, r7
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	460d      	mov	r5, r1
 8008f2e:	f7f7 f96f 	bl	8000210 <__aeabi_dsub>
 8008f32:	4642      	mov	r2, r8
 8008f34:	464b      	mov	r3, r9
 8008f36:	f7f7 f96b 	bl	8000210 <__aeabi_dsub>
 8008f3a:	ec53 2b18 	vmov	r2, r3, d8
 8008f3e:	f7f7 f967 	bl	8000210 <__aeabi_dsub>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4650      	mov	r0, sl
 8008f48:	4659      	mov	r1, fp
 8008f4a:	e610      	b.n	8008b6e <__ieee754_pow+0x31e>
 8008f4c:	2401      	movs	r4, #1
 8008f4e:	e6a1      	b.n	8008c94 <__ieee754_pow+0x444>
 8008f50:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008fa0 <__ieee754_pow+0x750>
 8008f54:	e617      	b.n	8008b86 <__ieee754_pow+0x336>
 8008f56:	bf00      	nop
 8008f58:	4a454eef 	.word	0x4a454eef
 8008f5c:	3fca7e28 	.word	0x3fca7e28
 8008f60:	93c9db65 	.word	0x93c9db65
 8008f64:	3fcd864a 	.word	0x3fcd864a
 8008f68:	a91d4101 	.word	0xa91d4101
 8008f6c:	3fd17460 	.word	0x3fd17460
 8008f70:	518f264d 	.word	0x518f264d
 8008f74:	3fd55555 	.word	0x3fd55555
 8008f78:	db6fabff 	.word	0xdb6fabff
 8008f7c:	3fdb6db6 	.word	0x3fdb6db6
 8008f80:	33333303 	.word	0x33333303
 8008f84:	3fe33333 	.word	0x3fe33333
 8008f88:	e0000000 	.word	0xe0000000
 8008f8c:	3feec709 	.word	0x3feec709
 8008f90:	dc3a03fd 	.word	0xdc3a03fd
 8008f94:	3feec709 	.word	0x3feec709
 8008f98:	145b01f5 	.word	0x145b01f5
 8008f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8008fa0:	00000000 	.word	0x00000000
 8008fa4:	3ff00000 	.word	0x3ff00000
 8008fa8:	7ff00000 	.word	0x7ff00000
 8008fac:	43400000 	.word	0x43400000
 8008fb0:	0003988e 	.word	0x0003988e
 8008fb4:	000bb679 	.word	0x000bb679
 8008fb8:	0800ab10 	.word	0x0800ab10
 8008fbc:	3ff00000 	.word	0x3ff00000
 8008fc0:	40080000 	.word	0x40080000
 8008fc4:	0800ab30 	.word	0x0800ab30
 8008fc8:	0800ab20 	.word	0x0800ab20
 8008fcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80092a4 <__ieee754_pow+0xa54>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 f91d 	bl	8000214 <__adddf3>
 8008fda:	4622      	mov	r2, r4
 8008fdc:	ec41 0b1a 	vmov	d10, r0, r1
 8008fe0:	462b      	mov	r3, r5
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	f7f7 f913 	bl	8000210 <__aeabi_dsub>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	ec51 0b1a 	vmov	r0, r1, d10
 8008ff2:	f7f7 fd55 	bl	8000aa0 <__aeabi_dcmpgt>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f47f ae04 	bne.w	8008c04 <__ieee754_pow+0x3b4>
 8008ffc:	4aa4      	ldr	r2, [pc, #656]	; (8009290 <__ieee754_pow+0xa40>)
 8008ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009002:	4293      	cmp	r3, r2
 8009004:	f340 8108 	ble.w	8009218 <__ieee754_pow+0x9c8>
 8009008:	151b      	asrs	r3, r3, #20
 800900a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800900e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009012:	fa4a f303 	asr.w	r3, sl, r3
 8009016:	445b      	add	r3, fp
 8009018:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800901c:	4e9d      	ldr	r6, [pc, #628]	; (8009294 <__ieee754_pow+0xa44>)
 800901e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009022:	4116      	asrs	r6, r2
 8009024:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009028:	2000      	movs	r0, #0
 800902a:	ea23 0106 	bic.w	r1, r3, r6
 800902e:	f1c2 0214 	rsb	r2, r2, #20
 8009032:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009036:	fa4a fa02 	asr.w	sl, sl, r2
 800903a:	f1bb 0f00 	cmp.w	fp, #0
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4620      	mov	r0, r4
 8009044:	4629      	mov	r1, r5
 8009046:	bfb8      	it	lt
 8009048:	f1ca 0a00 	rsblt	sl, sl, #0
 800904c:	f7f7 f8e0 	bl	8000210 <__aeabi_dsub>
 8009050:	ec41 0b19 	vmov	d9, r0, r1
 8009054:	4642      	mov	r2, r8
 8009056:	464b      	mov	r3, r9
 8009058:	ec51 0b19 	vmov	r0, r1, d9
 800905c:	f7f7 f8da 	bl	8000214 <__adddf3>
 8009060:	a37b      	add	r3, pc, #492	; (adr r3, 8009250 <__ieee754_pow+0xa00>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	2000      	movs	r0, #0
 8009068:	4604      	mov	r4, r0
 800906a:	460d      	mov	r5, r1
 800906c:	f7f7 fa88 	bl	8000580 <__aeabi_dmul>
 8009070:	ec53 2b19 	vmov	r2, r3, d9
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	4620      	mov	r0, r4
 800907a:	4629      	mov	r1, r5
 800907c:	f7f7 f8c8 	bl	8000210 <__aeabi_dsub>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4640      	mov	r0, r8
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 f8c2 	bl	8000210 <__aeabi_dsub>
 800908c:	a372      	add	r3, pc, #456	; (adr r3, 8009258 <__ieee754_pow+0xa08>)
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	f7f7 fa75 	bl	8000580 <__aeabi_dmul>
 8009096:	a372      	add	r3, pc, #456	; (adr r3, 8009260 <__ieee754_pow+0xa10>)
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	4680      	mov	r8, r0
 800909e:	4689      	mov	r9, r1
 80090a0:	4620      	mov	r0, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 fa6c 	bl	8000580 <__aeabi_dmul>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4640      	mov	r0, r8
 80090ae:	4649      	mov	r1, r9
 80090b0:	f7f7 f8b0 	bl	8000214 <__adddf3>
 80090b4:	4604      	mov	r4, r0
 80090b6:	460d      	mov	r5, r1
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 f8a8 	bl	8000214 <__adddf3>
 80090c4:	4632      	mov	r2, r6
 80090c6:	463b      	mov	r3, r7
 80090c8:	4680      	mov	r8, r0
 80090ca:	4689      	mov	r9, r1
 80090cc:	f7f7 f8a0 	bl	8000210 <__aeabi_dsub>
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	4620      	mov	r0, r4
 80090d6:	4629      	mov	r1, r5
 80090d8:	f7f7 f89a 	bl	8000210 <__aeabi_dsub>
 80090dc:	4642      	mov	r2, r8
 80090de:	4606      	mov	r6, r0
 80090e0:	460f      	mov	r7, r1
 80090e2:	464b      	mov	r3, r9
 80090e4:	4640      	mov	r0, r8
 80090e6:	4649      	mov	r1, r9
 80090e8:	f7f7 fa4a 	bl	8000580 <__aeabi_dmul>
 80090ec:	a35e      	add	r3, pc, #376	; (adr r3, 8009268 <__ieee754_pow+0xa18>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	4604      	mov	r4, r0
 80090f4:	460d      	mov	r5, r1
 80090f6:	f7f7 fa43 	bl	8000580 <__aeabi_dmul>
 80090fa:	a35d      	add	r3, pc, #372	; (adr r3, 8009270 <__ieee754_pow+0xa20>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 f886 	bl	8000210 <__aeabi_dsub>
 8009104:	4622      	mov	r2, r4
 8009106:	462b      	mov	r3, r5
 8009108:	f7f7 fa3a 	bl	8000580 <__aeabi_dmul>
 800910c:	a35a      	add	r3, pc, #360	; (adr r3, 8009278 <__ieee754_pow+0xa28>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 f87f 	bl	8000214 <__adddf3>
 8009116:	4622      	mov	r2, r4
 8009118:	462b      	mov	r3, r5
 800911a:	f7f7 fa31 	bl	8000580 <__aeabi_dmul>
 800911e:	a358      	add	r3, pc, #352	; (adr r3, 8009280 <__ieee754_pow+0xa30>)
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 f874 	bl	8000210 <__aeabi_dsub>
 8009128:	4622      	mov	r2, r4
 800912a:	462b      	mov	r3, r5
 800912c:	f7f7 fa28 	bl	8000580 <__aeabi_dmul>
 8009130:	a355      	add	r3, pc, #340	; (adr r3, 8009288 <__ieee754_pow+0xa38>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 f86d 	bl	8000214 <__adddf3>
 800913a:	4622      	mov	r2, r4
 800913c:	462b      	mov	r3, r5
 800913e:	f7f7 fa1f 	bl	8000580 <__aeabi_dmul>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 f861 	bl	8000210 <__aeabi_dsub>
 800914e:	4604      	mov	r4, r0
 8009150:	460d      	mov	r5, r1
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	4640      	mov	r0, r8
 8009158:	4649      	mov	r1, r9
 800915a:	f7f7 fa11 	bl	8000580 <__aeabi_dmul>
 800915e:	2200      	movs	r2, #0
 8009160:	ec41 0b19 	vmov	d9, r0, r1
 8009164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009168:	4620      	mov	r0, r4
 800916a:	4629      	mov	r1, r5
 800916c:	f7f7 f850 	bl	8000210 <__aeabi_dsub>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	ec51 0b19 	vmov	r0, r1, d9
 8009178:	f7f7 fb2c 	bl	80007d4 <__aeabi_ddiv>
 800917c:	4632      	mov	r2, r6
 800917e:	4604      	mov	r4, r0
 8009180:	460d      	mov	r5, r1
 8009182:	463b      	mov	r3, r7
 8009184:	4640      	mov	r0, r8
 8009186:	4649      	mov	r1, r9
 8009188:	f7f7 f9fa 	bl	8000580 <__aeabi_dmul>
 800918c:	4632      	mov	r2, r6
 800918e:	463b      	mov	r3, r7
 8009190:	f7f7 f840 	bl	8000214 <__adddf3>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7f7 f838 	bl	8000210 <__aeabi_dsub>
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	f7f7 f834 	bl	8000210 <__aeabi_dsub>
 80091a8:	460b      	mov	r3, r1
 80091aa:	4602      	mov	r2, r0
 80091ac:	493a      	ldr	r1, [pc, #232]	; (8009298 <__ieee754_pow+0xa48>)
 80091ae:	2000      	movs	r0, #0
 80091b0:	f7f7 f82e 	bl	8000210 <__aeabi_dsub>
 80091b4:	ec41 0b10 	vmov	d0, r0, r1
 80091b8:	ee10 3a90 	vmov	r3, s1
 80091bc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80091c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091c4:	da2b      	bge.n	800921e <__ieee754_pow+0x9ce>
 80091c6:	4650      	mov	r0, sl
 80091c8:	f000 fa5a 	bl	8009680 <scalbn>
 80091cc:	ec51 0b10 	vmov	r0, r1, d0
 80091d0:	ec53 2b18 	vmov	r2, r3, d8
 80091d4:	f7ff bbed 	b.w	80089b2 <__ieee754_pow+0x162>
 80091d8:	4b30      	ldr	r3, [pc, #192]	; (800929c <__ieee754_pow+0xa4c>)
 80091da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80091de:	429e      	cmp	r6, r3
 80091e0:	f77f af0c 	ble.w	8008ffc <__ieee754_pow+0x7ac>
 80091e4:	4b2e      	ldr	r3, [pc, #184]	; (80092a0 <__ieee754_pow+0xa50>)
 80091e6:	440b      	add	r3, r1
 80091e8:	4303      	orrs	r3, r0
 80091ea:	d009      	beq.n	8009200 <__ieee754_pow+0x9b0>
 80091ec:	ec51 0b18 	vmov	r0, r1, d8
 80091f0:	2200      	movs	r2, #0
 80091f2:	2300      	movs	r3, #0
 80091f4:	f7f7 fc36 	bl	8000a64 <__aeabi_dcmplt>
 80091f8:	3800      	subs	r0, #0
 80091fa:	bf18      	it	ne
 80091fc:	2001      	movne	r0, #1
 80091fe:	e447      	b.n	8008a90 <__ieee754_pow+0x240>
 8009200:	4622      	mov	r2, r4
 8009202:	462b      	mov	r3, r5
 8009204:	f7f7 f804 	bl	8000210 <__aeabi_dsub>
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	f7f7 fc3e 	bl	8000a8c <__aeabi_dcmpge>
 8009210:	2800      	cmp	r0, #0
 8009212:	f43f aef3 	beq.w	8008ffc <__ieee754_pow+0x7ac>
 8009216:	e7e9      	b.n	80091ec <__ieee754_pow+0x99c>
 8009218:	f04f 0a00 	mov.w	sl, #0
 800921c:	e71a      	b.n	8009054 <__ieee754_pow+0x804>
 800921e:	ec51 0b10 	vmov	r0, r1, d0
 8009222:	4619      	mov	r1, r3
 8009224:	e7d4      	b.n	80091d0 <__ieee754_pow+0x980>
 8009226:	491c      	ldr	r1, [pc, #112]	; (8009298 <__ieee754_pow+0xa48>)
 8009228:	2000      	movs	r0, #0
 800922a:	f7ff bb30 	b.w	800888e <__ieee754_pow+0x3e>
 800922e:	2000      	movs	r0, #0
 8009230:	2100      	movs	r1, #0
 8009232:	f7ff bb2c 	b.w	800888e <__ieee754_pow+0x3e>
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	f7ff bb28 	b.w	800888e <__ieee754_pow+0x3e>
 800923e:	9204      	str	r2, [sp, #16]
 8009240:	f7ff bb7a 	b.w	8008938 <__ieee754_pow+0xe8>
 8009244:	2300      	movs	r3, #0
 8009246:	f7ff bb64 	b.w	8008912 <__ieee754_pow+0xc2>
 800924a:	bf00      	nop
 800924c:	f3af 8000 	nop.w
 8009250:	00000000 	.word	0x00000000
 8009254:	3fe62e43 	.word	0x3fe62e43
 8009258:	fefa39ef 	.word	0xfefa39ef
 800925c:	3fe62e42 	.word	0x3fe62e42
 8009260:	0ca86c39 	.word	0x0ca86c39
 8009264:	be205c61 	.word	0xbe205c61
 8009268:	72bea4d0 	.word	0x72bea4d0
 800926c:	3e663769 	.word	0x3e663769
 8009270:	c5d26bf1 	.word	0xc5d26bf1
 8009274:	3ebbbd41 	.word	0x3ebbbd41
 8009278:	af25de2c 	.word	0xaf25de2c
 800927c:	3f11566a 	.word	0x3f11566a
 8009280:	16bebd93 	.word	0x16bebd93
 8009284:	3f66c16c 	.word	0x3f66c16c
 8009288:	5555553e 	.word	0x5555553e
 800928c:	3fc55555 	.word	0x3fc55555
 8009290:	3fe00000 	.word	0x3fe00000
 8009294:	000fffff 	.word	0x000fffff
 8009298:	3ff00000 	.word	0x3ff00000
 800929c:	4090cbff 	.word	0x4090cbff
 80092a0:	3f6f3400 	.word	0x3f6f3400
 80092a4:	652b82fe 	.word	0x652b82fe
 80092a8:	3c971547 	.word	0x3c971547

080092ac <__ieee754_sqrt>:
 80092ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b0:	ec55 4b10 	vmov	r4, r5, d0
 80092b4:	4e55      	ldr	r6, [pc, #340]	; (800940c <__ieee754_sqrt+0x160>)
 80092b6:	43ae      	bics	r6, r5
 80092b8:	ee10 0a10 	vmov	r0, s0
 80092bc:	ee10 3a10 	vmov	r3, s0
 80092c0:	462a      	mov	r2, r5
 80092c2:	4629      	mov	r1, r5
 80092c4:	d110      	bne.n	80092e8 <__ieee754_sqrt+0x3c>
 80092c6:	ee10 2a10 	vmov	r2, s0
 80092ca:	462b      	mov	r3, r5
 80092cc:	f7f7 f958 	bl	8000580 <__aeabi_dmul>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	f7f6 ff9c 	bl	8000214 <__adddf3>
 80092dc:	4604      	mov	r4, r0
 80092de:	460d      	mov	r5, r1
 80092e0:	ec45 4b10 	vmov	d0, r4, r5
 80092e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e8:	2d00      	cmp	r5, #0
 80092ea:	dc10      	bgt.n	800930e <__ieee754_sqrt+0x62>
 80092ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80092f0:	4330      	orrs	r0, r6
 80092f2:	d0f5      	beq.n	80092e0 <__ieee754_sqrt+0x34>
 80092f4:	b15d      	cbz	r5, 800930e <__ieee754_sqrt+0x62>
 80092f6:	ee10 2a10 	vmov	r2, s0
 80092fa:	462b      	mov	r3, r5
 80092fc:	ee10 0a10 	vmov	r0, s0
 8009300:	f7f6 ff86 	bl	8000210 <__aeabi_dsub>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	f7f7 fa64 	bl	80007d4 <__aeabi_ddiv>
 800930c:	e7e6      	b.n	80092dc <__ieee754_sqrt+0x30>
 800930e:	1512      	asrs	r2, r2, #20
 8009310:	d074      	beq.n	80093fc <__ieee754_sqrt+0x150>
 8009312:	07d4      	lsls	r4, r2, #31
 8009314:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009318:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800931c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009320:	bf5e      	ittt	pl
 8009322:	0fda      	lsrpl	r2, r3, #31
 8009324:	005b      	lslpl	r3, r3, #1
 8009326:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800932a:	2400      	movs	r4, #0
 800932c:	0fda      	lsrs	r2, r3, #31
 800932e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009332:	107f      	asrs	r7, r7, #1
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	2516      	movs	r5, #22
 8009338:	4620      	mov	r0, r4
 800933a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800933e:	1886      	adds	r6, r0, r2
 8009340:	428e      	cmp	r6, r1
 8009342:	bfde      	ittt	le
 8009344:	1b89      	suble	r1, r1, r6
 8009346:	18b0      	addle	r0, r6, r2
 8009348:	18a4      	addle	r4, r4, r2
 800934a:	0049      	lsls	r1, r1, #1
 800934c:	3d01      	subs	r5, #1
 800934e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009352:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009356:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800935a:	d1f0      	bne.n	800933e <__ieee754_sqrt+0x92>
 800935c:	462a      	mov	r2, r5
 800935e:	f04f 0e20 	mov.w	lr, #32
 8009362:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009366:	4281      	cmp	r1, r0
 8009368:	eb06 0c05 	add.w	ip, r6, r5
 800936c:	dc02      	bgt.n	8009374 <__ieee754_sqrt+0xc8>
 800936e:	d113      	bne.n	8009398 <__ieee754_sqrt+0xec>
 8009370:	459c      	cmp	ip, r3
 8009372:	d811      	bhi.n	8009398 <__ieee754_sqrt+0xec>
 8009374:	f1bc 0f00 	cmp.w	ip, #0
 8009378:	eb0c 0506 	add.w	r5, ip, r6
 800937c:	da43      	bge.n	8009406 <__ieee754_sqrt+0x15a>
 800937e:	2d00      	cmp	r5, #0
 8009380:	db41      	blt.n	8009406 <__ieee754_sqrt+0x15a>
 8009382:	f100 0801 	add.w	r8, r0, #1
 8009386:	1a09      	subs	r1, r1, r0
 8009388:	459c      	cmp	ip, r3
 800938a:	bf88      	it	hi
 800938c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009390:	eba3 030c 	sub.w	r3, r3, ip
 8009394:	4432      	add	r2, r6
 8009396:	4640      	mov	r0, r8
 8009398:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800939c:	f1be 0e01 	subs.w	lr, lr, #1
 80093a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80093a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80093a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80093ac:	d1db      	bne.n	8009366 <__ieee754_sqrt+0xba>
 80093ae:	430b      	orrs	r3, r1
 80093b0:	d006      	beq.n	80093c0 <__ieee754_sqrt+0x114>
 80093b2:	1c50      	adds	r0, r2, #1
 80093b4:	bf13      	iteet	ne
 80093b6:	3201      	addne	r2, #1
 80093b8:	3401      	addeq	r4, #1
 80093ba:	4672      	moveq	r2, lr
 80093bc:	f022 0201 	bicne.w	r2, r2, #1
 80093c0:	1063      	asrs	r3, r4, #1
 80093c2:	0852      	lsrs	r2, r2, #1
 80093c4:	07e1      	lsls	r1, r4, #31
 80093c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80093ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80093ce:	bf48      	it	mi
 80093d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80093d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80093d8:	4614      	mov	r4, r2
 80093da:	e781      	b.n	80092e0 <__ieee754_sqrt+0x34>
 80093dc:	0ad9      	lsrs	r1, r3, #11
 80093de:	3815      	subs	r0, #21
 80093e0:	055b      	lsls	r3, r3, #21
 80093e2:	2900      	cmp	r1, #0
 80093e4:	d0fa      	beq.n	80093dc <__ieee754_sqrt+0x130>
 80093e6:	02cd      	lsls	r5, r1, #11
 80093e8:	d50a      	bpl.n	8009400 <__ieee754_sqrt+0x154>
 80093ea:	f1c2 0420 	rsb	r4, r2, #32
 80093ee:	fa23 f404 	lsr.w	r4, r3, r4
 80093f2:	1e55      	subs	r5, r2, #1
 80093f4:	4093      	lsls	r3, r2
 80093f6:	4321      	orrs	r1, r4
 80093f8:	1b42      	subs	r2, r0, r5
 80093fa:	e78a      	b.n	8009312 <__ieee754_sqrt+0x66>
 80093fc:	4610      	mov	r0, r2
 80093fe:	e7f0      	b.n	80093e2 <__ieee754_sqrt+0x136>
 8009400:	0049      	lsls	r1, r1, #1
 8009402:	3201      	adds	r2, #1
 8009404:	e7ef      	b.n	80093e6 <__ieee754_sqrt+0x13a>
 8009406:	4680      	mov	r8, r0
 8009408:	e7bd      	b.n	8009386 <__ieee754_sqrt+0xda>
 800940a:	bf00      	nop
 800940c:	7ff00000 	.word	0x7ff00000

08009410 <__ieee754_expf>:
 8009410:	ee10 2a10 	vmov	r2, s0
 8009414:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009418:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800941c:	d902      	bls.n	8009424 <__ieee754_expf+0x14>
 800941e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009422:	4770      	bx	lr
 8009424:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009428:	d106      	bne.n	8009438 <__ieee754_expf+0x28>
 800942a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009564 <__ieee754_expf+0x154>
 800942e:	2b00      	cmp	r3, #0
 8009430:	bf18      	it	ne
 8009432:	eeb0 0a67 	vmovne.f32	s0, s15
 8009436:	4770      	bx	lr
 8009438:	484b      	ldr	r0, [pc, #300]	; (8009568 <__ieee754_expf+0x158>)
 800943a:	4282      	cmp	r2, r0
 800943c:	dd02      	ble.n	8009444 <__ieee754_expf+0x34>
 800943e:	2000      	movs	r0, #0
 8009440:	f000 b904 	b.w	800964c <__math_oflowf>
 8009444:	2a00      	cmp	r2, #0
 8009446:	da05      	bge.n	8009454 <__ieee754_expf+0x44>
 8009448:	4a48      	ldr	r2, [pc, #288]	; (800956c <__ieee754_expf+0x15c>)
 800944a:	4291      	cmp	r1, r2
 800944c:	d902      	bls.n	8009454 <__ieee754_expf+0x44>
 800944e:	2000      	movs	r0, #0
 8009450:	f000 b8f6 	b.w	8009640 <__math_uflowf>
 8009454:	4a46      	ldr	r2, [pc, #280]	; (8009570 <__ieee754_expf+0x160>)
 8009456:	4291      	cmp	r1, r2
 8009458:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800945c:	d952      	bls.n	8009504 <__ieee754_expf+0xf4>
 800945e:	4a45      	ldr	r2, [pc, #276]	; (8009574 <__ieee754_expf+0x164>)
 8009460:	4291      	cmp	r1, r2
 8009462:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009466:	d834      	bhi.n	80094d2 <__ieee754_expf+0xc2>
 8009468:	4943      	ldr	r1, [pc, #268]	; (8009578 <__ieee754_expf+0x168>)
 800946a:	4411      	add	r1, r2
 800946c:	ed91 7a00 	vldr	s14, [r1]
 8009470:	4942      	ldr	r1, [pc, #264]	; (800957c <__ieee754_expf+0x16c>)
 8009472:	440a      	add	r2, r1
 8009474:	edd2 7a00 	vldr	s15, [r2]
 8009478:	ee30 7a47 	vsub.f32	s14, s0, s14
 800947c:	f1c3 0201 	rsb	r2, r3, #1
 8009480:	1ad2      	subs	r2, r2, r3
 8009482:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009486:	ee20 6a00 	vmul.f32	s12, s0, s0
 800948a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009580 <__ieee754_expf+0x170>
 800948e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009584 <__ieee754_expf+0x174>
 8009492:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009496:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009588 <__ieee754_expf+0x178>
 800949a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800949e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800958c <__ieee754_expf+0x17c>
 80094a2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80094a6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009590 <__ieee754_expf+0x180>
 80094aa:	eea6 5a86 	vfma.f32	s10, s13, s12
 80094ae:	eef0 6a40 	vmov.f32	s13, s0
 80094b2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80094b6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80094ba:	ee20 5a26 	vmul.f32	s10, s0, s13
 80094be:	bb92      	cbnz	r2, 8009526 <__ieee754_expf+0x116>
 80094c0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80094c4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80094c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80094cc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80094d0:	4770      	bx	lr
 80094d2:	4b30      	ldr	r3, [pc, #192]	; (8009594 <__ieee754_expf+0x184>)
 80094d4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009598 <__ieee754_expf+0x188>
 80094d8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800959c <__ieee754_expf+0x18c>
 80094dc:	4413      	add	r3, r2
 80094de:	edd3 7a00 	vldr	s15, [r3]
 80094e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80094e6:	eeb0 7a40 	vmov.f32	s14, s0
 80094ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80094ee:	ee17 2a90 	vmov	r2, s15
 80094f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094f6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80094fa:	eddf 6a29 	vldr	s13, [pc, #164]	; 80095a0 <__ieee754_expf+0x190>
 80094fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009502:	e7be      	b.n	8009482 <__ieee754_expf+0x72>
 8009504:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8009508:	d20b      	bcs.n	8009522 <__ieee754_expf+0x112>
 800950a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095a4 <__ieee754_expf+0x194>
 800950e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009512:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951a:	dd02      	ble.n	8009522 <__ieee754_expf+0x112>
 800951c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009520:	4770      	bx	lr
 8009522:	2200      	movs	r2, #0
 8009524:	e7af      	b.n	8009486 <__ieee754_expf+0x76>
 8009526:	ee76 6a66 	vsub.f32	s13, s12, s13
 800952a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800952e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8009532:	bfb8      	it	lt
 8009534:	3264      	addlt	r2, #100	; 0x64
 8009536:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800953a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800953e:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8009542:	ee17 3a90 	vmov	r3, s15
 8009546:	bfab      	itete	ge
 8009548:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800954c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009550:	ee00 3a10 	vmovge	s0, r3
 8009554:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80095a8 <__ieee754_expf+0x198>
 8009558:	bfbc      	itt	lt
 800955a:	ee00 3a10 	vmovlt	s0, r3
 800955e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009562:	4770      	bx	lr
 8009564:	00000000 	.word	0x00000000
 8009568:	42b17217 	.word	0x42b17217
 800956c:	42cff1b5 	.word	0x42cff1b5
 8009570:	3eb17218 	.word	0x3eb17218
 8009574:	3f851591 	.word	0x3f851591
 8009578:	0800ab48 	.word	0x0800ab48
 800957c:	0800ab50 	.word	0x0800ab50
 8009580:	3331bb4c 	.word	0x3331bb4c
 8009584:	b5ddea0e 	.word	0xb5ddea0e
 8009588:	388ab355 	.word	0x388ab355
 800958c:	bb360b61 	.word	0xbb360b61
 8009590:	3e2aaaab 	.word	0x3e2aaaab
 8009594:	0800ab40 	.word	0x0800ab40
 8009598:	3fb8aa3b 	.word	0x3fb8aa3b
 800959c:	3f317180 	.word	0x3f317180
 80095a0:	3717f7d1 	.word	0x3717f7d1
 80095a4:	7149f2ca 	.word	0x7149f2ca
 80095a8:	0d800000 	.word	0x0d800000

080095ac <__ieee754_sqrtf>:
 80095ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80095b0:	4770      	bx	lr

080095b2 <with_errno>:
 80095b2:	b570      	push	{r4, r5, r6, lr}
 80095b4:	4604      	mov	r4, r0
 80095b6:	460d      	mov	r5, r1
 80095b8:	4616      	mov	r6, r2
 80095ba:	f7ff f843 	bl	8008644 <__errno>
 80095be:	4629      	mov	r1, r5
 80095c0:	6006      	str	r6, [r0, #0]
 80095c2:	4620      	mov	r0, r4
 80095c4:	bd70      	pop	{r4, r5, r6, pc}

080095c6 <xflow>:
 80095c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095c8:	4614      	mov	r4, r2
 80095ca:	461d      	mov	r5, r3
 80095cc:	b108      	cbz	r0, 80095d2 <xflow+0xc>
 80095ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80095d2:	e9cd 2300 	strd	r2, r3, [sp]
 80095d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095da:	4620      	mov	r0, r4
 80095dc:	4629      	mov	r1, r5
 80095de:	f7f6 ffcf 	bl	8000580 <__aeabi_dmul>
 80095e2:	2222      	movs	r2, #34	; 0x22
 80095e4:	b003      	add	sp, #12
 80095e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095ea:	f7ff bfe2 	b.w	80095b2 <with_errno>

080095ee <__math_uflow>:
 80095ee:	b508      	push	{r3, lr}
 80095f0:	2200      	movs	r2, #0
 80095f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095f6:	f7ff ffe6 	bl	80095c6 <xflow>
 80095fa:	ec41 0b10 	vmov	d0, r0, r1
 80095fe:	bd08      	pop	{r3, pc}

08009600 <__math_oflow>:
 8009600:	b508      	push	{r3, lr}
 8009602:	2200      	movs	r2, #0
 8009604:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009608:	f7ff ffdd 	bl	80095c6 <xflow>
 800960c:	ec41 0b10 	vmov	d0, r0, r1
 8009610:	bd08      	pop	{r3, pc}

08009612 <with_errnof>:
 8009612:	b513      	push	{r0, r1, r4, lr}
 8009614:	4604      	mov	r4, r0
 8009616:	ed8d 0a01 	vstr	s0, [sp, #4]
 800961a:	f7ff f813 	bl	8008644 <__errno>
 800961e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009622:	6004      	str	r4, [r0, #0]
 8009624:	b002      	add	sp, #8
 8009626:	bd10      	pop	{r4, pc}

08009628 <xflowf>:
 8009628:	b130      	cbz	r0, 8009638 <xflowf+0x10>
 800962a:	eef1 7a40 	vneg.f32	s15, s0
 800962e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009632:	2022      	movs	r0, #34	; 0x22
 8009634:	f7ff bfed 	b.w	8009612 <with_errnof>
 8009638:	eef0 7a40 	vmov.f32	s15, s0
 800963c:	e7f7      	b.n	800962e <xflowf+0x6>
	...

08009640 <__math_uflowf>:
 8009640:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009648 <__math_uflowf+0x8>
 8009644:	f7ff bff0 	b.w	8009628 <xflowf>
 8009648:	10000000 	.word	0x10000000

0800964c <__math_oflowf>:
 800964c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009654 <__math_oflowf+0x8>
 8009650:	f7ff bfea 	b.w	8009628 <xflowf>
 8009654:	70000000 	.word	0x70000000

08009658 <fabs>:
 8009658:	ec51 0b10 	vmov	r0, r1, d0
 800965c:	ee10 2a10 	vmov	r2, s0
 8009660:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009664:	ec43 2b10 	vmov	d0, r2, r3
 8009668:	4770      	bx	lr

0800966a <finite>:
 800966a:	b082      	sub	sp, #8
 800966c:	ed8d 0b00 	vstr	d0, [sp]
 8009670:	9801      	ldr	r0, [sp, #4]
 8009672:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009676:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800967a:	0fc0      	lsrs	r0, r0, #31
 800967c:	b002      	add	sp, #8
 800967e:	4770      	bx	lr

08009680 <scalbn>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	ec55 4b10 	vmov	r4, r5, d0
 8009686:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800968a:	4606      	mov	r6, r0
 800968c:	462b      	mov	r3, r5
 800968e:	b99a      	cbnz	r2, 80096b8 <scalbn+0x38>
 8009690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009694:	4323      	orrs	r3, r4
 8009696:	d036      	beq.n	8009706 <scalbn+0x86>
 8009698:	4b39      	ldr	r3, [pc, #228]	; (8009780 <scalbn+0x100>)
 800969a:	4629      	mov	r1, r5
 800969c:	ee10 0a10 	vmov	r0, s0
 80096a0:	2200      	movs	r2, #0
 80096a2:	f7f6 ff6d 	bl	8000580 <__aeabi_dmul>
 80096a6:	4b37      	ldr	r3, [pc, #220]	; (8009784 <scalbn+0x104>)
 80096a8:	429e      	cmp	r6, r3
 80096aa:	4604      	mov	r4, r0
 80096ac:	460d      	mov	r5, r1
 80096ae:	da10      	bge.n	80096d2 <scalbn+0x52>
 80096b0:	a32b      	add	r3, pc, #172	; (adr r3, 8009760 <scalbn+0xe0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	e03a      	b.n	800972e <scalbn+0xae>
 80096b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80096bc:	428a      	cmp	r2, r1
 80096be:	d10c      	bne.n	80096da <scalbn+0x5a>
 80096c0:	ee10 2a10 	vmov	r2, s0
 80096c4:	4620      	mov	r0, r4
 80096c6:	4629      	mov	r1, r5
 80096c8:	f7f6 fda4 	bl	8000214 <__adddf3>
 80096cc:	4604      	mov	r4, r0
 80096ce:	460d      	mov	r5, r1
 80096d0:	e019      	b.n	8009706 <scalbn+0x86>
 80096d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80096d6:	460b      	mov	r3, r1
 80096d8:	3a36      	subs	r2, #54	; 0x36
 80096da:	4432      	add	r2, r6
 80096dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80096e0:	428a      	cmp	r2, r1
 80096e2:	dd08      	ble.n	80096f6 <scalbn+0x76>
 80096e4:	2d00      	cmp	r5, #0
 80096e6:	a120      	add	r1, pc, #128	; (adr r1, 8009768 <scalbn+0xe8>)
 80096e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ec:	da1c      	bge.n	8009728 <scalbn+0xa8>
 80096ee:	a120      	add	r1, pc, #128	; (adr r1, 8009770 <scalbn+0xf0>)
 80096f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f4:	e018      	b.n	8009728 <scalbn+0xa8>
 80096f6:	2a00      	cmp	r2, #0
 80096f8:	dd08      	ble.n	800970c <scalbn+0x8c>
 80096fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009702:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009706:	ec45 4b10 	vmov	d0, r4, r5
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009710:	da19      	bge.n	8009746 <scalbn+0xc6>
 8009712:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009716:	429e      	cmp	r6, r3
 8009718:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800971c:	dd0a      	ble.n	8009734 <scalbn+0xb4>
 800971e:	a112      	add	r1, pc, #72	; (adr r1, 8009768 <scalbn+0xe8>)
 8009720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e2      	bne.n	80096ee <scalbn+0x6e>
 8009728:	a30f      	add	r3, pc, #60	; (adr r3, 8009768 <scalbn+0xe8>)
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	f7f6 ff27 	bl	8000580 <__aeabi_dmul>
 8009732:	e7cb      	b.n	80096cc <scalbn+0x4c>
 8009734:	a10a      	add	r1, pc, #40	; (adr r1, 8009760 <scalbn+0xe0>)
 8009736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0b8      	beq.n	80096b0 <scalbn+0x30>
 800973e:	a10e      	add	r1, pc, #56	; (adr r1, 8009778 <scalbn+0xf8>)
 8009740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009744:	e7b4      	b.n	80096b0 <scalbn+0x30>
 8009746:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800974a:	3236      	adds	r2, #54	; 0x36
 800974c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009750:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009754:	4620      	mov	r0, r4
 8009756:	4b0c      	ldr	r3, [pc, #48]	; (8009788 <scalbn+0x108>)
 8009758:	2200      	movs	r2, #0
 800975a:	e7e8      	b.n	800972e <scalbn+0xae>
 800975c:	f3af 8000 	nop.w
 8009760:	c2f8f359 	.word	0xc2f8f359
 8009764:	01a56e1f 	.word	0x01a56e1f
 8009768:	8800759c 	.word	0x8800759c
 800976c:	7e37e43c 	.word	0x7e37e43c
 8009770:	8800759c 	.word	0x8800759c
 8009774:	fe37e43c 	.word	0xfe37e43c
 8009778:	c2f8f359 	.word	0xc2f8f359
 800977c:	81a56e1f 	.word	0x81a56e1f
 8009780:	43500000 	.word	0x43500000
 8009784:	ffff3cb0 	.word	0xffff3cb0
 8009788:	3c900000 	.word	0x3c900000

0800978c <finitef>:
 800978c:	b082      	sub	sp, #8
 800978e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009792:	9801      	ldr	r0, [sp, #4]
 8009794:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009798:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800979c:	bfac      	ite	ge
 800979e:	2000      	movge	r0, #0
 80097a0:	2001      	movlt	r0, #1
 80097a2:	b002      	add	sp, #8
 80097a4:	4770      	bx	lr
	...

080097a8 <_init>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	bf00      	nop
 80097ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ae:	bc08      	pop	{r3}
 80097b0:	469e      	mov	lr, r3
 80097b2:	4770      	bx	lr

080097b4 <_fini>:
 80097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b6:	bf00      	nop
 80097b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ba:	bc08      	pop	{r3}
 80097bc:	469e      	mov	lr, r3
 80097be:	4770      	bx	lr
