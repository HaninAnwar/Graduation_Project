
NUCLEO_MX_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e70  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  0800a040  0800a040  0001a040  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb0  0800adb0  000205b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb8  0800adb8  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adbc  0800adbc  0001adbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  20000000  0800adc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200005c0  0800b378  000205c0  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  200009d0  0800b378  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c13  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387d  00000000  00000000  000371fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0003aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  0003bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f21  00000000  00000000  0003cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a24a  00000000  00000000  00063ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea93e  00000000  00000000  0007dd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168641  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d1c  00000000  00000000  00168694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000014d  00000000  00000000  0016d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200005c0 	.word	0x200005c0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a020 	.word	0x0800a020

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200005c4 	.word	0x200005c4
 8000204:	0800a020 	.word	0x0800a020

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b974 	b.w	8000e80 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <FEAT_EXT_u32_SlopeSignChange>:

#include "FEAT_EXT.h"


uint32_t FEAT_EXT_u32_SlopeSignChange(uint32_t *Copy_int32Data ,uint32_t Copy_int32_Size)
{
 8000e84:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000e88:	b087      	sub	sp, #28
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	466b      	mov	r3, sp
 8000e92:	4618      	mov	r0, r3
	uint32_t Local_int32_NumberOfChanges = 0,
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
			Local_int32_Slope[Copy_int32_Size],
 8000e98:	6839      	ldr	r1, [r7, #0]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4688      	mov	r8, r1
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f04f 0300 	mov.w	r3, #0
 8000eae:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000eb2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000eb6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000eba:	2300      	movs	r3, #0
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	461d      	mov	r5, r3
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	016b      	lsls	r3, r5, #5
 8000eca:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000ece:	0162      	lsls	r2, r4, #5
 8000ed0:	008b      	lsls	r3, r1, #2
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	ebad 0d03 	sub.w	sp, sp, r3
 8000edc:	466b      	mov	r3, sp
 8000ede:	3303      	adds	r3, #3
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	60bb      	str	r3, [r7, #8]
			Local_int32_Counter;

	/*Compute Slope*/
	Local_int32_Slope[0] = 0;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

	for(Local_int32_Counter = 1 ; Local_int32_Counter < Copy_int32_Size ; Local_int32_Counter++)
 8000eec:	2301      	movs	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e045      	b.n	8000f7e <FEAT_EXT_u32_SlopeSignChange+0xfa>
	{

		if(Copy_int32Data[Local_int32_Counter]  > Copy_int32Data[Local_int32_Counter-1])
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f02:	3b01      	subs	r3, #1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	440b      	add	r3, r1
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d905      	bls.n	8000f1c <FEAT_EXT_u32_SlopeSignChange+0x98>
			Local_int32_Slope[Local_int32_Counter] = 1;
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	2101      	movs	r1, #1
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f1a:	e02d      	b.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>

		else if(Copy_int32Data[Local_int32_Counter]  < Copy_int32Data[Local_int32_Counter-1])
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	440b      	add	r3, r1
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d206      	bcs.n	8000f48 <FEAT_EXT_u32_SlopeSignChange+0xc4>

			Local_int32_Slope[Local_int32_Counter] = -1;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f46:	e017      	b.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>

		else if(Copy_int32Data[Local_int32_Counter] == Copy_int32Data[Local_int32_Counter-1])
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	440b      	add	r3, r1
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d108      	bne.n	8000f78 <FEAT_EXT_u32_SlopeSignChange+0xf4>
			Local_int32_Slope[Local_int32_Counter] = Local_int32_Slope[Local_int32_Counter-1];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 1 ; Local_int32_Counter < Copy_int32_Size ; Local_int32_Counter++)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3b5      	bcc.n	8000ef2 <FEAT_EXT_u32_SlopeSignChange+0x6e>

	}

	/*Compute Changes In Sign*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_int32_Size-1 ; Local_int32_Counter++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e010      	b.n	8000fae <FEAT_EXT_u32_SlopeSignChange+0x12a>
	{
		if((Local_int32_Slope[Local_int32_Counter] != Local_int32_Slope[Local_int32_Counter+1]))
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	1c59      	adds	r1, r3, #1
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d002      	beq.n	8000fa8 <FEAT_EXT_u32_SlopeSignChange+0x124>
		{
			Local_int32_NumberOfChanges++;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_int32_Size-1 ; Local_int32_Counter++)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3e9      	bcc.n	8000f8c <FEAT_EXT_u32_SlopeSignChange+0x108>
		}
	}

	return Local_int32_NumberOfChanges;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4685      	mov	sp, r0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000fc6:	4770      	bx	lr

08000fc8 <FEAT_EXT_u32_ZeroCrossing>:

uint32_t FEAT_EXT_u32_ZeroCrossing(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 8000fc8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000fcc:	b087      	sub	sp, #28
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
 8000fd4:	466b      	mov	r3, sp
 8000fd6:	4618      	mov	r0, r3
	uint32_t Local_int32_Sign[Copy_u32_Size],
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4688      	mov	r8, r1
 8000fe4:	4699      	mov	r9, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000ff2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000ff6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	461d      	mov	r5, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	016b      	lsls	r3, r5, #5
 800100a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800100e:	0162      	lsls	r2, r4, #5
 8001010:	008b      	lsls	r3, r1, #2
 8001012:	3307      	adds	r3, #7
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	ebad 0d03 	sub.w	sp, sp, r3
 800101c:	466b      	mov	r3, sp
 800101e:	3303      	adds	r3, #3
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	60bb      	str	r3, [r7, #8]
	Local_int32_Counter,
	Local_int32_ZeroCounter;

	/*Compute data sign*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	e01c      	b.n	8001066 <FEAT_EXT_u32_ZeroCrossing+0x9e>
	{
		if(Copy_u32Data[Local_int32_Counter] > 0)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FEAT_EXT_u32_ZeroCrossing+0x7e>
		{
			Local_int32_Sign[Local_int32_Counter] = 1;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	2101      	movs	r1, #1
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001044:	e00c      	b.n	8001060 <FEAT_EXT_u32_ZeroCrossing+0x98>
		}
		else if (Copy_u32Data[Local_int32_Counter] <= 0)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d105      	bne.n	8001060 <FEAT_EXT_u32_ZeroCrossing+0x98>
		{
			Local_int32_Sign[Local_int32_Counter] = -1;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	3301      	adds	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d3de      	bcc.n	800102c <FEAT_EXT_u32_ZeroCrossing+0x64>
		}
	}

	/*Compute zero crossing*/
	Local_int32_ZeroCounter = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e010      	b.n	800109a <FEAT_EXT_u32_ZeroCrossing+0xd2>
	{
		if(Local_int32_Sign[Local_int32_Counter] != Local_int32_Sign[Local_int32_Counter+1])
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1c59      	adds	r1, r3, #1
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108a:	429a      	cmp	r2, r3
 800108c:	d002      	beq.n	8001094 <FEAT_EXT_u32_ZeroCrossing+0xcc>
		{
			Local_int32_ZeroCounter++;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3e9      	bcc.n	8001078 <FEAT_EXT_u32_ZeroCrossing+0xb0>
		}
	}


	return Local_int32_ZeroCounter;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4685      	mov	sp, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80010b2:	4770      	bx	lr

080010b4 <FEAT_EXT_u32_WaveformLength>:

uint32_t FEAT_EXT_u32_WaveformLength(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80010b4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80010b8:	b087      	sub	sp, #28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
 80010c0:	466b      	mov	r3, sp
 80010c2:	4618      	mov	r0, r3
	uint32_t Local_int32_AbsDiff[Copy_u32_Size-1],
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	1e59      	subs	r1, r3, #1
 80010c8:	460b      	mov	r3, r1
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	2300      	movs	r3, #0
 80010d0:	4688      	mov	r8, r1
 80010d2:	4699      	mov	r9, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80010e0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80010e4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80010e8:	2300      	movs	r3, #0
 80010ea:	460c      	mov	r4, r1
 80010ec:	461d      	mov	r5, r3
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	016b      	lsls	r3, r5, #5
 80010f8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80010fc:	0162      	lsls	r2, r4, #5
 80010fe:	008b      	lsls	r3, r1, #2
 8001100:	3307      	adds	r3, #7
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	ebad 0d03 	sub.w	sp, sp, r3
 800110a:	466b      	mov	r3, sp
 800110c:	3303      	adds	r3, #3
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
	Local_int32_Counter,
	Local_int32_WaveLength;

	/*Calculate absolute difference of data*/
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e030      	b.n	800117c <FEAT_EXT_u32_WaveformLength+0xc8>
	{
		if(Copy_u32Data[Local_int32_Counter] > Copy_u32Data[Local_int32_Counter+1])
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	3301      	adds	r3, #1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	440b      	add	r3, r1
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d910      	bls.n	8001156 <FEAT_EXT_u32_WaveformLength+0xa2>
		{
			Local_int32_AbsDiff[Local_int32_Counter] = Copy_u32Data[Local_int32_Counter] -  Copy_u32Data[Local_int32_Counter+1];
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	440b      	add	r3, r1
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad1      	subs	r1, r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001154:	e00f      	b.n	8001176 <FEAT_EXT_u32_WaveformLength+0xc2>
		}
		else
		{
			Local_int32_AbsDiff[Local_int32_Counter] = Copy_u32Data[Local_int32_Counter+1] -  Copy_u32Data[Local_int32_Counter];
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3301      	adds	r3, #1
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	440b      	add	r3, r1
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1ad1      	subs	r1, r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	3301      	adds	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	429a      	cmp	r2, r3
 8001184:	d3c9      	bcc.n	800111a <FEAT_EXT_u32_WaveformLength+0x66>
		}
	}

	/*Compute wave length*/
	Local_int32_WaveLength = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	e009      	b.n	80011a4 <FEAT_EXT_u32_WaveformLength+0xf0>
	{
		Local_int32_WaveLength += Local_int32_AbsDiff[Local_int32_Counter];
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4413      	add	r3, r2
 800119c:	617b      	str	r3, [r7, #20]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size-1 ; Local_int32_Counter++)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	3301      	adds	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3f0      	bcc.n	8001190 <FEAT_EXT_u32_WaveformLength+0xdc>
	}


	return Local_int32_WaveLength;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4685      	mov	sp, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80011bc:	4770      	bx	lr

080011be <FEAT_EXT_f32_RMS>:


//float FEAT_EXT_float_RMS(int32_t *Copy_int32Data ,int32_t Copy_int32_Size)
float FEAT_EXT_f32_RMS(float Copy_f32_Variance)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	ed87 0a01 	vstr	s0, [r7, #4]
	float Local_f32_RMS;
	Local_f32_RMS = sqrtf(Copy_f32_Variance);
 80011c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80011cc:	f007 ff5c 	bl	8009088 <sqrtf>
 80011d0:	ed87 0a03 	vstr	s0, [r7, #12]

	return Local_f32_RMS;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	ee07 3a90 	vmov	s15, r3

}
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <FEAT_EXT_f32_Variance>:

float FEAT_EXT_f32_Variance(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]

	uint32_t Local_int32_Counter;

	float 	Local_float_Mean = 0,
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
			Local_float_Var  = 0;
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]

	/*Compute Mean*/
	Local_float_Mean = FEAT_EXT_f32_Mean(Copy_u32Data, Copy_u32_Size);
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f851 	bl	80012a8 <FEAT_EXT_f32_Mean>
 8001206:	ed87 0a03 	vstr	s0, [r7, #12]

	/*Compute Variance*/
	for (Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e02e      	b.n	800126e <FEAT_EXT_f32_Variance+0x86>
	{
		Local_float_Var += pow(Copy_u32Data[Local_int32_Counter] - Local_float_Mean,2);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001222:	edd7 7a03 	vldr	s15, [r7, #12]
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	ee17 0a90 	vmov	r0, s15
 800122e:	f7ff f94f 	bl	80004d0 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80012a0 <FEAT_EXT_f32_Variance+0xb8>
 800123a:	ec43 2b10 	vmov	d0, r2, r3
 800123e:	f007 fe7d 	bl	8008f3c <pow>
 8001242:	ec55 4b10 	vmov	r4, r5, d0
 8001246:	6938      	ldr	r0, [r7, #16]
 8001248:	f7ff f942 	bl	80004d0 <__aeabi_f2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7fe ffde 	bl	8000214 <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc3e 	bl	8000ae0 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	613b      	str	r3, [r7, #16]
	for (Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d3cc      	bcc.n	8001210 <FEAT_EXT_f32_Variance+0x28>
	}
	Local_float_Var /= (Copy_u32_Size-1);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001282:	edd7 6a04 	vldr	s13, [r7, #16]
 8001286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128a:	edc7 7a04 	vstr	s15, [r7, #16]

	return Local_float_Var;
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	ee07 3a90 	vmov	s15, r3
}
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40000000 	.word	0x40000000

080012a8 <FEAT_EXT_f32_Mean>:

float FEAT_EXT_f32_Mean(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	float Local_float_Mean = 0;
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	uint32_t Local_int32_Counter;

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	e011      	b.n	80012e2 <FEAT_EXT_f32_Mean+0x3a>
	{
		Local_float_Mean += Copy_u32Data[Local_int32_Counter];
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	edc7 7a03 	vstr	s15, [r7, #12]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3e9      	bcc.n	80012be <FEAT_EXT_f32_Mean+0x16>
	}

	Local_float_Mean /= (float)Copy_u32_Size;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f4:	edd7 6a03 	vldr	s13, [r7, #12]
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	edc7 7a03 	vstr	s15, [r7, #12]

	return Local_float_Mean;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	ee07 3a90 	vmov	s15, r3

}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <FEAT_EXT_f32_MeanAbsolute>:
float FEAT_EXT_f32_MeanAbsolute(uint32_t *Copy_u32Data ,uint32_t Copy_u32_Size)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	uint32_t Local_int32_Counter;
	float Local_float_Mean = 0;
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]

	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e014      	b.n	8001354 <FEAT_EXT_f32_MeanAbsolute+0x40>
	{
		Local_float_Mean += abs(Copy_u32Data[Local_int32_Counter]);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	bfb8      	it	lt
 8001338:	425b      	neglt	r3, r3
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed97 7a02 	vldr	s14, [r7, #8]
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	edc7 7a02 	vstr	s15, [r7, #8]
	for(Local_int32_Counter = 0 ; Local_int32_Counter < Copy_u32_Size ; Local_int32_Counter++)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3301      	adds	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3e6      	bcc.n	800132a <FEAT_EXT_f32_MeanAbsolute+0x16>
	}

	Local_float_Mean /= Copy_u32_Size;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001366:	edd7 6a02 	vldr	s13, [r7, #8]
 800136a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136e:	edc7 7a02 	vstr	s15, [r7, #8]

	return Local_float_Mean;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	ee07 3a90 	vmov	s15, r3

}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <Mapping>:

#include <stdint.h>
#include "MAPPING.h"

int32_t Mapping(int32_t Copy_int32_InputMin,int32_t Copy_int32_InputMax,int32_t Copy_int32_OutputMin,int32_t Copy_int32_OutputMax,int32_t Copy_int32BiasValue,int32_t Copy_int32_InputValue)
{
 8001386:	b480      	push	{r7}
 8001388:	b087      	sub	sp, #28
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	603b      	str	r3, [r7, #0]
	int32_t Local_int32_MappedValue;
	Local_int32_MappedValue = (((Copy_int32_InputValue - Copy_int32_InputMin)*(Copy_int32_OutputMax - Copy_int32_OutputMin))/(Copy_int32_InputMax - Copy_int32_InputMin)) + Copy_int32_InputMin + Copy_int32BiasValue;
 8001394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	1a8a      	subs	r2, r1, r2
 80013a0:	fb03 f202 	mul.w	r2, r3, r2
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1acb      	subs	r3, r1, r3
 80013aa:	fb92 f2f3 	sdiv	r2, r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4413      	add	r3, r2
 80013b2:	6a3a      	ldr	r2, [r7, #32]
 80013b4:	4413      	add	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]

	return Local_int32_MappedValue;
 80013b8:	697b      	ldr	r3, [r7, #20]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <NORM_f32_SlopeSignChange>:
#include "NORM_interface.h"
#include "NORM_private.h"


float NORM_f32_SlopeSignChange(uint8_t Copy_u8SensorNum , uint32_t Copy_u32SSC)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormSSC;

	switch(Copy_u8SensorNum)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d02d      	beq.n	8001436 <NORM_f32_SlopeSignChange+0x6e>
 80013da:	2b02      	cmp	r3, #2
 80013dc:	dc45      	bgt.n	800146a <NORM_f32_SlopeSignChange+0xa2>
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <NORM_f32_SlopeSignChange+0x20>
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d00d      	beq.n	8001402 <NORM_f32_SlopeSignChange+0x3a>
 80013e6:	e040      	b.n	800146a <NORM_f32_SlopeSignChange+0xa2>
	{
	case SNS1 : Local_f32_NormSSC = (Copy_u32SSC - SNS1_SSC_MEAN) / SNS1_SSC_SD; break;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3b47      	subs	r3, #71	; 0x47
 80013ec:	4a28      	ldr	r2, [pc, #160]	; (8001490 <NORM_f32_SlopeSignChange+0xc8>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	0c9b      	lsrs	r3, r3, #18
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fc:	edc7 7a03 	vstr	s15, [r7, #12]
 8001400:	e033      	b.n	800146a <NORM_f32_SlopeSignChange+0xa2>
	case SNS2 : Local_f32_NormSSC = (Copy_u32SSC - SNS2_SSC_MEAN) / SNS2_SSC_SD; break;
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f7ff f842 	bl	800048c <__aeabi_ui2d>
 8001408:	a31d      	add	r3, pc, #116	; (adr r3, 8001480 <NORM_f32_SlopeSignChange+0xb8>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7fe feff 	bl	8000210 <__aeabi_dsub>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	a31b      	add	r3, pc, #108	; (adr r3, 8001488 <NORM_f32_SlopeSignChange+0xc0>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f9d8 	bl	80007d4 <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fb58 	bl	8000ae0 <__aeabi_d2f>
 8001430:	4603      	mov	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e019      	b.n	800146a <NORM_f32_SlopeSignChange+0xa2>
	case SNS3 : Local_f32_NormSSC = (Copy_u32SSC - SNS3_SSC_MEAN) / SNS3_SSC_SD; break;
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f7ff f828 	bl	800048c <__aeabi_ui2d>
 800143c:	a310      	add	r3, pc, #64	; (adr r3, 8001480 <NORM_f32_SlopeSignChange+0xb8>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7fe fee5 	bl	8000210 <__aeabi_dsub>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	a30e      	add	r3, pc, #56	; (adr r3, 8001488 <NORM_f32_SlopeSignChange+0xc0>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f9be 	bl	80007d4 <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fb3e 	bl	8000ae0 <__aeabi_d2f>
 8001464:	4603      	mov	r3, r0
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	bf00      	nop
	}

	return Local_f32_NormSSC;;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	ee07 3a90 	vmov	s15, r3

}
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	851eb852 	.word	0x851eb852
 8001484:	405f11eb 	.word	0x405f11eb
 8001488:	9999999a 	.word	0x9999999a
 800148c:	40229999 	.word	0x40229999
 8001490:	431bde83 	.word	0x431bde83
 8001494:	00000000 	.word	0x00000000

08001498 <NORM_f32_ZeroCrossing>:

float NORM_f32_ZeroCrossing(uint8_t Copy_u8SensorNum , uint32_t Copy_u32zeroCross)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormZC;;

	switch(Copy_u8SensorNum)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d028      	beq.n	80014fc <NORM_f32_ZeroCrossing+0x64>
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	dc40      	bgt.n	8001530 <NORM_f32_ZeroCrossing+0x98>
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <NORM_f32_ZeroCrossing+0x20>
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d008      	beq.n	80014c8 <NORM_f32_ZeroCrossing+0x30>
 80014b6:	e03b      	b.n	8001530 <NORM_f32_ZeroCrossing+0x98>
	{
	case SNS1 : Local_f32_NormZC = (Copy_u32zeroCross - SNS1_ZC_MEAN) / SNS1_ZC_SD; break;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c2:	edc7 7a03 	vstr	s15, [r7, #12]
 80014c6:	e033      	b.n	8001530 <NORM_f32_ZeroCrossing+0x98>
	case SNS2 : Local_f32_NormZC = (Copy_u32zeroCross - SNS2_ZC_MEAN) / SNS2_ZC_SD; break;
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f7fe ffdf 	bl	800048c <__aeabi_ui2d>
 80014ce:	a31c      	add	r3, pc, #112	; (adr r3, 8001540 <NORM_f32_ZeroCrossing+0xa8>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7fe fe9c 	bl	8000210 <__aeabi_dsub>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	a319      	add	r3, pc, #100	; (adr r3, 8001548 <NORM_f32_ZeroCrossing+0xb0>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7ff f975 	bl	80007d4 <__aeabi_ddiv>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff faf5 	bl	8000ae0 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e019      	b.n	8001530 <NORM_f32_ZeroCrossing+0x98>
	case SNS3 : Local_f32_NormZC = (Copy_u32zeroCross - SNS3_ZC_MEAN) / SNS3_ZC_SD; break;
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f7fe ffc5 	bl	800048c <__aeabi_ui2d>
 8001502:	a30f      	add	r3, pc, #60	; (adr r3, 8001540 <NORM_f32_ZeroCrossing+0xa8>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7fe fe82 	bl	8000210 <__aeabi_dsub>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a30c      	add	r3, pc, #48	; (adr r3, 8001548 <NORM_f32_ZeroCrossing+0xb0>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f95b 	bl	80007d4 <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fadb 	bl	8000ae0 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	bf00      	nop
	}

	return Local_f32_NormZC;;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	eb851eb8 	.word	0xeb851eb8
 8001544:	40549851 	.word	0x40549851
 8001548:	147ae148 	.word	0x147ae148
 800154c:	401f47ae 	.word	0x401f47ae

08001550 <NORM_f32_WaveformLength>:

float NORM_f32_WaveformLength(uint8_t Copy_u8SensorNum , uint32_t Copy_u3WaveLength)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormWVL;

	switch(Copy_u8SensorNum)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d03a      	beq.n	80015d8 <NORM_f32_WaveformLength+0x88>
 8001562:	2b02      	cmp	r3, #2
 8001564:	dc52      	bgt.n	800160c <NORM_f32_WaveformLength+0xbc>
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <NORM_f32_WaveformLength+0x20>
 800156a:	2b01      	cmp	r3, #1
 800156c:	d01a      	beq.n	80015a4 <NORM_f32_WaveformLength+0x54>
 800156e:	e04d      	b.n	800160c <NORM_f32_WaveformLength+0xbc>
	{
	case SNS1 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS1_WVL_MEAN) / SNS1_WVL_SD; break;
 8001570:	6838      	ldr	r0, [r7, #0]
 8001572:	f7fe ff8b 	bl	800048c <__aeabi_ui2d>
 8001576:	a32a      	add	r3, pc, #168	; (adr r3, 8001620 <NORM_f32_WaveformLength+0xd0>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7fe fe48 	bl	8000210 <__aeabi_dsub>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	a327      	add	r3, pc, #156	; (adr r3, 8001628 <NORM_f32_WaveformLength+0xd8>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7ff f921 	bl	80007d4 <__aeabi_ddiv>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff faa1 	bl	8000ae0 <__aeabi_d2f>
 800159e:	4603      	mov	r3, r0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e033      	b.n	800160c <NORM_f32_WaveformLength+0xbc>
	case SNS2 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS2_WVL_MEAN) / SNS2_WVL_SD; break;
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7fe ff71 	bl	800048c <__aeabi_ui2d>
 80015aa:	a321      	add	r3, pc, #132	; (adr r3, 8001630 <NORM_f32_WaveformLength+0xe0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe fe2e 	bl	8000210 <__aeabi_dsub>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	a31e      	add	r3, pc, #120	; (adr r3, 8001638 <NORM_f32_WaveformLength+0xe8>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f907 	bl	80007d4 <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa87 	bl	8000ae0 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e019      	b.n	800160c <NORM_f32_WaveformLength+0xbc>
	case SNS3 : Local_f32_NormWVL = (Copy_u3WaveLength - SNS3_WVL_MEAN) / SNS3_WVL_SD; break;
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f7fe ff57 	bl	800048c <__aeabi_ui2d>
 80015de:	a314      	add	r3, pc, #80	; (adr r3, 8001630 <NORM_f32_WaveformLength+0xe0>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe fe14 	bl	8000210 <__aeabi_dsub>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	a311      	add	r3, pc, #68	; (adr r3, 8001638 <NORM_f32_WaveformLength+0xe8>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff f8ed 	bl	80007d4 <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fa6d 	bl	8000ae0 <__aeabi_d2f>
 8001606:	4603      	mov	r3, r0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	bf00      	nop
	}

	return Local_f32_NormWVL;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	ee07 3a90 	vmov	s15, r3
}
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	f3af 8000 	nop.w
 8001620:	e147ae14 	.word	0xe147ae14
 8001624:	4103e5fe 	.word	0x4103e5fe
 8001628:	b851eb85 	.word	0xb851eb85
 800162c:	40f55d8a 	.word	0x40f55d8a
 8001630:	ae147ae1 	.word	0xae147ae1
 8001634:	40d4fc57 	.word	0x40d4fc57
 8001638:	d70a3d71 	.word	0xd70a3d71
 800163c:	40b13aa3 	.word	0x40b13aa3

08001640 <NORM_f32_RMS>:
float NORM_f32_RMS(uint8_t Copy_u8SensorNum , float Copy_f32RMS)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	ed87 0a00 	vstr	s0, [r7]
 800164c:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormRMS;

	switch(Copy_u8SensorNum)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d03a      	beq.n	80016ca <NORM_f32_RMS+0x8a>
 8001654:	2b02      	cmp	r3, #2
 8001656:	dc52      	bgt.n	80016fe <NORM_f32_RMS+0xbe>
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <NORM_f32_RMS+0x22>
 800165c:	2b01      	cmp	r3, #1
 800165e:	d01a      	beq.n	8001696 <NORM_f32_RMS+0x56>
 8001660:	e04d      	b.n	80016fe <NORM_f32_RMS+0xbe>
	{
	case SNS1 : Local_f32_NormRMS = (Copy_f32RMS - SNS1_RMS_MEAN) / SNS1_RMS_SD; break;
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f7fe ff34 	bl	80004d0 <__aeabi_f2d>
 8001668:	a329      	add	r3, pc, #164	; (adr r3, 8001710 <NORM_f32_RMS+0xd0>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe fdcf 	bl	8000210 <__aeabi_dsub>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	a327      	add	r3, pc, #156	; (adr r3, 8001718 <NORM_f32_RMS+0xd8>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7ff f8a8 	bl	80007d4 <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fa28 	bl	8000ae0 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e033      	b.n	80016fe <NORM_f32_RMS+0xbe>
	case SNS2 : Local_f32_NormRMS = (Copy_f32RMS - SNS2_RMS_MEAN) / SNS2_RMS_SD; break;
 8001696:	6838      	ldr	r0, [r7, #0]
 8001698:	f7fe ff1a 	bl	80004d0 <__aeabi_f2d>
 800169c:	a320      	add	r3, pc, #128	; (adr r3, 8001720 <NORM_f32_RMS+0xe0>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe fdb5 	bl	8000210 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	a31e      	add	r3, pc, #120	; (adr r3, 8001728 <NORM_f32_RMS+0xe8>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7ff f88e 	bl	80007d4 <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa0e 	bl	8000ae0 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e019      	b.n	80016fe <NORM_f32_RMS+0xbe>
	case SNS3 : Local_f32_NormRMS = (Copy_f32RMS - SNS3_RMS_MEAN) / SNS3_RMS_SD; break;
 80016ca:	6838      	ldr	r0, [r7, #0]
 80016cc:	f7fe ff00 	bl	80004d0 <__aeabi_f2d>
 80016d0:	a317      	add	r3, pc, #92	; (adr r3, 8001730 <NORM_f32_RMS+0xf0>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7fe fd9b 	bl	8000210 <__aeabi_dsub>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	a311      	add	r3, pc, #68	; (adr r3, 8001728 <NORM_f32_RMS+0xe8>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7ff f874 	bl	80007d4 <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f9f4 	bl	8000ae0 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	bf00      	nop
	}

	return Local_f32_NormRMS;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	ee07 3a90 	vmov	s15, r3
}
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	5c28f5c3 	.word	0x5c28f5c3
 8001714:	4084fe8f 	.word	0x4084fe8f
 8001718:	70a3d70a 	.word	0x70a3d70a
 800171c:	40763e3d 	.word	0x40763e3d
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	4063e4cc 	.word	0x4063e4cc
 8001728:	70a3d70a 	.word	0x70a3d70a
 800172c:	40390a3d 	.word	0x40390a3d
 8001730:	cccccccd 	.word	0xcccccccd
 8001734:	406864cc 	.word	0x406864cc

08001738 <NORM_f32_Variance>:

float NORM_f32_Variance(uint8_t Copy_u8SensorNum , float Copy_f32Variance)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	ed87 0a00 	vstr	s0, [r7]
 8001744:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormVar;

	switch(Copy_u8SensorNum)
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d03a      	beq.n	80017c2 <NORM_f32_Variance+0x8a>
 800174c:	2b02      	cmp	r3, #2
 800174e:	dc52      	bgt.n	80017f6 <NORM_f32_Variance+0xbe>
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <NORM_f32_Variance+0x22>
 8001754:	2b01      	cmp	r3, #1
 8001756:	d01a      	beq.n	800178e <NORM_f32_Variance+0x56>
 8001758:	e04d      	b.n	80017f6 <NORM_f32_Variance+0xbe>
	{
	case SNS1 : Local_f32_NormVar = (Copy_f32Variance - SNS1_VAR_MEAN) / SNS1_VAR_SD; break;
 800175a:	6838      	ldr	r0, [r7, #0]
 800175c:	f7fe feb8 	bl	80004d0 <__aeabi_f2d>
 8001760:	a329      	add	r3, pc, #164	; (adr r3, 8001808 <NORM_f32_Variance+0xd0>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe fd53 	bl	8000210 <__aeabi_dsub>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	a327      	add	r3, pc, #156	; (adr r3, 8001810 <NORM_f32_Variance+0xd8>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7ff f82c 	bl	80007d4 <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f7ff f9ac 	bl	8000ae0 <__aeabi_d2f>
 8001788:	4603      	mov	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	e033      	b.n	80017f6 <NORM_f32_Variance+0xbe>
	case SNS2 : Local_f32_NormVar = (Copy_f32Variance - SNS2_VAR_MEAN) / SNS2_VAR_SD; break;
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f7fe fe9e 	bl	80004d0 <__aeabi_f2d>
 8001794:	a320      	add	r3, pc, #128	; (adr r3, 8001818 <NORM_f32_Variance+0xe0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7fe fd39 	bl	8000210 <__aeabi_dsub>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	a31e      	add	r3, pc, #120	; (adr r3, 8001820 <NORM_f32_Variance+0xe8>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7ff f812 	bl	80007d4 <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f992 	bl	8000ae0 <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e019      	b.n	80017f6 <NORM_f32_Variance+0xbe>
	case SNS3 : Local_f32_NormVar = (Copy_f32Variance - SNS3_VAR_MEAN) / SNS3_VAR_SD; break;
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f7fe fe84 	bl	80004d0 <__aeabi_f2d>
 80017c8:	a313      	add	r3, pc, #76	; (adr r3, 8001818 <NORM_f32_Variance+0xe0>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fd1f 	bl	8000210 <__aeabi_dsub>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	a311      	add	r3, pc, #68	; (adr r3, 8001820 <NORM_f32_Variance+0xe8>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7fe fff8 	bl	80007d4 <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f978 	bl	8000ae0 <__aeabi_d2f>
 80017f0:	4603      	mov	r3, r0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	bf00      	nop
	}

	return Local_f32_NormVar;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	ee07 3a90 	vmov	s15, r3
}
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	75c28f5c 	.word	0x75c28f5c
 800180c:	4121a3a5 	.word	0x4121a3a5
 8001810:	d70a3d71 	.word	0xd70a3d71
 8001814:	41198e38 	.word	0x41198e38
 8001818:	28f5c28f 	.word	0x28f5c28f
 800181c:	40d9594c 	.word	0x40d9594c
 8001820:	cccccccd 	.word	0xcccccccd
 8001824:	40beeecc 	.word	0x40beeecc

08001828 <NORM_f32_Mean>:

float NORM_f32_Mean(uint8_t Copy_u8SensorNum , float Copy_f32Mean)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	ed87 0a00 	vstr	s0, [r7]
 8001834:	71fb      	strb	r3, [r7, #7]
	float Local_f32_NormMean;

	switch(Copy_u8SensorNum)
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d03a      	beq.n	80018b2 <NORM_f32_Mean+0x8a>
 800183c:	2b02      	cmp	r3, #2
 800183e:	dc52      	bgt.n	80018e6 <NORM_f32_Mean+0xbe>
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <NORM_f32_Mean+0x22>
 8001844:	2b01      	cmp	r3, #1
 8001846:	d01a      	beq.n	800187e <NORM_f32_Mean+0x56>
 8001848:	e04d      	b.n	80018e6 <NORM_f32_Mean+0xbe>
	{
	case SNS1 : Local_f32_NormMean= (Copy_f32Mean - SNS1_MEAN_MEAN) / SNS1_MEAN_SD; break;
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f7fe fe40 	bl	80004d0 <__aeabi_f2d>
 8001850:	a329      	add	r3, pc, #164	; (adr r3, 80018f8 <NORM_f32_Mean+0xd0>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fcdb 	bl	8000210 <__aeabi_dsub>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	a327      	add	r3, pc, #156	; (adr r3, 8001900 <NORM_f32_Mean+0xd8>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe ffb4 	bl	80007d4 <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f934 	bl	8000ae0 <__aeabi_d2f>
 8001878:	4603      	mov	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e033      	b.n	80018e6 <NORM_f32_Mean+0xbe>
	case SNS2 : Local_f32_NormMean= (Copy_f32Mean - SNS2_MEAN_MEAN) / SNS2_MEAN_SD; break;
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7fe fe26 	bl	80004d0 <__aeabi_f2d>
 8001884:	a320      	add	r3, pc, #128	; (adr r3, 8001908 <NORM_f32_Mean+0xe0>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe fcc1 	bl	8000210 <__aeabi_dsub>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	a31e      	add	r3, pc, #120	; (adr r3, 8001910 <NORM_f32_Mean+0xe8>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe ff9a 	bl	80007d4 <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f91a 	bl	8000ae0 <__aeabi_d2f>
 80018ac:	4603      	mov	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e019      	b.n	80018e6 <NORM_f32_Mean+0xbe>
	case SNS3 : Local_f32_NormMean= (Copy_f32Mean - SNS3_MEAN_MEAN) / SNS3_MEAN_SD; break;
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f7fe fe0c 	bl	80004d0 <__aeabi_f2d>
 80018b8:	a313      	add	r3, pc, #76	; (adr r3, 8001908 <NORM_f32_Mean+0xe0>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fca7 	bl	8000210 <__aeabi_dsub>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	a311      	add	r3, pc, #68	; (adr r3, 8001910 <NORM_f32_Mean+0xe8>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe ff80 	bl	80007d4 <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f900 	bl	8000ae0 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	bf00      	nop
	}

	return Local_f32_NormMean;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	ee07 3a90 	vmov	s15, r3
}
 80018ec:	eeb0 0a67 	vmov.f32	s0, s15
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	5c28f5c3 	.word	0x5c28f5c3
 80018fc:	40850c8f 	.word	0x40850c8f
 8001900:	e147ae14 	.word	0xe147ae14
 8001904:	40762c7a 	.word	0x40762c7a
 8001908:	0a3d70a4 	.word	0x0a3d70a4
 800190c:	404b83d7 	.word	0x404b83d7
 8001910:	d70a3d71 	.word	0xd70a3d71
 8001914:	402570a3 	.word	0x402570a3

08001918 <PWM_int32SetPWMValue>:
#include <stdint.h>
#include "PWM.h"


int8_t PWM_int32SetPWMValue(TIM_TypeDef *htim,int32_t Copy_int32Channel,int32_t Copy_int32Value)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	int8_t Local_int8ErrorState = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	75fb      	strb	r3, [r7, #23]

	if (htim == TIM2)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192e:	d124      	bne.n	800197a <PWM_int32SetPWMValue+0x62>
	{
		switch(Copy_int32Channel)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d81e      	bhi.n	8001974 <PWM_int32SetPWMValue+0x5c>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <PWM_int32SetPWMValue+0x24>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001957 	.word	0x08001957
 8001944:	08001961 	.word	0x08001961
 8001948:	0800196b 	.word	0x0800196b
		{
		case PWM_Channel1 : TIM2->CCR1 = Copy_int32Value; break;
 800194c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6353      	str	r3, [r2, #52]	; 0x34
 8001954:	e028      	b.n	80019a8 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel2 : TIM2->CCR2 = Copy_int32Value; break;
 8001956:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6393      	str	r3, [r2, #56]	; 0x38
 800195e:	e023      	b.n	80019a8 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel3 : TIM2->CCR3 = Copy_int32Value; break;
 8001960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001968:	e01e      	b.n	80019a8 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel4 : TIM2->CCR4 = Copy_int32Value; break;
 800196a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	e019      	b.n	80019a8 <PWM_int32SetPWMValue+0x90>
		default : Local_int8ErrorState = 1;
 8001974:	2301      	movs	r3, #1
 8001976:	75fb      	strb	r3, [r7, #23]
 8001978:	e016      	b.n	80019a8 <PWM_int32SetPWMValue+0x90>
		}
	}

	else if (htim == TIM12)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <PWM_int32SetPWMValue+0xa0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d111      	bne.n	80019a6 <PWM_int32SetPWMValue+0x8e>
	{
		switch(Copy_int32Channel)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <PWM_int32SetPWMValue+0x78>
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d004      	beq.n	8001998 <PWM_int32SetPWMValue+0x80>
 800198e:	e007      	b.n	80019a0 <PWM_int32SetPWMValue+0x88>
		{
		case PWM_Channel1 : TIM12->CCR1 = Copy_int32Value; break;
 8001990:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <PWM_int32SetPWMValue+0xa0>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6353      	str	r3, [r2, #52]	; 0x34
 8001996:	e007      	b.n	80019a8 <PWM_int32SetPWMValue+0x90>
		case PWM_Channel2 : TIM12->CCR2 = Copy_int32Value; break;
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <PWM_int32SetPWMValue+0xa0>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6393      	str	r3, [r2, #56]	; 0x38
 800199e:	e003      	b.n	80019a8 <PWM_int32SetPWMValue+0x90>
		default : Local_int8ErrorState = 1;
 80019a0:	2301      	movs	r3, #1
 80019a2:	75fb      	strb	r3, [r7, #23]
 80019a4:	e000      	b.n	80019a8 <PWM_int32SetPWMValue+0x90>
		}
	}
 80019a6:	bf00      	nop

	return Local_int8ErrorState;
 80019a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40001800 	.word	0x40001800

080019bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019c2:	463b      	mov	r3, r7
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <MX_ADC1_Init+0x98>)
 80019d0:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <MX_ADC1_Init+0x9c>)
 80019d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <MX_ADC1_Init+0x98>)
 80019d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_ADC1_Init+0x98>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <MX_ADC1_Init+0x98>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_ADC1_Init+0x98>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <MX_ADC1_Init+0x98>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <MX_ADC1_Init+0x98>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <MX_ADC1_Init+0x98>)
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <MX_ADC1_Init+0xa0>)
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <MX_ADC1_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <MX_ADC1_Init+0x98>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_ADC1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <MX_ADC1_Init+0x98>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <MX_ADC1_Init+0x98>)
 8001a1e:	f001 fbbd 	bl	800319c <HAL_ADC_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a28:	f000 fe56 	bl	80026d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a30:	2301      	movs	r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a38:	463b      	mov	r3, r7
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_ADC1_Init+0x98>)
 8001a3e:	f001 fe89 	bl	8003754 <HAL_ADC_ConfigChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a48:	f000 fe46 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	200005dc 	.word	0x200005dc
 8001a58:	40012000 	.word	0x40012000
 8001a5c:	0f000001 	.word	0x0f000001

08001a60 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <MX_ADC2_Init+0x9c>)
 8001a76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <MX_ADC2_Init+0xa0>)
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001ac2:	f001 fb6b 	bl	800319c <HAL_ADC_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001acc:	f000 fe04 	bl	80026d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_ADC2_Init+0x98>)
 8001ae2:	f001 fe37 	bl	8003754 <HAL_ADC_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001aec:	f000 fdf4 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000624 	.word	0x20000624
 8001afc:	40012100 	.word	0x40012100
 8001b00:	0f000001 	.word	0x0f000001

08001b04 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b18:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <MX_ADC3_Init+0x9c>)
 8001b1a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b22:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <MX_ADC3_Init+0xa0>)
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b66:	f001 fb19 	bl	800319c <HAL_ADC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001b70:	f000 fdb2 	bl	80026d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b74:	230a      	movs	r3, #10
 8001b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_ADC3_Init+0x98>)
 8001b86:	f001 fde5 	bl	8003754 <HAL_ADC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001b90:	f000 fda2 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	2000066c 	.word	0x2000066c
 8001ba0:	40012200 	.word	0x40012200
 8001ba4:	0f000001 	.word	0x0f000001

08001ba8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08e      	sub	sp, #56	; 0x38
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a51      	ldr	r2, [pc, #324]	; (8001d0c <HAL_ADC_MspInit+0x164>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d130      	bne.n	8001c2c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a4f      	ldr	r2, [pc, #316]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a48      	ldr	r2, [pc, #288]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c02:	2301      	movs	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c06:	2303      	movs	r3, #3
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c12:	4619      	mov	r1, r3
 8001c14:	483f      	ldr	r0, [pc, #252]	; (8001d14 <HAL_ADC_MspInit+0x16c>)
 8001c16:	f002 f9a1 	bl	8003f5c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2012      	movs	r0, #18
 8001c20:	f002 f8b7 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c24:	2012      	movs	r0, #18
 8001c26:	f002 f8d0 	bl	8003dca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001c2a:	e06a      	b.n	8001d02 <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a39      	ldr	r2, [pc, #228]	; (8001d18 <HAL_ADC_MspInit+0x170>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d130      	bne.n	8001c98 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a34      	ldr	r2, [pc, #208]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b2b      	ldr	r3, [pc, #172]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c72:	2303      	movs	r3, #3
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4824      	ldr	r0, [pc, #144]	; (8001d14 <HAL_ADC_MspInit+0x16c>)
 8001c82:	f002 f96b 	bl	8003f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2012      	movs	r0, #18
 8001c8c:	f002 f881 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c90:	2012      	movs	r0, #18
 8001c92:	f002 f89a 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8001c96:	e034      	b.n	8001d02 <HAL_ADC_MspInit+0x15a>
  else if(adcHandle->Instance==ADC3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_ADC_MspInit+0x174>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d12f      	bne.n	8001d02 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_ADC_MspInit+0x168>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cea:	4619      	mov	r1, r3
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <HAL_ADC_MspInit+0x178>)
 8001cee:	f002 f935 	bl	8003f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2012      	movs	r0, #18
 8001cf8:	f002 f84b 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001cfc:	2012      	movs	r0, #18
 8001cfe:	f002 f864 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3738      	adds	r7, #56	; 0x38
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40012000 	.word	0x40012000
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40012100 	.word	0x40012100
 8001d1c:	40012200 	.word	0x40012200
 8001d20:	40020800 	.word	0x40020800

08001d24 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_CRC_Init+0x20>)
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <MX_CRC_Init+0x24>)
 8001d2c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_CRC_Init+0x20>)
 8001d30:	f002 f865 	bl	8003dfe <HAL_CRC_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001d3a:	f000 fccd 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200006b4 	.word	0x200006b4
 8001d48:	40023000 	.word	0x40023000

08001d4c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_CRC_MspInit+0x3c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10d      	bne.n	8001d7a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_CRC_MspInit+0x40>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_CRC_MspInit+0x40>)
 8001d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_CRC_MspInit+0x40>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023000 	.word	0x40023000
 8001d8c:	40023800 	.word	0x40023800

08001d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a2c      	ldr	r2, [pc, #176]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a25      	ldr	r2, [pc, #148]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a17      	ldr	r2, [pc, #92]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_GPIO_Init+0xd0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2120      	movs	r1, #32
 8001e1a:	4812      	ldr	r0, [pc, #72]	; (8001e64 <MX_GPIO_Init+0xd4>)
 8001e1c:	f002 fa32 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	480c      	ldr	r0, [pc, #48]	; (8001e68 <MX_GPIO_Init+0xd8>)
 8001e38:	f002 f890 	bl	8003f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_GPIO_Init+0xd4>)
 8001e54:	f002 f882 	bl	8003f5c <HAL_GPIO_Init>

}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020800 	.word	0x40020800

08001e6c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d104      	bne.n	8001e88 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e7e:	2120      	movs	r1, #32
 8001e80:	4813      	ldr	r0, [pc, #76]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e82:	f002 fa18 	bl	80042b6 <HAL_GPIO_TogglePin>
	}
	else if (htim->Instance == TIM14)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
}
 8001e86:	e01c      	b.n	8001ec2 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM11)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d104      	bne.n	8001e9c <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001e92:	2120      	movs	r1, #32
 8001e94:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e96:	f002 fa0e 	bl	80042b6 <HAL_GPIO_TogglePin>
}
 8001e9a:	e012      	b.n	8001ec2 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM13)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d104      	bne.n	8001eb0 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001eaa:	f002 fa04 	bl	80042b6 <HAL_GPIO_TogglePin>
}
 8001eae:	e008      	b.n	8001ec2 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if (htim->Instance == TIM14)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d103      	bne.n	8001ec2 <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001eba:	2120      	movs	r1, #32
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ebe:	f002 f9fa 	bl	80042b6 <HAL_GPIO_TogglePin>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40014400 	.word	0x40014400
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40014800 	.word	0x40014800
 8001ed8:	40001c00 	.word	0x40001c00
 8001edc:	40002000 	.word	0x40002000

08001ee0 <Model_Init>:

static ai_buffer *ai_input;
static ai_buffer *ai_output;

int Model_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	ai_error err;
	const ai_handle acts[] = { activations };
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <Model_Init+0x48>)
 8001ee8:	603b      	str	r3, [r7, #0]
	err = ai_network_create_and_init(&network, acts, NULL);
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <Model_Init+0x4c>)
 8001ef2:	f005 f809 	bl	8006f08 <ai_network_create_and_init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	607b      	str	r3, [r7, #4]

	ai_input = ai_network_inputs_get(network, NULL);
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <Model_Init+0x4c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f005 f875 	bl	8006ff0 <ai_network_inputs_get>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <Model_Init+0x50>)
 8001f0a:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_outputs_get(network, NULL);
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <Model_Init+0x4c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f005 f886 	bl	8007024 <ai_network_outputs_get>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <Model_Init+0x54>)
 8001f1c:	6013      	str	r3, [r2, #0]

	return 0;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200006e0 	.word	0x200006e0
 8001f2c:	200006cc 	.word	0x200006cc
 8001f30:	20000744 	.word	0x20000744
 8001f34:	20000748 	.word	0x20000748

08001f38 <Model_Run>:

int Model_Run(const void *in_data, void *out_data)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
	ai_i32 n_batch;
	ai_error err;

	/* 1 - Update IO handlers with the data payload */
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <Model_Run+0x4c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	605a      	str	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <Model_Run+0x50>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	605a      	str	r2, [r3, #4]

	/* 2 - Perform the inference */
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <Model_Run+0x54>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <Model_Run+0x4c>)
 8001f58:	6811      	ldr	r1, [r2, #0]
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <Model_Run+0x50>)
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f005 f8b6 	bl	80070d0 <ai_network_run>
 8001f64:	60f8      	str	r0, [r7, #12]
	if (n_batch != 1) {
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d006      	beq.n	8001f7a <Model_Run+0x42>
		err = ai_network_get_error(network);
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <Model_Run+0x54>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 ffa7 	bl	8006ec4 <ai_network_get_error>
 8001f76:	4603      	mov	r3, r0
 8001f78:	60bb      	str	r3, [r7, #8]
	};

	return 0;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000744 	.word	0x20000744
 8001f88:	20000748 	.word	0x20000748
 8001f8c:	200006cc 	.word	0x200006cc

08001f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 8001f96:	b085      	sub	sp, #20
 8001f98:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f9a:	f001 f869 	bl	8003070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9e:	f000 fb2f 	bl	8002600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa2:	f7ff fef5 	bl	8001d90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001fa6:	f7ff fd09 	bl	80019bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001faa:	f7ff fd59 	bl	8001a60 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001fae:	f7ff fda9 	bl	8001b04 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001fb2:	f000 fcf3 	bl	800299c <MX_TIM2_Init>
  MX_TIM10_Init();
 8001fb6:	f000 fd89 	bl	8002acc <MX_TIM10_Init>
  MX_TIM11_Init();
 8001fba:	f000 fdab 	bl	8002b14 <MX_TIM11_Init>
  MX_TIM12_Init();
 8001fbe:	f000 fdcd 	bl	8002b5c <MX_TIM12_Init>
  MX_TIM13_Init();
 8001fc2:	f000 fe2d 	bl	8002c20 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001fc6:	f000 fe4f 	bl	8002c68 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8001fca:	f000 ffad 	bl	8002f28 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001fce:	f7ff fea9 	bl	8001d24 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	Model_Init();
 8001fd2:	f7ff ff85 	bl	8001ee0 <Model_Init>

	/* Start GPs Timers */
	HAL_TIM_Base_Start_IT(&htim10);
 8001fd6:	48bf      	ldr	r0, [pc, #764]	; (80022d4 <main+0x344>)
 8001fd8:	f002 ffc0 	bl	8004f5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8001fdc:	48be      	ldr	r0, [pc, #760]	; (80022d8 <main+0x348>)
 8001fde:	f002 ffbd 	bl	8004f5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8001fe2:	48be      	ldr	r0, [pc, #760]	; (80022dc <main+0x34c>)
 8001fe4:	f002 ffba 	bl	8004f5c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8001fe8:	48bd      	ldr	r0, [pc, #756]	; (80022e0 <main+0x350>)
 8001fea:	f002 ffb7 	bl	8004f5c <HAL_TIM_Base_Start_IT>


	/* Initialize PWM Timers*/
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001fee:	2100      	movs	r1, #0
 8001ff0:	48bc      	ldr	r0, [pc, #752]	; (80022e4 <main+0x354>)
 8001ff2:	f003 f87d 	bl	80050f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	48ba      	ldr	r0, [pc, #744]	; (80022e4 <main+0x354>)
 8001ffa:	f003 f879 	bl	80050f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001ffe:	2108      	movs	r1, #8
 8002000:	48b8      	ldr	r0, [pc, #736]	; (80022e4 <main+0x354>)
 8002002:	f003 f875 	bl	80050f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002006:	210c      	movs	r1, #12
 8002008:	48b6      	ldr	r0, [pc, #728]	; (80022e4 <main+0x354>)
 800200a:	f003 f871 	bl	80050f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800200e:	2100      	movs	r1, #0
 8002010:	48b5      	ldr	r0, [pc, #724]	; (80022e8 <main+0x358>)
 8002012:	f003 f86d 	bl	80050f0 <HAL_TIM_PWM_Start>

	SERVO_t Servo1;
	Servo1.Pin = Servo_PB9;
 8002016:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800201a:	f103 0308 	add.w	r3, r3, #8
 800201e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]

	/*********	Testing	*********/
	uint32_t Data0[250] = {
 8002026:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800202a:	f103 0308 	add.w	r3, r3, #8
 800202e:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8002032:	4aae      	ldr	r2, [pc, #696]	; (80022ec <main+0x35c>)
 8002034:	4618      	mov	r0, r3
 8002036:	4611      	mov	r1, r2
 8002038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203c:	461a      	mov	r2, r3
 800203e:	f006 ff67 	bl	8008f10 <memcpy>
			0   , 606, 197, 76 , 0  , 104, 0  , 232, 24  , 0   ,
			1023, 132, 0  , 0  , 0  , 0  , 0  , 0  , 0   , 14  ,
			0   , 0  , 0  , 0  , 89 , 7  , 0  , 32 , 0   , 72  ,
			227 , 12 , 0  , 0  , 0  , 9  , 640, 58 , 0   , 0   };

	uint32_t Data1[250] = {
 8002042:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002046:	f103 0308 	add.w	r3, r3, #8
 800204a:	f5a3 6341 	sub.w	r3, r3, #3088	; 0xc10
 800204e:	4aa8      	ldr	r2, [pc, #672]	; (80022f0 <main+0x360>)
 8002050:	4618      	mov	r0, r3
 8002052:	4611      	mov	r1, r2
 8002054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002058:	461a      	mov	r2, r3
 800205a:	f006 ff59 	bl	8008f10 <memcpy>
			,0	,0	,0	,0	,0	,0	,0	,0	,7	,0	,27	,17	,0
			,0	,51	,0	,90	,95	,0	,98	,0	,5	,0	,79	,0	,55
			,47	,86	,41	,0  ,0	,67	,137,74	,31	,117,0	,33	,0
			,176,2,134
	};
	uint32_t Test[250] = {664,  167,   13,   82,  340,  865,  469,  663,  144,  316,   15,
 800205e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002062:	f103 0308 	add.w	r3, r3, #8
 8002066:	f6a3 73f8 	subw	r3, r3, #4088	; 0xff8
 800206a:	4aa2      	ldr	r2, [pc, #648]	; (80022f4 <main+0x364>)
 800206c:	4618      	mov	r0, r3
 800206e:	4611      	mov	r1, r2
 8002070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002074:	461a      	mov	r2, r3
 8002076:	f006 ff4b 	bl	8008f10 <memcpy>
			146,   93,  125,   96,    5,  160,   51, 1495, 1831,   71,  599,
			181,  250,  219,  246,   47,  213,   23,  225};
	float Feat_Arr[6],Norm_Arr[6];

	/*Feature Extraction*/
	Feat_Arr[VAR_IDX]	= FEAT_EXT_f32_Variance(Test,250);
 800207a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207e:	21fa      	movs	r1, #250	; 0xfa
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f8b1 	bl	80011e8 <FEAT_EXT_f32_Variance>
 8002086:	eef0 7a40 	vmov.f32	s15, s0
 800208a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800208e:	ed43 7a03 	vstr	s15, [r3, #-12]
	Feat_Arr[RMS_IDX]   = FEAT_EXT_f32_RMS(Feat_Arr[VAR_IDX]);
 8002092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002096:	ed53 7a03 	vldr	s15, [r3, #-12]
 800209a:	eeb0 0a67 	vmov.f32	s0, s15
 800209e:	f7ff f88e 	bl	80011be <FEAT_EXT_f32_RMS>
 80020a2:	eef0 7a40 	vmov.f32	s15, s0
 80020a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020aa:	ed43 7a04 	vstr	s15, [r3, #-16]
	Feat_Arr[MEAN_IDX]  = FEAT_EXT_f32_MeanAbsolute(Test,250);
 80020ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b2:	21fa      	movs	r1, #250	; 0xfa
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff f92d 	bl	8001314 <FEAT_EXT_f32_MeanAbsolute>
 80020ba:	eef0 7a40 	vmov.f32	s15, s0
 80020be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c2:	ed43 7a02 	vstr	s15, [r3, #-8]
	Feat_Arr[SSC_INDX]  = FEAT_EXT_u32_SlopeSignChange(Test,250);
 80020c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ca:	21fa      	movs	r1, #250	; 0xfa
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fed9 	bl	8000e84 <FEAT_EXT_u32_SlopeSignChange>
 80020d2:	ee07 0a90 	vmov	s15, r0
 80020d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020de:	ed43 7a01 	vstr	s15, [r3, #-4]
	Feat_Arr[ZC_IDX]    = FEAT_EXT_u32_ZeroCrossing(Test,250);
 80020e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020e6:	21fa      	movs	r1, #250	; 0xfa
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe ff6d 	bl	8000fc8 <FEAT_EXT_u32_ZeroCrossing>
 80020ee:	ee07 0a90 	vmov	s15, r0
 80020f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020fa:	edc3 7a00 	vstr	s15, [r3]
	Feat_Arr[WVL_IDX]   = FEAT_EXT_u32_WaveformLength(Test,250);
 80020fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002102:	21fa      	movs	r1, #250	; 0xfa
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe ffd5 	bl	80010b4 <FEAT_EXT_u32_WaveformLength>
 800210a:	ee07 0a90 	vmov	s15, r0
 800210e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002116:	edc3 7a01 	vstr	s15, [r3, #4]

	/*Normalization*/
	Norm_Arr[VAR_IDX]  = NORM_f32_Variance(SNS1, Feat_Arr[VAR_IDX]);
 800211a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211e:	ed53 7a03 	vldr	s15, [r3, #-12]
 8002122:	eeb0 0a67 	vmov.f32	s0, s15
 8002126:	2000      	movs	r0, #0
 8002128:	f7ff fb06 	bl	8001738 <NORM_f32_Variance>
 800212c:	eef0 7a40 	vmov.f32	s15, s0
 8002130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002134:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	Norm_Arr[RMS_IDX]  = NORM_f32_RMS(SNS1, Feat_Arr[RMS_IDX]);
 8002138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800213c:	ed53 7a04 	vldr	s15, [r3, #-16]
 8002140:	eeb0 0a67 	vmov.f32	s0, s15
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff fa7b 	bl	8001640 <NORM_f32_RMS>
 800214a:	eef0 7a40 	vmov.f32	s15, s0
 800214e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002152:	ed43 7a0a 	vstr	s15, [r3, #-40]	; 0xffffffd8
	Norm_Arr[MEAN_IDX] = NORM_f32_Mean(SNS1, Feat_Arr[MEAN_IDX]);
 8002156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800215a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff fb60 	bl	8001828 <NORM_f32_Mean>
 8002168:	eef0 7a40 	vmov.f32	s15, s0
 800216c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002170:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
	Norm_Arr[SSC_INDX] = NORM_f32_SlopeSignChange(SNS1,Feat_Arr[SSC_INDX]);
 8002174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002178:	ed53 7a01 	vldr	s15, [r3, #-4]
 800217c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002180:	ee17 1a90 	vmov	r1, s15
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff f91f 	bl	80013c8 <NORM_f32_SlopeSignChange>
 800218a:	eef0 7a40 	vmov.f32	s15, s0
 800218e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002192:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
	Norm_Arr[ZC_IDX]   = NORM_f32_ZeroCrossing(SNS1,Feat_Arr[ZC_IDX]);
 8002196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a2:	ee17 1a90 	vmov	r1, s15
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7ff f976 	bl	8001498 <NORM_f32_ZeroCrossing>
 80021ac:	eef0 7a40 	vmov.f32	s15, s0
 80021b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b4:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
	Norm_Arr[WVL_IDX]  = NORM_f32_WaveformLength(SNS1, Feat_Arr[WVL_IDX]);
 80021b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80021c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c4:	ee17 1a90 	vmov	r1, s15
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff f9c1 	bl	8001550 <NORM_f32_WaveformLength>
 80021ce:	eef0 7a40 	vmov.f32	s15, s0
 80021d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d6:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec

	/*Model Running*/

	/*Movement 1 Data*/
	in_data[RMS_IDX]  = Norm_Arr[RMS_IDX];
 80021da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021de:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80021e2:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <main+0x368>)
 80021e4:	6013      	str	r3, [r2, #0]
	in_data[VAR_IDX]  = Norm_Arr[VAR_IDX];
 80021e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ea:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80021ee:	4a42      	ldr	r2, [pc, #264]	; (80022f8 <main+0x368>)
 80021f0:	6053      	str	r3, [r2, #4]
	in_data[MEAN_IDX] = Norm_Arr[MEAN_IDX];
 80021f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80021fa:	4a3f      	ldr	r2, [pc, #252]	; (80022f8 <main+0x368>)
 80021fc:	6093      	str	r3, [r2, #8]
	in_data[SSC_INDX] = Norm_Arr[SSC_INDX];
 80021fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002202:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002206:	4a3c      	ldr	r2, [pc, #240]	; (80022f8 <main+0x368>)
 8002208:	60d3      	str	r3, [r2, #12]
	in_data[ZC_IDX]   = Norm_Arr[ZC_IDX];
 800220a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002212:	4a39      	ldr	r2, [pc, #228]	; (80022f8 <main+0x368>)
 8002214:	6113      	str	r3, [r2, #16]
	in_data[WVL_IDX]  = Norm_Arr[WVL_IDX];
 8002216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800221e:	4a36      	ldr	r2, [pc, #216]	; (80022f8 <main+0x368>)
 8002220:	6153      	str	r3, [r2, #20]

	Model_Run(in_data, out_data);
 8002222:	4936      	ldr	r1, [pc, #216]	; (80022fc <main+0x36c>)
 8002224:	4834      	ldr	r0, [pc, #208]	; (80022f8 <main+0x368>)
 8002226:	f7ff fe87 	bl	8001f38 <Model_Run>

	if(*out_data < MODEL_THRESHOLD)
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <main+0x36c>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d51f      	bpl.n	800227e <main+0x2ee>
	{
		Servo_void_SetAngle(Servo1,180);
 800223e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002242:	f103 0308 	add.w	r3, r3, #8
 8002246:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 800224a:	23b4      	movs	r3, #180	; 0xb4
 800224c:	9310      	str	r3, [sp, #64]	; 0x40
 800224e:	466d      	mov	r5, sp
 8002250:	f106 0410 	add.w	r4, r6, #16
 8002254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002264:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002268:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800226c:	f000 fa6a 	bl	8002744 <Servo_void_SetAngle>
		Fest = 100;
 8002270:	4b23      	ldr	r3, [pc, #140]	; (8002300 <main+0x370>)
 8002272:	2264      	movs	r2, #100	; 0x64
 8002274:	601a      	str	r2, [r3, #0]
		Gun = 0;
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <main+0x374>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e01e      	b.n	80022bc <main+0x32c>

	}
	else
	{
		Servo_void_SetAngle(Servo1,90);
 800227e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002282:	f103 0308 	add.w	r3, r3, #8
 8002286:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 800228a:	235a      	movs	r3, #90	; 0x5a
 800228c:	9310      	str	r3, [sp, #64]	; 0x40
 800228e:	466d      	mov	r5, sp
 8002290:	f106 0410 	add.w	r4, r6, #16
 8002294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80022a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80022ac:	f000 fa4a 	bl	8002744 <Servo_void_SetAngle>
		Fest = 0;
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <main+0x370>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
		Gun = 100;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <main+0x374>)
 80022b8:	2264      	movs	r2, #100	; 0x64
 80022ba:	601a      	str	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for(Local_u32AvgCounter = 0 ; Local_u32AvgCounter < 3; Local_u32AvgCounter++)
 80022bc:	2300      	movs	r3, #0
 80022be:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e16f      	b.n	80025a6 <main+0x616>
		{
			for(Local_u32Counter = 0 ;Local_u32Counter < 250;)
 80022c6:	2300      	movs	r3, #0
 80022c8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80022cc:	f102 0204 	add.w	r2, r2, #4
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e03b      	b.n	800234c <main+0x3bc>
 80022d4:	20000798 	.word	0x20000798
 80022d8:	200007e0 	.word	0x200007e0
 80022dc:	20000870 	.word	0x20000870
 80022e0:	200008b8 	.word	0x200008b8
 80022e4:	20000750 	.word	0x20000750
 80022e8:	20000828 	.word	0x20000828
 80022ec:	0800a040 	.word	0x0800a040
 80022f0:	0800a428 	.word	0x0800a428
 80022f4:	0800a810 	.word	0x0800a810
 80022f8:	20000720 	.word	0x20000720
 80022fc:	20000740 	.word	0x20000740
 8002300:	200006c0 	.word	0x200006c0
 8002304:	200006c4 	.word	0x200006c4
			{
				sensor = analogRead(&hadc1);
 8002308:	48b6      	ldr	r0, [pc, #728]	; (80025e4 <main+0x654>)
 800230a:	f000 f9eb 	bl	80026e4 <analogRead>
 800230e:	4603      	mov	r3, r0
 8002310:	4ab5      	ldr	r2, [pc, #724]	; (80025e8 <main+0x658>)
 8002312:	6013      	str	r3, [r2, #0]
				HAL_Delay(2);
 8002314:	2002      	movs	r0, #2
 8002316:	f000 ff1d 	bl	8003154 <HAL_Delay>
				if(sensor != 0)
 800231a:	4bb3      	ldr	r3, [pc, #716]	; (80025e8 <main+0x658>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d014      	beq.n	800234c <main+0x3bc>
				{
					Local_u32_RealData[Local_u32Counter++] = sensor;
 8002322:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002326:	f103 0304 	add.w	r3, r3, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8002332:	f101 0104 	add.w	r1, r1, #4
 8002336:	600a      	str	r2, [r1, #0]
 8002338:	4aab      	ldr	r2, [pc, #684]	; (80025e8 <main+0x658>)
 800233a:	6811      	ldr	r1, [r2, #0]
 800233c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002340:	f102 0208 	add.w	r2, r2, #8
 8002344:	f5a2 727c 	sub.w	r2, r2, #1008	; 0x3f0
 8002348:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(Local_u32Counter = 0 ;Local_u32Counter < 250;)
 800234c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002350:	f103 0304 	add.w	r3, r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2bf9      	cmp	r3, #249	; 0xf9
 8002358:	d9d6      	bls.n	8002308 <main+0x378>
				}
			}
			/*Feature Extraction*/
			Feat_Arr[VAR_IDX]	= FEAT_EXT_f32_Variance(Local_u32_RealData,250);
 800235a:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 800235e:	21fa      	movs	r1, #250	; 0xfa
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ff41 	bl	80011e8 <FEAT_EXT_f32_Variance>
 8002366:	eef0 7a40 	vmov.f32	s15, s0
 800236a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236e:	ed43 7a03 	vstr	s15, [r3, #-12]
			Feat_Arr[RMS_IDX]   = FEAT_EXT_f32_RMS(Feat_Arr[VAR_IDX]);
 8002372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002376:	ed53 7a03 	vldr	s15, [r3, #-12]
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	f7fe ff1e 	bl	80011be <FEAT_EXT_f32_RMS>
 8002382:	eef0 7a40 	vmov.f32	s15, s0
 8002386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800238a:	ed43 7a04 	vstr	s15, [r3, #-16]
			Feat_Arr[MEAN_IDX]  = FEAT_EXT_f32_MeanAbsolute(Local_u32_RealData,250);
 800238e:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 8002392:	21fa      	movs	r1, #250	; 0xfa
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe ffbd 	bl	8001314 <FEAT_EXT_f32_MeanAbsolute>
 800239a:	eef0 7a40 	vmov.f32	s15, s0
 800239e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a2:	ed43 7a02 	vstr	s15, [r3, #-8]
			Feat_Arr[SSC_INDX]  = FEAT_EXT_u32_SlopeSignChange(Local_u32_RealData,250);
 80023a6:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023aa:	21fa      	movs	r1, #250	; 0xfa
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fd69 	bl	8000e84 <FEAT_EXT_u32_SlopeSignChange>
 80023b2:	ee07 0a90 	vmov	s15, r0
 80023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023be:	ed43 7a01 	vstr	s15, [r3, #-4]
			Feat_Arr[ZC_IDX]    = FEAT_EXT_u32_ZeroCrossing(Local_u32_RealData,250);
 80023c2:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023c6:	21fa      	movs	r1, #250	; 0xfa
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fdfd 	bl	8000fc8 <FEAT_EXT_u32_ZeroCrossing>
 80023ce:	ee07 0a90 	vmov	s15, r0
 80023d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023da:	edc3 7a00 	vstr	s15, [r3]
			Feat_Arr[WVL_IDX]   = FEAT_EXT_u32_WaveformLength(Local_u32_RealData,250);
 80023de:	f607 4338 	addw	r3, r7, #3128	; 0xc38
 80023e2:	21fa      	movs	r1, #250	; 0xfa
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fe65 	bl	80010b4 <FEAT_EXT_u32_WaveformLength>
 80023ea:	ee07 0a90 	vmov	s15, r0
 80023ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023f6:	edc3 7a01 	vstr	s15, [r3, #4]

			/*Normalization*/
			Norm_Arr[VAR_IDX]  = NORM_f32_Variance(SNS1, Feat_Arr[VAR_IDX]);
 80023fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fe:	ed53 7a03 	vldr	s15, [r3, #-12]
 8002402:	eeb0 0a67 	vmov.f32	s0, s15
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff f996 	bl	8001738 <NORM_f32_Variance>
 800240c:	eef0 7a40 	vmov.f32	s15, s0
 8002410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002414:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
			Norm_Arr[RMS_IDX]  = NORM_f32_RMS(SNS1, Feat_Arr[RMS_IDX]);
 8002418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800241c:	ed53 7a04 	vldr	s15, [r3, #-16]
 8002420:	eeb0 0a67 	vmov.f32	s0, s15
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff f90b 	bl	8001640 <NORM_f32_RMS>
 800242a:	eef0 7a40 	vmov.f32	s15, s0
 800242e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002432:	ed43 7a0a 	vstr	s15, [r3, #-40]	; 0xffffffd8
			Norm_Arr[MEAN_IDX] = NORM_f32_Mean(SNS1, Feat_Arr[MEAN_IDX]);
 8002436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800243e:	eeb0 0a67 	vmov.f32	s0, s15
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff f9f0 	bl	8001828 <NORM_f32_Mean>
 8002448:	eef0 7a40 	vmov.f32	s15, s0
 800244c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002450:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
			Norm_Arr[SSC_INDX] = NORM_f32_SlopeSignChange(SNS1,Feat_Arr[SSC_INDX]);
 8002454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002458:	ed53 7a01 	vldr	s15, [r3, #-4]
 800245c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002460:	ee17 1a90 	vmov	r1, s15
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe ffaf 	bl	80013c8 <NORM_f32_SlopeSignChange>
 800246a:	eef0 7a40 	vmov.f32	s15, s0
 800246e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002472:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
			Norm_Arr[ZC_IDX]   = NORM_f32_ZeroCrossing(SNS1,Feat_Arr[ZC_IDX]);
 8002476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002482:	ee17 1a90 	vmov	r1, s15
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff f806 	bl	8001498 <NORM_f32_ZeroCrossing>
 800248c:	eef0 7a40 	vmov.f32	s15, s0
 8002490:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002494:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
			Norm_Arr[WVL_IDX]  = NORM_f32_WaveformLength(SNS1, Feat_Arr[WVL_IDX]);
 8002498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249c:	edd3 7a01 	vldr	s15, [r3, #4]
 80024a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a4:	ee17 1a90 	vmov	r1, s15
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff f851 	bl	8001550 <NORM_f32_WaveformLength>
 80024ae:	eef0 7a40 	vmov.f32	s15, s0
 80024b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b6:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec

			/*Model Running*/

			/*Movement 1 Data*/
			in_data[RMS_IDX]  = Norm_Arr[RMS_IDX];
 80024ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024be:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80024c2:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <main+0x65c>)
 80024c4:	6013      	str	r3, [r2, #0]
			in_data[VAR_IDX]  = Norm_Arr[VAR_IDX];
 80024c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ca:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80024ce:	4a47      	ldr	r2, [pc, #284]	; (80025ec <main+0x65c>)
 80024d0:	6053      	str	r3, [r2, #4]
			in_data[MEAN_IDX] = Norm_Arr[MEAN_IDX];
 80024d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024d6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80024da:	4a44      	ldr	r2, [pc, #272]	; (80025ec <main+0x65c>)
 80024dc:	6093      	str	r3, [r2, #8]
			in_data[SSC_INDX] = Norm_Arr[SSC_INDX];
 80024de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024e2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80024e6:	4a41      	ldr	r2, [pc, #260]	; (80025ec <main+0x65c>)
 80024e8:	60d3      	str	r3, [r2, #12]
			in_data[ZC_IDX]   = Norm_Arr[ZC_IDX];
 80024ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ee:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80024f2:	4a3e      	ldr	r2, [pc, #248]	; (80025ec <main+0x65c>)
 80024f4:	6113      	str	r3, [r2, #16]
			in_data[WVL_IDX]  = Norm_Arr[WVL_IDX];
 80024f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fa:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80024fe:	4a3b      	ldr	r2, [pc, #236]	; (80025ec <main+0x65c>)
 8002500:	6153      	str	r3, [r2, #20]

			Model_Run(in_data, out_data);
 8002502:	493b      	ldr	r1, [pc, #236]	; (80025f0 <main+0x660>)
 8002504:	4839      	ldr	r0, [pc, #228]	; (80025ec <main+0x65c>)
 8002506:	f7ff fd17 	bl	8001f38 <Model_Run>

			if(*out_data < MODEL_THRESHOLD)
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <main+0x660>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	d51e      	bpl.n	800255c <main+0x5cc>
			{
				Servo_void_SetAngle(Servo1,180);
 800251e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002522:	f103 0308 	add.w	r3, r3, #8
 8002526:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 800252a:	23b4      	movs	r3, #180	; 0xb4
 800252c:	9310      	str	r3, [sp, #64]	; 0x40
 800252e:	466d      	mov	r5, sp
 8002530:	f106 0410 	add.w	r4, r6, #16
 8002534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002540:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002544:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002548:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800254c:	f000 f8fa 	bl	8002744 <Servo_void_SetAngle>
				Mode--;
 8002550:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <main+0x664>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3b01      	subs	r3, #1
 8002556:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <main+0x664>)
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e01d      	b.n	8002598 <main+0x608>

			}
			else
			{
				Servo_void_SetAngle(Servo1,90);
 800255c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002560:	f103 0308 	add.w	r3, r3, #8
 8002564:	f5a3 6688 	sub.w	r6, r3, #1088	; 0x440
 8002568:	235a      	movs	r3, #90	; 0x5a
 800256a:	9310      	str	r3, [sp, #64]	; 0x40
 800256c:	466d      	mov	r5, sp
 800256e:	f106 0410 	add.w	r4, r6, #16
 8002572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002582:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002586:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800258a:	f000 f8db 	bl	8002744 <Servo_void_SetAngle>
				Mode++;
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <main+0x664>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <main+0x664>)
 8002596:	6013      	str	r3, [r2, #0]
		for(Local_u32AvgCounter = 0 ; Local_u32AvgCounter < 3; Local_u32AvgCounter++)
 8002598:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3301      	adds	r3, #1
 80025a0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	f67f ae8a 	bls.w	80022c6 <main+0x336>
			}
		}

		if(Mode < 0)
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <main+0x664>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da06      	bge.n	80025c8 <main+0x638>
		{
			Fest = 100;
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <main+0x668>)
 80025bc:	2264      	movs	r2, #100	; 0x64
 80025be:	601a      	str	r2, [r3, #0]
			Gun = 0;
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <main+0x66c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e005      	b.n	80025d4 <main+0x644>
		}
		else
		{
			Fest = 0;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <main+0x668>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
			Gun = 100;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <main+0x66c>)
 80025d0:	2264      	movs	r2, #100	; 0x64
 80025d2:	601a      	str	r2, [r3, #0]
		}

		HAL_Delay(500);
 80025d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d8:	f000 fdbc 	bl	8003154 <HAL_Delay>
		Mode = 0;
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <main+0x664>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
		for(Local_u32AvgCounter = 0 ; Local_u32AvgCounter < 3; Local_u32AvgCounter++)
 80025e2:	e66b      	b.n	80022bc <main+0x32c>
 80025e4:	200005dc 	.word	0x200005dc
 80025e8:	200006bc 	.word	0x200006bc
 80025ec:	20000720 	.word	0x20000720
 80025f0:	20000740 	.word	0x20000740
 80025f4:	200006c8 	.word	0x200006c8
 80025f8:	200006c0 	.word	0x200006c0
 80025fc:	200006c4 	.word	0x200006c4

08002600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b094      	sub	sp, #80	; 0x50
 8002604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	2234      	movs	r2, #52	; 0x34
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f006 fc8c 	bl	8008f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <SystemClock_Config+0xd0>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <SystemClock_Config+0xd0>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	6413      	str	r3, [r2, #64]	; 0x40
 8002634:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <SystemClock_Config+0xd0>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002640:	2300      	movs	r3, #0
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <SystemClock_Config+0xd4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800264c:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <SystemClock_Config+0xd4>)
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <SystemClock_Config+0xd4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002660:	2302      	movs	r3, #2
 8002662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002664:	2301      	movs	r3, #1
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002668:	2310      	movs	r3, #16
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266c:	2302      	movs	r3, #2
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002670:	2300      	movs	r3, #0
 8002672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002674:	2308      	movs	r3, #8
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8002678:	235a      	movs	r3, #90	; 0x5a
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800267c:	2302      	movs	r3, #2
 800267e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002680:	2302      	movs	r3, #2
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002684:	2302      	movs	r3, #2
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4618      	mov	r0, r3
 800268e:	f002 f977 	bl	8004980 <HAL_RCC_OscConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002698:	f000 f81e 	bl	80026d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269c:	230f      	movs	r3, #15
 800269e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a0:	2302      	movs	r3, #2
 80026a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	2102      	movs	r1, #2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 fe17 	bl	80042ec <HAL_RCC_ClockConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80026c4:	f000 f808 	bl	80026d8 <Error_Handler>
  }
}
 80026c8:	bf00      	nop
 80026ca:	3750      	adds	r7, #80	; 0x50
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40007000 	.word	0x40007000

080026d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026dc:	b672      	cpsid	i
}
 80026de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80026e0:	e7fe      	b.n	80026e0 <Error_Handler+0x8>
	...

080026e4 <analogRead>:
 */

#include "sensor_readings.h"
ADC_HandleTypeDef* hadc_g; // hold the address from the argument of the function
uint32_t analogRead(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	// Get ADC value
	hadc_g = hadc;
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <analogRead+0x5c>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
	uint32_t raw;

	if(HAL_ADC_Start(hadc_g) != HAL_OK)
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <analogRead+0x5c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fd94 	bl	8003224 <HAL_ADC_Start>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <analogRead+0x22>
		Error_Handler();
 8002702:	f7ff ffe9 	bl	80026d8 <Error_Handler>

	HAL_ADC_PollForConversion(hadc_g, HAL_MAX_DELAY);
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <analogRead+0x5c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f04f 31ff 	mov.w	r1, #4294967295
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fe5a 	bl	80033c8 <HAL_ADC_PollForConversion>

	if((HAL_ADC_GetState(hadc_g) & HAL_ADC_STATE_REG_EOC) == HAL_ADC_STATE_REG_EOC)
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <analogRead+0x5c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f001 f94d 	bl	80039b8 <HAL_ADC_GetState>
 800271e:	4603      	mov	r3, r0
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002728:	d105      	bne.n	8002736 <analogRead+0x52>
		raw = HAL_ADC_GetValue(hadc_g);
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <analogRead+0x5c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f000 ffe5 	bl	80036fe <HAL_ADC_GetValue>
 8002734:	60f8      	str	r0, [r7, #12]

	return raw;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000074c 	.word	0x2000074c

08002744 <Servo_void_SetAngle>:
#include "servo.h"
#include "MAPPING.h"


void Servo_void_SetAngle(SERVO_t Copy_ServoMotor,uint32_t Copy_int32_Angle)
{
 8002744:	b084      	sub	sp, #16
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af02      	add	r7, sp, #8
 800274c:	f107 0c10 	add.w	ip, r7, #16
 8002750:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t Local_int32_MappedValue;

	Local_int32_MappedValue = Mapping(SERVO_MIN_ANGLE, SERVO_MAX_ANGLE, SERVO_MIN_INPUT, SERVO_MAX_INPUT, SERVO_MIN_INPUT,Copy_int32_Angle);
 8002754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2319      	movs	r3, #25
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	237d      	movs	r3, #125	; 0x7d
 800275e:	2219      	movs	r2, #25
 8002760:	21b4      	movs	r1, #180	; 0xb4
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fe0f 	bl	8001386 <Mapping>
 8002768:	4603      	mov	r3, r0
 800276a:	607b      	str	r3, [r7, #4]

	switch(Copy_ServoMotor.Pin)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d843      	bhi.n	80027fa <Servo_void_SetAngle+0xb6>
 8002772:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <Servo_void_SetAngle+0x34>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	0800278d 	.word	0x0800278d
 800277c:	080027a3 	.word	0x080027a3
 8002780:	080027b9 	.word	0x080027b9
 8002784:	080027cf 	.word	0x080027cf
 8002788:	080027e5 	.word	0x080027e5
	{
	case Servo_PA15 : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel1;break;
 800278c:	4a22      	ldr	r2, [pc, #136]	; (8002818 <Servo_void_SetAngle+0xd4>)
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4611      	mov	r1, r2
 8002794:	2248      	movs	r2, #72	; 0x48
 8002796:	4618      	mov	r0, r3
 8002798:	f006 fbba 	bl	8008f10 <memcpy>
 800279c:	2300      	movs	r3, #0
 800279e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a0:	e02b      	b.n	80027fa <Servo_void_SetAngle+0xb6>
	case Servo_PB2  : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel4;break;
 80027a2:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <Servo_void_SetAngle+0xd4>)
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4611      	mov	r1, r2
 80027aa:	2248      	movs	r2, #72	; 0x48
 80027ac:	4618      	mov	r0, r3
 80027ae:	f006 fbaf 	bl	8008f10 <memcpy>
 80027b2:	2303      	movs	r3, #3
 80027b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b6:	e020      	b.n	80027fa <Servo_void_SetAngle+0xb6>
	case Servo_PB9  : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel2;break;
 80027b8:	4a17      	ldr	r2, [pc, #92]	; (8002818 <Servo_void_SetAngle+0xd4>)
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4611      	mov	r1, r2
 80027c0:	2248      	movs	r2, #72	; 0x48
 80027c2:	4618      	mov	r0, r3
 80027c4:	f006 fba4 	bl	8008f10 <memcpy>
 80027c8:	2301      	movs	r3, #1
 80027ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027cc:	e015      	b.n	80027fa <Servo_void_SetAngle+0xb6>
	case Servo_PB10 : Copy_ServoMotor.htim = htim2;  Copy_ServoMotor.Channel = PWM_Channel3;break;
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <Servo_void_SetAngle+0xd4>)
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4611      	mov	r1, r2
 80027d6:	2248      	movs	r2, #72	; 0x48
 80027d8:	4618      	mov	r0, r3
 80027da:	f006 fb99 	bl	8008f10 <memcpy>
 80027de:	2302      	movs	r3, #2
 80027e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027e2:	e00a      	b.n	80027fa <Servo_void_SetAngle+0xb6>
	case Servo_PB14 : Copy_ServoMotor.htim = htim12; Copy_ServoMotor.Channel = PWM_Channel1;break;
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <Servo_void_SetAngle+0xd8>)
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4611      	mov	r1, r2
 80027ec:	2248      	movs	r2, #72	; 0x48
 80027ee:	4618      	mov	r0, r3
 80027f0:	f006 fb8e 	bl	8008f10 <memcpy>
 80027f4:	2300      	movs	r3, #0
 80027f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027f8:	bf00      	nop

	}
	PWM_int32SetPWMValue(Copy_ServoMotor.htim.Instance, Copy_ServoMotor.Channel, Local_int32_MappedValue);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80027fe:	4611      	mov	r1, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f888 	bl	8001918 <PWM_int32SetPWMValue>

}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002812:	b004      	add	sp, #16
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000750 	.word	0x20000750
 800281c:	20000828 	.word	0x20000828

08002820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_MspInit+0x4c>)
 8002830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_MspInit+0x4c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_MspInit+0x4c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a08      	ldr	r2, [pc, #32]	; (800286c <HAL_MspInit+0x4c>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_MspInit+0x4c>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800285e:	2007      	movs	r0, #7
 8002860:	f001 fa8c 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <NMI_Handler+0x4>

08002876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <HardFault_Handler+0x4>

0800287c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <MemManage_Handler+0x4>

08002882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002886:	e7fe      	b.n	8002886 <BusFault_Handler+0x4>

08002888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800288c:	e7fe      	b.n	800288c <UsageFault_Handler+0x4>

0800288e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028bc:	f000 fc2a 	bl	8003114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028c8:	4805      	ldr	r0, [pc, #20]	; (80028e0 <ADC_IRQHandler+0x1c>)
 80028ca:	f000 fe08 	bl	80034de <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <ADC_IRQHandler+0x20>)
 80028d0:	f000 fe05 	bl	80034de <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80028d4:	4804      	ldr	r0, [pc, #16]	; (80028e8 <ADC_IRQHandler+0x24>)
 80028d6:	f000 fe02 	bl	80034de <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200005dc 	.word	0x200005dc
 80028e4:	20000624 	.word	0x20000624
 80028e8:	2000066c 	.word	0x2000066c

080028ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028f2:	f002 fcc5 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000798 	.word	0x20000798

08002900 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002904:	4802      	ldr	r0, [pc, #8]	; (8002910 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002906:	f002 fcbb 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200007e0 	.word	0x200007e0

08002914 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <TIM2_IRQHandler+0x10>)
 800291a:	f002 fcb1 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000750 	.word	0x20000750

08002928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <USART2_IRQHandler+0x10>)
 800292e:	f003 fb4f 	bl	8005fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000900 	.word	0x20000900

0800293c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002942:	f002 fc9d 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000828 	.word	0x20000828

08002950 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002956:	f002 fc93 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000870 	.word	0x20000870

08002964 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800296a:	f002 fc89 	bl	8005280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200008b8 	.word	0x200008b8

08002978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <SystemInit+0x20>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <SystemInit+0x20>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08e      	sub	sp, #56	; 0x38
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	f107 0320 	add.w	r3, r7, #32
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
 80029c8:	615a      	str	r2, [r3, #20]
 80029ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029cc:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 80029ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 80029d4:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 80029d6:	f240 3283 	movw	r2, #899	; 0x383
 80029da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029dc:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80029e2:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 80029e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029f0:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029f6:	4834      	ldr	r0, [pc, #208]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 80029f8:	f002 fa60 	bl	8004ebc <HAL_TIM_Base_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002a02:	f7ff fe69 	bl	80026d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a10:	4619      	mov	r1, r3
 8002a12:	482d      	ldr	r0, [pc, #180]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 8002a14:	f002 fdfe 	bl	8005614 <HAL_TIM_ConfigClockSource>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002a1e:	f7ff fe5b 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a22:	4829      	ldr	r0, [pc, #164]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 8002a24:	f002 fb0a 	bl	800503c <HAL_TIM_PWM_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002a2e:	f7ff fe53 	bl	80026d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a3a:	f107 0320 	add.w	r3, r7, #32
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4821      	ldr	r0, [pc, #132]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 8002a42:	f003 f9e7 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002a4c:	f7ff fe44 	bl	80026d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a50:	2360      	movs	r3, #96	; 0x60
 8002a52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	2200      	movs	r2, #0
 8002a64:	4619      	mov	r1, r3
 8002a66:	4818      	ldr	r0, [pc, #96]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 8002a68:	f002 fd12 	bl	8005490 <HAL_TIM_PWM_ConfigChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002a72:	f7ff fe31 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a76:	1d3b      	adds	r3, r7, #4
 8002a78:	2204      	movs	r2, #4
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4812      	ldr	r0, [pc, #72]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 8002a7e:	f002 fd07 	bl	8005490 <HAL_TIM_PWM_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002a88:	f7ff fe26 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2208      	movs	r2, #8
 8002a90:	4619      	mov	r1, r3
 8002a92:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 8002a94:	f002 fcfc 	bl	8005490 <HAL_TIM_PWM_ConfigChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002a9e:	f7ff fe1b 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	220c      	movs	r2, #12
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 8002aaa:	f002 fcf1 	bl	8005490 <HAL_TIM_PWM_ConfigChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002ab4:	f7ff fe10 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ab8:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <MX_TIM2_Init+0x12c>)
 8002aba:	f000 f9b5 	bl	8002e28 <HAL_TIM_MspPostInit>

}
 8002abe:	bf00      	nop
 8002ac0:	3738      	adds	r7, #56	; 0x38
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000750 	.word	0x20000750

08002acc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_TIM10_Init+0x40>)
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <MX_TIM10_Init+0x44>)
 8002ad4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <MX_TIM10_Init+0x40>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <MX_TIM10_Init+0x40>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <MX_TIM10_Init+0x40>)
 8002ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ae8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <MX_TIM10_Init+0x40>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <MX_TIM10_Init+0x40>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_TIM10_Init+0x40>)
 8002af8:	f002 f9e0 	bl	8004ebc <HAL_TIM_Base_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002b02:	f7ff fde9 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000798 	.word	0x20000798
 8002b10:	40014400 	.word	0x40014400

08002b14 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <MX_TIM11_Init+0x40>)
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <MX_TIM11_Init+0x44>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <MX_TIM11_Init+0x40>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <MX_TIM11_Init+0x40>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <MX_TIM11_Init+0x40>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <MX_TIM11_Init+0x40>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <MX_TIM11_Init+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b3e:	4805      	ldr	r0, [pc, #20]	; (8002b54 <MX_TIM11_Init+0x40>)
 8002b40:	f002 f9bc 	bl	8004ebc <HAL_TIM_Base_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002b4a:	f7ff fdc5 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200007e0 	.word	0x200007e0
 8002b58:	40014800 	.word	0x40014800

08002b5c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b62:	f107 0320 	add.w	r3, r7, #32
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	615a      	str	r2, [r3, #20]
 8002b80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002b84:	4a25      	ldr	r2, [pc, #148]	; (8002c1c <MX_TIM12_Init+0xc0>)
 8002b86:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002b94:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b9a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002ba8:	481b      	ldr	r0, [pc, #108]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002baa:	f002 f987 	bl	8004ebc <HAL_TIM_Base_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002bb4:	f7ff fd90 	bl	80026d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002bbe:	f107 0320 	add.w	r3, r7, #32
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4814      	ldr	r0, [pc, #80]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002bc6:	f002 fd25 	bl	8005614 <HAL_TIM_ConfigClockSource>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002bd0:	f7ff fd82 	bl	80026d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002bd4:	4810      	ldr	r0, [pc, #64]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002bd6:	f002 fa31 	bl	800503c <HAL_TIM_PWM_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002be0:	f7ff fd7a 	bl	80026d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be4:	2360      	movs	r3, #96	; 0x60
 8002be6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4807      	ldr	r0, [pc, #28]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002bfc:	f002 fc48 	bl	8005490 <HAL_TIM_PWM_ConfigChannel>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002c06:	f7ff fd67 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002c0a:	4803      	ldr	r0, [pc, #12]	; (8002c18 <MX_TIM12_Init+0xbc>)
 8002c0c:	f000 f90c 	bl	8002e28 <HAL_TIM_MspPostInit>

}
 8002c10:	bf00      	nop
 8002c12:	3730      	adds	r7, #48	; 0x30
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000828 	.word	0x20000828
 8002c1c:	40001800 	.word	0x40001800

08002c20 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <MX_TIM13_Init+0x40>)
 8002c26:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <MX_TIM13_Init+0x44>)
 8002c28:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <MX_TIM13_Init+0x40>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <MX_TIM13_Init+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <MX_TIM13_Init+0x40>)
 8002c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c3c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <MX_TIM13_Init+0x40>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <MX_TIM13_Init+0x40>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002c4a:	4805      	ldr	r0, [pc, #20]	; (8002c60 <MX_TIM13_Init+0x40>)
 8002c4c:	f002 f936 	bl	8004ebc <HAL_TIM_Base_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002c56:	f7ff fd3f 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000870 	.word	0x20000870
 8002c64:	40001c00 	.word	0x40001c00

08002c68 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <MX_TIM14_Init+0x40>)
 8002c6e:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <MX_TIM14_Init+0x44>)
 8002c70:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <MX_TIM14_Init+0x40>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <MX_TIM14_Init+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <MX_TIM14_Init+0x40>)
 8002c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c84:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <MX_TIM14_Init+0x40>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <MX_TIM14_Init+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <MX_TIM14_Init+0x40>)
 8002c94:	f002 f912 	bl	8004ebc <HAL_TIM_Base_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002c9e:	f7ff fd1b 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200008b8 	.word	0x200008b8
 8002cac:	40002000 	.word	0x40002000

08002cb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc0:	d116      	bne.n	8002cf0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	4b52      	ldr	r3, [pc, #328]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	4a51      	ldr	r2, [pc, #324]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd2:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	201c      	movs	r0, #28
 8002ce4:	f001 f855 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ce8:	201c      	movs	r0, #28
 8002cea:	f001 f86e 	bl	8003dca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002cee:	e08a      	b.n	8002e06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM10)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a47      	ldr	r2, [pc, #284]	; (8002e14 <HAL_TIM_Base_MspInit+0x164>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d116      	bne.n	8002d28 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2019      	movs	r0, #25
 8002d1c:	f001 f839 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d20:	2019      	movs	r0, #25
 8002d22:	f001 f852 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8002d26:	e06e      	b.n	8002e06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM11)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a3a      	ldr	r2, [pc, #232]	; (8002e18 <HAL_TIM_Base_MspInit+0x168>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d116      	bne.n	8002d60 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a35      	ldr	r2, [pc, #212]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	201a      	movs	r0, #26
 8002d54:	f001 f81d 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002d58:	201a      	movs	r0, #26
 8002d5a:	f001 f836 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8002d5e:	e052      	b.n	8002e06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM12)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2d      	ldr	r2, [pc, #180]	; (8002e1c <HAL_TIM_Base_MspInit+0x16c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d116      	bne.n	8002d98 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
 8002d86:	2201      	movs	r2, #1
 8002d88:	2100      	movs	r1, #0
 8002d8a:	202b      	movs	r0, #43	; 0x2b
 8002d8c:	f001 f801 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002d90:	202b      	movs	r0, #43	; 0x2b
 8002d92:	f001 f81a 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8002d96:	e036      	b.n	8002e06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM13)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <HAL_TIM_Base_MspInit+0x170>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d116      	bne.n	8002dd0 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	202c      	movs	r0, #44	; 0x2c
 8002dc4:	f000 ffe5 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002dc8:	202c      	movs	r0, #44	; 0x2c
 8002dca:	f000 fffe 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8002dce:	e01a      	b.n	8002e06 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM14)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <HAL_TIM_Base_MspInit+0x174>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d115      	bne.n	8002e06 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_TIM_Base_MspInit+0x160>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	202d      	movs	r0, #45	; 0x2d
 8002dfc:	f000 ffc9 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e00:	202d      	movs	r0, #45	; 0x2d
 8002e02:	f000 ffe2 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40014400 	.word	0x40014400
 8002e18:	40014800 	.word	0x40014800
 8002e1c:	40001800 	.word	0x40001800
 8002e20:	40001c00 	.word	0x40001c00
 8002e24:	40002000 	.word	0x40002000

08002e28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	; 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e48:	d13e      	bne.n	8002ec8 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a31      	ldr	r2, [pc, #196]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_9;
 8002e82:	f240 6304 	movw	r3, #1540	; 0x604
 8002e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e94:	2301      	movs	r3, #1
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481f      	ldr	r0, [pc, #124]	; (8002f1c <HAL_TIM_MspPostInit+0xf4>)
 8002ea0:	f001 f85c 	bl	8003f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4817      	ldr	r0, [pc, #92]	; (8002f20 <HAL_TIM_MspPostInit+0xf8>)
 8002ec2:	f001 f84b 	bl	8003f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002ec6:	e023      	b.n	8002f10 <HAL_TIM_MspPostInit+0xe8>
  else if(timHandle->Instance==TIM12)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <HAL_TIM_MspPostInit+0xfc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d11e      	bne.n	8002f10 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_TIM_MspPostInit+0xf0>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002eee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002f00:	2309      	movs	r3, #9
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4804      	ldr	r0, [pc, #16]	; (8002f1c <HAL_TIM_MspPostInit+0xf4>)
 8002f0c:	f001 f826 	bl	8003f5c <HAL_GPIO_Init>
}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40001800 	.word	0x40001800

08002f28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <MX_USART2_UART_Init+0x50>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f5e:	4805      	ldr	r0, [pc, #20]	; (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f60:	f002 ffe8 	bl	8005f34 <HAL_UART_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f6a:	f7ff fbb5 	bl	80026d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000900 	.word	0x20000900
 8002f78:	40004400 	.word	0x40004400

08002f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_UART_MspInit+0x94>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d133      	bne.n	8003006 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fe6:	2307      	movs	r3, #7
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4809      	ldr	r0, [pc, #36]	; (8003018 <HAL_UART_MspInit+0x9c>)
 8002ff2:	f000 ffb3 	bl	8003f5c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2026      	movs	r0, #38	; 0x26
 8002ffc:	f000 fec9 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003000:	2026      	movs	r0, #38	; 0x26
 8003002:	f000 fee2 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003006:	bf00      	nop
 8003008:	3728      	adds	r7, #40	; 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40004400 	.word	0x40004400
 8003014:	40023800 	.word	0x40023800
 8003018:	40020000 	.word	0x40020000

0800301c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800301c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003020:	480d      	ldr	r0, [pc, #52]	; (8003058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003022:	490e      	ldr	r1, [pc, #56]	; (800305c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800302a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800302c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003038:	4c0b      	ldr	r4, [pc, #44]	; (8003068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800303e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003046:	f7ff fc97 	bl	8002978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304a:	f005 ff3d 	bl	8008ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800304e:	f7fe ff9f 	bl	8001f90 <main>
  bx  lr    
 8003052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800305c:	200005b8 	.word	0x200005b8
  ldr r2, =_sidata
 8003060:	0800adc0 	.word	0x0800adc0
  ldr r2, =_sbss
 8003064:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 8003068:	200009d0 	.word	0x200009d0

0800306c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800306c:	e7fe      	b.n	800306c <CAN1_RX0_IRQHandler>
	...

08003070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <HAL_Init+0x40>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_Init+0x40>)
 800307a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_Init+0x40>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <HAL_Init+0x40>)
 8003086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800308a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_Init+0x40>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <HAL_Init+0x40>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003098:	2003      	movs	r0, #3
 800309a:	f000 fe6f 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800309e:	2000      	movs	r0, #0
 80030a0:	f000 f808 	bl	80030b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030a4:	f7ff fbbc 	bl	8002820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40023c00 	.word	0x40023c00

080030b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <HAL_InitTick+0x54>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_InitTick+0x58>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4619      	mov	r1, r3
 80030c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fe87 	bl	8003de6 <HAL_SYSTICK_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e00e      	b.n	8003100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b0f      	cmp	r3, #15
 80030e6:	d80a      	bhi.n	80030fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030e8:	2200      	movs	r2, #0
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295
 80030f0:	f000 fe4f 	bl	8003d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030f4:	4a06      	ldr	r2, [pc, #24]	; (8003110 <HAL_InitTick+0x5c>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000000 	.word	0x20000000
 800310c:	20000008 	.word	0x20000008
 8003110:	20000004 	.word	0x20000004

08003114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_IncTick+0x20>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_IncTick+0x24>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4413      	add	r3, r2
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_IncTick+0x24>)
 8003126:	6013      	str	r3, [r2, #0]
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000008 	.word	0x20000008
 8003138:	20000944 	.word	0x20000944

0800313c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return uwTick;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_GetTick+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000944 	.word	0x20000944

08003154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800315c:	f7ff ffee 	bl	800313c <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d005      	beq.n	800317a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_Delay+0x44>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800317a:	bf00      	nop
 800317c:	f7ff ffde 	bl	800313c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	429a      	cmp	r2, r3
 800318a:	d8f7      	bhi.n	800317c <HAL_Delay+0x28>
  {
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000008 	.word	0x20000008

0800319c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e033      	b.n	800321a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe fcf4 	bl	8001ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d118      	bne.n	800320c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031e2:	f023 0302 	bic.w	r3, r3, #2
 80031e6:	f043 0202 	orr.w	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fbee 	bl	80039d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f023 0303 	bic.w	r3, r3, #3
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
 800320a:	e001      	b.n	8003210 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_ADC_Start+0x1a>
 800323a:	2302      	movs	r3, #2
 800323c:	e0b2      	b.n	80033a4 <HAL_ADC_Start+0x180>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d018      	beq.n	8003286 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003264:	4b52      	ldr	r3, [pc, #328]	; (80033b0 <HAL_ADC_Start+0x18c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_ADC_Start+0x190>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0c9a      	lsrs	r2, r3, #18
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003278:	e002      	b.n	8003280 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3b01      	subs	r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f9      	bne.n	800327a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d17a      	bne.n	800338a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d106      	bne.n	80032e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f023 0206 	bic.w	r2, r3, #6
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_ADC_Start+0x194>)
 80032f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2b00      	cmp	r3, #0
 8003308:	d12a      	bne.n	8003360 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <HAL_ADC_Start+0x198>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d015      	beq.n	8003340 <HAL_ADC_Start+0x11c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a29      	ldr	r2, [pc, #164]	; (80033c0 <HAL_ADC_Start+0x19c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d105      	bne.n	800332a <HAL_ADC_Start+0x106>
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <HAL_ADC_Start+0x194>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <HAL_ADC_Start+0x1a0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d136      	bne.n	80033a2 <HAL_ADC_Start+0x17e>
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_ADC_Start+0x194>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d130      	bne.n	80033a2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d129      	bne.n	80033a2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	e020      	b.n	80033a2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a15      	ldr	r2, [pc, #84]	; (80033bc <HAL_ADC_Start+0x198>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d11b      	bne.n	80033a2 <HAL_ADC_Start+0x17e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d114      	bne.n	80033a2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	e00b      	b.n	80033a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0210 	orr.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	20000000 	.word	0x20000000
 80033b4:	431bde83 	.word	0x431bde83
 80033b8:	40012300 	.word	0x40012300
 80033bc:	40012000 	.word	0x40012000
 80033c0:	40012100 	.word	0x40012100
 80033c4:	40012200 	.word	0x40012200

080033c8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e4:	d113      	bne.n	800340e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f4:	d10b      	bne.n	800340e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e063      	b.n	80034d6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800340e:	f7ff fe95 	bl	800313c <HAL_GetTick>
 8003412:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003414:	e021      	b.n	800345a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d01d      	beq.n	800345a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <HAL_ADC_PollForConversion+0x6c>
 8003424:	f7ff fe8a 	bl	800313c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d212      	bcs.n	800345a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d00b      	beq.n	800345a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0204 	orr.w	r2, r3, #4
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e03d      	b.n	80034d6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b02      	cmp	r3, #2
 8003466:	d1d6      	bne.n	8003416 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0212 	mvn.w	r2, #18
 8003470:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d123      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003490:	2b00      	cmp	r3, #0
 8003492:	d11f      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d006      	beq.n	80034b0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d111      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d105      	bne.n	80034d4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d049      	beq.n	80035a8 <HAL_ADC_IRQHandler+0xca>
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d046      	beq.n	80035a8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b00      	cmp	r3, #0
 8003524:	d105      	bne.n	8003532 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d12b      	bne.n	8003598 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003544:	2b00      	cmp	r3, #0
 8003546:	d127      	bne.n	8003598 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003560:	2b00      	cmp	r3, #0
 8003562:	d119      	bne.n	8003598 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0220 	bic.w	r2, r2, #32
 8003572:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8bd 	bl	8003718 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f06f 0212 	mvn.w	r2, #18
 80035a6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d057      	beq.n	800366e <HAL_ADC_IRQHandler+0x190>
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d054      	beq.n	800366e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d139      	bne.n	800365e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003602:	2b00      	cmp	r3, #0
 8003604:	d12b      	bne.n	800365e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003610:	2b00      	cmp	r3, #0
 8003612:	d124      	bne.n	800365e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003626:	2b00      	cmp	r3, #0
 8003628:	d119      	bne.n	800365e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003638:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fab2 	bl	8003bc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 020c 	mvn.w	r2, #12
 800366c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d017      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x1d6>
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d014      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10d      	bne.n	80036b4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f841 	bl	800372c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0201 	mvn.w	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036c2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x218>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d012      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d4:	f043 0202 	orr.w	r2, r3, #2
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0220 	mvn.w	r2, #32
 80036e4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f82a 	bl	8003740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0220 	mvn.w	r2, #32
 80036f4:	601a      	str	r2, [r3, #0]
  }
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x1c>
 800376c:	2302      	movs	r3, #2
 800376e:	e113      	b.n	8003998 <HAL_ADC_ConfigChannel+0x244>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b09      	cmp	r3, #9
 800377e:	d925      	bls.n	80037cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68d9      	ldr	r1, [r3, #12]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	3b1e      	subs	r3, #30
 8003796:	2207      	movs	r2, #7
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43da      	mvns	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	400a      	ands	r2, r1
 80037a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68d9      	ldr	r1, [r3, #12]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4618      	mov	r0, r3
 80037b8:	4603      	mov	r3, r0
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4403      	add	r3, r0
 80037be:	3b1e      	subs	r3, #30
 80037c0:	409a      	lsls	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	e022      	b.n	8003812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6919      	ldr	r1, [r3, #16]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	2207      	movs	r2, #7
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	400a      	ands	r2, r1
 80037ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6919      	ldr	r1, [r3, #16]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	4603      	mov	r3, r0
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4403      	add	r3, r0
 8003808:	409a      	lsls	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b06      	cmp	r3, #6
 8003818:	d824      	bhi.n	8003864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	3b05      	subs	r3, #5
 800382c:	221f      	movs	r2, #31
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	400a      	ands	r2, r1
 800383a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	4618      	mov	r0, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	3b05      	subs	r3, #5
 8003856:	fa00 f203 	lsl.w	r2, r0, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	635a      	str	r2, [r3, #52]	; 0x34
 8003862:	e04c      	b.n	80038fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b0c      	cmp	r3, #12
 800386a:	d824      	bhi.n	80038b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	3b23      	subs	r3, #35	; 0x23
 800387e:	221f      	movs	r2, #31
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43da      	mvns	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	400a      	ands	r2, r1
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	4618      	mov	r0, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	3b23      	subs	r3, #35	; 0x23
 80038a8:	fa00 f203 	lsl.w	r2, r0, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
 80038b4:	e023      	b.n	80038fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3b41      	subs	r3, #65	; 0x41
 80038c8:	221f      	movs	r2, #31
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	400a      	ands	r2, r1
 80038d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4618      	mov	r0, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	3b41      	subs	r3, #65	; 0x41
 80038f2:	fa00 f203 	lsl.w	r2, r0, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038fe:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <HAL_ADC_ConfigChannel+0x250>)
 8003900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <HAL_ADC_ConfigChannel+0x254>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10f      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1d8>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b12      	cmp	r3, #18
 8003912:	d10b      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <HAL_ADC_ConfigChannel+0x254>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d12b      	bne.n	800398e <HAL_ADC_ConfigChannel+0x23a>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <HAL_ADC_ConfigChannel+0x258>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <HAL_ADC_ConfigChannel+0x1f4>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b11      	cmp	r3, #17
 8003946:	d122      	bne.n	800398e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a11      	ldr	r2, [pc, #68]	; (80039ac <HAL_ADC_ConfigChannel+0x258>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800396a:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_ADC_ConfigChannel+0x25c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <HAL_ADC_ConfigChannel+0x260>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	0c9a      	lsrs	r2, r3, #18
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003980:	e002      	b.n	8003988 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3b01      	subs	r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f9      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40012300 	.word	0x40012300
 80039a8:	40012000 	.word	0x40012000
 80039ac:	10000012 	.word	0x10000012
 80039b0:	20000000 	.word	0x20000000
 80039b4:	431bde83 	.word	0x431bde83

080039b8 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d8:	4b79      	ldr	r3, [pc, #484]	; (8003bc0 <ADC_Init+0x1f0>)
 80039da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	021a      	lsls	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <ADC_Init+0x1f4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d022      	beq.n	8003aae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6899      	ldr	r1, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6899      	ldr	r1, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	e00f      	b.n	8003ace <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0202 	bic.w	r2, r2, #2
 8003adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	7e1b      	ldrb	r3, [r3, #24]
 8003ae8:	005a      	lsls	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01b      	beq.n	8003b34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	3b01      	subs	r3, #1
 8003b28:	035a      	lsls	r2, r3, #13
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	e007      	b.n	8003b44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	051a      	lsls	r2, r3, #20
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b86:	025a      	lsls	r2, r3, #9
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6899      	ldr	r1, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	029a      	lsls	r2, r3, #10
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40012300 	.word	0x40012300
 8003bc4:	0f000001 	.word	0x0f000001

08003bc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0e:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	60d3      	str	r3, [r2, #12]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <__NVIC_GetPriorityGrouping+0x18>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	f003 0307 	and.w	r3, r3, #7
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db0b      	blt.n	8003c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	f003 021f 	and.w	r2, r3, #31
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <__NVIC_EnableIRQ+0x38>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2001      	movs	r0, #1
 8003c62:	fa00 f202 	lsl.w	r2, r0, r2
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	; (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	; (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d48:	d301      	bcc.n	8003d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e00f      	b.n	8003d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <SysTick_Config+0x40>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d56:	210f      	movs	r1, #15
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	f7ff ff8e 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <SysTick_Config+0x40>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <SysTick_Config+0x40>)
 8003d68:	2207      	movs	r2, #7
 8003d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000e010 	.word	0xe000e010

08003d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff29 	bl	8003bdc <__NVIC_SetPriorityGrouping>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da4:	f7ff ff3e 	bl	8003c24 <__NVIC_GetPriorityGrouping>
 8003da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff ff8e 	bl	8003cd0 <NVIC_EncodePriority>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff5d 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff31 	bl	8003c40 <__NVIC_EnableIRQ>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffa2 	bl	8003d38 <SysTick_Config>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e00e      	b.n	8003e2e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	795b      	ldrb	r3, [r3, #5]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fd ff93 	bl	8001d4c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7ff f97a 	bl	800313c <HAL_GetTick>
 8003e48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d008      	beq.n	8003e68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2280      	movs	r2, #128	; 0x80
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e052      	b.n	8003f0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0216 	bic.w	r2, r2, #22
 8003e76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d103      	bne.n	8003e98 <HAL_DMA_Abort+0x62>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0208 	bic.w	r2, r2, #8
 8003ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb8:	e013      	b.n	8003ee2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eba:	f7ff f93f 	bl	800313c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d90c      	bls.n	8003ee2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e015      	b.n	8003f0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e4      	bne.n	8003eba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	223f      	movs	r2, #63	; 0x3f
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d004      	beq.n	8003f34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e00c      	b.n	8003f4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2205      	movs	r2, #5
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e165      	b.n	8004244 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	f040 8154 	bne.w	800423e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d005      	beq.n	8003fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d130      	bne.n	8004010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2203      	movs	r2, #3
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 0201 	and.w	r2, r3, #1
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b03      	cmp	r3, #3
 800401a:	d017      	beq.n	800404c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	2203      	movs	r2, #3
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4013      	ands	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d123      	bne.n	80040a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	08da      	lsrs	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3208      	adds	r2, #8
 8004060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	220f      	movs	r2, #15
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	08da      	lsrs	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3208      	adds	r2, #8
 800409a:	69b9      	ldr	r1, [r7, #24]
 800409c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	2203      	movs	r2, #3
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0203 	and.w	r2, r3, #3
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80ae 	beq.w	800423e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b5d      	ldr	r3, [pc, #372]	; (800425c <HAL_GPIO_Init+0x300>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	4a5c      	ldr	r2, [pc, #368]	; (800425c <HAL_GPIO_Init+0x300>)
 80040ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f0:	6453      	str	r3, [r2, #68]	; 0x44
 80040f2:	4b5a      	ldr	r3, [pc, #360]	; (800425c <HAL_GPIO_Init+0x300>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040fe:	4a58      	ldr	r2, [pc, #352]	; (8004260 <HAL_GPIO_Init+0x304>)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	3302      	adds	r3, #2
 8004106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	220f      	movs	r2, #15
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4f      	ldr	r2, [pc, #316]	; (8004264 <HAL_GPIO_Init+0x308>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d025      	beq.n	8004176 <HAL_GPIO_Init+0x21a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4e      	ldr	r2, [pc, #312]	; (8004268 <HAL_GPIO_Init+0x30c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01f      	beq.n	8004172 <HAL_GPIO_Init+0x216>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4d      	ldr	r2, [pc, #308]	; (800426c <HAL_GPIO_Init+0x310>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d019      	beq.n	800416e <HAL_GPIO_Init+0x212>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4c      	ldr	r2, [pc, #304]	; (8004270 <HAL_GPIO_Init+0x314>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d013      	beq.n	800416a <HAL_GPIO_Init+0x20e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4b      	ldr	r2, [pc, #300]	; (8004274 <HAL_GPIO_Init+0x318>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00d      	beq.n	8004166 <HAL_GPIO_Init+0x20a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4a      	ldr	r2, [pc, #296]	; (8004278 <HAL_GPIO_Init+0x31c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <HAL_GPIO_Init+0x206>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a49      	ldr	r2, [pc, #292]	; (800427c <HAL_GPIO_Init+0x320>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_GPIO_Init+0x202>
 800415a:	2306      	movs	r3, #6
 800415c:	e00c      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 800415e:	2307      	movs	r3, #7
 8004160:	e00a      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 8004162:	2305      	movs	r3, #5
 8004164:	e008      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 8004166:	2304      	movs	r3, #4
 8004168:	e006      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 800416a:	2303      	movs	r3, #3
 800416c:	e004      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 800416e:	2302      	movs	r3, #2
 8004170:	e002      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_GPIO_Init+0x21c>
 8004176:	2300      	movs	r3, #0
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	f002 0203 	and.w	r2, r2, #3
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	4093      	lsls	r3, r2
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004188:	4935      	ldr	r1, [pc, #212]	; (8004260 <HAL_GPIO_Init+0x304>)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	3302      	adds	r3, #2
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004196:	4b3a      	ldr	r3, [pc, #232]	; (8004280 <HAL_GPIO_Init+0x324>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ba:	4a31      	ldr	r2, [pc, #196]	; (8004280 <HAL_GPIO_Init+0x324>)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_GPIO_Init+0x324>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041e4:	4a26      	ldr	r2, [pc, #152]	; (8004280 <HAL_GPIO_Init+0x324>)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ea:	4b25      	ldr	r3, [pc, #148]	; (8004280 <HAL_GPIO_Init+0x324>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4013      	ands	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_GPIO_Init+0x324>)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_GPIO_Init+0x324>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004238:	4a11      	ldr	r2, [pc, #68]	; (8004280 <HAL_GPIO_Init+0x324>)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3301      	adds	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b0f      	cmp	r3, #15
 8004248:	f67f ae96 	bls.w	8003f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3724      	adds	r7, #36	; 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	40013800 	.word	0x40013800
 8004264:	40020000 	.word	0x40020000
 8004268:	40020400 	.word	0x40020400
 800426c:	40020800 	.word	0x40020800
 8004270:	40020c00 	.word	0x40020c00
 8004274:	40021000 	.word	0x40021000
 8004278:	40021400 	.word	0x40021400
 800427c:	40021800 	.word	0x40021800
 8004280:	40013c00 	.word	0x40013c00

08004284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
 8004290:	4613      	mov	r3, r2
 8004292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a0:	e003      	b.n	80042aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	041a      	lsls	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	619a      	str	r2, [r3, #24]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042c8:	887a      	ldrh	r2, [r7, #2]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4013      	ands	r3, r2
 80042ce:	041a      	lsls	r2, r3, #16
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	43d9      	mvns	r1, r3
 80042d4:	887b      	ldrh	r3, [r7, #2]
 80042d6:	400b      	ands	r3, r1
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	619a      	str	r2, [r3, #24]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0cc      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d90c      	bls.n	8004328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b65      	ldr	r3, [pc, #404]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b63      	ldr	r3, [pc, #396]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0b8      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004340:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a58      	ldr	r2, [pc, #352]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800434a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004358:	4b53      	ldr	r3, [pc, #332]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a52      	ldr	r2, [pc, #328]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004364:	4b50      	ldr	r3, [pc, #320]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	494d      	ldr	r1, [pc, #308]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d044      	beq.n	800440c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	4b47      	ldr	r3, [pc, #284]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d119      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e07f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	4b3f      	ldr	r3, [pc, #252]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e06f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e067      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4934      	ldr	r1, [pc, #208]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043dc:	f7fe feae 	bl	800313c <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fe feaa 	bl	800313c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e04f      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d20c      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 030f 	and.w	r3, r3, #15
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e032      	b.n	800449a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4916      	ldr	r1, [pc, #88]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	490e      	ldr	r1, [pc, #56]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004472:	f000 f855 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 8004476:	4602      	mov	r2, r0
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	490a      	ldr	r1, [pc, #40]	; (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004484:	5ccb      	ldrb	r3, [r1, r3]
 8004486:	fa22 f303 	lsr.w	r3, r2, r3
 800448a:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe fe0e 	bl	80030b4 <HAL_InitTick>

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023c00 	.word	0x40023c00
 80044a8:	40023800 	.word	0x40023800
 80044ac:	0800ac28 	.word	0x0800ac28
 80044b0:	20000000 	.word	0x20000000
 80044b4:	20000004 	.word	0x20000004

080044b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	; (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000000 	.word	0x20000000

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a9b      	lsrs	r3, r3, #10
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	0800ac38 	.word	0x0800ac38

080044f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044fc:	f7ff ffdc 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004500:	4602      	mov	r2, r0
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	0b5b      	lsrs	r3, r3, #13
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	4903      	ldr	r1, [pc, #12]	; (800451c <HAL_RCC_GetPCLK2Freq+0x24>)
 800450e:	5ccb      	ldrb	r3, [r1, r3]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004514:	4618      	mov	r0, r3
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023800 	.word	0x40023800
 800451c:	0800ac38 	.word	0x0800ac38

08004520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004524:	b0ae      	sub	sp, #184	; 0xb8
 8004526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004546:	4bcb      	ldr	r3, [pc, #812]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b0c      	cmp	r3, #12
 8004550:	f200 8206 	bhi.w	8004960 <HAL_RCC_GetSysClockFreq+0x440>
 8004554:	a201      	add	r2, pc, #4	; (adr r2, 800455c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455a:	bf00      	nop
 800455c:	08004591 	.word	0x08004591
 8004560:	08004961 	.word	0x08004961
 8004564:	08004961 	.word	0x08004961
 8004568:	08004961 	.word	0x08004961
 800456c:	08004599 	.word	0x08004599
 8004570:	08004961 	.word	0x08004961
 8004574:	08004961 	.word	0x08004961
 8004578:	08004961 	.word	0x08004961
 800457c:	080045a1 	.word	0x080045a1
 8004580:	08004961 	.word	0x08004961
 8004584:	08004961 	.word	0x08004961
 8004588:	08004961 	.word	0x08004961
 800458c:	08004791 	.word	0x08004791
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4bb9      	ldr	r3, [pc, #740]	; (8004878 <HAL_RCC_GetSysClockFreq+0x358>)
 8004592:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004596:	e1e7      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004598:	4bb8      	ldr	r3, [pc, #736]	; (800487c <HAL_RCC_GetSysClockFreq+0x35c>)
 800459a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800459e:	e1e3      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a0:	4bb4      	ldr	r3, [pc, #720]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ac:	4bb1      	ldr	r3, [pc, #708]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d071      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b8:	4bae      	ldr	r3, [pc, #696]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	099b      	lsrs	r3, r3, #6
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80045c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045de:	4622      	mov	r2, r4
 80045e0:	462b      	mov	r3, r5
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	0159      	lsls	r1, r3, #5
 80045ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f0:	0150      	lsls	r0, r2, #5
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4621      	mov	r1, r4
 80045f8:	1a51      	subs	r1, r2, r1
 80045fa:	6439      	str	r1, [r7, #64]	; 0x40
 80045fc:	4629      	mov	r1, r5
 80045fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004602:	647b      	str	r3, [r7, #68]	; 0x44
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004610:	4649      	mov	r1, r9
 8004612:	018b      	lsls	r3, r1, #6
 8004614:	4641      	mov	r1, r8
 8004616:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800461a:	4641      	mov	r1, r8
 800461c:	018a      	lsls	r2, r1, #6
 800461e:	4641      	mov	r1, r8
 8004620:	1a51      	subs	r1, r2, r1
 8004622:	63b9      	str	r1, [r7, #56]	; 0x38
 8004624:	4649      	mov	r1, r9
 8004626:	eb63 0301 	sbc.w	r3, r3, r1
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004638:	4649      	mov	r1, r9
 800463a:	00cb      	lsls	r3, r1, #3
 800463c:	4641      	mov	r1, r8
 800463e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004642:	4641      	mov	r1, r8
 8004644:	00ca      	lsls	r2, r1, #3
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	4603      	mov	r3, r0
 800464c:	4622      	mov	r2, r4
 800464e:	189b      	adds	r3, r3, r2
 8004650:	633b      	str	r3, [r7, #48]	; 0x30
 8004652:	462b      	mov	r3, r5
 8004654:	460a      	mov	r2, r1
 8004656:	eb42 0303 	adc.w	r3, r2, r3
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004668:	4629      	mov	r1, r5
 800466a:	024b      	lsls	r3, r1, #9
 800466c:	4621      	mov	r1, r4
 800466e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004672:	4621      	mov	r1, r4
 8004674:	024a      	lsls	r2, r1, #9
 8004676:	4610      	mov	r0, r2
 8004678:	4619      	mov	r1, r3
 800467a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800467e:	2200      	movs	r2, #0
 8004680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004684:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004688:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800468c:	f7fc fa78 	bl	8000b80 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4613      	mov	r3, r2
 8004696:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800469a:	e067      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469c:	4b75      	ldr	r3, [pc, #468]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80046ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80046b6:	2300      	movs	r3, #0
 80046b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80046be:	4622      	mov	r2, r4
 80046c0:	462b      	mov	r3, r5
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f04f 0100 	mov.w	r1, #0
 80046ca:	0159      	lsls	r1, r3, #5
 80046cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046d0:	0150      	lsls	r0, r2, #5
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4621      	mov	r1, r4
 80046d8:	1a51      	subs	r1, r2, r1
 80046da:	62b9      	str	r1, [r7, #40]	; 0x28
 80046dc:	4629      	mov	r1, r5
 80046de:	eb63 0301 	sbc.w	r3, r3, r1
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80046f0:	4649      	mov	r1, r9
 80046f2:	018b      	lsls	r3, r1, #6
 80046f4:	4641      	mov	r1, r8
 80046f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046fa:	4641      	mov	r1, r8
 80046fc:	018a      	lsls	r2, r1, #6
 80046fe:	4641      	mov	r1, r8
 8004700:	ebb2 0a01 	subs.w	sl, r2, r1
 8004704:	4649      	mov	r1, r9
 8004706:	eb63 0b01 	sbc.w	fp, r3, r1
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004716:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800471a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800471e:	4692      	mov	sl, r2
 8004720:	469b      	mov	fp, r3
 8004722:	4623      	mov	r3, r4
 8004724:	eb1a 0303 	adds.w	r3, sl, r3
 8004728:	623b      	str	r3, [r7, #32]
 800472a:	462b      	mov	r3, r5
 800472c:	eb4b 0303 	adc.w	r3, fp, r3
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800473e:	4629      	mov	r1, r5
 8004740:	028b      	lsls	r3, r1, #10
 8004742:	4621      	mov	r1, r4
 8004744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004748:	4621      	mov	r1, r4
 800474a:	028a      	lsls	r2, r1, #10
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004754:	2200      	movs	r2, #0
 8004756:	673b      	str	r3, [r7, #112]	; 0x70
 8004758:	677a      	str	r2, [r7, #116]	; 0x74
 800475a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800475e:	f7fc fa0f 	bl	8000b80 <__aeabi_uldivmod>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4613      	mov	r3, r2
 8004768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800476c:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	3301      	adds	r3, #1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800477e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004786:	fbb2 f3f3 	udiv	r3, r2, r3
 800478a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800478e:	e0eb      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004790:	4b38      	ldr	r3, [pc, #224]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800479c:	4b35      	ldr	r3, [pc, #212]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d06b      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a8:	4b32      	ldr	r3, [pc, #200]	; (8004874 <HAL_RCC_GetSysClockFreq+0x354>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	099b      	lsrs	r3, r3, #6
 80047ae:	2200      	movs	r2, #0
 80047b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	663b      	str	r3, [r7, #96]	; 0x60
 80047bc:	2300      	movs	r3, #0
 80047be:	667b      	str	r3, [r7, #100]	; 0x64
 80047c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80047c4:	4622      	mov	r2, r4
 80047c6:	462b      	mov	r3, r5
 80047c8:	f04f 0000 	mov.w	r0, #0
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	0159      	lsls	r1, r3, #5
 80047d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d6:	0150      	lsls	r0, r2, #5
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4621      	mov	r1, r4
 80047de:	1a51      	subs	r1, r2, r1
 80047e0:	61b9      	str	r1, [r7, #24]
 80047e2:	4629      	mov	r1, r5
 80047e4:	eb63 0301 	sbc.w	r3, r3, r1
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80047f6:	4659      	mov	r1, fp
 80047f8:	018b      	lsls	r3, r1, #6
 80047fa:	4651      	mov	r1, sl
 80047fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004800:	4651      	mov	r1, sl
 8004802:	018a      	lsls	r2, r1, #6
 8004804:	4651      	mov	r1, sl
 8004806:	ebb2 0801 	subs.w	r8, r2, r1
 800480a:	4659      	mov	r1, fp
 800480c:	eb63 0901 	sbc.w	r9, r3, r1
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800481c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004820:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004824:	4690      	mov	r8, r2
 8004826:	4699      	mov	r9, r3
 8004828:	4623      	mov	r3, r4
 800482a:	eb18 0303 	adds.w	r3, r8, r3
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	462b      	mov	r3, r5
 8004832:	eb49 0303 	adc.w	r3, r9, r3
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004844:	4629      	mov	r1, r5
 8004846:	024b      	lsls	r3, r1, #9
 8004848:	4621      	mov	r1, r4
 800484a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800484e:	4621      	mov	r1, r4
 8004850:	024a      	lsls	r2, r1, #9
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800485a:	2200      	movs	r2, #0
 800485c:	65bb      	str	r3, [r7, #88]	; 0x58
 800485e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004860:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004864:	f7fc f98c 	bl	8000b80 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4613      	mov	r3, r2
 800486e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004872:	e065      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x420>
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004880:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <HAL_RCC_GetSysClockFreq+0x458>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	2200      	movs	r2, #0
 8004888:	4618      	mov	r0, r3
 800488a:	4611      	mov	r1, r2
 800488c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004890:	653b      	str	r3, [r7, #80]	; 0x50
 8004892:	2300      	movs	r3, #0
 8004894:	657b      	str	r3, [r7, #84]	; 0x54
 8004896:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800489a:	4642      	mov	r2, r8
 800489c:	464b      	mov	r3, r9
 800489e:	f04f 0000 	mov.w	r0, #0
 80048a2:	f04f 0100 	mov.w	r1, #0
 80048a6:	0159      	lsls	r1, r3, #5
 80048a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048ac:	0150      	lsls	r0, r2, #5
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4641      	mov	r1, r8
 80048b4:	1a51      	subs	r1, r2, r1
 80048b6:	60b9      	str	r1, [r7, #8]
 80048b8:	4649      	mov	r1, r9
 80048ba:	eb63 0301 	sbc.w	r3, r3, r1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80048cc:	4659      	mov	r1, fp
 80048ce:	018b      	lsls	r3, r1, #6
 80048d0:	4651      	mov	r1, sl
 80048d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048d6:	4651      	mov	r1, sl
 80048d8:	018a      	lsls	r2, r1, #6
 80048da:	4651      	mov	r1, sl
 80048dc:	1a54      	subs	r4, r2, r1
 80048de:	4659      	mov	r1, fp
 80048e0:	eb63 0501 	sbc.w	r5, r3, r1
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	00eb      	lsls	r3, r5, #3
 80048ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048f2:	00e2      	lsls	r2, r4, #3
 80048f4:	4614      	mov	r4, r2
 80048f6:	461d      	mov	r5, r3
 80048f8:	4643      	mov	r3, r8
 80048fa:	18e3      	adds	r3, r4, r3
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	464b      	mov	r3, r9
 8004900:	eb45 0303 	adc.w	r3, r5, r3
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004912:	4629      	mov	r1, r5
 8004914:	028b      	lsls	r3, r1, #10
 8004916:	4621      	mov	r1, r4
 8004918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800491c:	4621      	mov	r1, r4
 800491e:	028a      	lsls	r2, r1, #10
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004928:	2200      	movs	r2, #0
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
 800492c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800492e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004932:	f7fc f925 	bl	8000b80 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4613      	mov	r3, r2
 800493c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <HAL_RCC_GetSysClockFreq+0x458>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	0f1b      	lsrs	r3, r3, #28
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800494e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800495e:	e003      	b.n	8004968 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004966:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004968:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800496c:	4618      	mov	r0, r3
 800496e:	37b8      	adds	r7, #184	; 0xb8
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400

08004980 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e28d      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8083 	beq.w	8004aa6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049a0:	4b94      	ldr	r3, [pc, #592]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 030c 	and.w	r3, r3, #12
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d019      	beq.n	80049e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049ac:	4b91      	ldr	r3, [pc, #580]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049b8:	4b8e      	ldr	r3, [pc, #568]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c4:	d00c      	beq.n	80049e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c6:	4b8b      	ldr	r3, [pc, #556]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d112      	bne.n	80049f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d2:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049de:	d10b      	bne.n	80049f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	4b84      	ldr	r3, [pc, #528]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05b      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x124>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d157      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e25a      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x90>
 8004a02:	4b7c      	ldr	r3, [pc, #496]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a7b      	ldr	r2, [pc, #492]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e01d      	b.n	8004a4c <HAL_RCC_OscConfig+0xcc>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCC_OscConfig+0xb4>
 8004a1a:	4b76      	ldr	r3, [pc, #472]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a75      	ldr	r2, [pc, #468]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b73      	ldr	r3, [pc, #460]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a72      	ldr	r2, [pc, #456]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e00b      	b.n	8004a4c <HAL_RCC_OscConfig+0xcc>
 8004a34:	4b6f      	ldr	r3, [pc, #444]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a6e      	ldr	r2, [pc, #440]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b6c      	ldr	r3, [pc, #432]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a6b      	ldr	r2, [pc, #428]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d013      	beq.n	8004a7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fe fb72 	bl	800313c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fe fb6e 	bl	800313c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e21f      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6e:	4b61      	ldr	r3, [pc, #388]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0xdc>
 8004a7a:	e014      	b.n	8004aa6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fe fb5e 	bl	800313c <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fe fb5a 	bl	800313c <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e20b      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a96:	4b57      	ldr	r3, [pc, #348]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x104>
 8004aa2:	e000      	b.n	8004aa6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d06f      	beq.n	8004b92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ab2:	4b50      	ldr	r3, [pc, #320]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d017      	beq.n	8004aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004abe:	4b4d      	ldr	r3, [pc, #308]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d105      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ade:	2b0c      	cmp	r3, #12
 8004ae0:	d11c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae2:	4b44      	ldr	r3, [pc, #272]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d116      	bne.n	8004b1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_RCC_OscConfig+0x186>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e1d3      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b06:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4937      	ldr	r1, [pc, #220]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	e03a      	b.n	8004b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b24:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <HAL_RCC_OscConfig+0x278>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fe fb07 	bl	800313c <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b32:	f7fe fb03 	bl	800313c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e1b4      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4925      	ldr	r1, [pc, #148]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
 8004b64:	e015      	b.n	8004b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RCC_OscConfig+0x278>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fae6 	bl	800313c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b74:	f7fe fae2 	bl	800313c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e193      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d036      	beq.n	8004c0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCC_OscConfig+0x27c>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fe fac6 	bl	800313c <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fe fac2 	bl	800313c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e173      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_OscConfig+0x274>)
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x234>
 8004bd2:	e01b      	b.n	8004c0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_OscConfig+0x27c>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bda:	f7fe faaf 	bl	800313c <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be0:	e00e      	b.n	8004c00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be2:	f7fe faab 	bl	800313c <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d907      	bls.n	8004c00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e15c      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	42470000 	.word	0x42470000
 8004bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c00:	4b8a      	ldr	r3, [pc, #552]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ea      	bne.n	8004be2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8097 	beq.w	8004d48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1e:	4b83      	ldr	r3, [pc, #524]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10f      	bne.n	8004c4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	4a7e      	ldr	r2, [pc, #504]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3a:	4b7c      	ldr	r3, [pc, #496]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4a:	4b79      	ldr	r3, [pc, #484]	; (8004e30 <HAL_RCC_OscConfig+0x4b0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d118      	bne.n	8004c88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c56:	4b76      	ldr	r3, [pc, #472]	; (8004e30 <HAL_RCC_OscConfig+0x4b0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a75      	ldr	r2, [pc, #468]	; (8004e30 <HAL_RCC_OscConfig+0x4b0>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c62:	f7fe fa6b 	bl	800313c <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fe fa67 	bl	800313c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e118      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	4b6c      	ldr	r3, [pc, #432]	; (8004e30 <HAL_RCC_OscConfig+0x4b0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d106      	bne.n	8004c9e <HAL_RCC_OscConfig+0x31e>
 8004c90:	4b66      	ldr	r3, [pc, #408]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	4a65      	ldr	r2, [pc, #404]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9c:	e01c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x358>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x340>
 8004ca6:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a60      	ldr	r2, [pc, #384]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb2:	4b5e      	ldr	r3, [pc, #376]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	4a5d      	ldr	r2, [pc, #372]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbe:	e00b      	b.n	8004cd8 <HAL_RCC_OscConfig+0x358>
 8004cc0:	4b5a      	ldr	r3, [pc, #360]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	4a59      	ldr	r2, [pc, #356]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	6713      	str	r3, [r2, #112]	; 0x70
 8004ccc:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	4a56      	ldr	r2, [pc, #344]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004cd2:	f023 0304 	bic.w	r3, r3, #4
 8004cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d015      	beq.n	8004d0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fe fa2c 	bl	800313c <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f7fe fa28 	bl	800313c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e0d7      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfe:	4b4b      	ldr	r3, [pc, #300]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0ee      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x368>
 8004d0a:	e014      	b.n	8004d36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fe fa16 	bl	800313c <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d14:	f7fe fa12 	bl	800313c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0c1      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2a:	4b40      	ldr	r3, [pc, #256]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1ee      	bne.n	8004d14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	4a3a      	ldr	r2, [pc, #232]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80ad 	beq.w	8004eac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d52:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d060      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d145      	bne.n	8004df2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b33      	ldr	r3, [pc, #204]	; (8004e34 <HAL_RCC_OscConfig+0x4b4>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fe f9e6 	bl	800313c <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fe f9e2 	bl	800313c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e093      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	071b      	lsls	r3, r3, #28
 8004dbe:	491b      	ldr	r1, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <HAL_RCC_OscConfig+0x4b4>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dca:	f7fe f9b7 	bl	800313c <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd2:	f7fe f9b3 	bl	800313c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e064      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de4:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x452>
 8004df0:	e05c      	b.n	8004eac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_RCC_OscConfig+0x4b4>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fe f9a0 	bl	800313c <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e00:	f7fe f99c 	bl	800313c <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e04d      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <HAL_RCC_OscConfig+0x4ac>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x480>
 8004e1e:	e045      	b.n	8004eac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d107      	bne.n	8004e38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e040      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40007000 	.word	0x40007000
 8004e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e38:	4b1f      	ldr	r3, [pc, #124]	; (8004eb8 <HAL_RCC_OscConfig+0x538>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d030      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d129      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d122      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e68:	4013      	ands	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d119      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	3b01      	subs	r3, #1
 8004e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d10f      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d107      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d001      	beq.n	8004eac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800

08004ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e041      	b.n	8004f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fd fee4 	bl	8002cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f000 fc7a 	bl	80057f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d001      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e04e      	b.n	8005012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a23      	ldr	r2, [pc, #140]	; (8005020 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d022      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d01d      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1e      	ldr	r2, [pc, #120]	; (8005028 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1c      	ldr	r2, [pc, #112]	; (800502c <HAL_TIM_Base_Start_IT+0xd0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a19      	ldr	r2, [pc, #100]	; (8005034 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d111      	bne.n	8005000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d010      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffe:	e007      	b.n	8005010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40010400 	.word	0x40010400
 8005034:	40014000 	.word	0x40014000
 8005038:	40001800 	.word	0x40001800

0800503c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e041      	b.n	80050d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f839 	bl	80050da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f000 fbba 	bl	80057f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <HAL_TIM_PWM_Start+0x24>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	bf14      	ite	ne
 800510c:	2301      	movne	r3, #1
 800510e:	2300      	moveq	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e022      	b.n	800515a <HAL_TIM_PWM_Start+0x6a>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b04      	cmp	r3, #4
 8005118:	d109      	bne.n	800512e <HAL_TIM_PWM_Start+0x3e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b01      	cmp	r3, #1
 8005124:	bf14      	ite	ne
 8005126:	2301      	movne	r3, #1
 8005128:	2300      	moveq	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	e015      	b.n	800515a <HAL_TIM_PWM_Start+0x6a>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d109      	bne.n	8005148 <HAL_TIM_PWM_Start+0x58>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e008      	b.n	800515a <HAL_TIM_PWM_Start+0x6a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	bf14      	ite	ne
 8005154:	2301      	movne	r3, #1
 8005156:	2300      	moveq	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e07c      	b.n	800525c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <HAL_TIM_PWM_Start+0x82>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005170:	e013      	b.n	800519a <HAL_TIM_PWM_Start+0xaa>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d104      	bne.n	8005182 <HAL_TIM_PWM_Start+0x92>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005180:	e00b      	b.n	800519a <HAL_TIM_PWM_Start+0xaa>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b08      	cmp	r3, #8
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Start+0xa2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005190:	e003      	b.n	800519a <HAL_TIM_PWM_Start+0xaa>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2201      	movs	r2, #1
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fe10 	bl	8005dc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <HAL_TIM_PWM_Start+0x174>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIM_PWM_Start+0xcc>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2c      	ldr	r2, [pc, #176]	; (8005268 <HAL_TIM_PWM_Start+0x178>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d101      	bne.n	80051c0 <HAL_TIM_PWM_Start+0xd0>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_TIM_PWM_Start+0xd2>
 80051c0:	2300      	movs	r3, #0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a22      	ldr	r2, [pc, #136]	; (8005264 <HAL_TIM_PWM_Start+0x174>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d022      	beq.n	8005226 <HAL_TIM_PWM_Start+0x136>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e8:	d01d      	beq.n	8005226 <HAL_TIM_PWM_Start+0x136>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <HAL_TIM_PWM_Start+0x17c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d018      	beq.n	8005226 <HAL_TIM_PWM_Start+0x136>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1d      	ldr	r2, [pc, #116]	; (8005270 <HAL_TIM_PWM_Start+0x180>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d013      	beq.n	8005226 <HAL_TIM_PWM_Start+0x136>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <HAL_TIM_PWM_Start+0x184>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00e      	beq.n	8005226 <HAL_TIM_PWM_Start+0x136>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a16      	ldr	r2, [pc, #88]	; (8005268 <HAL_TIM_PWM_Start+0x178>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d009      	beq.n	8005226 <HAL_TIM_PWM_Start+0x136>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a18      	ldr	r2, [pc, #96]	; (8005278 <HAL_TIM_PWM_Start+0x188>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d004      	beq.n	8005226 <HAL_TIM_PWM_Start+0x136>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a16      	ldr	r2, [pc, #88]	; (800527c <HAL_TIM_PWM_Start+0x18c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d111      	bne.n	800524a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b06      	cmp	r3, #6
 8005236:	d010      	beq.n	800525a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005248:	e007      	b.n	800525a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40010000 	.word	0x40010000
 8005268:	40010400 	.word	0x40010400
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40014000 	.word	0x40014000
 800527c:	40001800 	.word	0x40001800

08005280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0202 	mvn.w	r2, #2
 80052ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa77 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fa69 	bl	80057a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fa7a 	bl	80057ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0204 	mvn.w	r2, #4
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa4d 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa3f 	bl	80057a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa50 	bl	80057ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b08      	cmp	r3, #8
 800533c:	d122      	bne.n	8005384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b08      	cmp	r3, #8
 800534a:	d11b      	bne.n	8005384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0208 	mvn.w	r2, #8
 8005354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2204      	movs	r2, #4
 800535a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa23 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa15 	bl	80057a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa26 	bl	80057ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b10      	cmp	r3, #16
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b10      	cmp	r3, #16
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0210 	mvn.w	r2, #16
 80053a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2208      	movs	r2, #8
 80053ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9f9 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f9eb 	bl	80057a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f9fc 	bl	80057ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10e      	bne.n	8005404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d107      	bne.n	8005404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0201 	mvn.w	r2, #1
 80053fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fc fd34 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d10e      	bne.n	8005430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541c:	2b80      	cmp	r3, #128	; 0x80
 800541e:	d107      	bne.n	8005430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fd78 	bl	8005f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d10e      	bne.n	800545c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	d107      	bne.n	800545c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f9c1 	bl	80057de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b20      	cmp	r3, #32
 8005468:	d10e      	bne.n	8005488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b20      	cmp	r3, #32
 8005476:	d107      	bne.n	8005488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0220 	mvn.w	r2, #32
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fd42 	bl	8005f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e0ae      	b.n	800560c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b0c      	cmp	r3, #12
 80054ba:	f200 809f 	bhi.w	80055fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054be:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054f9 	.word	0x080054f9
 80054c8:	080055fd 	.word	0x080055fd
 80054cc:	080055fd 	.word	0x080055fd
 80054d0:	080055fd 	.word	0x080055fd
 80054d4:	08005539 	.word	0x08005539
 80054d8:	080055fd 	.word	0x080055fd
 80054dc:	080055fd 	.word	0x080055fd
 80054e0:	080055fd 	.word	0x080055fd
 80054e4:	0800557b 	.word	0x0800557b
 80054e8:	080055fd 	.word	0x080055fd
 80054ec:	080055fd 	.word	0x080055fd
 80054f0:	080055fd 	.word	0x080055fd
 80054f4:	080055bb 	.word	0x080055bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fa18 	bl	8005934 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0208 	orr.w	r2, r2, #8
 8005512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0204 	bic.w	r2, r2, #4
 8005522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6999      	ldr	r1, [r3, #24]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	619a      	str	r2, [r3, #24]
      break;
 8005536:	e064      	b.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fa68 	bl	8005a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	619a      	str	r2, [r3, #24]
      break;
 8005578:	e043      	b.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fabd 	bl	8005b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0208 	orr.w	r2, r2, #8
 8005594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0204 	bic.w	r2, r2, #4
 80055a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	61da      	str	r2, [r3, #28]
      break;
 80055b8:	e023      	b.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fb11 	bl	8005be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69d9      	ldr	r1, [r3, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	021a      	lsls	r2, r3, #8
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	61da      	str	r2, [r3, #28]
      break;
 80055fa:	e002      	b.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005600:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_TIM_ConfigClockSource+0x1c>
 800562c:	2302      	movs	r3, #2
 800562e:	e0b4      	b.n	800579a <HAL_TIM_ConfigClockSource+0x186>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800564e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005668:	d03e      	beq.n	80056e8 <HAL_TIM_ConfigClockSource+0xd4>
 800566a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566e:	f200 8087 	bhi.w	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005676:	f000 8086 	beq.w	8005786 <HAL_TIM_ConfigClockSource+0x172>
 800567a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567e:	d87f      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b70      	cmp	r3, #112	; 0x70
 8005682:	d01a      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0xa6>
 8005684:	2b70      	cmp	r3, #112	; 0x70
 8005686:	d87b      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	2b60      	cmp	r3, #96	; 0x60
 800568a:	d050      	beq.n	800572e <HAL_TIM_ConfigClockSource+0x11a>
 800568c:	2b60      	cmp	r3, #96	; 0x60
 800568e:	d877      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005690:	2b50      	cmp	r3, #80	; 0x50
 8005692:	d03c      	beq.n	800570e <HAL_TIM_ConfigClockSource+0xfa>
 8005694:	2b50      	cmp	r3, #80	; 0x50
 8005696:	d873      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d058      	beq.n	800574e <HAL_TIM_ConfigClockSource+0x13a>
 800569c:	2b40      	cmp	r3, #64	; 0x40
 800569e:	d86f      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 80056a0:	2b30      	cmp	r3, #48	; 0x30
 80056a2:	d064      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x15a>
 80056a4:	2b30      	cmp	r3, #48	; 0x30
 80056a6:	d86b      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d060      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x15a>
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d867      	bhi.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d05c      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x15a>
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d05a      	beq.n	800576e <HAL_TIM_ConfigClockSource+0x15a>
 80056b8:	e062      	b.n	8005780 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6899      	ldr	r1, [r3, #8]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f000 fb5d 	bl	8005d88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	609a      	str	r2, [r3, #8]
      break;
 80056e6:	e04f      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6899      	ldr	r1, [r3, #8]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f000 fb46 	bl	8005d88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800570a:	609a      	str	r2, [r3, #8]
      break;
 800570c:	e03c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	461a      	mov	r2, r3
 800571c:	f000 faba 	bl	8005c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2150      	movs	r1, #80	; 0x50
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fb13 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 800572c:	e02c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6859      	ldr	r1, [r3, #4]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	461a      	mov	r2, r3
 800573c:	f000 fad9 	bl	8005cf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2160      	movs	r1, #96	; 0x60
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fb03 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 800574c:	e01c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	6859      	ldr	r1, [r3, #4]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	461a      	mov	r2, r3
 800575c:	f000 fa9a 	bl	8005c94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2140      	movs	r1, #64	; 0x40
 8005766:	4618      	mov	r0, r3
 8005768:	f000 faf3 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 800576c:	e00c      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f000 faea 	bl	8005d52 <TIM_ITRx_SetConfig>
      break;
 800577e:	e003      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	73fb      	strb	r3, [r7, #15]
      break;
 8005784:	e000      	b.n	8005788 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005786:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
	...

080057f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a40      	ldr	r2, [pc, #256]	; (8005908 <TIM_Base_SetConfig+0x114>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005812:	d00f      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3d      	ldr	r2, [pc, #244]	; (800590c <TIM_Base_SetConfig+0x118>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <TIM_Base_SetConfig+0x11c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a3b      	ldr	r2, [pc, #236]	; (8005914 <TIM_Base_SetConfig+0x120>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a3a      	ldr	r2, [pc, #232]	; (8005918 <TIM_Base_SetConfig+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d108      	bne.n	8005846 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a2f      	ldr	r2, [pc, #188]	; (8005908 <TIM_Base_SetConfig+0x114>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d02b      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005854:	d027      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2c      	ldr	r2, [pc, #176]	; (800590c <TIM_Base_SetConfig+0x118>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d023      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2b      	ldr	r2, [pc, #172]	; (8005910 <TIM_Base_SetConfig+0x11c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d01f      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <TIM_Base_SetConfig+0x120>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d01b      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a29      	ldr	r2, [pc, #164]	; (8005918 <TIM_Base_SetConfig+0x124>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d017      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a28      	ldr	r2, [pc, #160]	; (800591c <TIM_Base_SetConfig+0x128>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <TIM_Base_SetConfig+0x12c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00f      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a26      	ldr	r2, [pc, #152]	; (8005924 <TIM_Base_SetConfig+0x130>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a25      	ldr	r2, [pc, #148]	; (8005928 <TIM_Base_SetConfig+0x134>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a24      	ldr	r2, [pc, #144]	; (800592c <TIM_Base_SetConfig+0x138>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a23      	ldr	r2, [pc, #140]	; (8005930 <TIM_Base_SetConfig+0x13c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d108      	bne.n	80058b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <TIM_Base_SetConfig+0x114>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0xf8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <TIM_Base_SetConfig+0x124>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d103      	bne.n	80058f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	615a      	str	r2, [r3, #20]
}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40010000 	.word	0x40010000
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	40010400 	.word	0x40010400
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800
 8005928:	40001800 	.word	0x40001800
 800592c:	40001c00 	.word	0x40001c00
 8005930:	40002000 	.word	0x40002000

08005934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f023 0201 	bic.w	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0303 	bic.w	r3, r3, #3
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 0302 	bic.w	r3, r3, #2
 800597c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a20      	ldr	r2, [pc, #128]	; (8005a0c <TIM_OC1_SetConfig+0xd8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC1_SetConfig+0x64>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1f      	ldr	r2, [pc, #124]	; (8005a10 <TIM_OC1_SetConfig+0xdc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d10c      	bne.n	80059b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0308 	bic.w	r3, r3, #8
 800599e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 0304 	bic.w	r3, r3, #4
 80059b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a15      	ldr	r2, [pc, #84]	; (8005a0c <TIM_OC1_SetConfig+0xd8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC1_SetConfig+0x8e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <TIM_OC1_SetConfig+0xdc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d111      	bne.n	80059e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	621a      	str	r2, [r3, #32]
}
 8005a00:	bf00      	nop
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40010400 	.word	0x40010400

08005a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	f023 0210 	bic.w	r2, r3, #16
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f023 0320 	bic.w	r3, r3, #32
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a22      	ldr	r2, [pc, #136]	; (8005af8 <TIM_OC2_SetConfig+0xe4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC2_SetConfig+0x68>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a21      	ldr	r2, [pc, #132]	; (8005afc <TIM_OC2_SetConfig+0xe8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d10d      	bne.n	8005a98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	011b      	lsls	r3, r3, #4
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <TIM_OC2_SetConfig+0xe4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_OC2_SetConfig+0x94>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a16      	ldr	r2, [pc, #88]	; (8005afc <TIM_OC2_SetConfig+0xe8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d113      	bne.n	8005ad0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40010400 	.word	0x40010400

08005b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <TIM_OC3_SetConfig+0xe0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_OC3_SetConfig+0x66>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a20      	ldr	r2, [pc, #128]	; (8005be4 <TIM_OC3_SetConfig+0xe4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d10d      	bne.n	8005b82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <TIM_OC3_SetConfig+0xe0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_OC3_SetConfig+0x92>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <TIM_OC3_SetConfig+0xe4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d113      	bne.n	8005bba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	621a      	str	r2, [r3, #32]
}
 8005bd4:	bf00      	nop
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40010400 	.word	0x40010400

08005be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	031b      	lsls	r3, r3, #12
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <TIM_OC4_SetConfig+0xa4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_OC4_SetConfig+0x68>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a11      	ldr	r2, [pc, #68]	; (8005c90 <TIM_OC4_SetConfig+0xa8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d109      	bne.n	8005c64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	019b      	lsls	r3, r3, #6
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40010400 	.word	0x40010400

08005c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 030a 	bic.w	r3, r3, #10
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b087      	sub	sp, #28
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f023 0210 	bic.w	r2, r3, #16
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f043 0307 	orr.w	r3, r3, #7
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	609a      	str	r2, [r3, #8]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2201      	movs	r2, #1
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1a      	ldr	r2, [r3, #32]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	43db      	mvns	r3, r3
 8005dea:	401a      	ands	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005e00:	431a      	orrs	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e05a      	b.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d01d      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1b      	ldr	r2, [pc, #108]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1a      	ldr	r2, [pc, #104]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a18      	ldr	r2, [pc, #96]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a17      	ldr	r2, [pc, #92]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e03f      	b.n	8005fc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fd f80e 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 fc7b 	bl	8006874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0ba      	sub	sp, #232	; 0xe8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800600e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10f      	bne.n	8006036 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <HAL_UART_IRQHandler+0x66>
 8006022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fb65 	bl	80066fe <UART_Receive_IT>
      return;
 8006034:	e256      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 80de 	beq.w	80061fc <HAL_UART_IRQHandler+0x22c>
 8006040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80d1 	beq.w	80061fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <HAL_UART_IRQHandler+0xae>
 8006066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800607e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_UART_IRQHandler+0xd2>
 800608a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d005      	beq.n	80060a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f043 0202 	orr.w	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <HAL_UART_IRQHandler+0xf6>
 80060ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f043 0204 	orr.w	r2, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d011      	beq.n	80060f6 <HAL_UART_IRQHandler+0x126>
 80060d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d105      	bne.n	80060ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0208 	orr.w	r2, r3, #8
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 81ed 	beq.w	80064da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_UART_IRQHandler+0x14e>
 800610c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 faf0 	bl	80066fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d103      	bne.n	800614a <HAL_UART_IRQHandler+0x17a>
 8006142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d04f      	beq.n	80061ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f9f8 	bl	8006540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d141      	bne.n	80061e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800618a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800618e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1d9      	bne.n	800615e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d013      	beq.n	80061da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	4a7d      	ldr	r2, [pc, #500]	; (80063ac <HAL_UART_IRQHandler+0x3dc>)
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fd fea9 	bl	8003f16 <HAL_DMA_Abort_IT>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d016      	beq.n	80061f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061d4:	4610      	mov	r0, r2
 80061d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	e00e      	b.n	80061f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f99a 	bl	8006514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	e00a      	b.n	80061f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f996 	bl	8006514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	e006      	b.n	80061f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f992 	bl	8006514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061f6:	e170      	b.n	80064da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	bf00      	nop
    return;
 80061fa:	e16e      	b.n	80064da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	2b01      	cmp	r3, #1
 8006202:	f040 814a 	bne.w	800649a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620a:	f003 0310 	and.w	r3, r3, #16
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8143 	beq.w	800649a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 813c 	beq.w	800649a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006222:	2300      	movs	r3, #0
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b40      	cmp	r3, #64	; 0x40
 8006244:	f040 80b4 	bne.w	80063b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006254:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 8140 	beq.w	80064de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006266:	429a      	cmp	r2, r3
 8006268:	f080 8139 	bcs.w	80064de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006272:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800627e:	f000 8088 	beq.w	8006392 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800629c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1d9      	bne.n	8006282 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3314      	adds	r3, #20
 80062d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e1      	bne.n	80062ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3314      	adds	r3, #20
 8006310:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800631a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800631c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800632e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006330:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800633c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e3      	bne.n	800630a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006362:	f023 0310 	bic.w	r3, r3, #16
 8006366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006374:	65ba      	str	r2, [r7, #88]	; 0x58
 8006376:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800637a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e3      	bne.n	8006350 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	4618      	mov	r0, r3
 800638e:	f7fd fd52 	bl	8003e36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800639a:	b29b      	uxth	r3, r3
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f8c0 	bl	8006528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a8:	e099      	b.n	80064de <HAL_UART_IRQHandler+0x50e>
 80063aa:	bf00      	nop
 80063ac:	08006607 	.word	0x08006607
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 808b 	beq.w	80064e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80063cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8086 	beq.w	80064e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	330c      	adds	r3, #12
 80063dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063fa:	647a      	str	r2, [r7, #68]	; 0x44
 80063fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e3      	bne.n	80063d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	623b      	str	r3, [r7, #32]
   return(result);
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006432:	633a      	str	r2, [r7, #48]	; 0x30
 8006434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e3      	bne.n	800640e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	60fb      	str	r3, [r7, #12]
   return(result);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0310 	bic.w	r3, r3, #16
 800646a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006478:	61fa      	str	r2, [r7, #28]
 800647a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	e841 2300 	strex	r3, r2, [r1]
 8006484:	617b      	str	r3, [r7, #20]
   return(result);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e3      	bne.n	8006454 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800648c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f848 	bl	8006528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006498:	e023      	b.n	80064e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <HAL_UART_IRQHandler+0x4ea>
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f8bb 	bl	800662e <UART_Transmit_IT>
    return;
 80064b8:	e014      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00e      	beq.n	80064e4 <HAL_UART_IRQHandler+0x514>
 80064c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8fb 	bl	80066ce <UART_EndTransmit_IT>
    return;
 80064d8:	e004      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
    return;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
      return;
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <HAL_UART_IRQHandler+0x514>
      return;
 80064e2:	bf00      	nop
  }
}
 80064e4:	37e8      	adds	r7, #232	; 0xe8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop

080064ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006540:	b480      	push	{r7}
 8006542:	b095      	sub	sp, #84	; 0x54
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800655e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006568:	643a      	str	r2, [r7, #64]	; 0x40
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800656e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3314      	adds	r3, #20
 8006582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	61fb      	str	r3, [r7, #28]
   return(result);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	64bb      	str	r3, [r7, #72]	; 0x48
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3314      	adds	r3, #20
 800659a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800659c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e5      	bne.n	800657c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d119      	bne.n	80065ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	330c      	adds	r3, #12
 80065be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 0310 	bic.w	r3, r3, #16
 80065ce:	647b      	str	r3, [r7, #68]	; 0x44
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065d8:	61ba      	str	r2, [r7, #24]
 80065da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6979      	ldr	r1, [r7, #20]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	613b      	str	r3, [r7, #16]
   return(result);
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e5      	bne.n	80065b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065fa:	bf00      	nop
 80065fc:	3754      	adds	r7, #84	; 0x54
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff ff77 	bl	8006514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b21      	cmp	r3, #33	; 0x21
 8006640:	d13e      	bne.n	80066c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664a:	d114      	bne.n	8006676 <UART_Transmit_IT+0x48>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d110      	bne.n	8006676 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	461a      	mov	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006668:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	1c9a      	adds	r2, r3, #2
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	621a      	str	r2, [r3, #32]
 8006674:	e008      	b.n	8006688 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	1c59      	adds	r1, r3, #1
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6211      	str	r1, [r2, #32]
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29b      	uxth	r3, r3
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4619      	mov	r1, r3
 8006696:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10f      	bne.n	80066bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	e000      	b.n	80066c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066c0:	2302      	movs	r3, #2
  }
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fefc 	bl	80064ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b08c      	sub	sp, #48	; 0x30
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b22      	cmp	r3, #34	; 0x22
 8006710:	f040 80ab 	bne.w	800686a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671c:	d117      	bne.n	800674e <UART_Receive_IT+0x50>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d113      	bne.n	800674e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673c:	b29a      	uxth	r2, r3
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28
 800674c:	e026      	b.n	800679c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006754:	2300      	movs	r3, #0
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d007      	beq.n	8006772 <UART_Receive_IT+0x74>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10a      	bne.n	8006780 <UART_Receive_IT+0x82>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e008      	b.n	8006792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800678c:	b2da      	uxtb	r2, r3
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4619      	mov	r1, r3
 80067aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d15a      	bne.n	8006866 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0220 	bic.w	r2, r2, #32
 80067be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695a      	ldr	r2, [r3, #20]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0201 	bic.w	r2, r2, #1
 80067de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d135      	bne.n	800685c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	330c      	adds	r3, #12
 80067fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	613b      	str	r3, [r7, #16]
   return(result);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f023 0310 	bic.w	r3, r3, #16
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006816:	623a      	str	r2, [r7, #32]
 8006818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	69f9      	ldr	r1, [r7, #28]
 800681c:	6a3a      	ldr	r2, [r7, #32]
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	61bb      	str	r3, [r7, #24]
   return(result);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b10      	cmp	r3, #16
 8006836:	d10a      	bne.n	800684e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff fe67 	bl	8006528 <HAL_UARTEx_RxEventCallback>
 800685a:	e002      	b.n	8006862 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff fe4f 	bl	8006500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	e002      	b.n	800686c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e000      	b.n	800686c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3730      	adds	r7, #48	; 0x30
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006878:	b0c0      	sub	sp, #256	; 0x100
 800687a:	af00      	add	r7, sp, #0
 800687c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006890:	68d9      	ldr	r1, [r3, #12]
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	ea40 0301 	orr.w	r3, r0, r1
 800689c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800689e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068cc:	f021 010c 	bic.w	r1, r1, #12
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068da:	430b      	orrs	r3, r1
 80068dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	6999      	ldr	r1, [r3, #24]
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	ea40 0301 	orr.w	r3, r0, r1
 80068fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b8f      	ldr	r3, [pc, #572]	; (8006b40 <UART_SetConfig+0x2cc>)
 8006904:	429a      	cmp	r2, r3
 8006906:	d005      	beq.n	8006914 <UART_SetConfig+0xa0>
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4b8d      	ldr	r3, [pc, #564]	; (8006b44 <UART_SetConfig+0x2d0>)
 8006910:	429a      	cmp	r2, r3
 8006912:	d104      	bne.n	800691e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006914:	f7fd fdf0 	bl	80044f8 <HAL_RCC_GetPCLK2Freq>
 8006918:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800691c:	e003      	b.n	8006926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800691e:	f7fd fdd7 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8006922:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	f040 810c 	bne.w	8006b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006938:	2200      	movs	r2, #0
 800693a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800693e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006946:	4622      	mov	r2, r4
 8006948:	462b      	mov	r3, r5
 800694a:	1891      	adds	r1, r2, r2
 800694c:	65b9      	str	r1, [r7, #88]	; 0x58
 800694e:	415b      	adcs	r3, r3
 8006950:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006956:	4621      	mov	r1, r4
 8006958:	eb12 0801 	adds.w	r8, r2, r1
 800695c:	4629      	mov	r1, r5
 800695e:	eb43 0901 	adc.w	r9, r3, r1
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800696e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006976:	4690      	mov	r8, r2
 8006978:	4699      	mov	r9, r3
 800697a:	4623      	mov	r3, r4
 800697c:	eb18 0303 	adds.w	r3, r8, r3
 8006980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006984:	462b      	mov	r3, r5
 8006986:	eb49 0303 	adc.w	r3, r9, r3
 800698a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800699a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800699e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069a2:	460b      	mov	r3, r1
 80069a4:	18db      	adds	r3, r3, r3
 80069a6:	653b      	str	r3, [r7, #80]	; 0x50
 80069a8:	4613      	mov	r3, r2
 80069aa:	eb42 0303 	adc.w	r3, r2, r3
 80069ae:	657b      	str	r3, [r7, #84]	; 0x54
 80069b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069b8:	f7fa f8e2 	bl	8000b80 <__aeabi_uldivmod>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4b61      	ldr	r3, [pc, #388]	; (8006b48 <UART_SetConfig+0x2d4>)
 80069c2:	fba3 2302 	umull	r2, r3, r3, r2
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	011c      	lsls	r4, r3, #4
 80069ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	1891      	adds	r1, r2, r2
 80069e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80069e4:	415b      	adcs	r3, r3
 80069e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069ec:	4641      	mov	r1, r8
 80069ee:	eb12 0a01 	adds.w	sl, r2, r1
 80069f2:	4649      	mov	r1, r9
 80069f4:	eb43 0b01 	adc.w	fp, r3, r1
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a0c:	4692      	mov	sl, r2
 8006a0e:	469b      	mov	fp, r3
 8006a10:	4643      	mov	r3, r8
 8006a12:	eb1a 0303 	adds.w	r3, sl, r3
 8006a16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	18db      	adds	r3, r3, r3
 8006a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a3e:	4613      	mov	r3, r2
 8006a40:	eb42 0303 	adc.w	r3, r2, r3
 8006a44:	647b      	str	r3, [r7, #68]	; 0x44
 8006a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a4e:	f7fa f897 	bl	8000b80 <__aeabi_uldivmod>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	4b3b      	ldr	r3, [pc, #236]	; (8006b48 <UART_SetConfig+0x2d4>)
 8006a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	2264      	movs	r2, #100	; 0x64
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	1acb      	subs	r3, r1, r3
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a6e:	4b36      	ldr	r3, [pc, #216]	; (8006b48 <UART_SetConfig+0x2d4>)
 8006a70:	fba3 2302 	umull	r2, r3, r3, r2
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a7c:	441c      	add	r4, r3
 8006a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a90:	4642      	mov	r2, r8
 8006a92:	464b      	mov	r3, r9
 8006a94:	1891      	adds	r1, r2, r2
 8006a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a98:	415b      	adcs	r3, r3
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	1851      	adds	r1, r2, r1
 8006aa4:	6339      	str	r1, [r7, #48]	; 0x30
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	414b      	adcs	r3, r1
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ab8:	4659      	mov	r1, fp
 8006aba:	00cb      	lsls	r3, r1, #3
 8006abc:	4651      	mov	r1, sl
 8006abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ac2:	4651      	mov	r1, sl
 8006ac4:	00ca      	lsls	r2, r1, #3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	4642      	mov	r2, r8
 8006ace:	189b      	adds	r3, r3, r2
 8006ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006aec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006af4:	460b      	mov	r3, r1
 8006af6:	18db      	adds	r3, r3, r3
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afa:	4613      	mov	r3, r2
 8006afc:	eb42 0303 	adc.w	r3, r2, r3
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b0a:	f7fa f839 	bl	8000b80 <__aeabi_uldivmod>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <UART_SetConfig+0x2d4>)
 8006b14:	fba3 1302 	umull	r1, r3, r3, r2
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	2164      	movs	r1, #100	; 0x64
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	3332      	adds	r3, #50	; 0x32
 8006b26:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <UART_SetConfig+0x2d4>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	f003 0207 	and.w	r2, r3, #7
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4422      	add	r2, r4
 8006b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b3c:	e105      	b.n	8006d4a <UART_SetConfig+0x4d6>
 8006b3e:	bf00      	nop
 8006b40:	40011000 	.word	0x40011000
 8006b44:	40011400 	.word	0x40011400
 8006b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b5e:	4642      	mov	r2, r8
 8006b60:	464b      	mov	r3, r9
 8006b62:	1891      	adds	r1, r2, r2
 8006b64:	6239      	str	r1, [r7, #32]
 8006b66:	415b      	adcs	r3, r3
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b6e:	4641      	mov	r1, r8
 8006b70:	1854      	adds	r4, r2, r1
 8006b72:	4649      	mov	r1, r9
 8006b74:	eb43 0501 	adc.w	r5, r3, r1
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	00eb      	lsls	r3, r5, #3
 8006b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b86:	00e2      	lsls	r2, r4, #3
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	4643      	mov	r3, r8
 8006b8e:	18e3      	adds	r3, r4, r3
 8006b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b94:	464b      	mov	r3, r9
 8006b96:	eb45 0303 	adc.w	r3, r5, r3
 8006b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006baa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006bba:	4629      	mov	r1, r5
 8006bbc:	008b      	lsls	r3, r1, #2
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	008a      	lsls	r2, r1, #2
 8006bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006bcc:	f7f9 ffd8 	bl	8000b80 <__aeabi_uldivmod>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4b60      	ldr	r3, [pc, #384]	; (8006d58 <UART_SetConfig+0x4e4>)
 8006bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	011c      	lsls	r4, r3, #4
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006be8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	61b9      	str	r1, [r7, #24]
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c00:	4641      	mov	r1, r8
 8006c02:	1851      	adds	r1, r2, r1
 8006c04:	6139      	str	r1, [r7, #16]
 8006c06:	4649      	mov	r1, r9
 8006c08:	414b      	adcs	r3, r1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c18:	4659      	mov	r1, fp
 8006c1a:	00cb      	lsls	r3, r1, #3
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c22:	4651      	mov	r1, sl
 8006c24:	00ca      	lsls	r2, r1, #3
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	189b      	adds	r3, r3, r2
 8006c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c34:	464b      	mov	r3, r9
 8006c36:	460a      	mov	r2, r1
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c58:	4649      	mov	r1, r9
 8006c5a:	008b      	lsls	r3, r1, #2
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c62:	4641      	mov	r1, r8
 8006c64:	008a      	lsls	r2, r1, #2
 8006c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c6a:	f7f9 ff89 	bl	8000b80 <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4b39      	ldr	r3, [pc, #228]	; (8006d58 <UART_SetConfig+0x4e4>)
 8006c74:	fba3 1302 	umull	r1, r3, r3, r2
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	2164      	movs	r1, #100	; 0x64
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	3332      	adds	r3, #50	; 0x32
 8006c86:	4a34      	ldr	r2, [pc, #208]	; (8006d58 <UART_SetConfig+0x4e4>)
 8006c88:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8c:	095b      	lsrs	r3, r3, #5
 8006c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c92:	441c      	add	r4, r3
 8006c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c98:	2200      	movs	r2, #0
 8006c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8006c9c:	677a      	str	r2, [r7, #116]	; 0x74
 8006c9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ca2:	4642      	mov	r2, r8
 8006ca4:	464b      	mov	r3, r9
 8006ca6:	1891      	adds	r1, r2, r2
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	415b      	adcs	r3, r3
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	1851      	adds	r1, r2, r1
 8006cb6:	6039      	str	r1, [r7, #0]
 8006cb8:	4649      	mov	r1, r9
 8006cba:	414b      	adcs	r3, r1
 8006cbc:	607b      	str	r3, [r7, #4]
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006cca:	4659      	mov	r1, fp
 8006ccc:	00cb      	lsls	r3, r1, #3
 8006cce:	4651      	mov	r1, sl
 8006cd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cd4:	4651      	mov	r1, sl
 8006cd6:	00ca      	lsls	r2, r1, #3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4642      	mov	r2, r8
 8006ce0:	189b      	adds	r3, r3, r2
 8006ce2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	eb42 0303 	adc.w	r3, r2, r3
 8006cec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	663b      	str	r3, [r7, #96]	; 0x60
 8006cf8:	667a      	str	r2, [r7, #100]	; 0x64
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d06:	4649      	mov	r1, r9
 8006d08:	008b      	lsls	r3, r1, #2
 8006d0a:	4641      	mov	r1, r8
 8006d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d10:	4641      	mov	r1, r8
 8006d12:	008a      	lsls	r2, r1, #2
 8006d14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d18:	f7f9 ff32 	bl	8000b80 <__aeabi_uldivmod>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <UART_SetConfig+0x4e4>)
 8006d22:	fba3 1302 	umull	r1, r3, r3, r2
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	2164      	movs	r1, #100	; 0x64
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	3332      	adds	r3, #50	; 0x32
 8006d34:	4a08      	ldr	r2, [pc, #32]	; (8006d58 <UART_SetConfig+0x4e4>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4422      	add	r2, r4
 8006d48:	609a      	str	r2, [r3, #8]
}
 8006d4a:	bf00      	nop
 8006d4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d50:	46bd      	mov	sp, r7
 8006d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d56:	bf00      	nop
 8006d58:	51eb851f 	.word	0x51eb851f

08006d5c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	2101      	movs	r1, #1
 8006d6a:	481f      	ldr	r0, [pc, #124]	; (8006de8 <network_configure_activations+0x8c>)
 8006d6c:	f000 fa8e 	bl	800728c <ai_platform_get_activations_map>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d02d      	beq.n	8006dd2 <network_configure_activations+0x76>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006d76:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <network_configure_activations+0x8c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <network_configure_activations+0x90>)
 8006d7c:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006d7e:	4b1a      	ldr	r3, [pc, #104]	; (8006de8 <network_configure_activations+0x8c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <network_configure_activations+0x90>)
 8006d84:	60d3      	str	r3, [r2, #12]
    
    L1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 24);
 8006d86:	4b18      	ldr	r3, [pc, #96]	; (8006de8 <network_configure_activations+0x8c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3318      	adds	r3, #24
 8006d8c:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <network_configure_activations+0x94>)
 8006d8e:	6093      	str	r3, [r2, #8]
    L1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 24);
 8006d90:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <network_configure_activations+0x8c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3318      	adds	r3, #24
 8006d96:	4a16      	ldr	r2, [pc, #88]	; (8006df0 <network_configure_activations+0x94>)
 8006d98:	60d3      	str	r3, [r2, #12]
    
    L1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006d9a:	4b13      	ldr	r3, [pc, #76]	; (8006de8 <network_configure_activations+0x8c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a15      	ldr	r2, [pc, #84]	; (8006df4 <network_configure_activations+0x98>)
 8006da0:	6093      	str	r3, [r2, #8]
    L1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006da2:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <network_configure_activations+0x8c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a13      	ldr	r2, [pc, #76]	; (8006df4 <network_configure_activations+0x98>)
 8006da8:	60d3      	str	r3, [r2, #12]
    
    L5_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 8006daa:	4b0f      	ldr	r3, [pc, #60]	; (8006de8 <network_configure_activations+0x8c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3314      	adds	r3, #20
 8006db0:	4a11      	ldr	r2, [pc, #68]	; (8006df8 <network_configure_activations+0x9c>)
 8006db2:	6093      	str	r3, [r2, #8]
    L5_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 8006db4:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <network_configure_activations+0x8c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	4a0f      	ldr	r2, [pc, #60]	; (8006df8 <network_configure_activations+0x9c>)
 8006dbc:	60d3      	str	r3, [r2, #12]
    
    L5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <network_configure_activations+0x8c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a0e      	ldr	r2, [pc, #56]	; (8006dfc <network_configure_activations+0xa0>)
 8006dc4:	6093      	str	r3, [r2, #8]
    L5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8006dc6:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <network_configure_activations+0x8c>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a0c      	ldr	r2, [pc, #48]	; (8006dfc <network_configure_activations+0xa0>)
 8006dcc:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e005      	b.n	8006dde <network_configure_activations+0x82>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006dd2:	2213      	movs	r2, #19
 8006dd4:	2130      	movs	r1, #48	; 0x30
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fb3c 	bl	8007454 <ai_platform_network_set_error>
  return false;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000948 	.word	0x20000948
 8006dec:	2000008c 	.word	0x2000008c
 8006df0:	2000000c 	.word	0x2000000c
 8006df4:	2000001c 	.word	0x2000001c
 8006df8:	2000002c 	.word	0x2000002c
 8006dfc:	2000003c 	.word	0x2000003c

08006e00 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	4828      	ldr	r0, [pc, #160]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e10:	f000 f9e8 	bl	80071e4 <ai_platform_get_weights_map>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d03f      	beq.n	8006e9a <network_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    L1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006e1a:	4b26      	ldr	r3, [pc, #152]	; (8006eb4 <network_configure_weights+0xb4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e22:	4a24      	ldr	r2, [pc, #144]	; (8006eb4 <network_configure_weights+0xb4>)
 8006e24:	6013      	str	r3, [r2, #0]
    L1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8006e26:	4b22      	ldr	r3, [pc, #136]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a22      	ldr	r2, [pc, #136]	; (8006eb4 <network_configure_weights+0xb4>)
 8006e2c:	6093      	str	r3, [r2, #8]
    L1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8006e2e:	4b20      	ldr	r3, [pc, #128]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <network_configure_weights+0xb4>)
 8006e34:	60d3      	str	r3, [r2, #12]
    
    L1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006e36:	4b20      	ldr	r3, [pc, #128]	; (8006eb8 <network_configure_weights+0xb8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <network_configure_weights+0xb8>)
 8006e40:	6013      	str	r3, [r2, #0]
    L1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 120);
 8006e42:	4b1b      	ldr	r3, [pc, #108]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3378      	adds	r3, #120	; 0x78
 8006e48:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <network_configure_weights+0xb8>)
 8006e4a:	6093      	str	r3, [r2, #8]
    L1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 120);
 8006e4c:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3378      	adds	r3, #120	; 0x78
 8006e52:	4a19      	ldr	r2, [pc, #100]	; (8006eb8 <network_configure_weights+0xb8>)
 8006e54:	60d3      	str	r3, [r2, #12]
    
    L5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006e56:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <network_configure_weights+0xbc>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e5e:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <network_configure_weights+0xbc>)
 8006e60:	6013      	str	r3, [r2, #0]
    L5_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 140);
 8006e62:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	338c      	adds	r3, #140	; 0x8c
 8006e68:	4a14      	ldr	r2, [pc, #80]	; (8006ebc <network_configure_weights+0xbc>)
 8006e6a:	6093      	str	r3, [r2, #8]
    L5_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 140);
 8006e6c:	4b10      	ldr	r3, [pc, #64]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	338c      	adds	r3, #140	; 0x8c
 8006e72:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <network_configure_weights+0xbc>)
 8006e74:	60d3      	str	r3, [r2, #12]
    
    L5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006e76:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <network_configure_weights+0xc0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7e:	4a10      	ldr	r2, [pc, #64]	; (8006ec0 <network_configure_weights+0xc0>)
 8006e80:	6013      	str	r3, [r2, #0]
    L5_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 160);
 8006e82:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	33a0      	adds	r3, #160	; 0xa0
 8006e88:	4a0d      	ldr	r2, [pc, #52]	; (8006ec0 <network_configure_weights+0xc0>)
 8006e8a:	6093      	str	r3, [r2, #8]
    L5_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 160);
 8006e8c:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <network_configure_weights+0xb0>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	33a0      	adds	r3, #160	; 0xa0
 8006e92:	4a0b      	ldr	r2, [pc, #44]	; (8006ec0 <network_configure_weights+0xc0>)
 8006e94:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e005      	b.n	8006ea6 <network_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006e9a:	2212      	movs	r2, #18
 8006e9c:	2130      	movs	r1, #48	; 0x30
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fad8 	bl	8007454 <ai_platform_network_set_error>
  return false;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	2000094c 	.word	0x2000094c
 8006eb4:	2000004c 	.word	0x2000004c
 8006eb8:	2000005c 	.word	0x2000005c
 8006ebc:	2000006c 	.word	0x2000006c
 8006ec0:	2000007c 	.word	0x2000007c

08006ec4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa53 	bl	8007378 <ai_platform_network_get_error>
 8006ed2:	4603      	mov	r3, r0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	2305      	movs	r3, #5
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4a04      	ldr	r2, [pc, #16]	; (8006f04 <ai_network_create+0x28>)
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc59 	bl	80077ac <ai_platform_network_create>
 8006efa:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	200004b0 	.word	0x200004b0

08006f08 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b096      	sub	sp, #88	; 0x58
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8006f14:	2100      	movs	r1, #0
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f7ff ffe0 	bl	8006edc <ai_network_create>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8006f20:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <ai_network_create_and_init+0x24>
        return err;
 8006f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2a:	e05d      	b.n	8006fe8 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8006f2c:	f107 0314 	add.w	r3, r7, #20
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 f8dd 	bl	80070f0 <ai_network_data_params_get>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f083 0301 	eor.w	r3, r3, #1
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff ffbc 	bl	8006ec4 <ai_network_get_error>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8006f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f52:	e049      	b.n	8006fe8 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d016      	beq.n	8006f88 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	657b      	str	r3, [r7, #84]	; 0x54
 8006f5e:	e00e      	b.n	8006f7e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8006f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	4413      	add	r3, r2
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	f107 0314 	add.w	r3, r7, #20
 8006f70:	330c      	adds	r3, #12
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 f922 	bl	80071bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8006f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	657b      	str	r3, [r7, #84]	; 0x54
 8006f7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f80:	461a      	mov	r2, r3
 8006f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f84:	4293      	cmp	r3, r2
 8006f86:	dbeb      	blt.n	8006f60 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d016      	beq.n	8006fbc <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006f8e:	2300      	movs	r3, #0
 8006f90:	653b      	str	r3, [r7, #80]	; 0x50
 8006f92:	e00e      	b.n	8006fb2 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8006f94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	f107 0314 	add.w	r3, r7, #20
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f908 	bl	80071bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8006fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fae:	3301      	adds	r3, #1
 8006fb0:	653b      	str	r3, [r7, #80]	; 0x50
 8006fb2:	8b7b      	ldrh	r3, [r7, #26]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	dbeb      	blt.n	8006f94 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f107 0214 	add.w	r2, r7, #20
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 f846 	bl	8007058 <ai_network_init>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f083 0301 	eor.w	r3, r3, #1
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff ff71 	bl	8006ec4 <ai_network_get_error>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8006fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3758      	adds	r7, #88	; 0x58
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007000:	4b06      	ldr	r3, [pc, #24]	; (800701c <ai_network_inputs_get+0x2c>)
 8007002:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a06      	ldr	r2, [pc, #24]	; (8007020 <ai_network_inputs_get+0x30>)
 8007008:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fa27 	bl	8007460 <ai_platform_inputs_get>
 8007012:	4603      	mov	r3, r0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	200004b0 	.word	0x200004b0
 8007020:	a1c00100 	.word	0xa1c00100

08007024 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <ai_network_outputs_get+0x2c>)
 8007036:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a06      	ldr	r2, [pc, #24]	; (8007054 <ai_network_outputs_get+0x30>)
 800703c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fae3 	bl	800760c <ai_platform_outputs_get>
 8007046:	4603      	mov	r3, r0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	200004b0 	.word	0x200004b0
 8007054:	a1c00100 	.word	0xa1c00100

08007058 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fc77 	bl	8007958 <ai_platform_network_init>
 800706a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <ai_network_init+0x1e>
 8007072:	2300      	movs	r3, #0
 8007074:	e028      	b.n	80070c8 <ai_network_init+0x70>

  ai_bool ok = true;
 8007076:	2301      	movs	r3, #1
 8007078:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff febf 	bl	8006e00 <network_configure_weights>
 8007082:	4603      	mov	r3, r0
 8007084:	461a      	mov	r2, r3
 8007086:	7afb      	ldrb	r3, [r7, #11]
 8007088:	4013      	ands	r3, r2
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f7ff fe60 	bl	8006d5c <network_configure_activations>
 800709c:	4603      	mov	r3, r0
 800709e:	461a      	mov	r2, r3
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	bf14      	ite	ne
 80070a8:	2301      	movne	r3, #1
 80070aa:	2300      	moveq	r3, #0
 80070ac:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fd40 	bl	8007b34 <ai_platform_network_post_init>
 80070b4:	4603      	mov	r3, r0
 80070b6:	461a      	mov	r2, r3
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	4013      	ands	r3, r2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf14      	ite	ne
 80070c0:	2301      	movne	r3, #1
 80070c2:	2300      	moveq	r3, #0
 80070c4:	72fb      	strb	r3, [r7, #11]

  return ok;
 80070c6:	7afb      	ldrb	r3, [r7, #11]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fdaf 	bl	8007c44 <ai_platform_network_process>
 80070e6:	4603      	mov	r3, r0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <ai_network_data_params_get+0x12>
 80070fe:	2300      	movs	r3, #0
 8007100:	e016      	b.n	8007130 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8007102:	4a0d      	ldr	r2, [pc, #52]	; (8007138 <ai_network_data_params_get+0x48>)
 8007104:	f107 0310 	add.w	r3, r7, #16
 8007108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800710c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007110:	4a0a      	ldr	r2, [pc, #40]	; (800713c <ai_network_data_params_get+0x4c>)
 8007112:	f107 0308 	add.w	r3, r7, #8
 8007116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800711a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800711e:	f107 0210 	add.w	r2, r7, #16
 8007122:	f107 0308 	add.w	r3, r7, #8
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f903 	bl	8007334 <ai_platform_bind_network_params>
 800712e:	4603      	mov	r3, r0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	0800ac18 	.word	0x0800ac18
 800713c:	0800ac20 	.word	0x0800ac20

08007140 <ai_buffer_get_size>:
 8007140:	b378      	cbz	r0, 80071a2 <ai_buffer_get_size+0x62>
 8007142:	b410      	push	{r4}
 8007144:	6803      	ldr	r3, [r0, #0]
 8007146:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <ai_buffer_get_size+0x64>)
 8007148:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800714c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007150:	4293      	cmp	r3, r2
 8007152:	d01e      	beq.n	8007192 <ai_buffer_get_size+0x52>
 8007154:	6984      	ldr	r4, [r0, #24]
 8007156:	6862      	ldr	r2, [r4, #4]
 8007158:	7d03      	ldrb	r3, [r0, #20]
 800715a:	6941      	ldr	r1, [r0, #20]
 800715c:	f1a3 0301 	sub.w	r3, r3, #1
 8007160:	fab3 f383 	clz	r3, r3
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800716a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800716e:	da0b      	bge.n	8007188 <ai_buffer_get_size+0x48>
 8007170:	2b01      	cmp	r3, #1
 8007172:	d102      	bne.n	800717a <ai_buffer_get_size+0x3a>
 8007174:	2802      	cmp	r0, #2
 8007176:	d007      	beq.n	8007188 <ai_buffer_get_size+0x48>
 8007178:	2302      	movs	r3, #2
 800717a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800717e:	3301      	adds	r3, #1
 8007180:	4298      	cmp	r0, r3
 8007182:	fb01 f202 	mul.w	r2, r1, r2
 8007186:	d1f3      	bne.n	8007170 <ai_buffer_get_size+0x30>
 8007188:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800718c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	2900      	cmp	r1, #0
 8007194:	d0de      	beq.n	8007154 <ai_buffer_get_size+0x14>
 8007196:	6984      	ldr	r4, [r0, #24]
 8007198:	6863      	ldr	r3, [r4, #4]
 800719a:	331f      	adds	r3, #31
 800719c:	f023 021f 	bic.w	r2, r3, #31
 80071a0:	e7da      	b.n	8007158 <ai_buffer_get_size+0x18>
 80071a2:	4770      	bx	lr
 80071a4:	000400c0 	.word	0x000400c0

080071a8 <ai_buffer_array_sane>:
 80071a8:	b138      	cbz	r0, 80071ba <ai_buffer_array_sane+0x12>
 80071aa:	6843      	ldr	r3, [r0, #4]
 80071ac:	b123      	cbz	r3, 80071b8 <ai_buffer_array_sane+0x10>
 80071ae:	8840      	ldrh	r0, [r0, #2]
 80071b0:	3800      	subs	r0, #0
 80071b2:	bf18      	it	ne
 80071b4:	2001      	movne	r0, #1
 80071b6:	4770      	bx	lr
 80071b8:	4618      	mov	r0, r3
 80071ba:	4770      	bx	lr

080071bc <ai_buffer_array_item_set_address>:
 80071bc:	b150      	cbz	r0, 80071d4 <ai_buffer_array_item_set_address+0x18>
 80071be:	6843      	ldr	r3, [r0, #4]
 80071c0:	b14b      	cbz	r3, 80071d6 <ai_buffer_array_item_set_address+0x1a>
 80071c2:	8840      	ldrh	r0, [r0, #2]
 80071c4:	b900      	cbnz	r0, 80071c8 <ai_buffer_array_item_set_address+0xc>
 80071c6:	4770      	bx	lr
 80071c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80071cc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80071d0:	2001      	movs	r0, #1
 80071d2:	604a      	str	r2, [r1, #4]
 80071d4:	4770      	bx	lr
 80071d6:	4618      	mov	r0, r3
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop

080071dc <_ai_platform_acquire_crc>:
 80071dc:	2001      	movs	r0, #1
 80071de:	4770      	bx	lr

080071e0 <_ai_platform_release_crc>:
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop

080071e4 <ai_platform_get_weights_map>:
 80071e4:	2a00      	cmp	r2, #0
 80071e6:	d037      	beq.n	8007258 <ai_platform_get_weights_map+0x74>
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	4604      	mov	r4, r0
 80071ec:	b1a0      	cbz	r0, 8007218 <ai_platform_get_weights_map+0x34>
 80071ee:	460f      	mov	r7, r1
 80071f0:	b191      	cbz	r1, 8007218 <ai_platform_get_weights_map+0x34>
 80071f2:	4b25      	ldr	r3, [pc, #148]	; (8007288 <ai_platform_get_weights_map+0xa4>)
 80071f4:	6810      	ldr	r0, [r2, #0]
 80071f6:	4298      	cmp	r0, r3
 80071f8:	4615      	mov	r5, r2
 80071fa:	d00f      	beq.n	800721c <ai_platform_get_weights_map+0x38>
 80071fc:	6855      	ldr	r5, [r2, #4]
 80071fe:	b15d      	cbz	r5, 8007218 <ai_platform_get_weights_map+0x34>
 8007200:	682e      	ldr	r6, [r5, #0]
 8007202:	429e      	cmp	r6, r3
 8007204:	d02a      	beq.n	800725c <ai_platform_get_weights_map+0x78>
 8007206:	f1a1 0001 	sub.w	r0, r1, #1
 800720a:	6025      	str	r5, [r4, #0]
 800720c:	fab0 f080 	clz	r0, r0
 8007210:	0940      	lsrs	r0, r0, #5
 8007212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007214:	42a7      	cmp	r7, r4
 8007216:	d034      	beq.n	8007282 <ai_platform_get_weights_map+0x9e>
 8007218:	2000      	movs	r0, #0
 800721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800721c:	1d10      	adds	r0, r2, #4
 800721e:	f7ff ffc3 	bl	80071a8 <ai_buffer_array_sane>
 8007222:	2800      	cmp	r0, #0
 8007224:	d0f8      	beq.n	8007218 <ai_platform_get_weights_map+0x34>
 8007226:	88eb      	ldrh	r3, [r5, #6]
 8007228:	429f      	cmp	r7, r3
 800722a:	d1f5      	bne.n	8007218 <ai_platform_get_weights_map+0x34>
 800722c:	f04f 0e00 	mov.w	lr, #0
 8007230:	1f23      	subs	r3, r4, #4
 8007232:	4670      	mov	r0, lr
 8007234:	68aa      	ldr	r2, [r5, #8]
 8007236:	eb02 0c0e 	add.w	ip, r2, lr
 800723a:	f10e 0e1c 	add.w	lr, lr, #28
 800723e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8007242:	b124      	cbz	r4, 800724e <ai_platform_get_weights_map+0x6a>
 8007244:	3001      	adds	r0, #1
 8007246:	4287      	cmp	r7, r0
 8007248:	f843 4f04 	str.w	r4, [r3, #4]!
 800724c:	d1f2      	bne.n	8007234 <ai_platform_get_weights_map+0x50>
 800724e:	1a38      	subs	r0, r7, r0
 8007250:	fab0 f080 	clz	r0, r0
 8007254:	0940      	lsrs	r0, r0, #5
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	2000      	movs	r0, #0
 800725a:	4770      	bx	lr
 800725c:	1f23      	subs	r3, r4, #4
 800725e:	4628      	mov	r0, r5
 8007260:	2400      	movs	r4, #0
 8007262:	e000      	b.n	8007266 <ai_platform_get_weights_map+0x82>
 8007264:	4614      	mov	r4, r2
 8007266:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800726a:	42b2      	cmp	r2, r6
 800726c:	d0d2      	beq.n	8007214 <ai_platform_get_weights_map+0x30>
 800726e:	f843 2f04 	str.w	r2, [r3, #4]!
 8007272:	1c62      	adds	r2, r4, #1
 8007274:	4297      	cmp	r7, r2
 8007276:	d1f5      	bne.n	8007264 <ai_platform_get_weights_map+0x80>
 8007278:	3402      	adds	r4, #2
 800727a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800727e:	42b3      	cmp	r3, r6
 8007280:	d1ca      	bne.n	8007218 <ai_platform_get_weights_map+0x34>
 8007282:	2001      	movs	r0, #1
 8007284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007286:	bf00      	nop
 8007288:	a1facade 	.word	0xa1facade

0800728c <ai_platform_get_activations_map>:
 800728c:	2a00      	cmp	r2, #0
 800728e:	d038      	beq.n	8007302 <ai_platform_get_activations_map+0x76>
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	4604      	mov	r4, r0
 8007294:	b1a0      	cbz	r0, 80072c0 <ai_platform_get_activations_map+0x34>
 8007296:	460f      	mov	r7, r1
 8007298:	b191      	cbz	r1, 80072c0 <ai_platform_get_activations_map+0x34>
 800729a:	4b25      	ldr	r3, [pc, #148]	; (8007330 <ai_platform_get_activations_map+0xa4>)
 800729c:	6810      	ldr	r0, [r2, #0]
 800729e:	4298      	cmp	r0, r3
 80072a0:	4615      	mov	r5, r2
 80072a2:	d00f      	beq.n	80072c4 <ai_platform_get_activations_map+0x38>
 80072a4:	6a15      	ldr	r5, [r2, #32]
 80072a6:	b15d      	cbz	r5, 80072c0 <ai_platform_get_activations_map+0x34>
 80072a8:	682e      	ldr	r6, [r5, #0]
 80072aa:	429e      	cmp	r6, r3
 80072ac:	d02b      	beq.n	8007306 <ai_platform_get_activations_map+0x7a>
 80072ae:	f1a1 0001 	sub.w	r0, r1, #1
 80072b2:	6025      	str	r5, [r4, #0]
 80072b4:	fab0 f080 	clz	r0, r0
 80072b8:	0940      	lsrs	r0, r0, #5
 80072ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072bc:	42a7      	cmp	r7, r4
 80072be:	d035      	beq.n	800732c <ai_platform_get_activations_map+0xa0>
 80072c0:	2000      	movs	r0, #0
 80072c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c4:	f102 000c 	add.w	r0, r2, #12
 80072c8:	f7ff ff6e 	bl	80071a8 <ai_buffer_array_sane>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d0f7      	beq.n	80072c0 <ai_platform_get_activations_map+0x34>
 80072d0:	89eb      	ldrh	r3, [r5, #14]
 80072d2:	429f      	cmp	r7, r3
 80072d4:	d1f4      	bne.n	80072c0 <ai_platform_get_activations_map+0x34>
 80072d6:	f04f 0e00 	mov.w	lr, #0
 80072da:	1f23      	subs	r3, r4, #4
 80072dc:	4670      	mov	r0, lr
 80072de:	692a      	ldr	r2, [r5, #16]
 80072e0:	eb02 0c0e 	add.w	ip, r2, lr
 80072e4:	f10e 0e1c 	add.w	lr, lr, #28
 80072e8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80072ec:	b124      	cbz	r4, 80072f8 <ai_platform_get_activations_map+0x6c>
 80072ee:	3001      	adds	r0, #1
 80072f0:	4287      	cmp	r7, r0
 80072f2:	f843 4f04 	str.w	r4, [r3, #4]!
 80072f6:	d1f2      	bne.n	80072de <ai_platform_get_activations_map+0x52>
 80072f8:	1a38      	subs	r0, r7, r0
 80072fa:	fab0 f080 	clz	r0, r0
 80072fe:	0940      	lsrs	r0, r0, #5
 8007300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007302:	2000      	movs	r0, #0
 8007304:	4770      	bx	lr
 8007306:	1f23      	subs	r3, r4, #4
 8007308:	4628      	mov	r0, r5
 800730a:	2400      	movs	r4, #0
 800730c:	e000      	b.n	8007310 <ai_platform_get_activations_map+0x84>
 800730e:	4614      	mov	r4, r2
 8007310:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8007314:	42b2      	cmp	r2, r6
 8007316:	d0d1      	beq.n	80072bc <ai_platform_get_activations_map+0x30>
 8007318:	f843 2f04 	str.w	r2, [r3, #4]!
 800731c:	1c62      	adds	r2, r4, #1
 800731e:	4297      	cmp	r7, r2
 8007320:	d1f5      	bne.n	800730e <ai_platform_get_activations_map+0x82>
 8007322:	3402      	adds	r4, #2
 8007324:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007328:	42b3      	cmp	r3, r6
 800732a:	d1c9      	bne.n	80072c0 <ai_platform_get_activations_map+0x34>
 800732c:	2001      	movs	r0, #1
 800732e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007330:	a1facade 	.word	0xa1facade

08007334 <ai_platform_bind_network_params>:
 8007334:	b1a0      	cbz	r0, 8007360 <ai_platform_bind_network_params+0x2c>
 8007336:	b1b1      	cbz	r1, 8007366 <ai_platform_bind_network_params+0x32>
 8007338:	b1c2      	cbz	r2, 800736c <ai_platform_bind_network_params+0x38>
 800733a:	b410      	push	{r4}
 800733c:	4603      	mov	r3, r0
 800733e:	4c0d      	ldr	r4, [pc, #52]	; (8007374 <ai_platform_bind_network_params+0x40>)
 8007340:	f843 4b04 	str.w	r4, [r3], #4
 8007344:	f100 0c0c 	add.w	ip, r0, #12
 8007348:	c903      	ldmia	r1, {r0, r1}
 800734a:	e883 0003 	stmia.w	r3, {r0, r1}
 800734e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007352:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007356:	2301      	movs	r3, #1
 8007358:	4618      	mov	r0, r3
 800735a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	4603      	mov	r3, r0
 8007362:	4618      	mov	r0, r3
 8007364:	4770      	bx	lr
 8007366:	460b      	mov	r3, r1
 8007368:	4618      	mov	r0, r3
 800736a:	4770      	bx	lr
 800736c:	4613      	mov	r3, r2
 800736e:	4618      	mov	r0, r3
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	a1facade 	.word	0xa1facade

08007378 <ai_platform_network_get_error>:
 8007378:	b510      	push	{r4, lr}
 800737a:	b1f0      	cbz	r0, 80073ba <ai_platform_network_get_error+0x42>
 800737c:	4b2f      	ldr	r3, [pc, #188]	; (800743c <ai_platform_network_get_error+0xc4>)
 800737e:	6802      	ldr	r2, [r0, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	4604      	mov	r4, r0
 8007384:	d119      	bne.n	80073ba <ai_platform_network_get_error+0x42>
 8007386:	f7ff ff29 	bl	80071dc <_ai_platform_acquire_crc>
 800738a:	4b2d      	ldr	r3, [pc, #180]	; (8007440 <ai_platform_network_get_error+0xc8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007396:	d03c      	beq.n	8007412 <ai_platform_network_get_error+0x9a>
 8007398:	4a2a      	ldr	r2, [pc, #168]	; (8007444 <ai_platform_network_get_error+0xcc>)
 800739a:	2301      	movs	r3, #1
 800739c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80073a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1fb      	bne.n	80073a0 <ai_platform_network_get_error+0x28>
 80073a8:	4b27      	ldr	r3, [pc, #156]	; (8007448 <ai_platform_network_get_error+0xd0>)
 80073aa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80073ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80073b2:	4b26      	ldr	r3, [pc, #152]	; (800744c <ai_platform_network_get_error+0xd4>)
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d038      	beq.n	800742a <ai_platform_network_get_error+0xb2>
 80073b8:	e7fe      	b.n	80073b8 <ai_platform_network_get_error+0x40>
 80073ba:	f7ff ff0f 	bl	80071dc <_ai_platform_acquire_crc>
 80073be:	4b20      	ldr	r3, [pc, #128]	; (8007440 <ai_platform_network_get_error+0xc8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ca:	d010      	beq.n	80073ee <ai_platform_network_get_error+0x76>
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <ai_platform_network_get_error+0xcc>)
 80073ce:	2301      	movs	r3, #1
 80073d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80073d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1fb      	bne.n	80073d4 <ai_platform_network_get_error+0x5c>
 80073dc:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <ai_platform_network_get_error+0xd0>)
 80073de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80073e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80073e6:	4b19      	ldr	r3, [pc, #100]	; (800744c <ai_platform_network_get_error+0xd4>)
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d00d      	beq.n	8007408 <ai_platform_network_get_error+0x90>
 80073ec:	e7fe      	b.n	80073ec <ai_platform_network_get_error+0x74>
 80073ee:	4a18      	ldr	r2, [pc, #96]	; (8007450 <ai_platform_network_get_error+0xd8>)
 80073f0:	2301      	movs	r3, #1
 80073f2:	6093      	str	r3, [r2, #8]
 80073f4:	6893      	ldr	r3, [r2, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1fc      	bne.n	80073f4 <ai_platform_network_get_error+0x7c>
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <ai_platform_network_get_error+0xd0>)
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	6812      	ldr	r2, [r2, #0]
 8007400:	4b12      	ldr	r3, [pc, #72]	; (800744c <ai_platform_network_get_error+0xd4>)
 8007402:	429a      	cmp	r2, r3
 8007404:	d000      	beq.n	8007408 <ai_platform_network_get_error+0x90>
 8007406:	e7fe      	b.n	8007406 <ai_platform_network_get_error+0x8e>
 8007408:	f7ff feea 	bl	80071e0 <_ai_platform_release_crc>
 800740c:	f241 0010 	movw	r0, #4112	; 0x1010
 8007410:	bd10      	pop	{r4, pc}
 8007412:	4a0f      	ldr	r2, [pc, #60]	; (8007450 <ai_platform_network_get_error+0xd8>)
 8007414:	2301      	movs	r3, #1
 8007416:	6093      	str	r3, [r2, #8]
 8007418:	6893      	ldr	r3, [r2, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1fc      	bne.n	8007418 <ai_platform_network_get_error+0xa0>
 800741e:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <ai_platform_network_get_error+0xd0>)
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	4b09      	ldr	r3, [pc, #36]	; (800744c <ai_platform_network_get_error+0xd4>)
 8007426:	429a      	cmp	r2, r3
 8007428:	d107      	bne.n	800743a <ai_platform_network_get_error+0xc2>
 800742a:	f7ff fed9 	bl	80071e0 <_ai_platform_release_crc>
 800742e:	f104 0010 	add.w	r0, r4, #16
 8007432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007436:	f000 be8d 	b.w	8008154 <core_get_error>
 800743a:	e7fe      	b.n	800743a <ai_platform_network_get_error+0xc2>
 800743c:	a1c00100 	.word	0xa1c00100
 8007440:	e0042000 	.word	0xe0042000
 8007444:	58024000 	.word	0x58024000
 8007448:	f407a5c2 	.word	0xf407a5c2
 800744c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007450:	40023000 	.word	0x40023000

08007454 <ai_platform_network_set_error>:
 8007454:	b110      	cbz	r0, 800745c <ai_platform_network_set_error+0x8>
 8007456:	3010      	adds	r0, #16
 8007458:	f000 be82 	b.w	8008160 <core_set_error>
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop

08007460 <ai_platform_inputs_get>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	b085      	sub	sp, #20
 8007466:	9102      	str	r1, [sp, #8]
 8007468:	b1f0      	cbz	r0, 80074a8 <ai_platform_inputs_get+0x48>
 800746a:	4b62      	ldr	r3, [pc, #392]	; (80075f4 <ai_platform_inputs_get+0x194>)
 800746c:	6802      	ldr	r2, [r0, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	4607      	mov	r7, r0
 8007472:	d119      	bne.n	80074a8 <ai_platform_inputs_get+0x48>
 8007474:	f7ff feb2 	bl	80071dc <_ai_platform_acquire_crc>
 8007478:	4b5f      	ldr	r3, [pc, #380]	; (80075f8 <ai_platform_inputs_get+0x198>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007484:	d03d      	beq.n	8007502 <ai_platform_inputs_get+0xa2>
 8007486:	4a5d      	ldr	r2, [pc, #372]	; (80075fc <ai_platform_inputs_get+0x19c>)
 8007488:	2301      	movs	r3, #1
 800748a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800748e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1fb      	bne.n	800748e <ai_platform_inputs_get+0x2e>
 8007496:	4b5a      	ldr	r3, [pc, #360]	; (8007600 <ai_platform_inputs_get+0x1a0>)
 8007498:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800749c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80074a0:	4b58      	ldr	r3, [pc, #352]	; (8007604 <ai_platform_inputs_get+0x1a4>)
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d039      	beq.n	800751a <ai_platform_inputs_get+0xba>
 80074a6:	e7fe      	b.n	80074a6 <ai_platform_inputs_get+0x46>
 80074a8:	f7ff fe98 	bl	80071dc <_ai_platform_acquire_crc>
 80074ac:	4b52      	ldr	r3, [pc, #328]	; (80075f8 <ai_platform_inputs_get+0x198>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d010      	beq.n	80074dc <ai_platform_inputs_get+0x7c>
 80074ba:	4a50      	ldr	r2, [pc, #320]	; (80075fc <ai_platform_inputs_get+0x19c>)
 80074bc:	2301      	movs	r3, #1
 80074be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80074c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1fb      	bne.n	80074c2 <ai_platform_inputs_get+0x62>
 80074ca:	4b4d      	ldr	r3, [pc, #308]	; (8007600 <ai_platform_inputs_get+0x1a0>)
 80074cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80074d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80074d4:	4b4b      	ldr	r3, [pc, #300]	; (8007604 <ai_platform_inputs_get+0x1a4>)
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d00d      	beq.n	80074f6 <ai_platform_inputs_get+0x96>
 80074da:	e7fe      	b.n	80074da <ai_platform_inputs_get+0x7a>
 80074dc:	4a4a      	ldr	r2, [pc, #296]	; (8007608 <ai_platform_inputs_get+0x1a8>)
 80074de:	2301      	movs	r3, #1
 80074e0:	6093      	str	r3, [r2, #8]
 80074e2:	6893      	ldr	r3, [r2, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1fc      	bne.n	80074e2 <ai_platform_inputs_get+0x82>
 80074e8:	4b45      	ldr	r3, [pc, #276]	; (8007600 <ai_platform_inputs_get+0x1a0>)
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	4b45      	ldr	r3, [pc, #276]	; (8007604 <ai_platform_inputs_get+0x1a4>)
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d000      	beq.n	80074f6 <ai_platform_inputs_get+0x96>
 80074f4:	e7fe      	b.n	80074f4 <ai_platform_inputs_get+0x94>
 80074f6:	f7ff fe73 	bl	80071e0 <_ai_platform_release_crc>
 80074fa:	2000      	movs	r0, #0
 80074fc:	b005      	add	sp, #20
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	4a41      	ldr	r2, [pc, #260]	; (8007608 <ai_platform_inputs_get+0x1a8>)
 8007504:	2301      	movs	r3, #1
 8007506:	6093      	str	r3, [r2, #8]
 8007508:	6893      	ldr	r3, [r2, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1fc      	bne.n	8007508 <ai_platform_inputs_get+0xa8>
 800750e:	4b3c      	ldr	r3, [pc, #240]	; (8007600 <ai_platform_inputs_get+0x1a0>)
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	4b3b      	ldr	r3, [pc, #236]	; (8007604 <ai_platform_inputs_get+0x1a4>)
 8007516:	429a      	cmp	r2, r3
 8007518:	d155      	bne.n	80075c6 <ai_platform_inputs_get+0x166>
 800751a:	f7ff fe61 	bl	80071e0 <_ai_platform_release_crc>
 800751e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d051      	beq.n	80075c8 <ai_platform_inputs_get+0x168>
 8007524:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8007528:	f1ba 0f00 	cmp.w	sl, #0
 800752c:	d04c      	beq.n	80075c8 <ai_platform_inputs_get+0x168>
 800752e:	f04f 0b00 	mov.w	fp, #0
 8007532:	465d      	mov	r5, fp
 8007534:	9703      	str	r7, [sp, #12]
 8007536:	e016      	b.n	8007566 <ai_platform_inputs_get+0x106>
 8007538:	9901      	ldr	r1, [sp, #4]
 800753a:	2301      	movs	r3, #1
 800753c:	507b      	str	r3, [r7, r1]
 800753e:	69b1      	ldr	r1, [r6, #24]
 8007540:	6849      	ldr	r1, [r1, #4]
 8007542:	6121      	str	r1, [r4, #16]
 8007544:	f04f 0301 	mov.w	r3, #1
 8007548:	7523      	strb	r3, [r4, #20]
 800754a:	e9c4 c200 	strd	ip, r2, [r4]
 800754e:	6962      	ldr	r2, [r4, #20]
 8007550:	60a0      	str	r0, [r4, #8]
 8007552:	2300      	movs	r3, #0
 8007554:	f369 221f 	bfi	r2, r9, #8, #24
 8007558:	f8c4 8018 	str.w	r8, [r4, #24]
 800755c:	60e3      	str	r3, [r4, #12]
 800755e:	3501      	adds	r5, #1
 8007560:	f10b 0b1c 	add.w	fp, fp, #28
 8007564:	6162      	str	r2, [r4, #20]
 8007566:	f8ba 3000 	ldrh.w	r3, [sl]
 800756a:	42ab      	cmp	r3, r5
 800756c:	b2aa      	uxth	r2, r5
 800756e:	d93a      	bls.n	80075e6 <ai_platform_inputs_get+0x186>
 8007570:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007574:	00e9      	lsls	r1, r5, #3
 8007576:	9101      	str	r1, [sp, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d034      	beq.n	80075e6 <ai_platform_inputs_get+0x186>
 800757c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007580:	2e00      	cmp	r6, #0
 8007582:	d030      	beq.n	80075e6 <ai_platform_inputs_get+0x186>
 8007584:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007588:	69b2      	ldr	r2, [r6, #24]
 800758a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800758e:	6810      	ldr	r0, [r2, #0]
 8007590:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007594:	68b3      	ldr	r3, [r6, #8]
 8007596:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800759a:	f001 fbe9 	bl	8008d70 <ai_array_to_buffer_fmt>
 800759e:	69b1      	ldr	r1, [r6, #24]
 80075a0:	4684      	mov	ip, r0
 80075a2:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80075a6:	688a      	ldr	r2, [r1, #8]
 80075a8:	445c      	add	r4, fp
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d0c8      	beq.n	8007540 <ai_platform_inputs_get+0xe0>
 80075ae:	2100      	movs	r1, #0
 80075b0:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80075b4:	6831      	ldr	r1, [r6, #0]
 80075b6:	6041      	str	r1, [r0, #4]
 80075b8:	b111      	cbz	r1, 80075c0 <ai_platform_inputs_get+0x160>
 80075ba:	8849      	ldrh	r1, [r1, #2]
 80075bc:	2900      	cmp	r1, #0
 80075be:	d1bb      	bne.n	8007538 <ai_platform_inputs_get+0xd8>
 80075c0:	69b1      	ldr	r1, [r6, #24]
 80075c2:	2000      	movs	r0, #0
 80075c4:	e7bc      	b.n	8007540 <ai_platform_inputs_get+0xe0>
 80075c6:	e7fe      	b.n	80075c6 <ai_platform_inputs_get+0x166>
 80075c8:	2218      	movs	r2, #24
 80075ca:	2111      	movs	r1, #17
 80075cc:	f107 0010 	add.w	r0, r7, #16
 80075d0:	f000 fdc6 	bl	8008160 <core_set_error>
 80075d4:	2200      	movs	r2, #0
 80075d6:	4610      	mov	r0, r2
 80075d8:	9b02      	ldr	r3, [sp, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d08e      	beq.n	80074fc <ai_platform_inputs_get+0x9c>
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	b005      	add	sp, #20
 80075e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e6:	9f03      	ldr	r7, [sp, #12]
 80075e8:	2a00      	cmp	r2, #0
 80075ea:	d0ed      	beq.n	80075c8 <ai_platform_inputs_get+0x168>
 80075ec:	f8da 3008 	ldr.w	r3, [sl, #8]
 80075f0:	6858      	ldr	r0, [r3, #4]
 80075f2:	e7f1      	b.n	80075d8 <ai_platform_inputs_get+0x178>
 80075f4:	a1c00100 	.word	0xa1c00100
 80075f8:	e0042000 	.word	0xe0042000
 80075fc:	58024000 	.word	0x58024000
 8007600:	f407a5c2 	.word	0xf407a5c2
 8007604:	b5e8b5cd 	.word	0xb5e8b5cd
 8007608:	40023000 	.word	0x40023000

0800760c <ai_platform_outputs_get>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	b085      	sub	sp, #20
 8007612:	9102      	str	r1, [sp, #8]
 8007614:	b1f0      	cbz	r0, 8007654 <ai_platform_outputs_get+0x48>
 8007616:	4b5f      	ldr	r3, [pc, #380]	; (8007794 <ai_platform_outputs_get+0x188>)
 8007618:	6802      	ldr	r2, [r0, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	4607      	mov	r7, r0
 800761e:	d119      	bne.n	8007654 <ai_platform_outputs_get+0x48>
 8007620:	f7ff fddc 	bl	80071dc <_ai_platform_acquire_crc>
 8007624:	4b5c      	ldr	r3, [pc, #368]	; (8007798 <ai_platform_outputs_get+0x18c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800762c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007630:	d03d      	beq.n	80076ae <ai_platform_outputs_get+0xa2>
 8007632:	4a5a      	ldr	r2, [pc, #360]	; (800779c <ai_platform_outputs_get+0x190>)
 8007634:	2301      	movs	r3, #1
 8007636:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800763a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1fb      	bne.n	800763a <ai_platform_outputs_get+0x2e>
 8007642:	4b57      	ldr	r3, [pc, #348]	; (80077a0 <ai_platform_outputs_get+0x194>)
 8007644:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007648:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800764c:	4b55      	ldr	r3, [pc, #340]	; (80077a4 <ai_platform_outputs_get+0x198>)
 800764e:	429a      	cmp	r2, r3
 8007650:	d039      	beq.n	80076c6 <ai_platform_outputs_get+0xba>
 8007652:	e7fe      	b.n	8007652 <ai_platform_outputs_get+0x46>
 8007654:	f7ff fdc2 	bl	80071dc <_ai_platform_acquire_crc>
 8007658:	4b4f      	ldr	r3, [pc, #316]	; (8007798 <ai_platform_outputs_get+0x18c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007664:	d010      	beq.n	8007688 <ai_platform_outputs_get+0x7c>
 8007666:	4a4d      	ldr	r2, [pc, #308]	; (800779c <ai_platform_outputs_get+0x190>)
 8007668:	2301      	movs	r3, #1
 800766a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800766e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1fb      	bne.n	800766e <ai_platform_outputs_get+0x62>
 8007676:	4b4a      	ldr	r3, [pc, #296]	; (80077a0 <ai_platform_outputs_get+0x194>)
 8007678:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800767c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007680:	4b48      	ldr	r3, [pc, #288]	; (80077a4 <ai_platform_outputs_get+0x198>)
 8007682:	429a      	cmp	r2, r3
 8007684:	d00d      	beq.n	80076a2 <ai_platform_outputs_get+0x96>
 8007686:	e7fe      	b.n	8007686 <ai_platform_outputs_get+0x7a>
 8007688:	4a47      	ldr	r2, [pc, #284]	; (80077a8 <ai_platform_outputs_get+0x19c>)
 800768a:	2301      	movs	r3, #1
 800768c:	6093      	str	r3, [r2, #8]
 800768e:	6893      	ldr	r3, [r2, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1fc      	bne.n	800768e <ai_platform_outputs_get+0x82>
 8007694:	4b42      	ldr	r3, [pc, #264]	; (80077a0 <ai_platform_outputs_get+0x194>)
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	4b42      	ldr	r3, [pc, #264]	; (80077a4 <ai_platform_outputs_get+0x198>)
 800769c:	429a      	cmp	r2, r3
 800769e:	d000      	beq.n	80076a2 <ai_platform_outputs_get+0x96>
 80076a0:	e7fe      	b.n	80076a0 <ai_platform_outputs_get+0x94>
 80076a2:	f7ff fd9d 	bl	80071e0 <_ai_platform_release_crc>
 80076a6:	2000      	movs	r0, #0
 80076a8:	b005      	add	sp, #20
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	4a3e      	ldr	r2, [pc, #248]	; (80077a8 <ai_platform_outputs_get+0x19c>)
 80076b0:	2301      	movs	r3, #1
 80076b2:	6093      	str	r3, [r2, #8]
 80076b4:	6893      	ldr	r3, [r2, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1fc      	bne.n	80076b4 <ai_platform_outputs_get+0xa8>
 80076ba:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <ai_platform_outputs_get+0x194>)
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	4b38      	ldr	r3, [pc, #224]	; (80077a4 <ai_platform_outputs_get+0x198>)
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d150      	bne.n	8007768 <ai_platform_outputs_get+0x15c>
 80076c6:	f7ff fd8b 	bl	80071e0 <_ai_platform_release_crc>
 80076ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d958      	bls.n	8007782 <ai_platform_outputs_get+0x176>
 80076d0:	f04f 0b00 	mov.w	fp, #0
 80076d4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80076d8:	9703      	str	r7, [sp, #12]
 80076da:	465d      	mov	r5, fp
 80076dc:	e016      	b.n	800770c <ai_platform_outputs_get+0x100>
 80076de:	9901      	ldr	r1, [sp, #4]
 80076e0:	2301      	movs	r3, #1
 80076e2:	507b      	str	r3, [r7, r1]
 80076e4:	69b1      	ldr	r1, [r6, #24]
 80076e6:	6849      	ldr	r1, [r1, #4]
 80076e8:	6121      	str	r1, [r4, #16]
 80076ea:	f04f 0301 	mov.w	r3, #1
 80076ee:	7523      	strb	r3, [r4, #20]
 80076f0:	e9c4 c200 	strd	ip, r2, [r4]
 80076f4:	6962      	ldr	r2, [r4, #20]
 80076f6:	60a0      	str	r0, [r4, #8]
 80076f8:	2300      	movs	r3, #0
 80076fa:	f369 221f 	bfi	r2, r9, #8, #24
 80076fe:	f8c4 8018 	str.w	r8, [r4, #24]
 8007702:	60e3      	str	r3, [r4, #12]
 8007704:	3501      	adds	r5, #1
 8007706:	f10b 0b1c 	add.w	fp, fp, #28
 800770a:	6162      	str	r2, [r4, #20]
 800770c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007710:	42ab      	cmp	r3, r5
 8007712:	b2aa      	uxth	r2, r5
 8007714:	d929      	bls.n	800776a <ai_platform_outputs_get+0x15e>
 8007716:	f8da 3010 	ldr.w	r3, [sl, #16]
 800771a:	00e9      	lsls	r1, r5, #3
 800771c:	9101      	str	r1, [sp, #4]
 800771e:	b323      	cbz	r3, 800776a <ai_platform_outputs_get+0x15e>
 8007720:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007724:	b30e      	cbz	r6, 800776a <ai_platform_outputs_get+0x15e>
 8007726:	f8da 3014 	ldr.w	r3, [sl, #20]
 800772a:	69b2      	ldr	r2, [r6, #24]
 800772c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8007730:	6810      	ldr	r0, [r2, #0]
 8007732:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007736:	68b3      	ldr	r3, [r6, #8]
 8007738:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800773c:	f001 fb18 	bl	8008d70 <ai_array_to_buffer_fmt>
 8007740:	69b1      	ldr	r1, [r6, #24]
 8007742:	4684      	mov	ip, r0
 8007744:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8007748:	688a      	ldr	r2, [r1, #8]
 800774a:	445c      	add	r4, fp
 800774c:	2800      	cmp	r0, #0
 800774e:	d0ca      	beq.n	80076e6 <ai_platform_outputs_get+0xda>
 8007750:	2100      	movs	r1, #0
 8007752:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8007756:	6831      	ldr	r1, [r6, #0]
 8007758:	6041      	str	r1, [r0, #4]
 800775a:	b111      	cbz	r1, 8007762 <ai_platform_outputs_get+0x156>
 800775c:	8849      	ldrh	r1, [r1, #2]
 800775e:	2900      	cmp	r1, #0
 8007760:	d1bd      	bne.n	80076de <ai_platform_outputs_get+0xd2>
 8007762:	69b1      	ldr	r1, [r6, #24]
 8007764:	2000      	movs	r0, #0
 8007766:	e7be      	b.n	80076e6 <ai_platform_outputs_get+0xda>
 8007768:	e7fe      	b.n	8007768 <ai_platform_outputs_get+0x15c>
 800776a:	9f03      	ldr	r7, [sp, #12]
 800776c:	b14a      	cbz	r2, 8007782 <ai_platform_outputs_get+0x176>
 800776e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007772:	6858      	ldr	r0, [r3, #4]
 8007774:	9b02      	ldr	r3, [sp, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d096      	beq.n	80076a8 <ai_platform_outputs_get+0x9c>
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	b005      	add	sp, #20
 800777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007782:	2218      	movs	r2, #24
 8007784:	2111      	movs	r1, #17
 8007786:	f107 0010 	add.w	r0, r7, #16
 800778a:	f000 fce9 	bl	8008160 <core_set_error>
 800778e:	2200      	movs	r2, #0
 8007790:	4610      	mov	r0, r2
 8007792:	e7ef      	b.n	8007774 <ai_platform_outputs_get+0x168>
 8007794:	a1c00100 	.word	0xa1c00100
 8007798:	e0042000 	.word	0xe0042000
 800779c:	58024000 	.word	0x58024000
 80077a0:	f407a5c2 	.word	0xf407a5c2
 80077a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80077a8:	40023000 	.word	0x40023000

080077ac <ai_platform_network_create>:
 80077ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077b0:	b083      	sub	sp, #12
 80077b2:	4606      	mov	r6, r0
 80077b4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80077b8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80077bc:	4615      	mov	r5, r2
 80077be:	461f      	mov	r7, r3
 80077c0:	f7ff fd0c 	bl	80071dc <_ai_platform_acquire_crc>
 80077c4:	b188      	cbz	r0, 80077ea <ai_platform_network_create+0x3e>
 80077c6:	4a5d      	ldr	r2, [pc, #372]	; (800793c <ai_platform_network_create+0x190>)
 80077c8:	6812      	ldr	r2, [r2, #0]
 80077ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80077ce:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80077d2:	4603      	mov	r3, r0
 80077d4:	d00e      	beq.n	80077f4 <ai_platform_network_create+0x48>
 80077d6:	4a5a      	ldr	r2, [pc, #360]	; (8007940 <ai_platform_network_create+0x194>)
 80077d8:	2118      	movs	r1, #24
 80077da:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80077de:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80077e2:	2918      	cmp	r1, #24
 80077e4:	d018      	beq.n	8007818 <ai_platform_network_create+0x6c>
 80077e6:	f7ff fcfb 	bl	80071e0 <_ai_platform_release_crc>
 80077ea:	f244 1033 	movw	r0, #16691	; 0x4133
 80077ee:	b003      	add	sp, #12
 80077f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077f4:	4a53      	ldr	r2, [pc, #332]	; (8007944 <ai_platform_network_create+0x198>)
 80077f6:	2101      	movs	r1, #1
 80077f8:	6091      	str	r1, [r2, #8]
 80077fa:	2114      	movs	r1, #20
 80077fc:	e001      	b.n	8007802 <ai_platform_network_create+0x56>
 80077fe:	3901      	subs	r1, #1
 8007800:	d002      	beq.n	8007808 <ai_platform_network_create+0x5c>
 8007802:	6894      	ldr	r4, [r2, #8]
 8007804:	2c00      	cmp	r4, #0
 8007806:	d1fa      	bne.n	80077fe <ai_platform_network_create+0x52>
 8007808:	4a4e      	ldr	r2, [pc, #312]	; (8007944 <ai_platform_network_create+0x198>)
 800780a:	6891      	ldr	r1, [r2, #8]
 800780c:	b911      	cbnz	r1, 8007814 <ai_platform_network_create+0x68>
 800780e:	6812      	ldr	r2, [r2, #0]
 8007810:	3201      	adds	r2, #1
 8007812:	d008      	beq.n	8007826 <ai_platform_network_create+0x7a>
 8007814:	4618      	mov	r0, r3
 8007816:	e7e6      	b.n	80077e6 <ai_platform_network_create+0x3a>
 8007818:	2101      	movs	r1, #1
 800781a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800781e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8007822:	2900      	cmp	r1, #0
 8007824:	d1fb      	bne.n	800781e <ai_platform_network_create+0x72>
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff fcda 	bl	80071e0 <_ai_platform_release_crc>
 800782c:	f7ff fcd6 	bl	80071dc <_ai_platform_acquire_crc>
 8007830:	4b42      	ldr	r3, [pc, #264]	; (800793c <ai_platform_network_create+0x190>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800783c:	d010      	beq.n	8007860 <ai_platform_network_create+0xb4>
 800783e:	4b40      	ldr	r3, [pc, #256]	; (8007940 <ai_platform_network_create+0x194>)
 8007840:	2201      	movs	r2, #1
 8007842:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8007846:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800784a:	2900      	cmp	r1, #0
 800784c:	d1fb      	bne.n	8007846 <ai_platform_network_create+0x9a>
 800784e:	4a3e      	ldr	r2, [pc, #248]	; (8007948 <ai_platform_network_create+0x19c>)
 8007850:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8007854:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8007858:	4b3c      	ldr	r3, [pc, #240]	; (800794c <ai_platform_network_create+0x1a0>)
 800785a:	429a      	cmp	r2, r3
 800785c:	d00c      	beq.n	8007878 <ai_platform_network_create+0xcc>
 800785e:	e7fe      	b.n	800785e <ai_platform_network_create+0xb2>
 8007860:	4a38      	ldr	r2, [pc, #224]	; (8007944 <ai_platform_network_create+0x198>)
 8007862:	2301      	movs	r3, #1
 8007864:	6093      	str	r3, [r2, #8]
 8007866:	6893      	ldr	r3, [r2, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1fc      	bne.n	8007866 <ai_platform_network_create+0xba>
 800786c:	4b36      	ldr	r3, [pc, #216]	; (8007948 <ai_platform_network_create+0x19c>)
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	4b36      	ldr	r3, [pc, #216]	; (800794c <ai_platform_network_create+0x1a0>)
 8007874:	429a      	cmp	r2, r3
 8007876:	d122      	bne.n	80078be <ai_platform_network_create+0x112>
 8007878:	f7ff fcb2 	bl	80071e0 <_ai_platform_release_crc>
 800787c:	b38e      	cbz	r6, 80078e2 <ai_platform_network_create+0x136>
 800787e:	4b34      	ldr	r3, [pc, #208]	; (8007950 <ai_platform_network_create+0x1a4>)
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	6035      	str	r5, [r6, #0]
 8007884:	f000 fc64 	bl	8008150 <core_init>
 8007888:	b1d0      	cbz	r0, 80078c0 <ai_platform_network_create+0x114>
 800788a:	f7ff fca7 	bl	80071dc <_ai_platform_acquire_crc>
 800788e:	4b2b      	ldr	r3, [pc, #172]	; (800793c <ai_platform_network_create+0x190>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789a:	d025      	beq.n	80078e8 <ai_platform_network_create+0x13c>
 800789c:	4a28      	ldr	r2, [pc, #160]	; (8007940 <ai_platform_network_create+0x194>)
 800789e:	2301      	movs	r3, #1
 80078a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80078a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1fb      	bne.n	80078a4 <ai_platform_network_create+0xf8>
 80078ac:	4b26      	ldr	r3, [pc, #152]	; (8007948 <ai_platform_network_create+0x19c>)
 80078ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80078b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80078b6:	4b25      	ldr	r3, [pc, #148]	; (800794c <ai_platform_network_create+0x1a0>)
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d022      	beq.n	8007902 <ai_platform_network_create+0x156>
 80078bc:	e7fe      	b.n	80078bc <ai_platform_network_create+0x110>
 80078be:	e7fe      	b.n	80078be <ai_platform_network_create+0x112>
 80078c0:	2430      	movs	r4, #48	; 0x30
 80078c2:	2300      	movs	r3, #0
 80078c4:	6033      	str	r3, [r6, #0]
 80078c6:	2610      	movs	r6, #16
 80078c8:	464a      	mov	r2, r9
 80078ca:	4641      	mov	r1, r8
 80078cc:	4638      	mov	r0, r7
 80078ce:	f001 fa31 	bl	8008d34 <ai_version_get>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2000      	movs	r0, #0
 80078d6:	f364 0007 	bfi	r0, r4, #0, #8
 80078da:	64ab      	str	r3, [r5, #72]	; 0x48
 80078dc:	f366 201f 	bfi	r0, r6, #8, #24
 80078e0:	e785      	b.n	80077ee <ai_platform_network_create+0x42>
 80078e2:	f241 0010 	movw	r0, #4112	; 0x1010
 80078e6:	e782      	b.n	80077ee <ai_platform_network_create+0x42>
 80078e8:	4a16      	ldr	r2, [pc, #88]	; (8007944 <ai_platform_network_create+0x198>)
 80078ea:	2301      	movs	r3, #1
 80078ec:	6093      	str	r3, [r2, #8]
 80078ee:	6893      	ldr	r3, [r2, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1fc      	bne.n	80078ee <ai_platform_network_create+0x142>
 80078f4:	4b14      	ldr	r3, [pc, #80]	; (8007948 <ai_platform_network_create+0x19c>)
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	4b14      	ldr	r3, [pc, #80]	; (800794c <ai_platform_network_create+0x1a0>)
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d000      	beq.n	8007902 <ai_platform_network_create+0x156>
 8007900:	e7fe      	b.n	8007900 <ai_platform_network_create+0x154>
 8007902:	f7ff fc6d 	bl	80071e0 <_ai_platform_release_crc>
 8007906:	2200      	movs	r2, #0
 8007908:	4641      	mov	r1, r8
 800790a:	4638      	mov	r0, r7
 800790c:	f001 fa12 	bl	8008d34 <ai_version_get>
 8007910:	2200      	movs	r2, #0
 8007912:	4604      	mov	r4, r0
 8007914:	2105      	movs	r1, #5
 8007916:	2001      	movs	r0, #1
 8007918:	f001 fa0c 	bl	8008d34 <ai_version_get>
 800791c:	4284      	cmp	r4, r0
 800791e:	d001      	beq.n	8007924 <ai_platform_network_create+0x178>
 8007920:	2401      	movs	r4, #1
 8007922:	e7ce      	b.n	80078c2 <ai_platform_network_create+0x116>
 8007924:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <ai_platform_network_create+0x1a8>)
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	a801      	add	r0, sp, #4
 800792a:	f001 f849 	bl	80089c0 <ai_check_custom_types>
 800792e:	b110      	cbz	r0, 8007936 <ai_platform_network_create+0x18a>
 8007930:	2600      	movs	r6, #0
 8007932:	4634      	mov	r4, r6
 8007934:	e7c8      	b.n	80078c8 <ai_platform_network_create+0x11c>
 8007936:	2402      	movs	r4, #2
 8007938:	e7c3      	b.n	80078c2 <ai_platform_network_create+0x116>
 800793a:	bf00      	nop
 800793c:	e0042000 	.word	0xe0042000
 8007940:	58024000 	.word	0x58024000
 8007944:	40023000 	.word	0x40023000
 8007948:	f407a5c2 	.word	0xf407a5c2
 800794c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007950:	a1c00100 	.word	0xa1c00100
 8007954:	84048403 	.word	0x84048403

08007958 <ai_platform_network_init>:
 8007958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800795c:	b1f8      	cbz	r0, 800799e <ai_platform_network_init+0x46>
 800795e:	4b6e      	ldr	r3, [pc, #440]	; (8007b18 <ai_platform_network_init+0x1c0>)
 8007960:	6802      	ldr	r2, [r0, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	4604      	mov	r4, r0
 8007966:	d11a      	bne.n	800799e <ai_platform_network_init+0x46>
 8007968:	460e      	mov	r6, r1
 800796a:	f7ff fc37 	bl	80071dc <_ai_platform_acquire_crc>
 800796e:	4b6b      	ldr	r3, [pc, #428]	; (8007b1c <ai_platform_network_init+0x1c4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797a:	d03d      	beq.n	80079f8 <ai_platform_network_init+0xa0>
 800797c:	4a68      	ldr	r2, [pc, #416]	; (8007b20 <ai_platform_network_init+0x1c8>)
 800797e:	2301      	movs	r3, #1
 8007980:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007984:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1fb      	bne.n	8007984 <ai_platform_network_init+0x2c>
 800798c:	4b65      	ldr	r3, [pc, #404]	; (8007b24 <ai_platform_network_init+0x1cc>)
 800798e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007992:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007996:	4b64      	ldr	r3, [pc, #400]	; (8007b28 <ai_platform_network_init+0x1d0>)
 8007998:	429a      	cmp	r2, r3
 800799a:	d039      	beq.n	8007a10 <ai_platform_network_init+0xb8>
 800799c:	e7fe      	b.n	800799c <ai_platform_network_init+0x44>
 800799e:	f7ff fc1d 	bl	80071dc <_ai_platform_acquire_crc>
 80079a2:	4b5e      	ldr	r3, [pc, #376]	; (8007b1c <ai_platform_network_init+0x1c4>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ae:	d010      	beq.n	80079d2 <ai_platform_network_init+0x7a>
 80079b0:	4a5b      	ldr	r2, [pc, #364]	; (8007b20 <ai_platform_network_init+0x1c8>)
 80079b2:	2301      	movs	r3, #1
 80079b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80079b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1fb      	bne.n	80079b8 <ai_platform_network_init+0x60>
 80079c0:	4b58      	ldr	r3, [pc, #352]	; (8007b24 <ai_platform_network_init+0x1cc>)
 80079c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80079c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80079ca:	4b57      	ldr	r3, [pc, #348]	; (8007b28 <ai_platform_network_init+0x1d0>)
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d00d      	beq.n	80079ec <ai_platform_network_init+0x94>
 80079d0:	e7fe      	b.n	80079d0 <ai_platform_network_init+0x78>
 80079d2:	4a56      	ldr	r2, [pc, #344]	; (8007b2c <ai_platform_network_init+0x1d4>)
 80079d4:	2301      	movs	r3, #1
 80079d6:	6093      	str	r3, [r2, #8]
 80079d8:	6893      	ldr	r3, [r2, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1fc      	bne.n	80079d8 <ai_platform_network_init+0x80>
 80079de:	4b51      	ldr	r3, [pc, #324]	; (8007b24 <ai_platform_network_init+0x1cc>)
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	4b50      	ldr	r3, [pc, #320]	; (8007b28 <ai_platform_network_init+0x1d0>)
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d000      	beq.n	80079ec <ai_platform_network_init+0x94>
 80079ea:	e7fe      	b.n	80079ea <ai_platform_network_init+0x92>
 80079ec:	f7ff fbf8 	bl	80071e0 <_ai_platform_release_crc>
 80079f0:	2600      	movs	r6, #0
 80079f2:	4630      	mov	r0, r6
 80079f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079f8:	4a4c      	ldr	r2, [pc, #304]	; (8007b2c <ai_platform_network_init+0x1d4>)
 80079fa:	2301      	movs	r3, #1
 80079fc:	6093      	str	r3, [r2, #8]
 80079fe:	6893      	ldr	r3, [r2, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1fc      	bne.n	80079fe <ai_platform_network_init+0xa6>
 8007a04:	4b47      	ldr	r3, [pc, #284]	; (8007b24 <ai_platform_network_init+0x1cc>)
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	6812      	ldr	r2, [r2, #0]
 8007a0a:	4b47      	ldr	r3, [pc, #284]	; (8007b28 <ai_platform_network_init+0x1d0>)
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d11c      	bne.n	8007a4a <ai_platform_network_init+0xf2>
 8007a10:	f7ff fbe6 	bl	80071e0 <_ai_platform_release_crc>
 8007a14:	2e00      	cmp	r6, #0
 8007a16:	d06f      	beq.n	8007af8 <ai_platform_network_init+0x1a0>
 8007a18:	4b45      	ldr	r3, [pc, #276]	; (8007b30 <ai_platform_network_init+0x1d8>)
 8007a1a:	6832      	ldr	r2, [r6, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d115      	bne.n	8007a4c <ai_platform_network_init+0xf4>
 8007a20:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8007a24:	6933      	ldr	r3, [r6, #16]
 8007a26:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8007a2a:	89f7      	ldrh	r7, [r6, #14]
 8007a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a2e:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8007a32:	2303      	movs	r3, #3
 8007a34:	84e7      	strh	r7, [r4, #38]	; 0x26
 8007a36:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8007a3a:	60e3      	str	r3, [r4, #12]
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	4626      	mov	r6, r4
 8007a40:	f000 ffe8 	bl	8008a14 <ai_layers_init_all>
 8007a44:	4630      	mov	r0, r6
 8007a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a4a:	e7fe      	b.n	8007a4a <ai_platform_network_init+0xf2>
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	4630      	mov	r0, r6
 8007a50:	4635      	mov	r5, r6
 8007a52:	6876      	ldr	r6, [r6, #4]
 8007a54:	f7ff fb74 	bl	8007140 <ai_buffer_get_size>
 8007a58:	f105 081c 	add.w	r8, r5, #28
 8007a5c:	4681      	mov	r9, r0
 8007a5e:	2101      	movs	r1, #1
 8007a60:	4640      	mov	r0, r8
 8007a62:	6a2f      	ldr	r7, [r5, #32]
 8007a64:	f7ff fb6c 	bl	8007140 <ai_buffer_get_size>
 8007a68:	f1b9 0f00 	cmp.w	r9, #0
 8007a6c:	d025      	beq.n	8007aba <ai_platform_network_init+0x162>
 8007a6e:	2201      	movs	r2, #1
 8007a70:	4696      	mov	lr, r2
 8007a72:	bb30      	cbnz	r0, 8007ac2 <ai_platform_network_init+0x16a>
 8007a74:	4680      	mov	r8, r0
 8007a76:	4607      	mov	r7, r0
 8007a78:	b376      	cbz	r6, 8007ad8 <ai_platform_network_init+0x180>
 8007a7a:	8be3      	ldrh	r3, [r4, #30]
 8007a7c:	4573      	cmp	r3, lr
 8007a7e:	d323      	bcc.n	8007ac8 <ai_platform_network_init+0x170>
 8007a80:	b142      	cbz	r2, 8007a94 <ai_platform_network_init+0x13c>
 8007a82:	46ac      	mov	ip, r5
 8007a84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007a88:	6a25      	ldr	r5, [r4, #32]
 8007a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a8c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007a90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007a94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007a96:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	42bb      	cmp	r3, r7
 8007a9e:	83a6      	strh	r6, [r4, #28]
 8007aa0:	d323      	bcc.n	8007aea <ai_platform_network_init+0x192>
 8007aa2:	b37f      	cbz	r7, 8007b04 <ai_platform_network_init+0x1ac>
 8007aa4:	46c4      	mov	ip, r8
 8007aa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007aaa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007aae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8007ab2:	46b6      	mov	lr, r6
 8007ab4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007ab8:	e7bb      	b.n	8007a32 <ai_platform_network_init+0xda>
 8007aba:	464a      	mov	r2, r9
 8007abc:	46ce      	mov	lr, r9
 8007abe:	464d      	mov	r5, r9
 8007ac0:	e7d7      	b.n	8007a72 <ai_platform_network_init+0x11a>
 8007ac2:	b30f      	cbz	r7, 8007b08 <ai_platform_network_init+0x1b0>
 8007ac4:	2701      	movs	r7, #1
 8007ac6:	e7d7      	b.n	8007a78 <ai_platform_network_init+0x120>
 8007ac8:	2212      	movs	r2, #18
 8007aca:	2116      	movs	r1, #22
 8007acc:	f104 0010 	add.w	r0, r4, #16
 8007ad0:	f000 fb46 	bl	8008160 <core_set_error>
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	e78c      	b.n	80079f2 <ai_platform_network_init+0x9a>
 8007ad8:	f1b9 0f00 	cmp.w	r9, #0
 8007adc:	d0cd      	beq.n	8007a7a <ai_platform_network_init+0x122>
 8007ade:	2110      	movs	r1, #16
 8007ae0:	2212      	movs	r2, #18
 8007ae2:	1860      	adds	r0, r4, r1
 8007ae4:	f000 fb3c 	bl	8008160 <core_set_error>
 8007ae8:	e783      	b.n	80079f2 <ai_platform_network_init+0x9a>
 8007aea:	2213      	movs	r2, #19
 8007aec:	2116      	movs	r1, #22
 8007aee:	f104 0010 	add.w	r0, r4, #16
 8007af2:	f000 fb35 	bl	8008160 <core_set_error>
 8007af6:	e77c      	b.n	80079f2 <ai_platform_network_init+0x9a>
 8007af8:	2110      	movs	r1, #16
 8007afa:	2211      	movs	r2, #17
 8007afc:	1860      	adds	r0, r4, r1
 8007afe:	f000 fb2f 	bl	8008160 <core_set_error>
 8007b02:	e776      	b.n	80079f2 <ai_platform_network_init+0x9a>
 8007b04:	46be      	mov	lr, r7
 8007b06:	e794      	b.n	8007a32 <ai_platform_network_init+0xda>
 8007b08:	2110      	movs	r1, #16
 8007b0a:	2213      	movs	r2, #19
 8007b0c:	1860      	adds	r0, r4, r1
 8007b0e:	f000 fb27 	bl	8008160 <core_set_error>
 8007b12:	463e      	mov	r6, r7
 8007b14:	e76d      	b.n	80079f2 <ai_platform_network_init+0x9a>
 8007b16:	bf00      	nop
 8007b18:	a1c00100 	.word	0xa1c00100
 8007b1c:	e0042000 	.word	0xe0042000
 8007b20:	58024000 	.word	0x58024000
 8007b24:	f407a5c2 	.word	0xf407a5c2
 8007b28:	b5e8b5cd 	.word	0xb5e8b5cd
 8007b2c:	40023000 	.word	0x40023000
 8007b30:	a1facade 	.word	0xa1facade

08007b34 <ai_platform_network_post_init>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	b1f0      	cbz	r0, 8007b76 <ai_platform_network_post_init+0x42>
 8007b38:	4b3c      	ldr	r3, [pc, #240]	; (8007c2c <ai_platform_network_post_init+0xf8>)
 8007b3a:	6802      	ldr	r2, [r0, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	4604      	mov	r4, r0
 8007b40:	d119      	bne.n	8007b76 <ai_platform_network_post_init+0x42>
 8007b42:	f7ff fb4b 	bl	80071dc <_ai_platform_acquire_crc>
 8007b46:	4b3a      	ldr	r3, [pc, #232]	; (8007c30 <ai_platform_network_post_init+0xfc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b52:	d03b      	beq.n	8007bcc <ai_platform_network_post_init+0x98>
 8007b54:	4a37      	ldr	r2, [pc, #220]	; (8007c34 <ai_platform_network_post_init+0x100>)
 8007b56:	2301      	movs	r3, #1
 8007b58:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007b5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1fb      	bne.n	8007b5c <ai_platform_network_post_init+0x28>
 8007b64:	4b34      	ldr	r3, [pc, #208]	; (8007c38 <ai_platform_network_post_init+0x104>)
 8007b66:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007b6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007b6e:	4b33      	ldr	r3, [pc, #204]	; (8007c3c <ai_platform_network_post_init+0x108>)
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d037      	beq.n	8007be4 <ai_platform_network_post_init+0xb0>
 8007b74:	e7fe      	b.n	8007b74 <ai_platform_network_post_init+0x40>
 8007b76:	f7ff fb31 	bl	80071dc <_ai_platform_acquire_crc>
 8007b7a:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <ai_platform_network_post_init+0xfc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b86:	d010      	beq.n	8007baa <ai_platform_network_post_init+0x76>
 8007b88:	4a2a      	ldr	r2, [pc, #168]	; (8007c34 <ai_platform_network_post_init+0x100>)
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007b90:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1fb      	bne.n	8007b90 <ai_platform_network_post_init+0x5c>
 8007b98:	4b27      	ldr	r3, [pc, #156]	; (8007c38 <ai_platform_network_post_init+0x104>)
 8007b9a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007b9e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007ba2:	4b26      	ldr	r3, [pc, #152]	; (8007c3c <ai_platform_network_post_init+0x108>)
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d00d      	beq.n	8007bc4 <ai_platform_network_post_init+0x90>
 8007ba8:	e7fe      	b.n	8007ba8 <ai_platform_network_post_init+0x74>
 8007baa:	4a25      	ldr	r2, [pc, #148]	; (8007c40 <ai_platform_network_post_init+0x10c>)
 8007bac:	2301      	movs	r3, #1
 8007bae:	6093      	str	r3, [r2, #8]
 8007bb0:	6893      	ldr	r3, [r2, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1fc      	bne.n	8007bb0 <ai_platform_network_post_init+0x7c>
 8007bb6:	4b20      	ldr	r3, [pc, #128]	; (8007c38 <ai_platform_network_post_init+0x104>)
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	6812      	ldr	r2, [r2, #0]
 8007bbc:	4b1f      	ldr	r3, [pc, #124]	; (8007c3c <ai_platform_network_post_init+0x108>)
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d000      	beq.n	8007bc4 <ai_platform_network_post_init+0x90>
 8007bc2:	e7fe      	b.n	8007bc2 <ai_platform_network_post_init+0x8e>
 8007bc4:	f7ff fb0c 	bl	80071e0 <_ai_platform_release_crc>
 8007bc8:	2000      	movs	r0, #0
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	4a1c      	ldr	r2, [pc, #112]	; (8007c40 <ai_platform_network_post_init+0x10c>)
 8007bce:	2301      	movs	r3, #1
 8007bd0:	6093      	str	r3, [r2, #8]
 8007bd2:	6893      	ldr	r3, [r2, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1fc      	bne.n	8007bd2 <ai_platform_network_post_init+0x9e>
 8007bd8:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <ai_platform_network_post_init+0x104>)
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	4b17      	ldr	r3, [pc, #92]	; (8007c3c <ai_platform_network_post_init+0x108>)
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d11a      	bne.n	8007c1a <ai_platform_network_post_init+0xe6>
 8007be4:	f7ff fafc 	bl	80071e0 <_ai_platform_release_crc>
 8007be8:	68e3      	ldr	r3, [r4, #12]
 8007bea:	f013 0502 	ands.w	r5, r3, #2
 8007bee:	d015      	beq.n	8007c1c <ai_platform_network_post_init+0xe8>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 ff1d 	bl	8008a30 <ai_layers_post_init_all>
 8007bf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bf8:	b16b      	cbz	r3, 8007c16 <ai_platform_network_post_init+0xe2>
 8007bfa:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007bfc:	e007      	b.n	8007c0e <ai_platform_network_post_init+0xda>
 8007bfe:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007c02:	4798      	blx	r3
 8007c04:	692b      	ldr	r3, [r5, #16]
 8007c06:	42ab      	cmp	r3, r5
 8007c08:	d005      	beq.n	8007c16 <ai_platform_network_post_init+0xe2>
 8007c0a:	b123      	cbz	r3, 8007c16 <ai_platform_network_post_init+0xe2>
 8007c0c:	461d      	mov	r5, r3
 8007c0e:	4629      	mov	r1, r5
 8007c10:	2000      	movs	r0, #0
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	d1f3      	bne.n	8007bfe <ai_platform_network_post_init+0xca>
 8007c16:	2001      	movs	r0, #1
 8007c18:	bd38      	pop	{r3, r4, r5, pc}
 8007c1a:	e7fe      	b.n	8007c1a <ai_platform_network_post_init+0xe6>
 8007c1c:	2210      	movs	r2, #16
 8007c1e:	2111      	movs	r1, #17
 8007c20:	18a0      	adds	r0, r4, r2
 8007c22:	f000 fa9d 	bl	8008160 <core_set_error>
 8007c26:	4628      	mov	r0, r5
 8007c28:	bd38      	pop	{r3, r4, r5, pc}
 8007c2a:	bf00      	nop
 8007c2c:	a1c00100 	.word	0xa1c00100
 8007c30:	e0042000 	.word	0xe0042000
 8007c34:	58024000 	.word	0x58024000
 8007c38:	f407a5c2 	.word	0xf407a5c2
 8007c3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007c40:	40023000 	.word	0x40023000

08007c44 <ai_platform_network_process>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	460e      	mov	r6, r1
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	4693      	mov	fp, r2
 8007c4e:	4605      	mov	r5, r0
 8007c50:	b120      	cbz	r0, 8007c5c <ai_platform_network_process+0x18>
 8007c52:	4bb8      	ldr	r3, [pc, #736]	; (8007f34 <ai_platform_network_process+0x2f0>)
 8007c54:	6802      	ldr	r2, [r0, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	bf18      	it	ne
 8007c5a:	2500      	movne	r5, #0
 8007c5c:	f7ff fabe 	bl	80071dc <_ai_platform_acquire_crc>
 8007c60:	4bb5      	ldr	r3, [pc, #724]	; (8007f38 <ai_platform_network_process+0x2f4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6c:	d010      	beq.n	8007c90 <ai_platform_network_process+0x4c>
 8007c6e:	4ab3      	ldr	r2, [pc, #716]	; (8007f3c <ai_platform_network_process+0x2f8>)
 8007c70:	2301      	movs	r3, #1
 8007c72:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007c76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1fb      	bne.n	8007c76 <ai_platform_network_process+0x32>
 8007c7e:	4bb0      	ldr	r3, [pc, #704]	; (8007f40 <ai_platform_network_process+0x2fc>)
 8007c80:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007c84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007c88:	4bae      	ldr	r3, [pc, #696]	; (8007f44 <ai_platform_network_process+0x300>)
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d00d      	beq.n	8007caa <ai_platform_network_process+0x66>
 8007c8e:	e7fe      	b.n	8007c8e <ai_platform_network_process+0x4a>
 8007c90:	4aad      	ldr	r2, [pc, #692]	; (8007f48 <ai_platform_network_process+0x304>)
 8007c92:	2301      	movs	r3, #1
 8007c94:	6093      	str	r3, [r2, #8]
 8007c96:	6893      	ldr	r3, [r2, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1fc      	bne.n	8007c96 <ai_platform_network_process+0x52>
 8007c9c:	4ba8      	ldr	r3, [pc, #672]	; (8007f40 <ai_platform_network_process+0x2fc>)
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	6812      	ldr	r2, [r2, #0]
 8007ca2:	4ba8      	ldr	r3, [pc, #672]	; (8007f44 <ai_platform_network_process+0x300>)
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	f040 812c 	bne.w	8007f02 <ai_platform_network_process+0x2be>
 8007caa:	f7ff fa99 	bl	80071e0 <_ai_platform_release_crc>
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	f000 8154 	beq.w	8007f5c <ai_platform_network_process+0x318>
 8007cb4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8124 	beq.w	8007f04 <ai_platform_network_process+0x2c0>
 8007cbc:	68eb      	ldr	r3, [r5, #12]
 8007cbe:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	2700      	movs	r7, #0
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	616f      	str	r7, [r5, #20]
 8007ccc:	f040 813e 	bne.w	8007f4c <ai_platform_network_process+0x308>
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	f000 811d 	beq.w	8007f10 <ai_platform_network_process+0x2cc>
 8007cd6:	f1ba 0f00 	cmp.w	sl, #0
 8007cda:	f000 8119 	beq.w	8007f10 <ai_platform_network_process+0x2cc>
 8007cde:	f8ba 3000 	ldrh.w	r3, [sl]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 8114 	beq.w	8007f10 <ai_platform_network_process+0x2cc>
 8007ce8:	69b3      	ldr	r3, [r6, #24]
 8007cea:	f8cd b00c 	str.w	fp, [sp, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8007cf4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d072      	beq.n	8007de2 <ai_platform_network_process+0x19e>
 8007cfc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007d00:	2c00      	cmp	r4, #0
 8007d02:	d06e      	beq.n	8007de2 <ai_platform_network_process+0x19e>
 8007d04:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007d08:	f8d3 9000 	ldr.w	r9, [r3]
 8007d0c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007d10:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007d14:	f000 81e0 	beq.w	80080d8 <ai_platform_network_process+0x494>
 8007d18:	69a3      	ldr	r3, [r4, #24]
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	685d      	ldr	r5, [r3, #4]
 8007d20:	f7ff fa0e 	bl	8007140 <ai_buffer_get_size>
 8007d24:	4285      	cmp	r5, r0
 8007d26:	f0c0 811b 	bcc.w	8007f60 <ai_platform_network_process+0x31c>
 8007d2a:	68e0      	ldr	r0, [r4, #12]
 8007d2c:	69b1      	ldr	r1, [r6, #24]
 8007d2e:	68c2      	ldr	r2, [r0, #12]
 8007d30:	68cb      	ldr	r3, [r1, #12]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	f040 8114 	bne.w	8007f60 <ai_platform_network_process+0x31c>
 8007d38:	6882      	ldr	r2, [r0, #8]
 8007d3a:	688b      	ldr	r3, [r1, #8]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	f040 810f 	bne.w	8007f60 <ai_platform_network_process+0x31c>
 8007d42:	6842      	ldr	r2, [r0, #4]
 8007d44:	684b      	ldr	r3, [r1, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	f040 810a 	bne.w	8007f60 <ai_platform_network_process+0x31c>
 8007d4c:	69a3      	ldr	r3, [r4, #24]
 8007d4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d52:	f001 f8a1 	bl	8008e98 <ai_array_get_data_byte_size>
 8007d56:	4605      	mov	r5, r0
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fff1 	bl	8008d40 <get_tensor_byte_size>
 8007d5e:	4285      	cmp	r5, r0
 8007d60:	f0c0 80fe 	bcc.w	8007f60 <ai_platform_network_process+0x31c>
 8007d64:	69a3      	ldr	r3, [r4, #24]
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	f001 f802 	bl	8008d70 <ai_array_to_buffer_fmt>
 8007d6c:	6833      	ldr	r3, [r6, #0]
 8007d6e:	4058      	eors	r0, r3
 8007d70:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007d74:	f040 81bb 	bne.w	80080ee <ai_platform_network_process+0x4aa>
 8007d78:	6873      	ldr	r3, [r6, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 81ae 	beq.w	80080dc <ai_platform_network_process+0x498>
 8007d80:	69b3      	ldr	r3, [r6, #24]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 819e 	beq.w	80080c6 <ai_platform_network_process+0x482>
 8007d8a:	9a01      	ldr	r2, [sp, #4]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	bf38      	it	cc
 8007d90:	461a      	movcc	r2, r3
 8007d92:	4620      	mov	r0, r4
 8007d94:	9201      	str	r2, [sp, #4]
 8007d96:	f000 ffd3 	bl	8008d40 <get_tensor_byte_size>
 8007d9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d9e:	69b3      	ldr	r3, [r6, #24]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	fb00 f303 	mul.w	r3, r0, r3
 8007da6:	f8c8 300c 	str.w	r3, [r8, #12]
 8007daa:	6871      	ldr	r1, [r6, #4]
 8007dac:	f8c8 1004 	str.w	r1, [r8, #4]
 8007db0:	440b      	add	r3, r1
 8007db2:	f849 300b 	str.w	r3, [r9, fp]
 8007db6:	69a0      	ldr	r0, [r4, #24]
 8007db8:	6803      	ldr	r3, [r0, #0]
 8007dba:	009a      	lsls	r2, r3, #2
 8007dbc:	f107 0701 	add.w	r7, r7, #1
 8007dc0:	f106 061c 	add.w	r6, r6, #28
 8007dc4:	f100 80af 	bmi.w	8007f26 <ai_platform_network_process+0x2e2>
 8007dc8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007dcc:	1a9b      	subs	r3, r3, r2
 8007dce:	4419      	add	r1, r3
 8007dd0:	6081      	str	r1, [r0, #8]
 8007dd2:	69a3      	ldr	r3, [r4, #24]
 8007dd4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007dd8:	60da      	str	r2, [r3, #12]
 8007dda:	f8ba 3000 	ldrh.w	r3, [sl]
 8007dde:	42bb      	cmp	r3, r7
 8007de0:	d888      	bhi.n	8007cf4 <ai_platform_network_process+0xb0>
 8007de2:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8007de6:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007de8:	f1bb 0f00 	cmp.w	fp, #0
 8007dec:	f000 8188 	beq.w	8008100 <ai_platform_network_process+0x4bc>
 8007df0:	2a01      	cmp	r2, #1
 8007df2:	f240 8160 	bls.w	80080b6 <ai_platform_network_process+0x472>
 8007df6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8007dfa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8159 	beq.w	80080b6 <ai_platform_network_process+0x472>
 8007e04:	465e      	mov	r6, fp
 8007e06:	2700      	movs	r7, #0
 8007e08:	462c      	mov	r4, r5
 8007e0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80b4 	beq.w	8007f7c <ai_platform_network_process+0x338>
 8007e14:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	f000 80af 	beq.w	8007f7c <ai_platform_network_process+0x338>
 8007e1e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007e22:	f8d3 8000 	ldr.w	r8, [r3]
 8007e26:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007e2a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007e2e:	f000 8173 	beq.w	8008118 <ai_platform_network_process+0x4d4>
 8007e32:	69ab      	ldr	r3, [r5, #24]
 8007e34:	2101      	movs	r1, #1
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	9302      	str	r3, [sp, #8]
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7ff f980 	bl	8007140 <ai_buffer_get_size>
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	4283      	cmp	r3, r0
 8007e44:	f0c0 8136 	bcc.w	80080b4 <ai_platform_network_process+0x470>
 8007e48:	68e8      	ldr	r0, [r5, #12]
 8007e4a:	69b1      	ldr	r1, [r6, #24]
 8007e4c:	68c2      	ldr	r2, [r0, #12]
 8007e4e:	68cb      	ldr	r3, [r1, #12]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	f040 812f 	bne.w	80080b4 <ai_platform_network_process+0x470>
 8007e56:	6882      	ldr	r2, [r0, #8]
 8007e58:	688b      	ldr	r3, [r1, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	f040 812a 	bne.w	80080b4 <ai_platform_network_process+0x470>
 8007e60:	6842      	ldr	r2, [r0, #4]
 8007e62:	684b      	ldr	r3, [r1, #4]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	f040 8125 	bne.w	80080b4 <ai_platform_network_process+0x470>
 8007e6a:	69ab      	ldr	r3, [r5, #24]
 8007e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e70:	f001 f812 	bl	8008e98 <ai_array_get_data_byte_size>
 8007e74:	9002      	str	r0, [sp, #8]
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 ff62 	bl	8008d40 <get_tensor_byte_size>
 8007e7c:	9b02      	ldr	r3, [sp, #8]
 8007e7e:	4283      	cmp	r3, r0
 8007e80:	f0c0 8118 	bcc.w	80080b4 <ai_platform_network_process+0x470>
 8007e84:	69ab      	ldr	r3, [r5, #24]
 8007e86:	6818      	ldr	r0, [r3, #0]
 8007e88:	f000 ff72 	bl	8008d70 <ai_array_to_buffer_fmt>
 8007e8c:	6833      	ldr	r3, [r6, #0]
 8007e8e:	4058      	eors	r0, r3
 8007e90:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007e94:	f040 8138 	bne.w	8008108 <ai_platform_network_process+0x4c4>
 8007e98:	6873      	ldr	r3, [r6, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 814f 	beq.w	800813e <ai_platform_network_process+0x4fa>
 8007ea0:	69b3      	ldr	r3, [r6, #24]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8141 	beq.w	800812c <ai_platform_network_process+0x4e8>
 8007eaa:	9a01      	ldr	r2, [sp, #4]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	bf38      	it	cc
 8007eb0:	461a      	movcc	r2, r3
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	9201      	str	r2, [sp, #4]
 8007eb6:	f000 ff43 	bl	8008d40 <get_tensor_byte_size>
 8007eba:	f8ca 0008 	str.w	r0, [sl, #8]
 8007ebe:	69b3      	ldr	r3, [r6, #24]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	fb00 f303 	mul.w	r3, r0, r3
 8007ec6:	f8ca 300c 	str.w	r3, [sl, #12]
 8007eca:	6871      	ldr	r1, [r6, #4]
 8007ecc:	f8ca 1004 	str.w	r1, [sl, #4]
 8007ed0:	440b      	add	r3, r1
 8007ed2:	f848 300b 	str.w	r3, [r8, fp]
 8007ed6:	69a8      	ldr	r0, [r5, #24]
 8007ed8:	6803      	ldr	r3, [r0, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	f107 0701 	add.w	r7, r7, #1
 8007ee0:	f106 061c 	add.w	r6, r6, #28
 8007ee4:	d445      	bmi.n	8007f72 <ai_platform_network_process+0x32e>
 8007ee6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	4419      	add	r1, r3
 8007eee:	6081      	str	r1, [r0, #8]
 8007ef0:	69ab      	ldr	r3, [r5, #24]
 8007ef2:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007ef6:	60da      	str	r2, [r3, #12]
 8007ef8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007efc:	429f      	cmp	r7, r3
 8007efe:	d384      	bcc.n	8007e0a <ai_platform_network_process+0x1c6>
 8007f00:	e03c      	b.n	8007f7c <ai_platform_network_process+0x338>
 8007f02:	e7fe      	b.n	8007f02 <ai_platform_network_process+0x2be>
 8007f04:	68ea      	ldr	r2, [r5, #12]
 8007f06:	616b      	str	r3, [r5, #20]
 8007f08:	f002 0203 	and.w	r2, r2, #3
 8007f0c:	2a03      	cmp	r2, #3
 8007f0e:	d11d      	bne.n	8007f4c <ai_platform_network_process+0x308>
 8007f10:	2217      	movs	r2, #23
 8007f12:	2112      	movs	r1, #18
 8007f14:	f105 0010 	add.w	r0, r5, #16
 8007f18:	f000 f922 	bl	8008160 <core_set_error>
 8007f1c:	2400      	movs	r4, #0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	b005      	add	sp, #20
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	f8ba 3000 	ldrh.w	r3, [sl]
 8007f2a:	429f      	cmp	r7, r3
 8007f2c:	f4ff aee2 	bcc.w	8007cf4 <ai_platform_network_process+0xb0>
 8007f30:	e757      	b.n	8007de2 <ai_platform_network_process+0x19e>
 8007f32:	bf00      	nop
 8007f34:	a1c00100 	.word	0xa1c00100
 8007f38:	e0042000 	.word	0xe0042000
 8007f3c:	58024000 	.word	0x58024000
 8007f40:	f407a5c2 	.word	0xf407a5c2
 8007f44:	b5e8b5cd 	.word	0xb5e8b5cd
 8007f48:	40023000 	.word	0x40023000
 8007f4c:	2230      	movs	r2, #48	; 0x30
 8007f4e:	2111      	movs	r1, #17
 8007f50:	f105 0010 	add.w	r0, r5, #16
 8007f54:	f000 f904 	bl	8008160 <core_set_error>
 8007f58:	2400      	movs	r4, #0
 8007f5a:	e7e0      	b.n	8007f1e <ai_platform_network_process+0x2da>
 8007f5c:	462c      	mov	r4, r5
 8007f5e:	e7de      	b.n	8007f1e <ai_platform_network_process+0x2da>
 8007f60:	9d02      	ldr	r5, [sp, #8]
 8007f62:	2218      	movs	r2, #24
 8007f64:	2112      	movs	r1, #18
 8007f66:	f105 0010 	add.w	r0, r5, #16
 8007f6a:	f000 f8f9 	bl	8008160 <core_set_error>
 8007f6e:	2400      	movs	r4, #0
 8007f70:	e7d5      	b.n	8007f1e <ai_platform_network_process+0x2da>
 8007f72:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007f76:	429f      	cmp	r7, r3
 8007f78:	f4ff af47 	bcc.w	8007e0a <ai_platform_network_process+0x1c6>
 8007f7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007f80:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8007f82:	82a3      	strh	r3, [r4, #20]
 8007f84:	4625      	mov	r5, r4
 8007f86:	2a00      	cmp	r2, #0
 8007f88:	f040 808e 	bne.w	80080a8 <ai_platform_network_process+0x464>
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	4617      	mov	r7, r2
 8007f90:	8aec      	ldrh	r4, [r5, #22]
 8007f92:	429c      	cmp	r4, r3
 8007f94:	bf38      	it	cc
 8007f96:	46ab      	movcc	fp, r5
 8007f98:	d2c1      	bcs.n	8007f1e <ai_platform_network_process+0x2da>
 8007f9a:	2e00      	cmp	r6, #0
 8007f9c:	d030      	beq.n	8008000 <ai_platform_network_process+0x3bc>
 8007f9e:	f04f 0800 	mov.w	r8, #0
 8007fa2:	e014      	b.n	8007fce <ai_platform_network_process+0x38a>
 8007fa4:	6882      	ldr	r2, [r0, #8]
 8007fa6:	68c5      	ldr	r5, [r0, #12]
 8007fa8:	6863      	ldr	r3, [r4, #4]
 8007faa:	1b52      	subs	r2, r2, r5
 8007fac:	4413      	add	r3, r2
 8007fae:	6083      	str	r3, [r0, #8]
 8007fb0:	698b      	ldr	r3, [r1, #24]
 8007fb2:	6862      	ldr	r2, [r4, #4]
 8007fb4:	60da      	str	r2, [r3, #12]
 8007fb6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007fba:	f859 200a 	ldr.w	r2, [r9, sl]
 8007fbe:	440b      	add	r3, r1
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	bf24      	itt	cs
 8007fc4:	68e3      	ldrcs	r3, [r4, #12]
 8007fc6:	1ad3      	subcs	r3, r2, r3
 8007fc8:	6063      	str	r3, [r4, #4]
 8007fca:	f108 0801 	add.w	r8, r8, #1
 8007fce:	8833      	ldrh	r3, [r6, #0]
 8007fd0:	4543      	cmp	r3, r8
 8007fd2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007fd6:	d913      	bls.n	8008000 <ai_platform_network_process+0x3bc>
 8007fd8:	6873      	ldr	r3, [r6, #4]
 8007fda:	b18b      	cbz	r3, 8008000 <ai_platform_network_process+0x3bc>
 8007fdc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007fe0:	b171      	cbz	r1, 8008000 <ai_platform_network_process+0x3bc>
 8007fe2:	6988      	ldr	r0, [r1, #24]
 8007fe4:	68b2      	ldr	r2, [r6, #8]
 8007fe6:	6803      	ldr	r3, [r0, #0]
 8007fe8:	f8d2 9000 	ldr.w	r9, [r2]
 8007fec:	009d      	lsls	r5, r3, #2
 8007fee:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007ff2:	d5d7      	bpl.n	8007fa4 <ai_platform_network_process+0x360>
 8007ff4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8007ff8:	6880      	ldr	r0, [r0, #8]
 8007ffa:	f000 ff89 	bl	8008f10 <memcpy>
 8007ffe:	e7da      	b.n	8007fb6 <ai_platform_network_process+0x372>
 8008000:	4658      	mov	r0, fp
 8008002:	f000 fd29 	bl	8008a58 <ai_layers_forward_all>
 8008006:	2f00      	cmp	r7, #0
 8008008:	d03f      	beq.n	800808a <ai_platform_network_process+0x446>
 800800a:	2400      	movs	r4, #0
 800800c:	e016      	b.n	800803c <ai_platform_network_process+0x3f8>
 800800e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8008012:	f859 100a 	ldr.w	r1, [r9, sl]
 8008016:	4413      	add	r3, r2
 8008018:	428b      	cmp	r3, r1
 800801a:	bf24      	itt	cs
 800801c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8008020:	1acb      	subcs	r3, r1, r3
 8008022:	f8c8 3004 	str.w	r3, [r8, #4]
 8008026:	6981      	ldr	r1, [r0, #24]
 8008028:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800802c:	1b52      	subs	r2, r2, r5
 800802e:	4413      	add	r3, r2
 8008030:	608b      	str	r3, [r1, #8]
 8008032:	6983      	ldr	r3, [r0, #24]
 8008034:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008038:	60da      	str	r2, [r3, #12]
 800803a:	3401      	adds	r4, #1
 800803c:	883b      	ldrh	r3, [r7, #0]
 800803e:	42a3      	cmp	r3, r4
 8008040:	d923      	bls.n	800808a <ai_platform_network_process+0x446>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	b30b      	cbz	r3, 800808a <ai_platform_network_process+0x446>
 8008046:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800804a:	b1f0      	cbz	r0, 800808a <ai_platform_network_process+0x446>
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	6983      	ldr	r3, [r0, #24]
 8008050:	f8d2 9000 	ldr.w	r9, [r2]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	0092      	lsls	r2, r2, #2
 8008058:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800805c:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8008060:	d5d5      	bpl.n	800800e <ai_platform_network_process+0x3ca>
 8008062:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8008066:	6899      	ldr	r1, [r3, #8]
 8008068:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800806c:	f000 ff50 	bl	8008f10 <memcpy>
 8008070:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8008074:	f859 200a 	ldr.w	r2, [r9, sl]
 8008078:	440b      	add	r3, r1
 800807a:	4293      	cmp	r3, r2
 800807c:	bf24      	itt	cs
 800807e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8008082:	1ad3      	subcs	r3, r2, r3
 8008084:	f8c8 3004 	str.w	r3, [r8, #4]
 8008088:	e7d7      	b.n	800803a <ai_platform_network_process+0x3f6>
 800808a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800808e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8008092:	3401      	adds	r4, #1
 8008094:	b2a4      	uxth	r4, r4
 8008096:	42a3      	cmp	r3, r4
 8008098:	f8ab 4016 	strh.w	r4, [fp, #22]
 800809c:	f63f af7d 	bhi.w	8007f9a <ai_platform_network_process+0x356>
 80080a0:	4620      	mov	r0, r4
 80080a2:	b005      	add	sp, #20
 80080a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a8:	2a01      	cmp	r2, #1
 80080aa:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80080ac:	d03c      	beq.n	8008128 <ai_platform_network_process+0x4e4>
 80080ae:	f106 070c 	add.w	r7, r6, #12
 80080b2:	e76d      	b.n	8007f90 <ai_platform_network_process+0x34c>
 80080b4:	4625      	mov	r5, r4
 80080b6:	2218      	movs	r2, #24
 80080b8:	2113      	movs	r1, #19
 80080ba:	f105 0010 	add.w	r0, r5, #16
 80080be:	f000 f84f 	bl	8008160 <core_set_error>
 80080c2:	2400      	movs	r4, #0
 80080c4:	e72b      	b.n	8007f1e <ai_platform_network_process+0x2da>
 80080c6:	9d02      	ldr	r5, [sp, #8]
 80080c8:	4604      	mov	r4, r0
 80080ca:	2221      	movs	r2, #33	; 0x21
 80080cc:	2112      	movs	r1, #18
 80080ce:	f105 0010 	add.w	r0, r5, #16
 80080d2:	f000 f845 	bl	8008160 <core_set_error>
 80080d6:	e722      	b.n	8007f1e <ai_platform_network_process+0x2da>
 80080d8:	9d02      	ldr	r5, [sp, #8]
 80080da:	e719      	b.n	8007f10 <ai_platform_network_process+0x2cc>
 80080dc:	9d02      	ldr	r5, [sp, #8]
 80080de:	4604      	mov	r4, r0
 80080e0:	2217      	movs	r2, #23
 80080e2:	2112      	movs	r1, #18
 80080e4:	f105 0010 	add.w	r0, r5, #16
 80080e8:	f000 f83a 	bl	8008160 <core_set_error>
 80080ec:	e717      	b.n	8007f1e <ai_platform_network_process+0x2da>
 80080ee:	9d02      	ldr	r5, [sp, #8]
 80080f0:	2219      	movs	r2, #25
 80080f2:	2112      	movs	r1, #18
 80080f4:	f105 0010 	add.w	r0, r5, #16
 80080f8:	f000 f832 	bl	8008160 <core_set_error>
 80080fc:	2400      	movs	r4, #0
 80080fe:	e70e      	b.n	8007f1e <ai_platform_network_process+0x2da>
 8008100:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008104:	82ab      	strh	r3, [r5, #20]
 8008106:	e73e      	b.n	8007f86 <ai_platform_network_process+0x342>
 8008108:	f104 0010 	add.w	r0, r4, #16
 800810c:	2219      	movs	r2, #25
 800810e:	2113      	movs	r1, #19
 8008110:	f000 f826 	bl	8008160 <core_set_error>
 8008114:	2400      	movs	r4, #0
 8008116:	e702      	b.n	8007f1e <ai_platform_network_process+0x2da>
 8008118:	f104 0010 	add.w	r0, r4, #16
 800811c:	2217      	movs	r2, #23
 800811e:	2113      	movs	r1, #19
 8008120:	f000 f81e 	bl	8008160 <core_set_error>
 8008124:	4654      	mov	r4, sl
 8008126:	e6fa      	b.n	8007f1e <ai_platform_network_process+0x2da>
 8008128:	2700      	movs	r7, #0
 800812a:	e731      	b.n	8007f90 <ai_platform_network_process+0x34c>
 800812c:	4625      	mov	r5, r4
 800812e:	2221      	movs	r2, #33	; 0x21
 8008130:	4604      	mov	r4, r0
 8008132:	2113      	movs	r1, #19
 8008134:	f105 0010 	add.w	r0, r5, #16
 8008138:	f000 f812 	bl	8008160 <core_set_error>
 800813c:	e6ef      	b.n	8007f1e <ai_platform_network_process+0x2da>
 800813e:	4625      	mov	r5, r4
 8008140:	2217      	movs	r2, #23
 8008142:	4604      	mov	r4, r0
 8008144:	2113      	movs	r1, #19
 8008146:	f105 0010 	add.w	r0, r5, #16
 800814a:	f000 f809 	bl	8008160 <core_set_error>
 800814e:	e6e6      	b.n	8007f1e <ai_platform_network_process+0x2da>

08008150 <core_init>:
 8008150:	2001      	movs	r0, #1
 8008152:	4770      	bx	lr

08008154 <core_get_error>:
 8008154:	4603      	mov	r3, r0
 8008156:	2200      	movs	r2, #0
 8008158:	6800      	ldr	r0, [r0, #0]
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop

08008160 <core_set_error>:
 8008160:	4603      	mov	r3, r0
 8008162:	7800      	ldrb	r0, [r0, #0]
 8008164:	b108      	cbz	r0, 800816a <core_set_error+0xa>
 8008166:	2000      	movs	r0, #0
 8008168:	4770      	bx	lr
 800816a:	7019      	strb	r1, [r3, #0]
 800816c:	6819      	ldr	r1, [r3, #0]
 800816e:	f362 211f 	bfi	r1, r2, #8, #24
 8008172:	2001      	movs	r0, #1
 8008174:	6019      	str	r1, [r3, #0]
 8008176:	4770      	bx	lr

08008178 <forward_dense>:
 8008178:	6983      	ldr	r3, [r0, #24]
 800817a:	881a      	ldrh	r2, [r3, #0]
 800817c:	2a00      	cmp	r2, #0
 800817e:	f000 8181 	beq.w	8008484 <forward_dense+0x30c>
 8008182:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008186:	ed2d 8b02 	vpush	{d8}
 800818a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800818e:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8008192:	b095      	sub	sp, #84	; 0x54
 8008194:	b105      	cbz	r5, 8008198 <forward_dense+0x20>
 8008196:	682d      	ldr	r5, [r5, #0]
 8008198:	2a01      	cmp	r2, #1
 800819a:	f000 828f 	beq.w	80086bc <forward_dense+0x544>
 800819e:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80081a2:	b106      	cbz	r6, 80081a6 <forward_dense+0x2e>
 80081a4:	6836      	ldr	r6, [r6, #0]
 80081a6:	2a02      	cmp	r2, #2
 80081a8:	f000 816e 	beq.w	8008488 <forward_dense+0x310>
 80081ac:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80081b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8274 	beq.w	80086a0 <forward_dense+0x528>
 80081b8:	4619      	mov	r1, r3
 80081ba:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80081be:	6809      	ldr	r1, [r1, #0]
 80081c0:	910d      	str	r1, [sp, #52]	; 0x34
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	f240 826e 	bls.w	80086a4 <forward_dense+0x52c>
 80081c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ce:	460b      	mov	r3, r1
 80081d0:	68e8      	ldr	r0, [r5, #12]
 80081d2:	68f7      	ldr	r7, [r6, #12]
 80081d4:	6840      	ldr	r0, [r0, #4]
 80081d6:	6999      	ldr	r1, [r3, #24]
 80081d8:	9013      	str	r0, [sp, #76]	; 0x4c
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	680b      	ldr	r3, [r1, #0]
 80081de:	9012      	str	r0, [sp, #72]	; 0x48
 80081e0:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80081e4:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80081e8:	fb00 f404 	mul.w	r4, r0, r4
 80081ec:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80081f0:	fa4e f000 	asr.w	r0, lr, r0
 80081f4:	2a03      	cmp	r2, #3
 80081f6:	9010      	str	r0, [sp, #64]	; 0x40
 80081f8:	f000 825d 	beq.w	80086b6 <forward_dense+0x53e>
 80081fc:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8008200:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8008204:	2a00      	cmp	r2, #0
 8008206:	f000 8246 	beq.w	8008696 <forward_dense+0x51e>
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	2a00      	cmp	r2, #0
 800820e:	f000 8242 	beq.w	8008696 <forward_dense+0x51e>
 8008212:	2b04      	cmp	r3, #4
 8008214:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8008218:	f000 822c 	beq.w	8008674 <forward_dense+0x4fc>
 800821c:	2b08      	cmp	r3, #8
 800821e:	f000 8229 	beq.w	8008674 <forward_dense+0x4fc>
 8008222:	f04f 0b00 	mov.w	fp, #0
 8008226:	69b2      	ldr	r2, [r6, #24]
 8008228:	69ab      	ldr	r3, [r5, #24]
 800822a:	6891      	ldr	r1, [r2, #8]
 800822c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	6952      	ldr	r2, [r2, #20]
 8008232:	9106      	str	r1, [sp, #24]
 8008234:	fb07 f404 	mul.w	r4, r7, r4
 8008238:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800823c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800823e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008242:	4281      	cmp	r1, r0
 8008244:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8008248:	900e      	str	r0, [sp, #56]	; 0x38
 800824a:	940c      	str	r4, [sp, #48]	; 0x30
 800824c:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8008250:	f080 8113 	bcs.w	800847a <forward_dense+0x302>
 8008254:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008256:	ed9f 8a93 	vldr	s16, [pc, #588]	; 80084a4 <forward_dense+0x32c>
 800825a:	f021 0201 	bic.w	r2, r1, #1
 800825e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008262:	9204      	str	r2, [sp, #16]
 8008264:	f001 0201 	and.w	r2, r1, #1
 8008268:	08c8      	lsrs	r0, r1, #3
 800826a:	9208      	str	r2, [sp, #32]
 800826c:	008a      	lsls	r2, r1, #2
 800826e:	f001 0a07 	and.w	sl, r1, #7
 8008272:	920f      	str	r2, [sp, #60]	; 0x3c
 8008274:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8008278:	3320      	adds	r3, #32
 800827a:	465c      	mov	r4, fp
 800827c:	9007      	str	r0, [sp, #28]
 800827e:	46cb      	mov	fp, r9
 8008280:	9205      	str	r2, [sp, #20]
 8008282:	9302      	str	r3, [sp, #8]
 8008284:	46c1      	mov	r9, r8
 8008286:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800828a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	9b02      	ldr	r3, [sp, #8]
 8008292:	3b20      	subs	r3, #32
 8008294:	930a      	str	r3, [sp, #40]	; 0x28
 8008296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008298:	b10b      	cbz	r3, 800829e <forward_dense+0x126>
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	2c00      	cmp	r4, #0
 80082a0:	f000 81da 	beq.w	8008658 <forward_dense+0x4e0>
 80082a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80082a6:	2904      	cmp	r1, #4
 80082a8:	9906      	ldr	r1, [sp, #24]
 80082aa:	f000 80fd 	beq.w	80084a8 <forward_dense+0x330>
 80082ae:	4549      	cmp	r1, r9
 80082b0:	f080 80d2 	bcs.w	8008458 <forward_dense+0x2e0>
 80082b4:	460f      	mov	r7, r1
 80082b6:	9907      	ldr	r1, [sp, #28]
 80082b8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80082bc:	f8dd a014 	ldr.w	sl, [sp, #20]
 80082c0:	1c4e      	adds	r6, r1, #1
 80082c2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80082c6:	4694      	mov	ip, r2
 80082c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082ca:	468e      	mov	lr, r1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80de 	beq.w	800848e <forward_dense+0x316>
 80082d2:	ecf3 2a01 	vldmia	r3!, {s5}
 80082d6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80084a4 <forward_dense+0x32c>
 80082da:	f1be 0f00 	cmp.w	lr, #0
 80082de:	f000 80de 	beq.w	800849e <forward_dense+0x326>
 80082e2:	f10c 0108 	add.w	r1, ip, #8
 80082e6:	4640      	mov	r0, r8
 80082e8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80082ec:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80082f0:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80082f4:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80082f8:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80082fc:	ed10 5a04 	vldr	s10, [r0, #-16]
 8008300:	ed50 5a03 	vldr	s11, [r0, #-12]
 8008304:	ed10 6a02 	vldr	s12, [r0, #-8]
 8008308:	ed50 6a01 	vldr	s13, [r0, #-4]
 800830c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008310:	edd5 7a00 	vldr	s15, [r5]
 8008314:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8008318:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800831c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008320:	ed95 3a00 	vldr	s6, [r5]
 8008324:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8008328:	eee3 7a23 	vfma.f32	s15, s6, s7
 800832c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008330:	3108      	adds	r1, #8
 8008332:	edd5 3a00 	vldr	s7, [r5]
 8008336:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800833a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800833e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008342:	3020      	adds	r0, #32
 8008344:	ed95 4a00 	vldr	s8, [r5]
 8008348:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800834c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008350:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008354:	edd5 4a00 	vldr	s9, [r5]
 8008358:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800835c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008360:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008364:	ed95 5a00 	vldr	s10, [r5]
 8008368:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800836c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008370:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008374:	edd5 5a00 	vldr	s11, [r5]
 8008378:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800837c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008380:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008384:	428e      	cmp	r6, r1
 8008386:	ed95 6a00 	vldr	s12, [r5]
 800838a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800838e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008392:	d1a9      	bne.n	80082e8 <forward_dense+0x170>
 8008394:	f1a6 0108 	sub.w	r1, r6, #8
 8008398:	4650      	mov	r0, sl
 800839a:	2a00      	cmp	r2, #0
 800839c:	d04a      	beq.n	8008434 <forward_dense+0x2bc>
 800839e:	780d      	ldrb	r5, [r1, #0]
 80083a0:	edd0 6a00 	vldr	s13, [r0]
 80083a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80083a8:	edd5 7a00 	vldr	s15, [r5]
 80083ac:	2a01      	cmp	r2, #1
 80083ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083b2:	d03f      	beq.n	8008434 <forward_dense+0x2bc>
 80083b4:	784d      	ldrb	r5, [r1, #1]
 80083b6:	edd0 6a01 	vldr	s13, [r0, #4]
 80083ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80083be:	edd5 7a00 	vldr	s15, [r5]
 80083c2:	2a02      	cmp	r2, #2
 80083c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083c8:	d034      	beq.n	8008434 <forward_dense+0x2bc>
 80083ca:	788d      	ldrb	r5, [r1, #2]
 80083cc:	edd0 6a02 	vldr	s13, [r0, #8]
 80083d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80083d4:	edd5 7a00 	vldr	s15, [r5]
 80083d8:	2a03      	cmp	r2, #3
 80083da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083de:	d029      	beq.n	8008434 <forward_dense+0x2bc>
 80083e0:	78cd      	ldrb	r5, [r1, #3]
 80083e2:	edd0 6a03 	vldr	s13, [r0, #12]
 80083e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80083ea:	edd5 7a00 	vldr	s15, [r5]
 80083ee:	2a04      	cmp	r2, #4
 80083f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083f4:	d01e      	beq.n	8008434 <forward_dense+0x2bc>
 80083f6:	790d      	ldrb	r5, [r1, #4]
 80083f8:	edd0 6a04 	vldr	s13, [r0, #16]
 80083fc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008400:	edd5 7a00 	vldr	s15, [r5]
 8008404:	2a05      	cmp	r2, #5
 8008406:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800840a:	d013      	beq.n	8008434 <forward_dense+0x2bc>
 800840c:	794d      	ldrb	r5, [r1, #5]
 800840e:	edd0 6a05 	vldr	s13, [r0, #20]
 8008412:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008416:	edd5 7a00 	vldr	s15, [r5]
 800841a:	2a06      	cmp	r2, #6
 800841c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008420:	d008      	beq.n	8008434 <forward_dense+0x2bc>
 8008422:	7989      	ldrb	r1, [r1, #6]
 8008424:	edd0 7a06 	vldr	s15, [r0, #24]
 8008428:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800842c:	edd1 6a00 	vldr	s13, [r1]
 8008430:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008434:	44dc      	add	ip, fp
 8008436:	445e      	add	r6, fp
 8008438:	ee32 7a87 	vadd.f32	s14, s5, s14
 800843c:	eca7 7a01 	vstmia	r7!, {s14}
 8008440:	454f      	cmp	r7, r9
 8008442:	f4ff af43 	bcc.w	80082cc <forward_dense+0x154>
 8008446:	9a06      	ldr	r2, [sp, #24]
 8008448:	eba9 0302 	sub.w	r3, r9, r2
 800844c:	3b01      	subs	r3, #1
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	3304      	adds	r3, #4
 8008454:	18d3      	adds	r3, r2, r3
 8008456:	9306      	str	r3, [sp, #24]
 8008458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800845a:	9a05      	ldr	r2, [sp, #20]
 800845c:	4499      	add	r9, r3
 800845e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008460:	441a      	add	r2, r3
 8008462:	9205      	str	r2, [sp, #20]
 8008464:	9a02      	ldr	r2, [sp, #8]
 8008466:	441a      	add	r2, r3
 8008468:	9202      	str	r2, [sp, #8]
 800846a:	9a04      	ldr	r2, [sp, #16]
 800846c:	441a      	add	r2, r3
 800846e:	9204      	str	r2, [sp, #16]
 8008470:	9b06      	ldr	r3, [sp, #24]
 8008472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008474:	4293      	cmp	r3, r2
 8008476:	f4ff af08 	bcc.w	800828a <forward_dense+0x112>
 800847a:	b015      	add	sp, #84	; 0x54
 800847c:	ecbd 8b02 	vpop	{d8}
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008484:	6853      	ldr	r3, [r2, #4]
 8008486:	deff      	udf	#255	; 0xff
 8008488:	2300      	movs	r3, #0
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	deff      	udf	#255	; 0xff
 800848e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80084a4 <forward_dense+0x32c>
 8008492:	eef0 2a48 	vmov.f32	s5, s16
 8008496:	f1be 0f00 	cmp.w	lr, #0
 800849a:	f47f af22 	bne.w	80082e2 <forward_dense+0x16a>
 800849e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80084a0:	4661      	mov	r1, ip
 80084a2:	e77a      	b.n	800839a <forward_dense+0x222>
 80084a4:	00000000 	.word	0x00000000
 80084a8:	4549      	cmp	r1, r9
 80084aa:	d2d5      	bcs.n	8008458 <forward_dense+0x2e0>
 80084ac:	9807      	ldr	r0, [sp, #28]
 80084ae:	9103      	str	r1, [sp, #12]
 80084b0:	9904      	ldr	r1, [sp, #16]
 80084b2:	f100 0c01 	add.w	ip, r0, #1
 80084b6:	3901      	subs	r1, #1
 80084b8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80084bc:	9109      	str	r1, [sp, #36]	; 0x24
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80b2 	beq.w	8008628 <forward_dense+0x4b0>
 80084c4:	9907      	ldr	r1, [sp, #28]
 80084c6:	ecf3 2a01 	vldmia	r3!, {s5}
 80084ca:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 80084a4 <forward_dense+0x32c>
 80084ce:	2900      	cmp	r1, #0
 80084d0:	f000 80b2 	beq.w	8008638 <forward_dense+0x4c0>
 80084d4:	9902      	ldr	r1, [sp, #8]
 80084d6:	1d10      	adds	r0, r2, #4
 80084d8:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 80084dc:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80084e0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80084e4:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 80084e8:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80084ec:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 80084f0:	ed11 5a04 	vldr	s10, [r1, #-16]
 80084f4:	ed51 5a03 	vldr	s11, [r1, #-12]
 80084f8:	ed11 6a02 	vldr	s12, [r1, #-8]
 80084fc:	ed51 6a01 	vldr	s13, [r1, #-4]
 8008500:	f006 070f 	and.w	r7, r6, #15
 8008504:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008508:	edd7 7a00 	vldr	s15, [r7]
 800850c:	0936      	lsrs	r6, r6, #4
 800850e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008512:	ed96 3a00 	vldr	s6, [r6]
 8008516:	ee67 7a82 	vmul.f32	s15, s15, s4
 800851a:	092e      	lsrs	r6, r5, #4
 800851c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008520:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008524:	f005 050f 	and.w	r5, r5, #15
 8008528:	edd6 3a00 	vldr	s7, [r6]
 800852c:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8008530:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008534:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008538:	0937      	lsrs	r7, r6, #4
 800853a:	ed95 4a00 	vldr	s8, [r5]
 800853e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8008542:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008546:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800854a:	f006 060f 	and.w	r6, r6, #15
 800854e:	edd7 4a00 	vldr	s9, [r7]
 8008552:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008556:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800855a:	3004      	adds	r0, #4
 800855c:	ed96 5a00 	vldr	s10, [r6]
 8008560:	092e      	lsrs	r6, r5, #4
 8008562:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008566:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800856a:	f005 050f 	and.w	r5, r5, #15
 800856e:	edd6 5a00 	vldr	s11, [r6]
 8008572:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008576:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800857a:	4584      	cmp	ip, r0
 800857c:	ed95 6a00 	vldr	s12, [r5]
 8008580:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008584:	f101 0120 	add.w	r1, r1, #32
 8008588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800858c:	d1a4      	bne.n	80084d8 <forward_dense+0x360>
 800858e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8008592:	f1ac 0804 	sub.w	r8, ip, #4
 8008596:	9904      	ldr	r1, [sp, #16]
 8008598:	458e      	cmp	lr, r1
 800859a:	d22a      	bcs.n	80085f2 <forward_dense+0x47a>
 800859c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800859e:	eba1 070e 	sub.w	r7, r1, lr
 80085a2:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 80085a6:	f10e 0008 	add.w	r0, lr, #8
 80085aa:	f108 36ff 	add.w	r6, r8, #4294967295
 80085ae:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80085b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085b6:	ed50 5a01 	vldr	s11, [r0, #-4]
 80085ba:	ed50 6a02 	vldr	s13, [r0, #-8]
 80085be:	f001 050f 	and.w	r5, r1, #15
 80085c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80085c6:	edd5 7a00 	vldr	s15, [r5]
 80085ca:	0909      	lsrs	r1, r1, #4
 80085cc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80085d0:	ed91 6a00 	vldr	s12, [r1]
 80085d4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80085d8:	42b7      	cmp	r7, r6
 80085da:	eee6 7a26 	vfma.f32	s15, s12, s13
 80085de:	f100 0008 	add.w	r0, r0, #8
 80085e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085e6:	d1e4      	bne.n	80085b2 <forward_dense+0x43a>
 80085e8:	f10a 0a01 	add.w	sl, sl, #1
 80085ec:	44d0      	add	r8, sl
 80085ee:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 80085f2:	9908      	ldr	r1, [sp, #32]
 80085f4:	b321      	cbz	r1, 8008640 <forward_dense+0x4c8>
 80085f6:	f898 1000 	ldrb.w	r1, [r8]
 80085fa:	edde 7a00 	vldr	s15, [lr]
 80085fe:	0909      	lsrs	r1, r1, #4
 8008600:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008604:	edd1 6a00 	vldr	s13, [r1]
 8008608:	9903      	ldr	r1, [sp, #12]
 800860a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800860e:	445a      	add	r2, fp
 8008610:	44dc      	add	ip, fp
 8008612:	ee72 2a87 	vadd.f32	s5, s5, s14
 8008616:	ece1 2a01 	vstmia	r1!, {s5}
 800861a:	4589      	cmp	r9, r1
 800861c:	9103      	str	r1, [sp, #12]
 800861e:	f67f af12 	bls.w	8008446 <forward_dense+0x2ce>
 8008622:	2b00      	cmp	r3, #0
 8008624:	f47f af4e 	bne.w	80084c4 <forward_dense+0x34c>
 8008628:	9907      	ldr	r1, [sp, #28]
 800862a:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 80084a4 <forward_dense+0x32c>
 800862e:	eef0 2a48 	vmov.f32	s5, s16
 8008632:	2900      	cmp	r1, #0
 8008634:	f47f af4e 	bne.w	80084d4 <forward_dense+0x35c>
 8008638:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800863c:	4690      	mov	r8, r2
 800863e:	e7aa      	b.n	8008596 <forward_dense+0x41e>
 8008640:	9903      	ldr	r1, [sp, #12]
 8008642:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008646:	445a      	add	r2, fp
 8008648:	eca1 7a01 	vstmia	r1!, {s14}
 800864c:	4549      	cmp	r1, r9
 800864e:	9103      	str	r1, [sp, #12]
 8008650:	44dc      	add	ip, fp
 8008652:	f4ff af34 	bcc.w	80084be <forward_dense+0x346>
 8008656:	e6f6      	b.n	8008446 <forward_dense+0x2ce>
 8008658:	9912      	ldr	r1, [sp, #72]	; 0x48
 800865a:	9d06      	ldr	r5, [sp, #24]
 800865c:	9101      	str	r1, [sp, #4]
 800865e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008660:	9100      	str	r1, [sp, #0]
 8008662:	4628      	mov	r0, r5
 8008664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008666:	f000 fa41 	bl	8008aec <lite_dense_if32of32wf32>
 800866a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800866c:	462b      	mov	r3, r5
 800866e:	4413      	add	r3, r2
 8008670:	9306      	str	r3, [sp, #24]
 8008672:	e6f1      	b.n	8008458 <forward_dense+0x2e0>
 8008674:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	d016      	beq.n	80086ac <forward_dense+0x534>
 800867e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008682:	f000 fbe1 	bl	8008e48 <ai_array_get_byte_size>
 8008686:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 800868a:	4602      	mov	r2, r0
 800868c:	4641      	mov	r1, r8
 800868e:	4658      	mov	r0, fp
 8008690:	f000 fc3e 	bl	8008f10 <memcpy>
 8008694:	e5c7      	b.n	8008226 <forward_dense+0xae>
 8008696:	2b04      	cmp	r3, #4
 8008698:	d00a      	beq.n	80086b0 <forward_dense+0x538>
 800869a:	f04f 0900 	mov.w	r9, #0
 800869e:	e5bd      	b.n	800821c <forward_dense+0xa4>
 80086a0:	930d      	str	r3, [sp, #52]	; 0x34
 80086a2:	e595      	b.n	80081d0 <forward_dense+0x58>
 80086a4:	2300      	movs	r3, #0
 80086a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086a8:	460b      	mov	r3, r1
 80086aa:	e591      	b.n	80081d0 <forward_dense+0x58>
 80086ac:	46c3      	mov	fp, r8
 80086ae:	e5ba      	b.n	8008226 <forward_dense+0xae>
 80086b0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80086b4:	e5b7      	b.n	8008226 <forward_dense+0xae>
 80086b6:	2300      	movs	r3, #0
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	deff      	udf	#255	; 0xff
 80086bc:	2300      	movs	r3, #0
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	deff      	udf	#255	; 0xff
 80086c2:	bf00      	nop

080086c4 <forward_sigmoid>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	ed2d 8b02 	vpush	{d8}
 80086ca:	6982      	ldr	r2, [r0, #24]
 80086cc:	8813      	ldrh	r3, [r2, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d03b      	beq.n	800874a <forward_sigmoid+0x86>
 80086d2:	6852      	ldr	r2, [r2, #4]
 80086d4:	6854      	ldr	r4, [r2, #4]
 80086d6:	b104      	cbz	r4, 80086da <forward_sigmoid+0x16>
 80086d8:	6824      	ldr	r4, [r4, #0]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d034      	beq.n	8008748 <forward_sigmoid+0x84>
 80086de:	6915      	ldr	r5, [r2, #16]
 80086e0:	b105      	cbz	r5, 80086e4 <forward_sigmoid+0x20>
 80086e2:	682d      	ldr	r5, [r5, #0]
 80086e4:	68a3      	ldr	r3, [r4, #8]
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	d031      	beq.n	800874e <forward_sigmoid+0x8a>
 80086ea:	68e0      	ldr	r0, [r4, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80086f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086f6:	4298      	cmp	r0, r3
 80086f8:	fb01 f202 	mul.w	r2, r1, r2
 80086fc:	d1f9      	bne.n	80086f2 <forward_sigmoid+0x2e>
 80086fe:	69a7      	ldr	r7, [r4, #24]
 8008700:	69a9      	ldr	r1, [r5, #24]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	688e      	ldr	r6, [r1, #8]
 8008706:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800870a:	3a01      	subs	r2, #1
 800870c:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8008710:	42ab      	cmp	r3, r5
 8008712:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8008716:	d814      	bhi.n	8008742 <forward_sigmoid+0x7e>
 8008718:	3504      	adds	r5, #4
 800871a:	3604      	adds	r6, #4
 800871c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008720:	462c      	mov	r4, r5
 8008722:	ed35 0a01 	vldmdb	r5!, {s0}
 8008726:	eeb1 0a40 	vneg.f32	s0, s0
 800872a:	f000 fc77 	bl	800901c <expf>
 800872e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8008732:	3c08      	subs	r4, #8
 8008734:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8008738:	ed66 7a01 	vstmdb	r6!, {s15}
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	42a3      	cmp	r3, r4
 8008740:	d9ee      	bls.n	8008720 <forward_sigmoid+0x5c>
 8008742:	ecbd 8b02 	vpop	{d8}
 8008746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008748:	2300      	movs	r3, #0
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	deff      	udf	#255	; 0xff
 800874e:	69ab      	ldr	r3, [r5, #24]
 8008750:	69a7      	ldr	r7, [r4, #24]
 8008752:	689e      	ldr	r6, [r3, #8]
 8008754:	68bd      	ldr	r5, [r7, #8]
 8008756:	e7df      	b.n	8008718 <forward_sigmoid+0x54>

08008758 <forward_relu>:
 8008758:	6982      	ldr	r2, [r0, #24]
 800875a:	8813      	ldrh	r3, [r2, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d05b      	beq.n	8008818 <forward_relu+0xc0>
 8008760:	6851      	ldr	r1, [r2, #4]
 8008762:	684a      	ldr	r2, [r1, #4]
 8008764:	b102      	cbz	r2, 8008768 <forward_relu+0x10>
 8008766:	6812      	ldr	r2, [r2, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	f000 8123 	beq.w	80089b4 <forward_relu+0x25c>
 800876e:	b470      	push	{r4, r5, r6}
 8008770:	6909      	ldr	r1, [r1, #16]
 8008772:	b101      	cbz	r1, 8008776 <forward_relu+0x1e>
 8008774:	6809      	ldr	r1, [r1, #0]
 8008776:	69c6      	ldr	r6, [r0, #28]
 8008778:	2e00      	cmp	r6, #0
 800877a:	f000 8097 	beq.w	80088ac <forward_relu+0x154>
 800877e:	6873      	ldr	r3, [r6, #4]
 8008780:	6988      	ldr	r0, [r1, #24]
 8008782:	6991      	ldr	r1, [r2, #24]
 8008784:	2b01      	cmp	r3, #1
 8008786:	f000 80c1 	beq.w	800890c <forward_relu+0x1b4>
 800878a:	6893      	ldr	r3, [r2, #8]
 800878c:	6880      	ldr	r0, [r0, #8]
 800878e:	688c      	ldr	r4, [r1, #8]
 8008790:	0a1b      	lsrs	r3, r3, #8
 8008792:	f000 80f2 	beq.w	800897a <forward_relu+0x222>
 8008796:	68d5      	ldr	r5, [r2, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800879e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087a2:	42ab      	cmp	r3, r5
 80087a4:	fb01 f202 	mul.w	r2, r1, r2
 80087a8:	d1f9      	bne.n	800879e <forward_relu+0x46>
 80087aa:	68b3      	ldr	r3, [r6, #8]
 80087ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80087b0:	edd3 6a00 	vldr	s13, [r3]
 80087b4:	ed93 6a01 	vldr	s12, [r3, #4]
 80087b8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80087bc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80087c0:	3a01      	subs	r2, #1
 80087c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087ca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80087ce:	d425      	bmi.n	800881c <forward_relu+0xc4>
 80087d0:	429c      	cmp	r4, r3
 80087d2:	d81f      	bhi.n	8008814 <forward_relu+0xbc>
 80087d4:	1d1a      	adds	r2, r3, #4
 80087d6:	1d01      	adds	r1, r0, #4
 80087d8:	e00d      	b.n	80087f6 <forward_relu+0x9e>
 80087da:	eef4 6ae7 	vcmpe.f32	s13, s15
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	db03      	blt.n	80087ec <forward_relu+0x94>
 80087e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80087ec:	3b08      	subs	r3, #8
 80087ee:	429c      	cmp	r4, r3
 80087f0:	ed61 7a01 	vstmdb	r1!, {s15}
 80087f4:	d80e      	bhi.n	8008814 <forward_relu+0xbc>
 80087f6:	4613      	mov	r3, r2
 80087f8:	ed72 7a01 	vldmdb	r2!, {s15}
 80087fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008804:	d9e9      	bls.n	80087da <forward_relu+0x82>
 8008806:	3b08      	subs	r3, #8
 8008808:	eef0 7a47 	vmov.f32	s15, s14
 800880c:	429c      	cmp	r4, r3
 800880e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008812:	d9f0      	bls.n	80087f6 <forward_relu+0x9e>
 8008814:	bc70      	pop	{r4, r5, r6}
 8008816:	4770      	bx	lr
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	deff      	udf	#255	; 0xff
 800881c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008824:	d11f      	bne.n	8008866 <forward_relu+0x10e>
 8008826:	429c      	cmp	r4, r3
 8008828:	d8f4      	bhi.n	8008814 <forward_relu+0xbc>
 800882a:	1b1c      	subs	r4, r3, r4
 800882c:	f024 0403 	bic.w	r4, r4, #3
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	2500      	movs	r5, #0
 8008834:	1b1b      	subs	r3, r3, r4
 8008836:	1d01      	adds	r1, r0, #4
 8008838:	ed72 7a01 	vldmdb	r2!, {s15}
 800883c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008844:	dc0a      	bgt.n	800885c <forward_relu+0x104>
 8008846:	429a      	cmp	r2, r3
 8008848:	f841 5d04 	str.w	r5, [r1, #-4]!
 800884c:	d0e2      	beq.n	8008814 <forward_relu+0xbc>
 800884e:	ed72 7a01 	vldmdb	r2!, {s15}
 8008852:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800885a:	ddf4      	ble.n	8008846 <forward_relu+0xee>
 800885c:	429a      	cmp	r2, r3
 800885e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008862:	d1e9      	bne.n	8008838 <forward_relu+0xe0>
 8008864:	e7d6      	b.n	8008814 <forward_relu+0xbc>
 8008866:	429c      	cmp	r4, r3
 8008868:	d8d4      	bhi.n	8008814 <forward_relu+0xbc>
 800886a:	1b1c      	subs	r4, r3, r4
 800886c:	f024 0403 	bic.w	r4, r4, #3
 8008870:	1d1a      	adds	r2, r3, #4
 8008872:	1d01      	adds	r1, r0, #4
 8008874:	1b1b      	subs	r3, r3, r4
 8008876:	ed72 7a01 	vldmdb	r2!, {s15}
 800887a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800887e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008882:	db0e      	blt.n	80088a2 <forward_relu+0x14a>
 8008884:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008888:	4293      	cmp	r3, r2
 800888a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800888e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008892:	d0bf      	beq.n	8008814 <forward_relu+0xbc>
 8008894:	ed72 7a01 	vldmdb	r2!, {s15}
 8008898:	eef4 6ae7 	vcmpe.f32	s13, s15
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	daf0      	bge.n	8008884 <forward_relu+0x12c>
 80088a2:	4293      	cmp	r3, r2
 80088a4:	ed61 7a01 	vstmdb	r1!, {s15}
 80088a8:	d1e5      	bne.n	8008876 <forward_relu+0x11e>
 80088aa:	e7b3      	b.n	8008814 <forward_relu+0xbc>
 80088ac:	6893      	ldr	r3, [r2, #8]
 80088ae:	6989      	ldr	r1, [r1, #24]
 80088b0:	6990      	ldr	r0, [r2, #24]
 80088b2:	6889      	ldr	r1, [r1, #8]
 80088b4:	6884      	ldr	r4, [r0, #8]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	d075      	beq.n	80089a6 <forward_relu+0x24e>
 80088ba:	68d5      	ldr	r5, [r2, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80088c2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80088c6:	429d      	cmp	r5, r3
 80088c8:	fb00 f202 	mul.w	r2, r0, r2
 80088cc:	d1f9      	bne.n	80088c2 <forward_relu+0x16a>
 80088ce:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 80088d2:	3b01      	subs	r3, #1
 80088d4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80088d8:	4294      	cmp	r4, r2
 80088da:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80088de:	d899      	bhi.n	8008814 <forward_relu+0xbc>
 80088e0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80089bc <forward_relu+0x264>
 80088e4:	3204      	adds	r2, #4
 80088e6:	3104      	adds	r1, #4
 80088e8:	4613      	mov	r3, r2
 80088ea:	ed72 7a01 	vldmdb	r2!, {s15}
 80088ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f6:	f1a3 0308 	sub.w	r3, r3, #8
 80088fa:	bfb8      	it	lt
 80088fc:	eef0 7a47 	vmovlt.f32	s15, s14
 8008900:	429c      	cmp	r4, r3
 8008902:	ed61 7a01 	vstmdb	r1!, {s15}
 8008906:	d9ef      	bls.n	80088e8 <forward_relu+0x190>
 8008908:	bc70      	pop	{r4, r5, r6}
 800890a:	4770      	bx	lr
 800890c:	688c      	ldr	r4, [r1, #8]
 800890e:	6891      	ldr	r1, [r2, #8]
 8008910:	6880      	ldr	r0, [r0, #8]
 8008912:	0a09      	lsrs	r1, r1, #8
 8008914:	d049      	beq.n	80089aa <forward_relu+0x252>
 8008916:	68d5      	ldr	r5, [r2, #12]
 8008918:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800891c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008920:	42aa      	cmp	r2, r5
 8008922:	fb01 f303 	mul.w	r3, r1, r3
 8008926:	d1f9      	bne.n	800891c <forward_relu+0x1c4>
 8008928:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800892c:	3a01      	subs	r2, #1
 800892e:	68b1      	ldr	r1, [r6, #8]
 8008930:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008934:	429c      	cmp	r4, r3
 8008936:	ed91 7a00 	vldr	s14, [r1]
 800893a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800893e:	f63f af69 	bhi.w	8008814 <forward_relu+0xbc>
 8008942:	2500      	movs	r5, #0
 8008944:	3304      	adds	r3, #4
 8008946:	1d02      	adds	r2, r0, #4
 8008948:	ed53 7a01 	vldr	s15, [r3, #-4]
 800894c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008954:	f1a3 0104 	sub.w	r1, r3, #4
 8008958:	f1a3 0308 	sub.w	r3, r3, #8
 800895c:	d406      	bmi.n	800896c <forward_relu+0x214>
 800895e:	429c      	cmp	r4, r3
 8008960:	f842 5d04 	str.w	r5, [r2, #-4]!
 8008964:	f63f af56 	bhi.w	8008814 <forward_relu+0xbc>
 8008968:	460b      	mov	r3, r1
 800896a:	e7ed      	b.n	8008948 <forward_relu+0x1f0>
 800896c:	429c      	cmp	r4, r3
 800896e:	ed62 7a01 	vstmdb	r2!, {s15}
 8008972:	f63f af4f 	bhi.w	8008814 <forward_relu+0xbc>
 8008976:	460b      	mov	r3, r1
 8008978:	e7e6      	b.n	8008948 <forward_relu+0x1f0>
 800897a:	68b3      	ldr	r3, [r6, #8]
 800897c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008980:	edd3 6a00 	vldr	s13, [r3]
 8008984:	ed93 6a01 	vldr	s12, [r3, #4]
 8008988:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800898c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008990:	d401      	bmi.n	8008996 <forward_relu+0x23e>
 8008992:	4623      	mov	r3, r4
 8008994:	e71e      	b.n	80087d4 <forward_relu+0x7c>
 8008996:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800899a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899e:	4623      	mov	r3, r4
 80089a0:	f47f af63 	bne.w	800886a <forward_relu+0x112>
 80089a4:	e741      	b.n	800882a <forward_relu+0xd2>
 80089a6:	4622      	mov	r2, r4
 80089a8:	e79a      	b.n	80088e0 <forward_relu+0x188>
 80089aa:	68b2      	ldr	r2, [r6, #8]
 80089ac:	4623      	mov	r3, r4
 80089ae:	ed92 7a00 	vldr	s14, [r2]
 80089b2:	e7c6      	b.n	8008942 <forward_relu+0x1ea>
 80089b4:	2300      	movs	r3, #0
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	deff      	udf	#255	; 0xff
 80089ba:	bf00      	nop
 80089bc:	00000000 	.word	0x00000000

080089c0 <ai_check_custom_types>:
 80089c0:	b082      	sub	sp, #8
 80089c2:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <ai_check_custom_types+0x50>)
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	b118      	cbz	r0, 80089d0 <ai_check_custom_types+0x10>
 80089c8:	7803      	ldrb	r3, [r0, #0]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d002      	beq.n	80089d4 <ai_check_custom_types+0x14>
 80089ce:	2000      	movs	r0, #0
 80089d0:	b002      	add	sp, #8
 80089d2:	4770      	bx	lr
 80089d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80089d8:	4293      	cmp	r3, r2
 80089da:	d004      	beq.n	80089e6 <ai_check_custom_types+0x26>
 80089dc:	2001      	movs	r0, #1
 80089de:	f080 0001 	eor.w	r0, r0, #1
 80089e2:	b002      	add	sp, #8
 80089e4:	4770      	bx	lr
 80089e6:	7842      	ldrb	r2, [r0, #1]
 80089e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	f100 0001 	add.w	r0, r0, #1
 80089f2:	d1f3      	bne.n	80089dc <ai_check_custom_types+0x1c>
 80089f4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80089f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d1ed      	bne.n	80089dc <ai_check_custom_types+0x1c>
 8008a00:	7842      	ldrb	r2, [r0, #1]
 8008a02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d1e8      	bne.n	80089dc <ai_check_custom_types+0x1c>
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	e7e7      	b.n	80089de <ai_check_custom_types+0x1e>
 8008a0e:	bf00      	nop
 8008a10:	84048403 	.word	0x84048403

08008a14 <ai_layers_init_all>:
 8008a14:	4601      	mov	r1, r0
 8008a16:	2000      	movs	r0, #0
 8008a18:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8008a1a:	b143      	cbz	r3, 8008a2e <ai_layers_init_all+0x1a>
 8008a1c:	691a      	ldr	r2, [r3, #16]
 8008a1e:	60d9      	str	r1, [r3, #12]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	f100 0001 	add.w	r0, r0, #1
 8008a26:	d002      	beq.n	8008a2e <ai_layers_init_all+0x1a>
 8008a28:	b10a      	cbz	r2, 8008a2e <ai_layers_init_all+0x1a>
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	e7f5      	b.n	8008a1a <ai_layers_init_all+0x6>
 8008a2e:	4770      	bx	lr

08008a30 <ai_layers_post_init_all>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008a34:	2500      	movs	r5, #0
 8008a36:	b16c      	cbz	r4, 8008a54 <ai_layers_post_init_all+0x24>
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	07db      	lsls	r3, r3, #31
 8008a3c:	d504      	bpl.n	8008a48 <ai_layers_post_init_all+0x18>
 8008a3e:	6a23      	ldr	r3, [r4, #32]
 8008a40:	4620      	mov	r0, r4
 8008a42:	b10b      	cbz	r3, 8008a48 <ai_layers_post_init_all+0x18>
 8008a44:	4798      	blx	r3
 8008a46:	3501      	adds	r5, #1
 8008a48:	6923      	ldr	r3, [r4, #16]
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	d002      	beq.n	8008a54 <ai_layers_post_init_all+0x24>
 8008a4e:	b10b      	cbz	r3, 8008a54 <ai_layers_post_init_all+0x24>
 8008a50:	461c      	mov	r4, r3
 8008a52:	e7f0      	b.n	8008a36 <ai_layers_post_init_all+0x6>
 8008a54:	4628      	mov	r0, r5
 8008a56:	bd38      	pop	{r3, r4, r5, pc}

08008a58 <ai_layers_forward_all>:
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8008a60:	4604      	mov	r4, r0
 8008a62:	f1b8 0f00 	cmp.w	r8, #0
 8008a66:	d02b      	beq.n	8008ac0 <ai_layers_forward_all+0x68>
 8008a68:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008a6a:	6381      	str	r1, [r0, #56]	; 0x38
 8008a6c:	b321      	cbz	r1, 8008ab8 <ai_layers_forward_all+0x60>
 8008a6e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008a70:	2001      	movs	r0, #1
 8008a72:	47c0      	blx	r8
 8008a74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008a76:	b1fe      	cbz	r6, 8008ab8 <ai_layers_forward_all+0x60>
 8008a78:	2700      	movs	r7, #0
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a7e:	2002      	movs	r0, #2
 8008a80:	47c0      	blx	r8
 8008a82:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008a84:	4628      	mov	r0, r5
 8008a86:	696b      	ldr	r3, [r5, #20]
 8008a88:	4798      	blx	r3
 8008a8a:	692e      	ldr	r6, [r5, #16]
 8008a8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a90:	42b5      	cmp	r5, r6
 8008a92:	f04f 0003 	mov.w	r0, #3
 8008a96:	d007      	beq.n	8008aa8 <ai_layers_forward_all+0x50>
 8008a98:	47c0      	blx	r8
 8008a9a:	3701      	adds	r7, #1
 8008a9c:	63a6      	str	r6, [r4, #56]	; 0x38
 8008a9e:	2e00      	cmp	r6, #0
 8008aa0:	d1eb      	bne.n	8008a7a <ai_layers_forward_all+0x22>
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa8:	2003      	movs	r0, #3
 8008aaa:	47c0      	blx	r8
 8008aac:	2300      	movs	r3, #0
 8008aae:	3701      	adds	r7, #1
 8008ab0:	63a3      	str	r3, [r4, #56]	; 0x38
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab8:	2700      	movs	r7, #0
 8008aba:	4638      	mov	r0, r7
 8008abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008ac2:	6385      	str	r5, [r0, #56]	; 0x38
 8008ac4:	2d00      	cmp	r5, #0
 8008ac6:	d0f7      	beq.n	8008ab8 <ai_layers_forward_all+0x60>
 8008ac8:	4647      	mov	r7, r8
 8008aca:	696b      	ldr	r3, [r5, #20]
 8008acc:	4628      	mov	r0, r5
 8008ace:	4798      	blx	r3
 8008ad0:	462b      	mov	r3, r5
 8008ad2:	692d      	ldr	r5, [r5, #16]
 8008ad4:	429d      	cmp	r5, r3
 8008ad6:	d004      	beq.n	8008ae2 <ai_layers_forward_all+0x8a>
 8008ad8:	63a5      	str	r5, [r4, #56]	; 0x38
 8008ada:	3701      	adds	r7, #1
 8008adc:	2d00      	cmp	r5, #0
 8008ade:	d1f4      	bne.n	8008aca <ai_layers_forward_all+0x72>
 8008ae0:	e7df      	b.n	8008aa2 <ai_layers_forward_all+0x4a>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008ae6:	3701      	adds	r7, #1
 8008ae8:	e7db      	b.n	8008aa2 <ai_layers_forward_all+0x4a>
 8008aea:	bf00      	nop

08008aec <lite_dense_if32of32wf32>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8008af4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008af8:	4287      	cmp	r7, r0
 8008afa:	f240 8106 	bls.w	8008d0a <lite_dense_if32of32wf32+0x21e>
 8008afe:	f1a6 0810 	sub.w	r8, r6, #16
 8008b02:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8008b06:	f108 0801 	add.w	r8, r8, #1
 8008b0a:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8008b0e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8008b12:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8008b16:	4605      	mov	r5, r0
 8008b18:	f006 0a0f 	and.w	sl, r6, #15
 8008b1c:	2e0f      	cmp	r6, #15
 8008b1e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8008d30 <lite_dense_if32of32wf32+0x244>
 8008b22:	f240 8101 	bls.w	8008d28 <lite_dense_if32of32wf32+0x23c>
 8008b26:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8008b2a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8008b2e:	46b6      	mov	lr, r6
 8008b30:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8008b34:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008b38:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8008b3c:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8008b40:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8008b44:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8008b48:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8008b4c:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8008b50:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8008b54:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8008b58:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008b5c:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8008b60:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008b64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008b68:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008b6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008b70:	f1ae 0e10 	sub.w	lr, lr, #16
 8008b74:	f1be 0f0f 	cmp.w	lr, #15
 8008b78:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8008b7c:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8008b80:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008b84:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008b88:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8008b8c:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8008b90:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8008b94:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008b98:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8008b9c:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8008ba0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008ba4:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8008ba8:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8008bac:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008bb0:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8008bb4:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8008bb8:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008bbc:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008bc0:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8008bc4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008bc8:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008bcc:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008bd0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008bd4:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8008bd8:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8008bdc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008be0:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8008be4:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8008be8:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008bec:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008bf0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008bf4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008bf8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008bfc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c04:	d894      	bhi.n	8008b30 <lite_dense_if32of32wf32+0x44>
 8008c06:	eb02 0e0b 	add.w	lr, r2, fp
 8008c0a:	4654      	mov	r4, sl
 8008c0c:	46c4      	mov	ip, r8
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d075      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c12:	eddc 6a00 	vldr	s13, [ip]
 8008c16:	edde 7a00 	vldr	s15, [lr]
 8008c1a:	2c01      	cmp	r4, #1
 8008c1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c20:	d06d      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c22:	eddc 6a01 	vldr	s13, [ip, #4]
 8008c26:	edde 7a01 	vldr	s15, [lr, #4]
 8008c2a:	2c02      	cmp	r4, #2
 8008c2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c30:	d065      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c32:	eddc 6a02 	vldr	s13, [ip, #8]
 8008c36:	edde 7a02 	vldr	s15, [lr, #8]
 8008c3a:	2c03      	cmp	r4, #3
 8008c3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c40:	d05d      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c42:	eddc 6a03 	vldr	s13, [ip, #12]
 8008c46:	edde 7a03 	vldr	s15, [lr, #12]
 8008c4a:	2c04      	cmp	r4, #4
 8008c4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c50:	d055      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c52:	eddc 6a04 	vldr	s13, [ip, #16]
 8008c56:	edde 7a04 	vldr	s15, [lr, #16]
 8008c5a:	2c05      	cmp	r4, #5
 8008c5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c60:	d04d      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c62:	eddc 6a05 	vldr	s13, [ip, #20]
 8008c66:	edde 7a05 	vldr	s15, [lr, #20]
 8008c6a:	2c06      	cmp	r4, #6
 8008c6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c70:	d045      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c72:	eddc 6a06 	vldr	s13, [ip, #24]
 8008c76:	edde 7a06 	vldr	s15, [lr, #24]
 8008c7a:	2c07      	cmp	r4, #7
 8008c7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c80:	d03d      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c82:	eddc 6a07 	vldr	s13, [ip, #28]
 8008c86:	edde 7a07 	vldr	s15, [lr, #28]
 8008c8a:	2c08      	cmp	r4, #8
 8008c8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c90:	d035      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008c92:	eddc 6a08 	vldr	s13, [ip, #32]
 8008c96:	edde 7a08 	vldr	s15, [lr, #32]
 8008c9a:	2c09      	cmp	r4, #9
 8008c9c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ca0:	d02d      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008ca2:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8008ca6:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8008caa:	2c0a      	cmp	r4, #10
 8008cac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008cb0:	d025      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008cb2:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8008cb6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8008cba:	2c0b      	cmp	r4, #11
 8008cbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008cc0:	d01d      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008cc2:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8008cc6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8008cca:	2c0c      	cmp	r4, #12
 8008ccc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008cd0:	d015      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008cd2:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8008cd6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8008cda:	3c0d      	subs	r4, #13
 8008cdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ce0:	d00d      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008ce2:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8008ce6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8008cea:	2c01      	cmp	r4, #1
 8008cec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008cf0:	d005      	beq.n	8008cfe <lite_dense_if32of32wf32+0x212>
 8008cf2:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8008cf6:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8008cfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008cfe:	444a      	add	r2, r9
 8008d00:	eca5 7a01 	vstmia	r5!, {s14}
 8008d04:	42af      	cmp	r7, r5
 8008d06:	f63f af09 	bhi.w	8008b1c <lite_dense_if32of32wf32+0x30>
 8008d0a:	b15b      	cbz	r3, 8008d24 <lite_dense_if32of32wf32+0x238>
 8008d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d0e:	b14a      	cbz	r2, 8008d24 <lite_dense_if32of32wf32+0x238>
 8008d10:	edd0 7a00 	vldr	s15, [r0]
 8008d14:	ecb3 7a01 	vldmia	r3!, {s14}
 8008d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d1c:	ece0 7a01 	vstmia	r0!, {s15}
 8008d20:	4287      	cmp	r7, r0
 8008d22:	d1f5      	bne.n	8008d10 <lite_dense_if32of32wf32+0x224>
 8008d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d28:	4634      	mov	r4, r6
 8008d2a:	4696      	mov	lr, r2
 8008d2c:	468c      	mov	ip, r1
 8008d2e:	e76e      	b.n	8008c0e <lite_dense_if32of32wf32+0x122>
 8008d30:	00000000 	.word	0x00000000

08008d34 <ai_version_get>:
 8008d34:	0212      	lsls	r2, r2, #8
 8008d36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008d3a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008d3e:	4770      	bx	lr

08008d40 <get_tensor_byte_size>:
 8008d40:	b410      	push	{r4}
 8008d42:	6983      	ldr	r3, [r0, #24]
 8008d44:	68c4      	ldr	r4, [r0, #12]
 8008d46:	6941      	ldr	r1, [r0, #20]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68e0      	ldr	r0, [r4, #12]
 8008d4c:	4a07      	ldr	r2, [pc, #28]	; (8008d6c <get_tensor_byte_size+0x2c>)
 8008d4e:	68c9      	ldr	r1, [r1, #12]
 8008d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d54:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8008d58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008d5c:	fb01 f000 	mul.w	r0, r1, r0
 8008d60:	4293      	cmp	r3, r2
 8008d62:	bf04      	itt	eq
 8008d64:	3007      	addeq	r0, #7
 8008d66:	08c0      	lsreq	r0, r0, #3
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	000400c0 	.word	0x000400c0

08008d70 <ai_array_to_buffer_fmt>:
 8008d70:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d050      	beq.n	8008e1a <ai_array_to_buffer_fmt+0xaa>
 8008d78:	4b2a      	ldr	r3, [pc, #168]	; (8008e24 <ai_array_to_buffer_fmt+0xb4>)
 8008d7a:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d00b      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008d82:	dc1c      	bgt.n	8008dbe <ai_array_to_buffer_fmt+0x4e>
 8008d84:	4b28      	ldr	r3, [pc, #160]	; (8008e28 <ai_array_to_buffer_fmt+0xb8>)
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d007      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008d8a:	dd0b      	ble.n	8008da4 <ai_array_to_buffer_fmt+0x34>
 8008d8c:	4b27      	ldr	r3, [pc, #156]	; (8008e2c <ai_array_to_buffer_fmt+0xbc>)
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d003      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008d92:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d131      	bne.n	8008dfe <ai_array_to_buffer_fmt+0x8e>
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008da0:	4318      	orrs	r0, r3
 8008da2:	4770      	bx	lr
 8008da4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d0f6      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008dac:	dd2c      	ble.n	8008e08 <ai_array_to_buffer_fmt+0x98>
 8008dae:	4b20      	ldr	r3, [pc, #128]	; (8008e30 <ai_array_to_buffer_fmt+0xc0>)
 8008db0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008db4:	429a      	cmp	r2, r3
 8008db6:	bf18      	it	ne
 8008db8:	2340      	movne	r3, #64	; 0x40
 8008dba:	4318      	orrs	r0, r3
 8008dbc:	4770      	bx	lr
 8008dbe:	4b1d      	ldr	r3, [pc, #116]	; (8008e34 <ai_array_to_buffer_fmt+0xc4>)
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d0ea      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008dc4:	dd0e      	ble.n	8008de4 <ai_array_to_buffer_fmt+0x74>
 8008dc6:	4b1c      	ldr	r3, [pc, #112]	; (8008e38 <ai_array_to_buffer_fmt+0xc8>)
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d0e6      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008dcc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d0e2      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008dd4:	4b19      	ldr	r3, [pc, #100]	; (8008e3c <ai_array_to_buffer_fmt+0xcc>)
 8008dd6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	bf18      	it	ne
 8008dde:	2340      	movne	r3, #64	; 0x40
 8008de0:	4318      	orrs	r0, r3
 8008de2:	4770      	bx	lr
 8008de4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d0d6      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008dec:	3307      	adds	r3, #7
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d0d3      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008df2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8008df6:	429a      	cmp	r2, r3
 8008df8:	bf18      	it	ne
 8008dfa:	2340      	movne	r3, #64	; 0x40
 8008dfc:	e7ce      	b.n	8008d9c <ai_array_to_buffer_fmt+0x2c>
 8008dfe:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <ai_array_to_buffer_fmt+0xd0>)
 8008e00:	429a      	cmp	r2, r3
 8008e02:	bf18      	it	ne
 8008e04:	2340      	movne	r3, #64	; 0x40
 8008e06:	e7c9      	b.n	8008d9c <ai_array_to_buffer_fmt+0x2c>
 8008e08:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d0c4      	beq.n	8008d9a <ai_array_to_buffer_fmt+0x2a>
 8008e10:	3380      	adds	r3, #128	; 0x80
 8008e12:	429a      	cmp	r2, r3
 8008e14:	bf18      	it	ne
 8008e16:	2340      	movne	r3, #64	; 0x40
 8008e18:	e7c0      	b.n	8008d9c <ai_array_to_buffer_fmt+0x2c>
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <ai_array_to_buffer_fmt+0xd4>)
 8008e1c:	4003      	ands	r3, r0
 8008e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e22:	e7bb      	b.n	8008d9c <ai_array_to_buffer_fmt+0x2c>
 8008e24:	00840040 	.word	0x00840040
 8008e28:	00040840 	.word	0x00040840
 8008e2c:	00041040 	.word	0x00041040
 8008e30:	00040447 	.word	0x00040447
 8008e34:	00840840 	.word	0x00840840
 8008e38:	00841040 	.word	0x00841040
 8008e3c:	0084084f 	.word	0x0084084f
 8008e40:	0004084f 	.word	0x0004084f
 8008e44:	00803fff 	.word	0x00803fff

08008e48 <ai_array_get_byte_size>:
 8008e48:	b319      	cbz	r1, 8008e92 <ai_array_get_byte_size+0x4a>
 8008e4a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008e4e:	fb03 f101 	mul.w	r1, r3, r1
 8008e52:	3107      	adds	r1, #7
 8008e54:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008e58:	f021 0307 	bic.w	r3, r1, #7
 8008e5c:	2a04      	cmp	r2, #4
 8008e5e:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8008e62:	fa23 f101 	lsr.w	r1, r3, r1
 8008e66:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8008e6a:	d00b      	beq.n	8008e84 <ai_array_get_byte_size+0x3c>
 8008e6c:	2a08      	cmp	r2, #8
 8008e6e:	d002      	beq.n	8008e76 <ai_array_get_byte_size+0x2e>
 8008e70:	3107      	adds	r1, #7
 8008e72:	08c8      	lsrs	r0, r1, #3
 8008e74:	4770      	bx	lr
 8008e76:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008e7a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008e7e:	3107      	adds	r1, #7
 8008e80:	08c8      	lsrs	r0, r1, #3
 8008e82:	4770      	bx	lr
 8008e84:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008e88:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008e8c:	3107      	adds	r1, #7
 8008e8e:	08c8      	lsrs	r0, r1, #3
 8008e90:	4770      	bx	lr
 8008e92:	4608      	mov	r0, r1
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop

08008e98 <ai_array_get_data_byte_size>:
 8008e98:	b169      	cbz	r1, 8008eb6 <ai_array_get_data_byte_size+0x1e>
 8008e9a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8008e9e:	fb02 f101 	mul.w	r1, r2, r1
 8008ea2:	1dcb      	adds	r3, r1, #7
 8008ea4:	f023 0307 	bic.w	r3, r3, #7
 8008ea8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008eac:	fa23 f000 	lsr.w	r0, r3, r0
 8008eb0:	3007      	adds	r0, #7
 8008eb2:	08c0      	lsrs	r0, r0, #3
 8008eb4:	4770      	bx	lr
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop

08008ebc <__errno>:
 8008ebc:	4b01      	ldr	r3, [pc, #4]	; (8008ec4 <__errno+0x8>)
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20000554 	.word	0x20000554

08008ec8 <__libc_init_array>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4d0d      	ldr	r5, [pc, #52]	; (8008f00 <__libc_init_array+0x38>)
 8008ecc:	4c0d      	ldr	r4, [pc, #52]	; (8008f04 <__libc_init_array+0x3c>)
 8008ece:	1b64      	subs	r4, r4, r5
 8008ed0:	10a4      	asrs	r4, r4, #2
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	d109      	bne.n	8008eec <__libc_init_array+0x24>
 8008ed8:	4d0b      	ldr	r5, [pc, #44]	; (8008f08 <__libc_init_array+0x40>)
 8008eda:	4c0c      	ldr	r4, [pc, #48]	; (8008f0c <__libc_init_array+0x44>)
 8008edc:	f001 f8a0 	bl	800a020 <_init>
 8008ee0:	1b64      	subs	r4, r4, r5
 8008ee2:	10a4      	asrs	r4, r4, #2
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	d105      	bne.n	8008ef6 <__libc_init_array+0x2e>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef0:	4798      	blx	r3
 8008ef2:	3601      	adds	r6, #1
 8008ef4:	e7ee      	b.n	8008ed4 <__libc_init_array+0xc>
 8008ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efa:	4798      	blx	r3
 8008efc:	3601      	adds	r6, #1
 8008efe:	e7f2      	b.n	8008ee6 <__libc_init_array+0x1e>
 8008f00:	0800adb8 	.word	0x0800adb8
 8008f04:	0800adb8 	.word	0x0800adb8
 8008f08:	0800adb8 	.word	0x0800adb8
 8008f0c:	0800adbc 	.word	0x0800adbc

08008f10 <memcpy>:
 8008f10:	440a      	add	r2, r1
 8008f12:	4291      	cmp	r1, r2
 8008f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f18:	d100      	bne.n	8008f1c <memcpy+0xc>
 8008f1a:	4770      	bx	lr
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f26:	4291      	cmp	r1, r2
 8008f28:	d1f9      	bne.n	8008f1e <memcpy+0xe>
 8008f2a:	bd10      	pop	{r4, pc}

08008f2c <memset>:
 8008f2c:	4402      	add	r2, r0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d100      	bne.n	8008f36 <memset+0xa>
 8008f34:	4770      	bx	lr
 8008f36:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3a:	e7f9      	b.n	8008f30 <memset+0x4>

08008f3c <pow>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	ed2d 8b02 	vpush	{d8}
 8008f42:	eeb0 8a40 	vmov.f32	s16, s0
 8008f46:	eef0 8a60 	vmov.f32	s17, s1
 8008f4a:	ec55 4b11 	vmov	r4, r5, d1
 8008f4e:	f000 f8bb 	bl	80090c8 <__ieee754_pow>
 8008f52:	4622      	mov	r2, r4
 8008f54:	462b      	mov	r3, r5
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	ec57 6b10 	vmov	r6, r7, d0
 8008f5e:	f7f7 fda9 	bl	8000ab4 <__aeabi_dcmpun>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d13b      	bne.n	8008fde <pow+0xa2>
 8008f66:	ec51 0b18 	vmov	r0, r1, d8
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f7f7 fd6f 	bl	8000a50 <__aeabi_dcmpeq>
 8008f72:	b1b8      	cbz	r0, 8008fa4 <pow+0x68>
 8008f74:	2200      	movs	r2, #0
 8008f76:	2300      	movs	r3, #0
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 fd68 	bl	8000a50 <__aeabi_dcmpeq>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d146      	bne.n	8009012 <pow+0xd6>
 8008f84:	ec45 4b10 	vmov	d0, r4, r5
 8008f88:	f000 ffab 	bl	8009ee2 <finite>
 8008f8c:	b338      	cbz	r0, 8008fde <pow+0xa2>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2300      	movs	r3, #0
 8008f92:	4620      	mov	r0, r4
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7f7 fd65 	bl	8000a64 <__aeabi_dcmplt>
 8008f9a:	b300      	cbz	r0, 8008fde <pow+0xa2>
 8008f9c:	f7ff ff8e 	bl	8008ebc <__errno>
 8008fa0:	2322      	movs	r3, #34	; 0x22
 8008fa2:	e01b      	b.n	8008fdc <pow+0xa0>
 8008fa4:	ec47 6b10 	vmov	d0, r6, r7
 8008fa8:	f000 ff9b 	bl	8009ee2 <finite>
 8008fac:	b9e0      	cbnz	r0, 8008fe8 <pow+0xac>
 8008fae:	eeb0 0a48 	vmov.f32	s0, s16
 8008fb2:	eef0 0a68 	vmov.f32	s1, s17
 8008fb6:	f000 ff94 	bl	8009ee2 <finite>
 8008fba:	b1a8      	cbz	r0, 8008fe8 <pow+0xac>
 8008fbc:	ec45 4b10 	vmov	d0, r4, r5
 8008fc0:	f000 ff8f 	bl	8009ee2 <finite>
 8008fc4:	b180      	cbz	r0, 8008fe8 <pow+0xac>
 8008fc6:	4632      	mov	r2, r6
 8008fc8:	463b      	mov	r3, r7
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4639      	mov	r1, r7
 8008fce:	f7f7 fd71 	bl	8000ab4 <__aeabi_dcmpun>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d0e2      	beq.n	8008f9c <pow+0x60>
 8008fd6:	f7ff ff71 	bl	8008ebc <__errno>
 8008fda:	2321      	movs	r3, #33	; 0x21
 8008fdc:	6003      	str	r3, [r0, #0]
 8008fde:	ecbd 8b02 	vpop	{d8}
 8008fe2:	ec47 6b10 	vmov	d0, r6, r7
 8008fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2300      	movs	r3, #0
 8008fec:	4630      	mov	r0, r6
 8008fee:	4639      	mov	r1, r7
 8008ff0:	f7f7 fd2e 	bl	8000a50 <__aeabi_dcmpeq>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d0f2      	beq.n	8008fde <pow+0xa2>
 8008ff8:	eeb0 0a48 	vmov.f32	s0, s16
 8008ffc:	eef0 0a68 	vmov.f32	s1, s17
 8009000:	f000 ff6f 	bl	8009ee2 <finite>
 8009004:	2800      	cmp	r0, #0
 8009006:	d0ea      	beq.n	8008fde <pow+0xa2>
 8009008:	ec45 4b10 	vmov	d0, r4, r5
 800900c:	f000 ff69 	bl	8009ee2 <finite>
 8009010:	e7c3      	b.n	8008f9a <pow+0x5e>
 8009012:	4f01      	ldr	r7, [pc, #4]	; (8009018 <pow+0xdc>)
 8009014:	2600      	movs	r6, #0
 8009016:	e7e2      	b.n	8008fde <pow+0xa2>
 8009018:	3ff00000 	.word	0x3ff00000

0800901c <expf>:
 800901c:	b508      	push	{r3, lr}
 800901e:	ed2d 8b02 	vpush	{d8}
 8009022:	eef0 8a40 	vmov.f32	s17, s0
 8009026:	f000 fe2f 	bl	8009c88 <__ieee754_expf>
 800902a:	eeb0 8a40 	vmov.f32	s16, s0
 800902e:	eeb0 0a68 	vmov.f32	s0, s17
 8009032:	f000 ffe7 	bl	800a004 <finitef>
 8009036:	b160      	cbz	r0, 8009052 <expf+0x36>
 8009038:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009078 <expf+0x5c>
 800903c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009044:	dd0a      	ble.n	800905c <expf+0x40>
 8009046:	f7ff ff39 	bl	8008ebc <__errno>
 800904a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800907c <expf+0x60>
 800904e:	2322      	movs	r3, #34	; 0x22
 8009050:	6003      	str	r3, [r0, #0]
 8009052:	eeb0 0a48 	vmov.f32	s0, s16
 8009056:	ecbd 8b02 	vpop	{d8}
 800905a:	bd08      	pop	{r3, pc}
 800905c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009080 <expf+0x64>
 8009060:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009068:	d5f3      	bpl.n	8009052 <expf+0x36>
 800906a:	f7ff ff27 	bl	8008ebc <__errno>
 800906e:	2322      	movs	r3, #34	; 0x22
 8009070:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009084 <expf+0x68>
 8009074:	6003      	str	r3, [r0, #0]
 8009076:	e7ec      	b.n	8009052 <expf+0x36>
 8009078:	42b17180 	.word	0x42b17180
 800907c:	7f800000 	.word	0x7f800000
 8009080:	c2cff1b5 	.word	0xc2cff1b5
 8009084:	00000000 	.word	0x00000000

08009088 <sqrtf>:
 8009088:	b508      	push	{r3, lr}
 800908a:	ed2d 8b02 	vpush	{d8}
 800908e:	eeb0 8a40 	vmov.f32	s16, s0
 8009092:	f000 fec7 	bl	8009e24 <__ieee754_sqrtf>
 8009096:	eeb4 8a48 	vcmp.f32	s16, s16
 800909a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909e:	d60c      	bvs.n	80090ba <sqrtf+0x32>
 80090a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80090c0 <sqrtf+0x38>
 80090a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80090a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ac:	d505      	bpl.n	80090ba <sqrtf+0x32>
 80090ae:	f7ff ff05 	bl	8008ebc <__errno>
 80090b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80090b6:	2321      	movs	r3, #33	; 0x21
 80090b8:	6003      	str	r3, [r0, #0]
 80090ba:	ecbd 8b02 	vpop	{d8}
 80090be:	bd08      	pop	{r3, pc}
	...

080090c8 <__ieee754_pow>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	ed2d 8b06 	vpush	{d8-d10}
 80090d0:	b089      	sub	sp, #36	; 0x24
 80090d2:	ed8d 1b00 	vstr	d1, [sp]
 80090d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80090da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80090de:	ea58 0102 	orrs.w	r1, r8, r2
 80090e2:	ec57 6b10 	vmov	r6, r7, d0
 80090e6:	d115      	bne.n	8009114 <__ieee754_pow+0x4c>
 80090e8:	19b3      	adds	r3, r6, r6
 80090ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80090ee:	4152      	adcs	r2, r2
 80090f0:	4299      	cmp	r1, r3
 80090f2:	4b89      	ldr	r3, [pc, #548]	; (8009318 <__ieee754_pow+0x250>)
 80090f4:	4193      	sbcs	r3, r2
 80090f6:	f080 84d2 	bcs.w	8009a9e <__ieee754_pow+0x9d6>
 80090fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	f7f7 f887 	bl	8000214 <__adddf3>
 8009106:	ec41 0b10 	vmov	d0, r0, r1
 800910a:	b009      	add	sp, #36	; 0x24
 800910c:	ecbd 8b06 	vpop	{d8-d10}
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	4b81      	ldr	r3, [pc, #516]	; (800931c <__ieee754_pow+0x254>)
 8009116:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800911a:	429c      	cmp	r4, r3
 800911c:	ee10 aa10 	vmov	sl, s0
 8009120:	463d      	mov	r5, r7
 8009122:	dc06      	bgt.n	8009132 <__ieee754_pow+0x6a>
 8009124:	d101      	bne.n	800912a <__ieee754_pow+0x62>
 8009126:	2e00      	cmp	r6, #0
 8009128:	d1e7      	bne.n	80090fa <__ieee754_pow+0x32>
 800912a:	4598      	cmp	r8, r3
 800912c:	dc01      	bgt.n	8009132 <__ieee754_pow+0x6a>
 800912e:	d10f      	bne.n	8009150 <__ieee754_pow+0x88>
 8009130:	b172      	cbz	r2, 8009150 <__ieee754_pow+0x88>
 8009132:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009136:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800913a:	ea55 050a 	orrs.w	r5, r5, sl
 800913e:	d1dc      	bne.n	80090fa <__ieee754_pow+0x32>
 8009140:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009144:	18db      	adds	r3, r3, r3
 8009146:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800914a:	4152      	adcs	r2, r2
 800914c:	429d      	cmp	r5, r3
 800914e:	e7d0      	b.n	80090f2 <__ieee754_pow+0x2a>
 8009150:	2d00      	cmp	r5, #0
 8009152:	da3b      	bge.n	80091cc <__ieee754_pow+0x104>
 8009154:	4b72      	ldr	r3, [pc, #456]	; (8009320 <__ieee754_pow+0x258>)
 8009156:	4598      	cmp	r8, r3
 8009158:	dc51      	bgt.n	80091fe <__ieee754_pow+0x136>
 800915a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800915e:	4598      	cmp	r8, r3
 8009160:	f340 84ac 	ble.w	8009abc <__ieee754_pow+0x9f4>
 8009164:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009168:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800916c:	2b14      	cmp	r3, #20
 800916e:	dd0f      	ble.n	8009190 <__ieee754_pow+0xc8>
 8009170:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009174:	fa22 f103 	lsr.w	r1, r2, r3
 8009178:	fa01 f303 	lsl.w	r3, r1, r3
 800917c:	4293      	cmp	r3, r2
 800917e:	f040 849d 	bne.w	8009abc <__ieee754_pow+0x9f4>
 8009182:	f001 0101 	and.w	r1, r1, #1
 8009186:	f1c1 0302 	rsb	r3, r1, #2
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	b182      	cbz	r2, 80091b0 <__ieee754_pow+0xe8>
 800918e:	e05f      	b.n	8009250 <__ieee754_pow+0x188>
 8009190:	2a00      	cmp	r2, #0
 8009192:	d15b      	bne.n	800924c <__ieee754_pow+0x184>
 8009194:	f1c3 0314 	rsb	r3, r3, #20
 8009198:	fa48 f103 	asr.w	r1, r8, r3
 800919c:	fa01 f303 	lsl.w	r3, r1, r3
 80091a0:	4543      	cmp	r3, r8
 80091a2:	f040 8488 	bne.w	8009ab6 <__ieee754_pow+0x9ee>
 80091a6:	f001 0101 	and.w	r1, r1, #1
 80091aa:	f1c1 0302 	rsb	r3, r1, #2
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	4b5c      	ldr	r3, [pc, #368]	; (8009324 <__ieee754_pow+0x25c>)
 80091b2:	4598      	cmp	r8, r3
 80091b4:	d132      	bne.n	800921c <__ieee754_pow+0x154>
 80091b6:	f1b9 0f00 	cmp.w	r9, #0
 80091ba:	f280 8478 	bge.w	8009aae <__ieee754_pow+0x9e6>
 80091be:	4959      	ldr	r1, [pc, #356]	; (8009324 <__ieee754_pow+0x25c>)
 80091c0:	4632      	mov	r2, r6
 80091c2:	463b      	mov	r3, r7
 80091c4:	2000      	movs	r0, #0
 80091c6:	f7f7 fb05 	bl	80007d4 <__aeabi_ddiv>
 80091ca:	e79c      	b.n	8009106 <__ieee754_pow+0x3e>
 80091cc:	2300      	movs	r3, #0
 80091ce:	9304      	str	r3, [sp, #16]
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	d13d      	bne.n	8009250 <__ieee754_pow+0x188>
 80091d4:	4b51      	ldr	r3, [pc, #324]	; (800931c <__ieee754_pow+0x254>)
 80091d6:	4598      	cmp	r8, r3
 80091d8:	d1ea      	bne.n	80091b0 <__ieee754_pow+0xe8>
 80091da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80091de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80091e2:	ea53 030a 	orrs.w	r3, r3, sl
 80091e6:	f000 845a 	beq.w	8009a9e <__ieee754_pow+0x9d6>
 80091ea:	4b4f      	ldr	r3, [pc, #316]	; (8009328 <__ieee754_pow+0x260>)
 80091ec:	429c      	cmp	r4, r3
 80091ee:	dd08      	ble.n	8009202 <__ieee754_pow+0x13a>
 80091f0:	f1b9 0f00 	cmp.w	r9, #0
 80091f4:	f2c0 8457 	blt.w	8009aa6 <__ieee754_pow+0x9de>
 80091f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091fc:	e783      	b.n	8009106 <__ieee754_pow+0x3e>
 80091fe:	2302      	movs	r3, #2
 8009200:	e7e5      	b.n	80091ce <__ieee754_pow+0x106>
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	f04f 0000 	mov.w	r0, #0
 800920a:	f04f 0100 	mov.w	r1, #0
 800920e:	f6bf af7a 	bge.w	8009106 <__ieee754_pow+0x3e>
 8009212:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009216:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800921a:	e774      	b.n	8009106 <__ieee754_pow+0x3e>
 800921c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009220:	d106      	bne.n	8009230 <__ieee754_pow+0x168>
 8009222:	4632      	mov	r2, r6
 8009224:	463b      	mov	r3, r7
 8009226:	4630      	mov	r0, r6
 8009228:	4639      	mov	r1, r7
 800922a:	f7f7 f9a9 	bl	8000580 <__aeabi_dmul>
 800922e:	e76a      	b.n	8009106 <__ieee754_pow+0x3e>
 8009230:	4b3e      	ldr	r3, [pc, #248]	; (800932c <__ieee754_pow+0x264>)
 8009232:	4599      	cmp	r9, r3
 8009234:	d10c      	bne.n	8009250 <__ieee754_pow+0x188>
 8009236:	2d00      	cmp	r5, #0
 8009238:	db0a      	blt.n	8009250 <__ieee754_pow+0x188>
 800923a:	ec47 6b10 	vmov	d0, r6, r7
 800923e:	b009      	add	sp, #36	; 0x24
 8009240:	ecbd 8b06 	vpop	{d8-d10}
 8009244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009248:	f000 bc6c 	b.w	8009b24 <__ieee754_sqrt>
 800924c:	2300      	movs	r3, #0
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	ec47 6b10 	vmov	d0, r6, r7
 8009254:	f000 fe3c 	bl	8009ed0 <fabs>
 8009258:	ec51 0b10 	vmov	r0, r1, d0
 800925c:	f1ba 0f00 	cmp.w	sl, #0
 8009260:	d129      	bne.n	80092b6 <__ieee754_pow+0x1ee>
 8009262:	b124      	cbz	r4, 800926e <__ieee754_pow+0x1a6>
 8009264:	4b2f      	ldr	r3, [pc, #188]	; (8009324 <__ieee754_pow+0x25c>)
 8009266:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800926a:	429a      	cmp	r2, r3
 800926c:	d123      	bne.n	80092b6 <__ieee754_pow+0x1ee>
 800926e:	f1b9 0f00 	cmp.w	r9, #0
 8009272:	da05      	bge.n	8009280 <__ieee754_pow+0x1b8>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	2000      	movs	r0, #0
 800927a:	492a      	ldr	r1, [pc, #168]	; (8009324 <__ieee754_pow+0x25c>)
 800927c:	f7f7 faaa 	bl	80007d4 <__aeabi_ddiv>
 8009280:	2d00      	cmp	r5, #0
 8009282:	f6bf af40 	bge.w	8009106 <__ieee754_pow+0x3e>
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800928c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009290:	4323      	orrs	r3, r4
 8009292:	d108      	bne.n	80092a6 <__ieee754_pow+0x1de>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4610      	mov	r0, r2
 800929a:	4619      	mov	r1, r3
 800929c:	f7f6 ffb8 	bl	8000210 <__aeabi_dsub>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	e78f      	b.n	80091c6 <__ieee754_pow+0xfe>
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	f47f af2c 	bne.w	8009106 <__ieee754_pow+0x3e>
 80092ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092b2:	4619      	mov	r1, r3
 80092b4:	e727      	b.n	8009106 <__ieee754_pow+0x3e>
 80092b6:	0feb      	lsrs	r3, r5, #31
 80092b8:	3b01      	subs	r3, #1
 80092ba:	9306      	str	r3, [sp, #24]
 80092bc:	9a06      	ldr	r2, [sp, #24]
 80092be:	9b04      	ldr	r3, [sp, #16]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	d102      	bne.n	80092ca <__ieee754_pow+0x202>
 80092c4:	4632      	mov	r2, r6
 80092c6:	463b      	mov	r3, r7
 80092c8:	e7e6      	b.n	8009298 <__ieee754_pow+0x1d0>
 80092ca:	4b19      	ldr	r3, [pc, #100]	; (8009330 <__ieee754_pow+0x268>)
 80092cc:	4598      	cmp	r8, r3
 80092ce:	f340 80fb 	ble.w	80094c8 <__ieee754_pow+0x400>
 80092d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80092d6:	4598      	cmp	r8, r3
 80092d8:	4b13      	ldr	r3, [pc, #76]	; (8009328 <__ieee754_pow+0x260>)
 80092da:	dd0c      	ble.n	80092f6 <__ieee754_pow+0x22e>
 80092dc:	429c      	cmp	r4, r3
 80092de:	dc0f      	bgt.n	8009300 <__ieee754_pow+0x238>
 80092e0:	f1b9 0f00 	cmp.w	r9, #0
 80092e4:	da0f      	bge.n	8009306 <__ieee754_pow+0x23e>
 80092e6:	2000      	movs	r0, #0
 80092e8:	b009      	add	sp, #36	; 0x24
 80092ea:	ecbd 8b06 	vpop	{d8-d10}
 80092ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f2:	f000 bdc1 	b.w	8009e78 <__math_oflow>
 80092f6:	429c      	cmp	r4, r3
 80092f8:	dbf2      	blt.n	80092e0 <__ieee754_pow+0x218>
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <__ieee754_pow+0x25c>)
 80092fc:	429c      	cmp	r4, r3
 80092fe:	dd19      	ble.n	8009334 <__ieee754_pow+0x26c>
 8009300:	f1b9 0f00 	cmp.w	r9, #0
 8009304:	dcef      	bgt.n	80092e6 <__ieee754_pow+0x21e>
 8009306:	2000      	movs	r0, #0
 8009308:	b009      	add	sp, #36	; 0x24
 800930a:	ecbd 8b06 	vpop	{d8-d10}
 800930e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009312:	f000 bda8 	b.w	8009e66 <__math_uflow>
 8009316:	bf00      	nop
 8009318:	fff00000 	.word	0xfff00000
 800931c:	7ff00000 	.word	0x7ff00000
 8009320:	433fffff 	.word	0x433fffff
 8009324:	3ff00000 	.word	0x3ff00000
 8009328:	3fefffff 	.word	0x3fefffff
 800932c:	3fe00000 	.word	0x3fe00000
 8009330:	41e00000 	.word	0x41e00000
 8009334:	4b60      	ldr	r3, [pc, #384]	; (80094b8 <__ieee754_pow+0x3f0>)
 8009336:	2200      	movs	r2, #0
 8009338:	f7f6 ff6a 	bl	8000210 <__aeabi_dsub>
 800933c:	a354      	add	r3, pc, #336	; (adr r3, 8009490 <__ieee754_pow+0x3c8>)
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	4604      	mov	r4, r0
 8009344:	460d      	mov	r5, r1
 8009346:	f7f7 f91b 	bl	8000580 <__aeabi_dmul>
 800934a:	a353      	add	r3, pc, #332	; (adr r3, 8009498 <__ieee754_pow+0x3d0>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	4606      	mov	r6, r0
 8009352:	460f      	mov	r7, r1
 8009354:	4620      	mov	r0, r4
 8009356:	4629      	mov	r1, r5
 8009358:	f7f7 f912 	bl	8000580 <__aeabi_dmul>
 800935c:	4b57      	ldr	r3, [pc, #348]	; (80094bc <__ieee754_pow+0x3f4>)
 800935e:	4682      	mov	sl, r0
 8009360:	468b      	mov	fp, r1
 8009362:	2200      	movs	r2, #0
 8009364:	4620      	mov	r0, r4
 8009366:	4629      	mov	r1, r5
 8009368:	f7f7 f90a 	bl	8000580 <__aeabi_dmul>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	a14b      	add	r1, pc, #300	; (adr r1, 80094a0 <__ieee754_pow+0x3d8>)
 8009372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009376:	f7f6 ff4b 	bl	8000210 <__aeabi_dsub>
 800937a:	4622      	mov	r2, r4
 800937c:	462b      	mov	r3, r5
 800937e:	f7f7 f8ff 	bl	8000580 <__aeabi_dmul>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	2000      	movs	r0, #0
 8009388:	494d      	ldr	r1, [pc, #308]	; (80094c0 <__ieee754_pow+0x3f8>)
 800938a:	f7f6 ff41 	bl	8000210 <__aeabi_dsub>
 800938e:	4622      	mov	r2, r4
 8009390:	4680      	mov	r8, r0
 8009392:	4689      	mov	r9, r1
 8009394:	462b      	mov	r3, r5
 8009396:	4620      	mov	r0, r4
 8009398:	4629      	mov	r1, r5
 800939a:	f7f7 f8f1 	bl	8000580 <__aeabi_dmul>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4640      	mov	r0, r8
 80093a4:	4649      	mov	r1, r9
 80093a6:	f7f7 f8eb 	bl	8000580 <__aeabi_dmul>
 80093aa:	a33f      	add	r3, pc, #252	; (adr r3, 80094a8 <__ieee754_pow+0x3e0>)
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f7 f8e6 	bl	8000580 <__aeabi_dmul>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4650      	mov	r0, sl
 80093ba:	4659      	mov	r1, fp
 80093bc:	f7f6 ff28 	bl	8000210 <__aeabi_dsub>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4680      	mov	r8, r0
 80093c6:	4689      	mov	r9, r1
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f7f6 ff22 	bl	8000214 <__adddf3>
 80093d0:	2000      	movs	r0, #0
 80093d2:	4632      	mov	r2, r6
 80093d4:	463b      	mov	r3, r7
 80093d6:	4604      	mov	r4, r0
 80093d8:	460d      	mov	r5, r1
 80093da:	f7f6 ff19 	bl	8000210 <__aeabi_dsub>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4640      	mov	r0, r8
 80093e4:	4649      	mov	r1, r9
 80093e6:	f7f6 ff13 	bl	8000210 <__aeabi_dsub>
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	9a06      	ldr	r2, [sp, #24]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	4313      	orrs	r3, r2
 80093f2:	4682      	mov	sl, r0
 80093f4:	468b      	mov	fp, r1
 80093f6:	f040 81e7 	bne.w	80097c8 <__ieee754_pow+0x700>
 80093fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80094b0 <__ieee754_pow+0x3e8>
 80093fe:	eeb0 8a47 	vmov.f32	s16, s14
 8009402:	eef0 8a67 	vmov.f32	s17, s15
 8009406:	e9dd 6700 	ldrd	r6, r7, [sp]
 800940a:	2600      	movs	r6, #0
 800940c:	4632      	mov	r2, r6
 800940e:	463b      	mov	r3, r7
 8009410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009414:	f7f6 fefc 	bl	8000210 <__aeabi_dsub>
 8009418:	4622      	mov	r2, r4
 800941a:	462b      	mov	r3, r5
 800941c:	f7f7 f8b0 	bl	8000580 <__aeabi_dmul>
 8009420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009424:	4680      	mov	r8, r0
 8009426:	4689      	mov	r9, r1
 8009428:	4650      	mov	r0, sl
 800942a:	4659      	mov	r1, fp
 800942c:	f7f7 f8a8 	bl	8000580 <__aeabi_dmul>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4640      	mov	r0, r8
 8009436:	4649      	mov	r1, r9
 8009438:	f7f6 feec 	bl	8000214 <__adddf3>
 800943c:	4632      	mov	r2, r6
 800943e:	463b      	mov	r3, r7
 8009440:	4680      	mov	r8, r0
 8009442:	4689      	mov	r9, r1
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f7f7 f89a 	bl	8000580 <__aeabi_dmul>
 800944c:	460b      	mov	r3, r1
 800944e:	4604      	mov	r4, r0
 8009450:	460d      	mov	r5, r1
 8009452:	4602      	mov	r2, r0
 8009454:	4649      	mov	r1, r9
 8009456:	4640      	mov	r0, r8
 8009458:	f7f6 fedc 	bl	8000214 <__adddf3>
 800945c:	4b19      	ldr	r3, [pc, #100]	; (80094c4 <__ieee754_pow+0x3fc>)
 800945e:	4299      	cmp	r1, r3
 8009460:	ec45 4b19 	vmov	d9, r4, r5
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	468b      	mov	fp, r1
 800946a:	f340 82f1 	ble.w	8009a50 <__ieee754_pow+0x988>
 800946e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009472:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009476:	4303      	orrs	r3, r0
 8009478:	f000 81e4 	beq.w	8009844 <__ieee754_pow+0x77c>
 800947c:	ec51 0b18 	vmov	r0, r1, d8
 8009480:	2200      	movs	r2, #0
 8009482:	2300      	movs	r3, #0
 8009484:	f7f7 faee 	bl	8000a64 <__aeabi_dcmplt>
 8009488:	3800      	subs	r0, #0
 800948a:	bf18      	it	ne
 800948c:	2001      	movne	r0, #1
 800948e:	e72b      	b.n	80092e8 <__ieee754_pow+0x220>
 8009490:	60000000 	.word	0x60000000
 8009494:	3ff71547 	.word	0x3ff71547
 8009498:	f85ddf44 	.word	0xf85ddf44
 800949c:	3e54ae0b 	.word	0x3e54ae0b
 80094a0:	55555555 	.word	0x55555555
 80094a4:	3fd55555 	.word	0x3fd55555
 80094a8:	652b82fe 	.word	0x652b82fe
 80094ac:	3ff71547 	.word	0x3ff71547
 80094b0:	00000000 	.word	0x00000000
 80094b4:	bff00000 	.word	0xbff00000
 80094b8:	3ff00000 	.word	0x3ff00000
 80094bc:	3fd00000 	.word	0x3fd00000
 80094c0:	3fe00000 	.word	0x3fe00000
 80094c4:	408fffff 	.word	0x408fffff
 80094c8:	4bd5      	ldr	r3, [pc, #852]	; (8009820 <__ieee754_pow+0x758>)
 80094ca:	402b      	ands	r3, r5
 80094cc:	2200      	movs	r2, #0
 80094ce:	b92b      	cbnz	r3, 80094dc <__ieee754_pow+0x414>
 80094d0:	4bd4      	ldr	r3, [pc, #848]	; (8009824 <__ieee754_pow+0x75c>)
 80094d2:	f7f7 f855 	bl	8000580 <__aeabi_dmul>
 80094d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80094da:	460c      	mov	r4, r1
 80094dc:	1523      	asrs	r3, r4, #20
 80094de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80094e2:	4413      	add	r3, r2
 80094e4:	9305      	str	r3, [sp, #20]
 80094e6:	4bd0      	ldr	r3, [pc, #832]	; (8009828 <__ieee754_pow+0x760>)
 80094e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80094ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80094f0:	429c      	cmp	r4, r3
 80094f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80094f6:	dd08      	ble.n	800950a <__ieee754_pow+0x442>
 80094f8:	4bcc      	ldr	r3, [pc, #816]	; (800982c <__ieee754_pow+0x764>)
 80094fa:	429c      	cmp	r4, r3
 80094fc:	f340 8162 	ble.w	80097c4 <__ieee754_pow+0x6fc>
 8009500:	9b05      	ldr	r3, [sp, #20]
 8009502:	3301      	adds	r3, #1
 8009504:	9305      	str	r3, [sp, #20]
 8009506:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800950a:	2400      	movs	r4, #0
 800950c:	00e3      	lsls	r3, r4, #3
 800950e:	9307      	str	r3, [sp, #28]
 8009510:	4bc7      	ldr	r3, [pc, #796]	; (8009830 <__ieee754_pow+0x768>)
 8009512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009516:	ed93 7b00 	vldr	d7, [r3]
 800951a:	4629      	mov	r1, r5
 800951c:	ec53 2b17 	vmov	r2, r3, d7
 8009520:	eeb0 9a47 	vmov.f32	s18, s14
 8009524:	eef0 9a67 	vmov.f32	s19, s15
 8009528:	4682      	mov	sl, r0
 800952a:	f7f6 fe71 	bl	8000210 <__aeabi_dsub>
 800952e:	4652      	mov	r2, sl
 8009530:	4606      	mov	r6, r0
 8009532:	460f      	mov	r7, r1
 8009534:	462b      	mov	r3, r5
 8009536:	ec51 0b19 	vmov	r0, r1, d9
 800953a:	f7f6 fe6b 	bl	8000214 <__adddf3>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	2000      	movs	r0, #0
 8009544:	49bb      	ldr	r1, [pc, #748]	; (8009834 <__ieee754_pow+0x76c>)
 8009546:	f7f7 f945 	bl	80007d4 <__aeabi_ddiv>
 800954a:	ec41 0b1a 	vmov	d10, r0, r1
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4630      	mov	r0, r6
 8009554:	4639      	mov	r1, r7
 8009556:	f7f7 f813 	bl	8000580 <__aeabi_dmul>
 800955a:	2300      	movs	r3, #0
 800955c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009566:	46ab      	mov	fp, r5
 8009568:	106d      	asrs	r5, r5, #1
 800956a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800956e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009572:	ec41 0b18 	vmov	d8, r0, r1
 8009576:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800957a:	2200      	movs	r2, #0
 800957c:	4640      	mov	r0, r8
 800957e:	4649      	mov	r1, r9
 8009580:	4614      	mov	r4, r2
 8009582:	461d      	mov	r5, r3
 8009584:	f7f6 fffc 	bl	8000580 <__aeabi_dmul>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	f7f6 fe3e 	bl	8000210 <__aeabi_dsub>
 8009594:	ec53 2b19 	vmov	r2, r3, d9
 8009598:	4606      	mov	r6, r0
 800959a:	460f      	mov	r7, r1
 800959c:	4620      	mov	r0, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	f7f6 fe36 	bl	8000210 <__aeabi_dsub>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4650      	mov	r0, sl
 80095aa:	4659      	mov	r1, fp
 80095ac:	f7f6 fe30 	bl	8000210 <__aeabi_dsub>
 80095b0:	4642      	mov	r2, r8
 80095b2:	464b      	mov	r3, r9
 80095b4:	f7f6 ffe4 	bl	8000580 <__aeabi_dmul>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4630      	mov	r0, r6
 80095be:	4639      	mov	r1, r7
 80095c0:	f7f6 fe26 	bl	8000210 <__aeabi_dsub>
 80095c4:	ec53 2b1a 	vmov	r2, r3, d10
 80095c8:	f7f6 ffda 	bl	8000580 <__aeabi_dmul>
 80095cc:	ec53 2b18 	vmov	r2, r3, d8
 80095d0:	ec41 0b19 	vmov	d9, r0, r1
 80095d4:	ec51 0b18 	vmov	r0, r1, d8
 80095d8:	f7f6 ffd2 	bl	8000580 <__aeabi_dmul>
 80095dc:	a37c      	add	r3, pc, #496	; (adr r3, 80097d0 <__ieee754_pow+0x708>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	4604      	mov	r4, r0
 80095e4:	460d      	mov	r5, r1
 80095e6:	f7f6 ffcb 	bl	8000580 <__aeabi_dmul>
 80095ea:	a37b      	add	r3, pc, #492	; (adr r3, 80097d8 <__ieee754_pow+0x710>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	f7f6 fe10 	bl	8000214 <__adddf3>
 80095f4:	4622      	mov	r2, r4
 80095f6:	462b      	mov	r3, r5
 80095f8:	f7f6 ffc2 	bl	8000580 <__aeabi_dmul>
 80095fc:	a378      	add	r3, pc, #480	; (adr r3, 80097e0 <__ieee754_pow+0x718>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f7f6 fe07 	bl	8000214 <__adddf3>
 8009606:	4622      	mov	r2, r4
 8009608:	462b      	mov	r3, r5
 800960a:	f7f6 ffb9 	bl	8000580 <__aeabi_dmul>
 800960e:	a376      	add	r3, pc, #472	; (adr r3, 80097e8 <__ieee754_pow+0x720>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f7f6 fdfe 	bl	8000214 <__adddf3>
 8009618:	4622      	mov	r2, r4
 800961a:	462b      	mov	r3, r5
 800961c:	f7f6 ffb0 	bl	8000580 <__aeabi_dmul>
 8009620:	a373      	add	r3, pc, #460	; (adr r3, 80097f0 <__ieee754_pow+0x728>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 fdf5 	bl	8000214 <__adddf3>
 800962a:	4622      	mov	r2, r4
 800962c:	462b      	mov	r3, r5
 800962e:	f7f6 ffa7 	bl	8000580 <__aeabi_dmul>
 8009632:	a371      	add	r3, pc, #452	; (adr r3, 80097f8 <__ieee754_pow+0x730>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f7f6 fdec 	bl	8000214 <__adddf3>
 800963c:	4622      	mov	r2, r4
 800963e:	4606      	mov	r6, r0
 8009640:	460f      	mov	r7, r1
 8009642:	462b      	mov	r3, r5
 8009644:	4620      	mov	r0, r4
 8009646:	4629      	mov	r1, r5
 8009648:	f7f6 ff9a 	bl	8000580 <__aeabi_dmul>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f6 ff94 	bl	8000580 <__aeabi_dmul>
 8009658:	4642      	mov	r2, r8
 800965a:	4604      	mov	r4, r0
 800965c:	460d      	mov	r5, r1
 800965e:	464b      	mov	r3, r9
 8009660:	ec51 0b18 	vmov	r0, r1, d8
 8009664:	f7f6 fdd6 	bl	8000214 <__adddf3>
 8009668:	ec53 2b19 	vmov	r2, r3, d9
 800966c:	f7f6 ff88 	bl	8000580 <__aeabi_dmul>
 8009670:	4622      	mov	r2, r4
 8009672:	462b      	mov	r3, r5
 8009674:	f7f6 fdce 	bl	8000214 <__adddf3>
 8009678:	4642      	mov	r2, r8
 800967a:	4682      	mov	sl, r0
 800967c:	468b      	mov	fp, r1
 800967e:	464b      	mov	r3, r9
 8009680:	4640      	mov	r0, r8
 8009682:	4649      	mov	r1, r9
 8009684:	f7f6 ff7c 	bl	8000580 <__aeabi_dmul>
 8009688:	4b6b      	ldr	r3, [pc, #428]	; (8009838 <__ieee754_pow+0x770>)
 800968a:	2200      	movs	r2, #0
 800968c:	4606      	mov	r6, r0
 800968e:	460f      	mov	r7, r1
 8009690:	f7f6 fdc0 	bl	8000214 <__adddf3>
 8009694:	4652      	mov	r2, sl
 8009696:	465b      	mov	r3, fp
 8009698:	f7f6 fdbc 	bl	8000214 <__adddf3>
 800969c:	2000      	movs	r0, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	460d      	mov	r5, r1
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	f7f6 ff69 	bl	8000580 <__aeabi_dmul>
 80096ae:	4b62      	ldr	r3, [pc, #392]	; (8009838 <__ieee754_pow+0x770>)
 80096b0:	4680      	mov	r8, r0
 80096b2:	4689      	mov	r9, r1
 80096b4:	2200      	movs	r2, #0
 80096b6:	4620      	mov	r0, r4
 80096b8:	4629      	mov	r1, r5
 80096ba:	f7f6 fda9 	bl	8000210 <__aeabi_dsub>
 80096be:	4632      	mov	r2, r6
 80096c0:	463b      	mov	r3, r7
 80096c2:	f7f6 fda5 	bl	8000210 <__aeabi_dsub>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4650      	mov	r0, sl
 80096cc:	4659      	mov	r1, fp
 80096ce:	f7f6 fd9f 	bl	8000210 <__aeabi_dsub>
 80096d2:	ec53 2b18 	vmov	r2, r3, d8
 80096d6:	f7f6 ff53 	bl	8000580 <__aeabi_dmul>
 80096da:	4622      	mov	r2, r4
 80096dc:	4606      	mov	r6, r0
 80096de:	460f      	mov	r7, r1
 80096e0:	462b      	mov	r3, r5
 80096e2:	ec51 0b19 	vmov	r0, r1, d9
 80096e6:	f7f6 ff4b 	bl	8000580 <__aeabi_dmul>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4630      	mov	r0, r6
 80096f0:	4639      	mov	r1, r7
 80096f2:	f7f6 fd8f 	bl	8000214 <__adddf3>
 80096f6:	4606      	mov	r6, r0
 80096f8:	460f      	mov	r7, r1
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 fd87 	bl	8000214 <__adddf3>
 8009706:	a33e      	add	r3, pc, #248	; (adr r3, 8009800 <__ieee754_pow+0x738>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	2000      	movs	r0, #0
 800970e:	4604      	mov	r4, r0
 8009710:	460d      	mov	r5, r1
 8009712:	f7f6 ff35 	bl	8000580 <__aeabi_dmul>
 8009716:	4642      	mov	r2, r8
 8009718:	ec41 0b18 	vmov	d8, r0, r1
 800971c:	464b      	mov	r3, r9
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	f7f6 fd75 	bl	8000210 <__aeabi_dsub>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4630      	mov	r0, r6
 800972c:	4639      	mov	r1, r7
 800972e:	f7f6 fd6f 	bl	8000210 <__aeabi_dsub>
 8009732:	a335      	add	r3, pc, #212	; (adr r3, 8009808 <__ieee754_pow+0x740>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f7f6 ff22 	bl	8000580 <__aeabi_dmul>
 800973c:	a334      	add	r3, pc, #208	; (adr r3, 8009810 <__ieee754_pow+0x748>)
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	4606      	mov	r6, r0
 8009744:	460f      	mov	r7, r1
 8009746:	4620      	mov	r0, r4
 8009748:	4629      	mov	r1, r5
 800974a:	f7f6 ff19 	bl	8000580 <__aeabi_dmul>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4630      	mov	r0, r6
 8009754:	4639      	mov	r1, r7
 8009756:	f7f6 fd5d 	bl	8000214 <__adddf3>
 800975a:	9a07      	ldr	r2, [sp, #28]
 800975c:	4b37      	ldr	r3, [pc, #220]	; (800983c <__ieee754_pow+0x774>)
 800975e:	4413      	add	r3, r2
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	f7f6 fd56 	bl	8000214 <__adddf3>
 8009768:	4682      	mov	sl, r0
 800976a:	9805      	ldr	r0, [sp, #20]
 800976c:	468b      	mov	fp, r1
 800976e:	f7f6 fe9d 	bl	80004ac <__aeabi_i2d>
 8009772:	9a07      	ldr	r2, [sp, #28]
 8009774:	4b32      	ldr	r3, [pc, #200]	; (8009840 <__ieee754_pow+0x778>)
 8009776:	4413      	add	r3, r2
 8009778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800977c:	4606      	mov	r6, r0
 800977e:	460f      	mov	r7, r1
 8009780:	4652      	mov	r2, sl
 8009782:	465b      	mov	r3, fp
 8009784:	ec51 0b18 	vmov	r0, r1, d8
 8009788:	f7f6 fd44 	bl	8000214 <__adddf3>
 800978c:	4642      	mov	r2, r8
 800978e:	464b      	mov	r3, r9
 8009790:	f7f6 fd40 	bl	8000214 <__adddf3>
 8009794:	4632      	mov	r2, r6
 8009796:	463b      	mov	r3, r7
 8009798:	f7f6 fd3c 	bl	8000214 <__adddf3>
 800979c:	2000      	movs	r0, #0
 800979e:	4632      	mov	r2, r6
 80097a0:	463b      	mov	r3, r7
 80097a2:	4604      	mov	r4, r0
 80097a4:	460d      	mov	r5, r1
 80097a6:	f7f6 fd33 	bl	8000210 <__aeabi_dsub>
 80097aa:	4642      	mov	r2, r8
 80097ac:	464b      	mov	r3, r9
 80097ae:	f7f6 fd2f 	bl	8000210 <__aeabi_dsub>
 80097b2:	ec53 2b18 	vmov	r2, r3, d8
 80097b6:	f7f6 fd2b 	bl	8000210 <__aeabi_dsub>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4650      	mov	r0, sl
 80097c0:	4659      	mov	r1, fp
 80097c2:	e610      	b.n	80093e6 <__ieee754_pow+0x31e>
 80097c4:	2401      	movs	r4, #1
 80097c6:	e6a1      	b.n	800950c <__ieee754_pow+0x444>
 80097c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009818 <__ieee754_pow+0x750>
 80097cc:	e617      	b.n	80093fe <__ieee754_pow+0x336>
 80097ce:	bf00      	nop
 80097d0:	4a454eef 	.word	0x4a454eef
 80097d4:	3fca7e28 	.word	0x3fca7e28
 80097d8:	93c9db65 	.word	0x93c9db65
 80097dc:	3fcd864a 	.word	0x3fcd864a
 80097e0:	a91d4101 	.word	0xa91d4101
 80097e4:	3fd17460 	.word	0x3fd17460
 80097e8:	518f264d 	.word	0x518f264d
 80097ec:	3fd55555 	.word	0x3fd55555
 80097f0:	db6fabff 	.word	0xdb6fabff
 80097f4:	3fdb6db6 	.word	0x3fdb6db6
 80097f8:	33333303 	.word	0x33333303
 80097fc:	3fe33333 	.word	0x3fe33333
 8009800:	e0000000 	.word	0xe0000000
 8009804:	3feec709 	.word	0x3feec709
 8009808:	dc3a03fd 	.word	0xdc3a03fd
 800980c:	3feec709 	.word	0x3feec709
 8009810:	145b01f5 	.word	0x145b01f5
 8009814:	be3e2fe0 	.word	0xbe3e2fe0
 8009818:	00000000 	.word	0x00000000
 800981c:	3ff00000 	.word	0x3ff00000
 8009820:	7ff00000 	.word	0x7ff00000
 8009824:	43400000 	.word	0x43400000
 8009828:	0003988e 	.word	0x0003988e
 800982c:	000bb679 	.word	0x000bb679
 8009830:	0800ad68 	.word	0x0800ad68
 8009834:	3ff00000 	.word	0x3ff00000
 8009838:	40080000 	.word	0x40080000
 800983c:	0800ad88 	.word	0x0800ad88
 8009840:	0800ad78 	.word	0x0800ad78
 8009844:	a3b5      	add	r3, pc, #724	; (adr r3, 8009b1c <__ieee754_pow+0xa54>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	4640      	mov	r0, r8
 800984c:	4649      	mov	r1, r9
 800984e:	f7f6 fce1 	bl	8000214 <__adddf3>
 8009852:	4622      	mov	r2, r4
 8009854:	ec41 0b1a 	vmov	d10, r0, r1
 8009858:	462b      	mov	r3, r5
 800985a:	4630      	mov	r0, r6
 800985c:	4639      	mov	r1, r7
 800985e:	f7f6 fcd7 	bl	8000210 <__aeabi_dsub>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	ec51 0b1a 	vmov	r0, r1, d10
 800986a:	f7f7 f919 	bl	8000aa0 <__aeabi_dcmpgt>
 800986e:	2800      	cmp	r0, #0
 8009870:	f47f ae04 	bne.w	800947c <__ieee754_pow+0x3b4>
 8009874:	4aa4      	ldr	r2, [pc, #656]	; (8009b08 <__ieee754_pow+0xa40>)
 8009876:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800987a:	4293      	cmp	r3, r2
 800987c:	f340 8108 	ble.w	8009a90 <__ieee754_pow+0x9c8>
 8009880:	151b      	asrs	r3, r3, #20
 8009882:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009886:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800988a:	fa4a f303 	asr.w	r3, sl, r3
 800988e:	445b      	add	r3, fp
 8009890:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009894:	4e9d      	ldr	r6, [pc, #628]	; (8009b0c <__ieee754_pow+0xa44>)
 8009896:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800989a:	4116      	asrs	r6, r2
 800989c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80098a0:	2000      	movs	r0, #0
 80098a2:	ea23 0106 	bic.w	r1, r3, r6
 80098a6:	f1c2 0214 	rsb	r2, r2, #20
 80098aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80098ae:	fa4a fa02 	asr.w	sl, sl, r2
 80098b2:	f1bb 0f00 	cmp.w	fp, #0
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4620      	mov	r0, r4
 80098bc:	4629      	mov	r1, r5
 80098be:	bfb8      	it	lt
 80098c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80098c4:	f7f6 fca4 	bl	8000210 <__aeabi_dsub>
 80098c8:	ec41 0b19 	vmov	d9, r0, r1
 80098cc:	4642      	mov	r2, r8
 80098ce:	464b      	mov	r3, r9
 80098d0:	ec51 0b19 	vmov	r0, r1, d9
 80098d4:	f7f6 fc9e 	bl	8000214 <__adddf3>
 80098d8:	a37b      	add	r3, pc, #492	; (adr r3, 8009ac8 <__ieee754_pow+0xa00>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	2000      	movs	r0, #0
 80098e0:	4604      	mov	r4, r0
 80098e2:	460d      	mov	r5, r1
 80098e4:	f7f6 fe4c 	bl	8000580 <__aeabi_dmul>
 80098e8:	ec53 2b19 	vmov	r2, r3, d9
 80098ec:	4606      	mov	r6, r0
 80098ee:	460f      	mov	r7, r1
 80098f0:	4620      	mov	r0, r4
 80098f2:	4629      	mov	r1, r5
 80098f4:	f7f6 fc8c 	bl	8000210 <__aeabi_dsub>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4640      	mov	r0, r8
 80098fe:	4649      	mov	r1, r9
 8009900:	f7f6 fc86 	bl	8000210 <__aeabi_dsub>
 8009904:	a372      	add	r3, pc, #456	; (adr r3, 8009ad0 <__ieee754_pow+0xa08>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f7f6 fe39 	bl	8000580 <__aeabi_dmul>
 800990e:	a372      	add	r3, pc, #456	; (adr r3, 8009ad8 <__ieee754_pow+0xa10>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	4680      	mov	r8, r0
 8009916:	4689      	mov	r9, r1
 8009918:	4620      	mov	r0, r4
 800991a:	4629      	mov	r1, r5
 800991c:	f7f6 fe30 	bl	8000580 <__aeabi_dmul>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4640      	mov	r0, r8
 8009926:	4649      	mov	r1, r9
 8009928:	f7f6 fc74 	bl	8000214 <__adddf3>
 800992c:	4604      	mov	r4, r0
 800992e:	460d      	mov	r5, r1
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f6 fc6c 	bl	8000214 <__adddf3>
 800993c:	4632      	mov	r2, r6
 800993e:	463b      	mov	r3, r7
 8009940:	4680      	mov	r8, r0
 8009942:	4689      	mov	r9, r1
 8009944:	f7f6 fc64 	bl	8000210 <__aeabi_dsub>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4620      	mov	r0, r4
 800994e:	4629      	mov	r1, r5
 8009950:	f7f6 fc5e 	bl	8000210 <__aeabi_dsub>
 8009954:	4642      	mov	r2, r8
 8009956:	4606      	mov	r6, r0
 8009958:	460f      	mov	r7, r1
 800995a:	464b      	mov	r3, r9
 800995c:	4640      	mov	r0, r8
 800995e:	4649      	mov	r1, r9
 8009960:	f7f6 fe0e 	bl	8000580 <__aeabi_dmul>
 8009964:	a35e      	add	r3, pc, #376	; (adr r3, 8009ae0 <__ieee754_pow+0xa18>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	4604      	mov	r4, r0
 800996c:	460d      	mov	r5, r1
 800996e:	f7f6 fe07 	bl	8000580 <__aeabi_dmul>
 8009972:	a35d      	add	r3, pc, #372	; (adr r3, 8009ae8 <__ieee754_pow+0xa20>)
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f7f6 fc4a 	bl	8000210 <__aeabi_dsub>
 800997c:	4622      	mov	r2, r4
 800997e:	462b      	mov	r3, r5
 8009980:	f7f6 fdfe 	bl	8000580 <__aeabi_dmul>
 8009984:	a35a      	add	r3, pc, #360	; (adr r3, 8009af0 <__ieee754_pow+0xa28>)
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f7f6 fc43 	bl	8000214 <__adddf3>
 800998e:	4622      	mov	r2, r4
 8009990:	462b      	mov	r3, r5
 8009992:	f7f6 fdf5 	bl	8000580 <__aeabi_dmul>
 8009996:	a358      	add	r3, pc, #352	; (adr r3, 8009af8 <__ieee754_pow+0xa30>)
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	f7f6 fc38 	bl	8000210 <__aeabi_dsub>
 80099a0:	4622      	mov	r2, r4
 80099a2:	462b      	mov	r3, r5
 80099a4:	f7f6 fdec 	bl	8000580 <__aeabi_dmul>
 80099a8:	a355      	add	r3, pc, #340	; (adr r3, 8009b00 <__ieee754_pow+0xa38>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fc31 	bl	8000214 <__adddf3>
 80099b2:	4622      	mov	r2, r4
 80099b4:	462b      	mov	r3, r5
 80099b6:	f7f6 fde3 	bl	8000580 <__aeabi_dmul>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f6 fc25 	bl	8000210 <__aeabi_dsub>
 80099c6:	4604      	mov	r4, r0
 80099c8:	460d      	mov	r5, r1
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	4640      	mov	r0, r8
 80099d0:	4649      	mov	r1, r9
 80099d2:	f7f6 fdd5 	bl	8000580 <__aeabi_dmul>
 80099d6:	2200      	movs	r2, #0
 80099d8:	ec41 0b19 	vmov	d9, r0, r1
 80099dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099e0:	4620      	mov	r0, r4
 80099e2:	4629      	mov	r1, r5
 80099e4:	f7f6 fc14 	bl	8000210 <__aeabi_dsub>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	ec51 0b19 	vmov	r0, r1, d9
 80099f0:	f7f6 fef0 	bl	80007d4 <__aeabi_ddiv>
 80099f4:	4632      	mov	r2, r6
 80099f6:	4604      	mov	r4, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	463b      	mov	r3, r7
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fdbe 	bl	8000580 <__aeabi_dmul>
 8009a04:	4632      	mov	r2, r6
 8009a06:	463b      	mov	r3, r7
 8009a08:	f7f6 fc04 	bl	8000214 <__adddf3>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4620      	mov	r0, r4
 8009a12:	4629      	mov	r1, r5
 8009a14:	f7f6 fbfc 	bl	8000210 <__aeabi_dsub>
 8009a18:	4642      	mov	r2, r8
 8009a1a:	464b      	mov	r3, r9
 8009a1c:	f7f6 fbf8 	bl	8000210 <__aeabi_dsub>
 8009a20:	460b      	mov	r3, r1
 8009a22:	4602      	mov	r2, r0
 8009a24:	493a      	ldr	r1, [pc, #232]	; (8009b10 <__ieee754_pow+0xa48>)
 8009a26:	2000      	movs	r0, #0
 8009a28:	f7f6 fbf2 	bl	8000210 <__aeabi_dsub>
 8009a2c:	ec41 0b10 	vmov	d0, r0, r1
 8009a30:	ee10 3a90 	vmov	r3, s1
 8009a34:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a3c:	da2b      	bge.n	8009a96 <__ieee754_pow+0x9ce>
 8009a3e:	4650      	mov	r0, sl
 8009a40:	f000 fa5a 	bl	8009ef8 <scalbn>
 8009a44:	ec51 0b10 	vmov	r0, r1, d0
 8009a48:	ec53 2b18 	vmov	r2, r3, d8
 8009a4c:	f7ff bbed 	b.w	800922a <__ieee754_pow+0x162>
 8009a50:	4b30      	ldr	r3, [pc, #192]	; (8009b14 <__ieee754_pow+0xa4c>)
 8009a52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009a56:	429e      	cmp	r6, r3
 8009a58:	f77f af0c 	ble.w	8009874 <__ieee754_pow+0x7ac>
 8009a5c:	4b2e      	ldr	r3, [pc, #184]	; (8009b18 <__ieee754_pow+0xa50>)
 8009a5e:	440b      	add	r3, r1
 8009a60:	4303      	orrs	r3, r0
 8009a62:	d009      	beq.n	8009a78 <__ieee754_pow+0x9b0>
 8009a64:	ec51 0b18 	vmov	r0, r1, d8
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f7f6 fffa 	bl	8000a64 <__aeabi_dcmplt>
 8009a70:	3800      	subs	r0, #0
 8009a72:	bf18      	it	ne
 8009a74:	2001      	movne	r0, #1
 8009a76:	e447      	b.n	8009308 <__ieee754_pow+0x240>
 8009a78:	4622      	mov	r2, r4
 8009a7a:	462b      	mov	r3, r5
 8009a7c:	f7f6 fbc8 	bl	8000210 <__aeabi_dsub>
 8009a80:	4642      	mov	r2, r8
 8009a82:	464b      	mov	r3, r9
 8009a84:	f7f7 f802 	bl	8000a8c <__aeabi_dcmpge>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f43f aef3 	beq.w	8009874 <__ieee754_pow+0x7ac>
 8009a8e:	e7e9      	b.n	8009a64 <__ieee754_pow+0x99c>
 8009a90:	f04f 0a00 	mov.w	sl, #0
 8009a94:	e71a      	b.n	80098cc <__ieee754_pow+0x804>
 8009a96:	ec51 0b10 	vmov	r0, r1, d0
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	e7d4      	b.n	8009a48 <__ieee754_pow+0x980>
 8009a9e:	491c      	ldr	r1, [pc, #112]	; (8009b10 <__ieee754_pow+0xa48>)
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	f7ff bb30 	b.w	8009106 <__ieee754_pow+0x3e>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	f7ff bb2c 	b.w	8009106 <__ieee754_pow+0x3e>
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	f7ff bb28 	b.w	8009106 <__ieee754_pow+0x3e>
 8009ab6:	9204      	str	r2, [sp, #16]
 8009ab8:	f7ff bb7a 	b.w	80091b0 <__ieee754_pow+0xe8>
 8009abc:	2300      	movs	r3, #0
 8009abe:	f7ff bb64 	b.w	800918a <__ieee754_pow+0xc2>
 8009ac2:	bf00      	nop
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	00000000 	.word	0x00000000
 8009acc:	3fe62e43 	.word	0x3fe62e43
 8009ad0:	fefa39ef 	.word	0xfefa39ef
 8009ad4:	3fe62e42 	.word	0x3fe62e42
 8009ad8:	0ca86c39 	.word	0x0ca86c39
 8009adc:	be205c61 	.word	0xbe205c61
 8009ae0:	72bea4d0 	.word	0x72bea4d0
 8009ae4:	3e663769 	.word	0x3e663769
 8009ae8:	c5d26bf1 	.word	0xc5d26bf1
 8009aec:	3ebbbd41 	.word	0x3ebbbd41
 8009af0:	af25de2c 	.word	0xaf25de2c
 8009af4:	3f11566a 	.word	0x3f11566a
 8009af8:	16bebd93 	.word	0x16bebd93
 8009afc:	3f66c16c 	.word	0x3f66c16c
 8009b00:	5555553e 	.word	0x5555553e
 8009b04:	3fc55555 	.word	0x3fc55555
 8009b08:	3fe00000 	.word	0x3fe00000
 8009b0c:	000fffff 	.word	0x000fffff
 8009b10:	3ff00000 	.word	0x3ff00000
 8009b14:	4090cbff 	.word	0x4090cbff
 8009b18:	3f6f3400 	.word	0x3f6f3400
 8009b1c:	652b82fe 	.word	0x652b82fe
 8009b20:	3c971547 	.word	0x3c971547

08009b24 <__ieee754_sqrt>:
 8009b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b28:	ec55 4b10 	vmov	r4, r5, d0
 8009b2c:	4e55      	ldr	r6, [pc, #340]	; (8009c84 <__ieee754_sqrt+0x160>)
 8009b2e:	43ae      	bics	r6, r5
 8009b30:	ee10 0a10 	vmov	r0, s0
 8009b34:	ee10 3a10 	vmov	r3, s0
 8009b38:	462a      	mov	r2, r5
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	d110      	bne.n	8009b60 <__ieee754_sqrt+0x3c>
 8009b3e:	ee10 2a10 	vmov	r2, s0
 8009b42:	462b      	mov	r3, r5
 8009b44:	f7f6 fd1c 	bl	8000580 <__aeabi_dmul>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	4629      	mov	r1, r5
 8009b50:	f7f6 fb60 	bl	8000214 <__adddf3>
 8009b54:	4604      	mov	r4, r0
 8009b56:	460d      	mov	r5, r1
 8009b58:	ec45 4b10 	vmov	d0, r4, r5
 8009b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b60:	2d00      	cmp	r5, #0
 8009b62:	dc10      	bgt.n	8009b86 <__ieee754_sqrt+0x62>
 8009b64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b68:	4330      	orrs	r0, r6
 8009b6a:	d0f5      	beq.n	8009b58 <__ieee754_sqrt+0x34>
 8009b6c:	b15d      	cbz	r5, 8009b86 <__ieee754_sqrt+0x62>
 8009b6e:	ee10 2a10 	vmov	r2, s0
 8009b72:	462b      	mov	r3, r5
 8009b74:	ee10 0a10 	vmov	r0, s0
 8009b78:	f7f6 fb4a 	bl	8000210 <__aeabi_dsub>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	f7f6 fe28 	bl	80007d4 <__aeabi_ddiv>
 8009b84:	e7e6      	b.n	8009b54 <__ieee754_sqrt+0x30>
 8009b86:	1512      	asrs	r2, r2, #20
 8009b88:	d074      	beq.n	8009c74 <__ieee754_sqrt+0x150>
 8009b8a:	07d4      	lsls	r4, r2, #31
 8009b8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009b90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009b94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009b98:	bf5e      	ittt	pl
 8009b9a:	0fda      	lsrpl	r2, r3, #31
 8009b9c:	005b      	lslpl	r3, r3, #1
 8009b9e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009ba2:	2400      	movs	r4, #0
 8009ba4:	0fda      	lsrs	r2, r3, #31
 8009ba6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009baa:	107f      	asrs	r7, r7, #1
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	2516      	movs	r5, #22
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009bb6:	1886      	adds	r6, r0, r2
 8009bb8:	428e      	cmp	r6, r1
 8009bba:	bfde      	ittt	le
 8009bbc:	1b89      	suble	r1, r1, r6
 8009bbe:	18b0      	addle	r0, r6, r2
 8009bc0:	18a4      	addle	r4, r4, r2
 8009bc2:	0049      	lsls	r1, r1, #1
 8009bc4:	3d01      	subs	r5, #1
 8009bc6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009bca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009bce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009bd2:	d1f0      	bne.n	8009bb6 <__ieee754_sqrt+0x92>
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	f04f 0e20 	mov.w	lr, #32
 8009bda:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009bde:	4281      	cmp	r1, r0
 8009be0:	eb06 0c05 	add.w	ip, r6, r5
 8009be4:	dc02      	bgt.n	8009bec <__ieee754_sqrt+0xc8>
 8009be6:	d113      	bne.n	8009c10 <__ieee754_sqrt+0xec>
 8009be8:	459c      	cmp	ip, r3
 8009bea:	d811      	bhi.n	8009c10 <__ieee754_sqrt+0xec>
 8009bec:	f1bc 0f00 	cmp.w	ip, #0
 8009bf0:	eb0c 0506 	add.w	r5, ip, r6
 8009bf4:	da43      	bge.n	8009c7e <__ieee754_sqrt+0x15a>
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	db41      	blt.n	8009c7e <__ieee754_sqrt+0x15a>
 8009bfa:	f100 0801 	add.w	r8, r0, #1
 8009bfe:	1a09      	subs	r1, r1, r0
 8009c00:	459c      	cmp	ip, r3
 8009c02:	bf88      	it	hi
 8009c04:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009c08:	eba3 030c 	sub.w	r3, r3, ip
 8009c0c:	4432      	add	r2, r6
 8009c0e:	4640      	mov	r0, r8
 8009c10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009c14:	f1be 0e01 	subs.w	lr, lr, #1
 8009c18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009c24:	d1db      	bne.n	8009bde <__ieee754_sqrt+0xba>
 8009c26:	430b      	orrs	r3, r1
 8009c28:	d006      	beq.n	8009c38 <__ieee754_sqrt+0x114>
 8009c2a:	1c50      	adds	r0, r2, #1
 8009c2c:	bf13      	iteet	ne
 8009c2e:	3201      	addne	r2, #1
 8009c30:	3401      	addeq	r4, #1
 8009c32:	4672      	moveq	r2, lr
 8009c34:	f022 0201 	bicne.w	r2, r2, #1
 8009c38:	1063      	asrs	r3, r4, #1
 8009c3a:	0852      	lsrs	r2, r2, #1
 8009c3c:	07e1      	lsls	r1, r4, #31
 8009c3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009c42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009c46:	bf48      	it	mi
 8009c48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009c4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009c50:	4614      	mov	r4, r2
 8009c52:	e781      	b.n	8009b58 <__ieee754_sqrt+0x34>
 8009c54:	0ad9      	lsrs	r1, r3, #11
 8009c56:	3815      	subs	r0, #21
 8009c58:	055b      	lsls	r3, r3, #21
 8009c5a:	2900      	cmp	r1, #0
 8009c5c:	d0fa      	beq.n	8009c54 <__ieee754_sqrt+0x130>
 8009c5e:	02cd      	lsls	r5, r1, #11
 8009c60:	d50a      	bpl.n	8009c78 <__ieee754_sqrt+0x154>
 8009c62:	f1c2 0420 	rsb	r4, r2, #32
 8009c66:	fa23 f404 	lsr.w	r4, r3, r4
 8009c6a:	1e55      	subs	r5, r2, #1
 8009c6c:	4093      	lsls	r3, r2
 8009c6e:	4321      	orrs	r1, r4
 8009c70:	1b42      	subs	r2, r0, r5
 8009c72:	e78a      	b.n	8009b8a <__ieee754_sqrt+0x66>
 8009c74:	4610      	mov	r0, r2
 8009c76:	e7f0      	b.n	8009c5a <__ieee754_sqrt+0x136>
 8009c78:	0049      	lsls	r1, r1, #1
 8009c7a:	3201      	adds	r2, #1
 8009c7c:	e7ef      	b.n	8009c5e <__ieee754_sqrt+0x13a>
 8009c7e:	4680      	mov	r8, r0
 8009c80:	e7bd      	b.n	8009bfe <__ieee754_sqrt+0xda>
 8009c82:	bf00      	nop
 8009c84:	7ff00000 	.word	0x7ff00000

08009c88 <__ieee754_expf>:
 8009c88:	ee10 2a10 	vmov	r2, s0
 8009c8c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009c90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009c94:	d902      	bls.n	8009c9c <__ieee754_expf+0x14>
 8009c96:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c9a:	4770      	bx	lr
 8009c9c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009ca0:	d106      	bne.n	8009cb0 <__ieee754_expf+0x28>
 8009ca2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009ddc <__ieee754_expf+0x154>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bf18      	it	ne
 8009caa:	eeb0 0a67 	vmovne.f32	s0, s15
 8009cae:	4770      	bx	lr
 8009cb0:	484b      	ldr	r0, [pc, #300]	; (8009de0 <__ieee754_expf+0x158>)
 8009cb2:	4282      	cmp	r2, r0
 8009cb4:	dd02      	ble.n	8009cbc <__ieee754_expf+0x34>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f000 b904 	b.w	8009ec4 <__math_oflowf>
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	da05      	bge.n	8009ccc <__ieee754_expf+0x44>
 8009cc0:	4a48      	ldr	r2, [pc, #288]	; (8009de4 <__ieee754_expf+0x15c>)
 8009cc2:	4291      	cmp	r1, r2
 8009cc4:	d902      	bls.n	8009ccc <__ieee754_expf+0x44>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	f000 b8f6 	b.w	8009eb8 <__math_uflowf>
 8009ccc:	4a46      	ldr	r2, [pc, #280]	; (8009de8 <__ieee754_expf+0x160>)
 8009cce:	4291      	cmp	r1, r2
 8009cd0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009cd4:	d952      	bls.n	8009d7c <__ieee754_expf+0xf4>
 8009cd6:	4a45      	ldr	r2, [pc, #276]	; (8009dec <__ieee754_expf+0x164>)
 8009cd8:	4291      	cmp	r1, r2
 8009cda:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009cde:	d834      	bhi.n	8009d4a <__ieee754_expf+0xc2>
 8009ce0:	4943      	ldr	r1, [pc, #268]	; (8009df0 <__ieee754_expf+0x168>)
 8009ce2:	4411      	add	r1, r2
 8009ce4:	ed91 7a00 	vldr	s14, [r1]
 8009ce8:	4942      	ldr	r1, [pc, #264]	; (8009df4 <__ieee754_expf+0x16c>)
 8009cea:	440a      	add	r2, r1
 8009cec:	edd2 7a00 	vldr	s15, [r2]
 8009cf0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009cf4:	f1c3 0201 	rsb	r2, r3, #1
 8009cf8:	1ad2      	subs	r2, r2, r3
 8009cfa:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009cfe:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009d02:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009df8 <__ieee754_expf+0x170>
 8009d06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dfc <__ieee754_expf+0x174>
 8009d0a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009d0e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009e00 <__ieee754_expf+0x178>
 8009d12:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009d16:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009e04 <__ieee754_expf+0x17c>
 8009d1a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009d1e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009e08 <__ieee754_expf+0x180>
 8009d22:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009d26:	eef0 6a40 	vmov.f32	s13, s0
 8009d2a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009d2e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009d32:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009d36:	bb92      	cbnz	r2, 8009d9e <__ieee754_expf+0x116>
 8009d38:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009d3c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009d40:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009d44:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009d48:	4770      	bx	lr
 8009d4a:	4b30      	ldr	r3, [pc, #192]	; (8009e0c <__ieee754_expf+0x184>)
 8009d4c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009e10 <__ieee754_expf+0x188>
 8009d50:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009e14 <__ieee754_expf+0x18c>
 8009d54:	4413      	add	r3, r2
 8009d56:	edd3 7a00 	vldr	s15, [r3]
 8009d5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009d5e:	eeb0 7a40 	vmov.f32	s14, s0
 8009d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d66:	ee17 2a90 	vmov	r2, s15
 8009d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d6e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009d72:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009e18 <__ieee754_expf+0x190>
 8009d76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d7a:	e7be      	b.n	8009cfa <__ieee754_expf+0x72>
 8009d7c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8009d80:	d20b      	bcs.n	8009d9a <__ieee754_expf+0x112>
 8009d82:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009e1c <__ieee754_expf+0x194>
 8009d86:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009d8a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d92:	dd02      	ble.n	8009d9a <__ieee754_expf+0x112>
 8009d94:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009d98:	4770      	bx	lr
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	e7af      	b.n	8009cfe <__ieee754_expf+0x76>
 8009d9e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009da2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009da6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8009daa:	bfb8      	it	lt
 8009dac:	3264      	addlt	r2, #100	; 0x64
 8009dae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009db2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009db6:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8009dba:	ee17 3a90 	vmov	r3, s15
 8009dbe:	bfab      	itete	ge
 8009dc0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009dc4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009dc8:	ee00 3a10 	vmovge	s0, r3
 8009dcc:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009e20 <__ieee754_expf+0x198>
 8009dd0:	bfbc      	itt	lt
 8009dd2:	ee00 3a10 	vmovlt	s0, r3
 8009dd6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009dda:	4770      	bx	lr
 8009ddc:	00000000 	.word	0x00000000
 8009de0:	42b17217 	.word	0x42b17217
 8009de4:	42cff1b5 	.word	0x42cff1b5
 8009de8:	3eb17218 	.word	0x3eb17218
 8009dec:	3f851591 	.word	0x3f851591
 8009df0:	0800ada0 	.word	0x0800ada0
 8009df4:	0800ada8 	.word	0x0800ada8
 8009df8:	3331bb4c 	.word	0x3331bb4c
 8009dfc:	b5ddea0e 	.word	0xb5ddea0e
 8009e00:	388ab355 	.word	0x388ab355
 8009e04:	bb360b61 	.word	0xbb360b61
 8009e08:	3e2aaaab 	.word	0x3e2aaaab
 8009e0c:	0800ad98 	.word	0x0800ad98
 8009e10:	3fb8aa3b 	.word	0x3fb8aa3b
 8009e14:	3f317180 	.word	0x3f317180
 8009e18:	3717f7d1 	.word	0x3717f7d1
 8009e1c:	7149f2ca 	.word	0x7149f2ca
 8009e20:	0d800000 	.word	0x0d800000

08009e24 <__ieee754_sqrtf>:
 8009e24:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009e28:	4770      	bx	lr

08009e2a <with_errno>:
 8009e2a:	b570      	push	{r4, r5, r6, lr}
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	4616      	mov	r6, r2
 8009e32:	f7ff f843 	bl	8008ebc <__errno>
 8009e36:	4629      	mov	r1, r5
 8009e38:	6006      	str	r6, [r0, #0]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	bd70      	pop	{r4, r5, r6, pc}

08009e3e <xflow>:
 8009e3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e40:	4614      	mov	r4, r2
 8009e42:	461d      	mov	r5, r3
 8009e44:	b108      	cbz	r0, 8009e4a <xflow+0xc>
 8009e46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009e4a:	e9cd 2300 	strd	r2, r3, [sp]
 8009e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e52:	4620      	mov	r0, r4
 8009e54:	4629      	mov	r1, r5
 8009e56:	f7f6 fb93 	bl	8000580 <__aeabi_dmul>
 8009e5a:	2222      	movs	r2, #34	; 0x22
 8009e5c:	b003      	add	sp, #12
 8009e5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e62:	f7ff bfe2 	b.w	8009e2a <with_errno>

08009e66 <__math_uflow>:
 8009e66:	b508      	push	{r3, lr}
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e6e:	f7ff ffe6 	bl	8009e3e <xflow>
 8009e72:	ec41 0b10 	vmov	d0, r0, r1
 8009e76:	bd08      	pop	{r3, pc}

08009e78 <__math_oflow>:
 8009e78:	b508      	push	{r3, lr}
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009e80:	f7ff ffdd 	bl	8009e3e <xflow>
 8009e84:	ec41 0b10 	vmov	d0, r0, r1
 8009e88:	bd08      	pop	{r3, pc}

08009e8a <with_errnof>:
 8009e8a:	b513      	push	{r0, r1, r4, lr}
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009e92:	f7ff f813 	bl	8008ebc <__errno>
 8009e96:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009e9a:	6004      	str	r4, [r0, #0]
 8009e9c:	b002      	add	sp, #8
 8009e9e:	bd10      	pop	{r4, pc}

08009ea0 <xflowf>:
 8009ea0:	b130      	cbz	r0, 8009eb0 <xflowf+0x10>
 8009ea2:	eef1 7a40 	vneg.f32	s15, s0
 8009ea6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009eaa:	2022      	movs	r0, #34	; 0x22
 8009eac:	f7ff bfed 	b.w	8009e8a <with_errnof>
 8009eb0:	eef0 7a40 	vmov.f32	s15, s0
 8009eb4:	e7f7      	b.n	8009ea6 <xflowf+0x6>
	...

08009eb8 <__math_uflowf>:
 8009eb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009ec0 <__math_uflowf+0x8>
 8009ebc:	f7ff bff0 	b.w	8009ea0 <xflowf>
 8009ec0:	10000000 	.word	0x10000000

08009ec4 <__math_oflowf>:
 8009ec4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009ecc <__math_oflowf+0x8>
 8009ec8:	f7ff bfea 	b.w	8009ea0 <xflowf>
 8009ecc:	70000000 	.word	0x70000000

08009ed0 <fabs>:
 8009ed0:	ec51 0b10 	vmov	r0, r1, d0
 8009ed4:	ee10 2a10 	vmov	r2, s0
 8009ed8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009edc:	ec43 2b10 	vmov	d0, r2, r3
 8009ee0:	4770      	bx	lr

08009ee2 <finite>:
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	ed8d 0b00 	vstr	d0, [sp]
 8009ee8:	9801      	ldr	r0, [sp, #4]
 8009eea:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009eee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009ef2:	0fc0      	lsrs	r0, r0, #31
 8009ef4:	b002      	add	sp, #8
 8009ef6:	4770      	bx	lr

08009ef8 <scalbn>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	ec55 4b10 	vmov	r4, r5, d0
 8009efe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009f02:	4606      	mov	r6, r0
 8009f04:	462b      	mov	r3, r5
 8009f06:	b99a      	cbnz	r2, 8009f30 <scalbn+0x38>
 8009f08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f0c:	4323      	orrs	r3, r4
 8009f0e:	d036      	beq.n	8009f7e <scalbn+0x86>
 8009f10:	4b39      	ldr	r3, [pc, #228]	; (8009ff8 <scalbn+0x100>)
 8009f12:	4629      	mov	r1, r5
 8009f14:	ee10 0a10 	vmov	r0, s0
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f7f6 fb31 	bl	8000580 <__aeabi_dmul>
 8009f1e:	4b37      	ldr	r3, [pc, #220]	; (8009ffc <scalbn+0x104>)
 8009f20:	429e      	cmp	r6, r3
 8009f22:	4604      	mov	r4, r0
 8009f24:	460d      	mov	r5, r1
 8009f26:	da10      	bge.n	8009f4a <scalbn+0x52>
 8009f28:	a32b      	add	r3, pc, #172	; (adr r3, 8009fd8 <scalbn+0xe0>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	e03a      	b.n	8009fa6 <scalbn+0xae>
 8009f30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009f34:	428a      	cmp	r2, r1
 8009f36:	d10c      	bne.n	8009f52 <scalbn+0x5a>
 8009f38:	ee10 2a10 	vmov	r2, s0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f7f6 f968 	bl	8000214 <__adddf3>
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	e019      	b.n	8009f7e <scalbn+0x86>
 8009f4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f4e:	460b      	mov	r3, r1
 8009f50:	3a36      	subs	r2, #54	; 0x36
 8009f52:	4432      	add	r2, r6
 8009f54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009f58:	428a      	cmp	r2, r1
 8009f5a:	dd08      	ble.n	8009f6e <scalbn+0x76>
 8009f5c:	2d00      	cmp	r5, #0
 8009f5e:	a120      	add	r1, pc, #128	; (adr r1, 8009fe0 <scalbn+0xe8>)
 8009f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f64:	da1c      	bge.n	8009fa0 <scalbn+0xa8>
 8009f66:	a120      	add	r1, pc, #128	; (adr r1, 8009fe8 <scalbn+0xf0>)
 8009f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f6c:	e018      	b.n	8009fa0 <scalbn+0xa8>
 8009f6e:	2a00      	cmp	r2, #0
 8009f70:	dd08      	ble.n	8009f84 <scalbn+0x8c>
 8009f72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009f7e:	ec45 4b10 	vmov	d0, r4, r5
 8009f82:	bd70      	pop	{r4, r5, r6, pc}
 8009f84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009f88:	da19      	bge.n	8009fbe <scalbn+0xc6>
 8009f8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f8e:	429e      	cmp	r6, r3
 8009f90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009f94:	dd0a      	ble.n	8009fac <scalbn+0xb4>
 8009f96:	a112      	add	r1, pc, #72	; (adr r1, 8009fe0 <scalbn+0xe8>)
 8009f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1e2      	bne.n	8009f66 <scalbn+0x6e>
 8009fa0:	a30f      	add	r3, pc, #60	; (adr r3, 8009fe0 <scalbn+0xe8>)
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	f7f6 faeb 	bl	8000580 <__aeabi_dmul>
 8009faa:	e7cb      	b.n	8009f44 <scalbn+0x4c>
 8009fac:	a10a      	add	r1, pc, #40	; (adr r1, 8009fd8 <scalbn+0xe0>)
 8009fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0b8      	beq.n	8009f28 <scalbn+0x30>
 8009fb6:	a10e      	add	r1, pc, #56	; (adr r1, 8009ff0 <scalbn+0xf8>)
 8009fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fbc:	e7b4      	b.n	8009f28 <scalbn+0x30>
 8009fbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fc2:	3236      	adds	r2, #54	; 0x36
 8009fc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <scalbn+0x108>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	e7e8      	b.n	8009fa6 <scalbn+0xae>
 8009fd4:	f3af 8000 	nop.w
 8009fd8:	c2f8f359 	.word	0xc2f8f359
 8009fdc:	01a56e1f 	.word	0x01a56e1f
 8009fe0:	8800759c 	.word	0x8800759c
 8009fe4:	7e37e43c 	.word	0x7e37e43c
 8009fe8:	8800759c 	.word	0x8800759c
 8009fec:	fe37e43c 	.word	0xfe37e43c
 8009ff0:	c2f8f359 	.word	0xc2f8f359
 8009ff4:	81a56e1f 	.word	0x81a56e1f
 8009ff8:	43500000 	.word	0x43500000
 8009ffc:	ffff3cb0 	.word	0xffff3cb0
 800a000:	3c900000 	.word	0x3c900000

0800a004 <finitef>:
 800a004:	b082      	sub	sp, #8
 800a006:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a00a:	9801      	ldr	r0, [sp, #4]
 800a00c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a010:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a014:	bfac      	ite	ge
 800a016:	2000      	movge	r0, #0
 800a018:	2001      	movlt	r0, #1
 800a01a:	b002      	add	sp, #8
 800a01c:	4770      	bx	lr
	...

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
